# SYSTEM memory regions indicate where external memory might be located.
#   The TCF has no specific knowledge of whether SYSTEM regions contain
#   external memory or not.
# CCMWRAP memory regions indicate unusable portions of the address space
#   due to CCM memory wrapping into upper addresses beyond its size
MEMORY {
	ICCM0   : ORIGIN = 0x00000000, LENGTH = 0x00010000
	ICCM1   : ORIGIN = 0x10000000, LENGTH = 0x00050000
	BOOT	: ORIGIN = 0x20000000, LENGTH = 0x00020800
	SYSTEM0 : ORIGIN = 0x20020800, LENGTH = 0x0015f800
	DCCM    : ORIGIN = 0x80000000, LENGTH = 0x0003E000
    .stack	: ORIGIN = 0x8003E000, LENGTH = 0x00002000
	XCCM    : ORIGIN = 0x90000000, LENGTH = 0x00008000
	YCCM    : ORIGIN = 0xa0000000, LENGTH = 0x00008000
}

ENTRY(_arc_reset)

SECTIONS {

	GROUP : {
		.init_bootstrap:{
			*(.init_vector)
			*(.init_bootstrap)
		}
		.vector ALIGN(1024): {
			_f_vector = .;
			*(.vector)
			_e_vector = .;
		}
	} > ICCM1

	GROUP : {

		.text ALIGN(4): {
			_f_text = .;
			*(TYPE text)
			_e_text = .;
		}

 	} > ICCM1

 	GROUP : {

 		.ram_memory? ALIGN(8): {}
 	} > BOOT

 	GROUP : {
		.rodata  ALIGN(4): {
			_f_rodata = .;

			_fctors = .;
			*(.ctors*)
			_ectors = .;
			_fdtors = .;
			*(.dtors*)
			_edtors = .;
			_feh_frame = .;
			*(.eh_frame*)
			_eeh_frame = .;

			*(TYPE lit)

			_e_rodata = .;
		}

		.tensor_arena? ALIGN(16): {}

	} > SYSTEM0


	GROUP : {
		.data ALIGN(8): {
			_f_data = .;
			_f_sdata = .;
			*(.sdata)
			_e_sdata = .;
			*(TYPE data)
		}
		.tls ALIGN(8): {
			*(.tls*)
			_e_data = .;
		}
	} > SYSTEM0 

	GROUP (NOLOAD) : {
		.bss ALIGN(16): {
			_f_bss = .;
			*(TYPE bss)
			_e_bss = .;
		}

  .Zdata?: {}
  _s_heap = .;          
	} > DCCM
	
  
  GROUP BLOCK(4): {
    .Xdata? : {}
  } > XCCM
  GROUP BLOCK(4): {
    .Ydata? : {}
  } > YCCM

	_f_stack = ADDR(.stack);
	_e_stack = ADDR(.stack) + SIZEOF(.stack);

	_f_heap = _s_heap;
	_e_heap = ADDR(.stack);

	_load_addr_text = LOADADDR(.text);
	_load_addr_rodata = LOADADDR(.rodata);
	_load_addr_data = LOADADDR(.data);
}
