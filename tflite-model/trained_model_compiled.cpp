/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 23.11.2020 23:04:54

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 252192;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_PAD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[186];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[74];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 90, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[10] = { 301, 450, 90, -119, -182, 198, 367, 201, -192, 195, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 1.525660354673164e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { -29, 29, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00011125407763756812, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[2] = { 9, 1280, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data6[8] = { -805, 37805, 2077, 39074, 37852, -211, 44176, 69891, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 7.2446091508027166e-05, 7.9999037552624941e-05, 7.8677650890313089e-05, 6.0649457736872137e-05, 7.3980612796731293e-05, 7.727403863100335e-05, 4.903347507934086e-05, 3.6187571822665632e-05, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { 813, -1118, 19858, 3537, 22505, 5379, 3170, 8647, 8692, 1979, 3623, 19383, 5493, 2644, 4511, 2517, 7311, 9190, 2399, 8139, 2807, 9828, 8643, 3179, 6250, 12444, -91, 17068, 1872, -4892, 8429, 2098, 323, 12848, 3066, 14194, 12746, -5963, -1716, -388, 9981, 13439, -2598, 28060, 2402, 8560, 1874, 62, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00011057515075663105, 0.00013200109242461622, 4.3396979890530929e-05, 0.0001160259052994661, 4.0765480662230402e-05, 8.5057530668564141e-05, 0.00015861175779718906, 8.6640640802215785e-05, 9.1784291726071388e-05, 0.00020085343567188829, 0.00014992043725214899, 4.9645863327896222e-05, 0.00010239754192298278, 0.00014452436880674213, 0.00012502615572884679, 0.0001404393115080893, 9.3307884526439011e-05, 7.3591516411397606e-05, 0.00012329449236858636, 8.2887032476719469e-05, 9.3653448857367039e-05, 7.3561706813052297e-05, 8.3321996498852968e-05, 8.9501496404409409e-05, 0.00011880527017638087, 7.1611750172451138e-05, 8.9291810581926256e-05, 5.0661652494454756e-05, 0.00019116717157885432, 0.00011406638805055991, 9.3634604127146304e-05, 0.00015172426356002688, 0.00014907520380802453, 6.5652711782604456e-05, 0.00015045983309391886, 6.013694655848667e-05, 6.8337431002873927e-05, 8.8354980107396841e-05, 0.00011338578769937158, 0.00017069156456273049, 7.9674013250041753e-05, 6.1496837588492781e-05, 0.00012590792903210968, 3.5196459066355601e-05, 0.00011502297275001183, 7.9229394032154232e-05, 0.00011254827404627576, 0.00011160229769302532, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { -1454, -100, 541, 8513, 15, -6678, -1735, 14410, -741, 31410, 10699, 866, 734, 16229, -1168, 12445, 22976, 6481, -218, -3688, -97, 2220, -15, -9268, -2377, 16754, 369, -6507, -7429, -2275, -2976, 6387, -46, 1318, 16189, -1506, 4334, -1197, 7223, -8751, 15393, 114, 12, 11877, -10218, 6881, -501, 8856, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00012931092351209372, 0.00031098528415895998, 0.00012103441258659586, 8.5731167928315699e-05, 0.00025157353957183659, 0.00013267388567328453, 0.00020716842846013606, 7.873435242800042e-05, 0.0001031260981108062, 4.6296881919261068e-05, 9.6355877758469433e-05, 0.00025140237994492054, 0.00012315298954490572, 6.1861406720709056e-05, 0.00011902090045623481, 8.7199332483578473e-05, 6.1829923652112484e-05, 0.00012896029511466622, 0.00022065571101848036, 0.0001673530787229538, 0.00017286604270339012, 0.0001306399644818157, 0.00015877194528002292, 0.0001000344636850059, 0.00011572860239539295, 9.4778064521960914e-05, 7.1093032602220774e-05, 0.00022643717238679528, 9.293307812185958e-05, 0.00026403789524920285, 0.00013607600703835487, 0.00012363886344246566, 0.00016531470464542508, 0.00018197402823716402, 6.9049463490955532e-05, 0.0002051856426987797, 0.00018998529412783682, 0.00040471265674568713, 0.00011764894588850439, 7.7869022788945585e-05, 0.00011366320541128516, 0.00018915894906967878, 0.00015035030082799494, 0.00013969471910968423, 0.00010359208681620657, 0.00011200158769497648, 9.7878320957534015e-05, 0.0001235775271197781, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[48] = { 3841, 7201, 1742, -3717, 2271, 7619, 843, 4892, 970, 8505, 2618, 5862, -1131, 3118, 9969, 5332, 6823, 15130, 5232, 5155, -211, 1421, 6054, 6989, -6759, 1110, 7744, 2765, 10262, -35, 6068, 12727, 11313, 1091, 11906, 1527, 3320, 1737, 8699, -1580, 2462, -3974, 1996, -1581, 5701, -3292, -4242, 1079, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 8.4400919149629772e-05, 8.6756590462755412e-05, 0.00010208624735241756, 7.6946562330704182e-05, 0.00011308594548609108, 9.5871633675415069e-05, 0.00015210018318612128, 0.00011499589891172945, 0.00011614934919634834, 8.2320169894956052e-05, 0.00010638137609930709, 8.5393279732670635e-05, 0.00017391567234881222, 0.00014739936159458011, 7.3716895713005215e-05, 8.3792554505635053e-05, 0.00010044690134236589, 5.5956144933588803e-05, 9.6039730124175549e-05, 7.9992925748229027e-05, 0.00013228635361883789, 0.00012894633982796222, 9.5909919764380902e-05, 8.5223771748133004e-05, 9.6619813120923936e-05, 9.2082584160380065e-05, 9.0532746980898082e-05, 0.00011480088869575411, 7.2116345108952373e-05, 0.00014816925977356732, 8.3980281488038599e-05, 6.2981969676911831e-05, 6.8610723246820271e-05, 0.00010301970178261399, 6.5032865677494556e-05, 0.00012727256398648024, 0.00010597368964226916, 0.00014916899090167135, 7.5908908911515027e-05, 0.00010156798089155927, 0.00010178329102927819, 9.8977703601121902e-05, 0.00010239039693260565, 9.627240797271952e-05, 8.5687730461359024e-05, 9.3286442279350013e-05, 9.6667987236287445e-05, 0.00011028573499061167, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { -301, 3903, -410, 16754, -4990, 9422, 5042, -11547, -2177, 4415, -2855, -2620, -7550, 23404, 25931, -4710, 12882, 475, -1523, -4012, 1518, -1931, -11692, -3747, -1794, -2414, 225, 1831, 1109, 313, -2075, -54, -2480, 2934, 17101, 8455, -3614, -146, -1392, -8003, -688, 348, 31835, 6629, 15964, -6363, -2404, -3458, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 9.7312760772183537e-05, 0.00017599805141799152, 0.0001527370186522603, 7.5132506026420742e-05, 6.2056671595200896e-05, 7.3988514486700296e-05, 9.8277334473095834e-05, 0.00010207895684288815, 0.00013741580187343061, 0.00014206081687007099, 0.00019181135576218367, 0.00014066345465835184, 0.00016451629926450551, 7.60094408178702e-05, 5.1293573051225394e-05, 0.00010575623309705406, 9.6888419648166746e-05, 0.00013819588639307767, 0.00011688940139720216, 0.00012323386908974499, 0.00018369306053500623, 0.00011704356438713148, 0.00011488061136333272, 0.00022174257901497185, 0.00026199620333500206, 7.8486446000169963e-05, 9.8857679404318333e-05, 0.00016023387433961034, 0.00021596191800199449, 0.00011615860421443358, 0.00020276180293876678, 0.00016581855015829206, 0.00015136654837988317, 0.00010348076466470957, 0.00010744982864707708, 8.4377083112485707e-05, 0.00010380225285189226, 9.2827722255606204e-05, 0.00023558591783512384, 9.1807036369573325e-05, 0.00014429920702241361, 0.00036249528056941926, 4.4048971176380292e-05, 7.079283386701718e-05, 7.6995835115667433e-05, 9.5548872195649892e-05, 0.00022826947679277509, 9.0305940830148757e-05, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 2042, 21435, 2711, 3480, 2882, 765, -1829, 30040, 8486, 1139, 6644, 7143, 3957, 601, 3549, -2941, 12069, 2729, 15320, 4676, 3137, 7019, 6002, 625, 7770, 3466, -583, 9566, 6089, 1469, 13980, 1313, 8547, 10895, 3904, -893, 1173, -244, 3223, -532, 3591, 4747, 6275, 1488, 2947, -2940, 6676, 1954, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00013454383588396013, 4.4550211896421388e-05, 0.00011127196194138378, 0.00011260191240580752, 9.5913892437238246e-05, 0.00013540597865357995, 0.00014636095147579908, 3.2798423490021378e-05, 9.3588481831829995e-05, 0.00016555124602746218, 7.9593381087761372e-05, 7.9497265687678009e-05, 0.00010027043026639149, 0.00013085611863061786, 9.1121888544876128e-05, 9.9196600785944611e-05, 6.748674059053883e-05, 0.00011290610564174131, 5.7898585509974509e-05, 0.00010254048538627103, 0.00014007782738190144, 8.1892045272979885e-05, 8.7091531895566732e-05, 0.00011559963604668155, 8.6129264673218131e-05, 0.00010021466005127877, 0.00014345493400469422, 7.7114353189244866e-05, 8.6177038610912859e-05, 0.00010682772699510679, 6.0537862736964598e-05, 0.00010555962944636121, 8.2662780187092721e-05, 7.5076619395986199e-05, 0.00012129796232329682, 0.00012635329039767385, 0.00011563535372260958, 0.00011972580978181213, 0.00011385514517314732, 0.00012083112960681319, 0.00012382327986415476, 0.00011686687503242865, 9.9656899692490697e-05, 0.00019348673231434077, 0.00014719789032824337, 0.0001192677445942536, 0.00010456892050569877, 9.657019836595282e-05, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { 429, 6660, 30380, -4587, -160, -8868, -3396, -1124, 1518, -3169, 3826, 28104, 25007, 20381, -3499, 2336, 1645, 20528, 251, -11859, -5388, 15918, 14515, 6445, -642, -231, -7882, 23567, 3460, -4214, -636, 9943, -345, -470, -2933, 2612, 18295, -2427, -1526, -1199, -216, 14392, -344, -1769, 25712, -2211, 25112, -5370, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 6.379495607689023e-05, 0.00030140954186208546, 4.6174638555385172e-05, 0.0001858091854956001, 0.00023873835743870586, 8.6419131548609585e-05, 0.00011888719018315896, 0.00027554226107895374, 0.00016762843006290495, 0.00016534695168957114, 0.00020601192954927683, 5.7573815865907818e-05, 5.8209254348184913e-05, 5.6594031775603071e-05, 0.00010873104474740103, 0.00010626350558595732, 0.00020181979925837368, 6.3391271396540105e-05, 0.00014815061877015978, 9.5190662250388414e-05, 0.00012732368486467749, 9.7074429504573345e-05, 8.5208193922881037e-05, 0.00015277840429916978, 0.00018325832206755877, 0.00011639918375294656, 7.2593196819070727e-05, 6.7170447437092662e-05, 0.00020044778648298234, 0.00011067824380006641, 0.00013881019549444318, 9.6848132670857012e-05, 0.00017330639821011573, 0.00015744900156278163, 0.00010057680628960952, 9.6648684120737016e-05, 7.0040558057371527e-05, 6.484080950031057e-05, 0.00019015927682630718, 0.00022993044694885612, 0.00011609450302785262, 7.6596952567342669e-05, 9.6242831205017865e-05, 0.00016119334031827748, 5.2669955039164051e-05, 0.00010754713730420917, 6.3887920987326652e-05, 9.468886855756864e-05, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { 8929, -3012, 24119, -9320, 8570, -2278, 4905, -20156, 21892, -3372, 5700, 67, 14382, -5921, -2156, 6864, 5307, 5457, -2077, 5975, -4546, 20721, 19747, 7913, 20525, 1570, 9506, 11509, -7972, 12682, 25077, 9726, 8504, 12779, -2251, 9615, 5017, 8594, -4045, 7146, 17549, 5886, -1687, -3087, 4548, -13021, 1776, -11815, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00038073936593718827, 0.00026290788082405925, 0.0002301294298376888, 9.9355529528111219e-05, 0.0004645528388209641, 0.00051356502808630466, 0.00038199624395929277, 0.00033718819031491876, 0.00026687441277317703, 0.00051825214177370071, 0.000386144092772156, 0.00029709108639508486, 0.00096021266654133797, 0.00012373166100587696, 0.0004443973011802882, 0.00030132709071040154, 0.00033227744279429317, 0.00042247725650668144, 0.00042344414396211505, 0.00046208308776840568, 0.00022537280165124685, 0.00025035420549102128, 9.0494046162348241e-05, 0.00027951633092015982, 0.00016269210027530789, 0.00056960858637467027, 0.00033275716123171151, 0.00013822341861668974, 0.00035136507358402014, 0.00011944449215661734, 0.00023214018438011408, 0.00039800532977096736, 0.00045505180605687201, 0.00012540328316390514, 0.00043963253847323358, 0.0003927437646780163, 0.00045249014510773122, 0.00027462688740342855, 0.00025902537163347006, 0.0010965974070131779, 8.4949417214374989e-05, 0.00041485621477477252, 0.00026701443130150437, 0.00037243182305246592, 0.00024519843282178044, 0.00044810955296270549, 0.00044838394387625158, 0.00072028749855235219, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { -2638, -575, 4751, 2320, 1952, 18869, 4094, 3557, -587, 8684, 8525, -453, 2794, 8976, 491, 5850, -183, 1935, 2076, 18840, 1053, 6367, 3437, -1414, 12979, 2212, 7254, 1466, -1912, 7138, 7764, 6623, 354, 833, 1482, 38, 9272, 4395, -1719, -349, -3126, 19336, -10670, 18465, 6402, 26540, -925, -1141, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00010620644025038928, 0.00012931392120663077, 0.00014009371807333082, 0.00011321202327962965, 0.00011826765694422647, 5.0637852837098762e-05, 0.00011000053928000852, 0.00011207060742890462, 0.00012033309030812234, 8.4157487435732037e-05, 8.7732601969037205e-05, 0.00013359215517994016, 0.00014571055362466723, 8.7647946202196181e-05, 0.00017917880904860795, 9.6294264949392527e-05, 0.00014881601964589208, 0.00015010044444352388, 0.00012074122059857473, 5.0025206292048097e-05, 0.0001293859095312655, 0.00011325782543281093, 0.00012451280781533569, 0.00012467564374674112, 6.6396118199918419e-05, 0.00013739094720222056, 8.564053860027343e-05, 0.0001353750703856349, 0.00012100330059183761, 0.00011934498616028577, 9.8399330454412848e-05, 9.4373237516265363e-05, 0.00014126856694929302, 0.00017406628467142582, 0.00010495448805158958, 0.00016423648048657924, 8.1958292867057025e-05, 0.00012502841127570719, 0.00011258041922701523, 0.00010819404269568622, 0.00011517303937580436, 4.6728197048651055e-05, 6.7734370531979948e-05, 4.9956397560890764e-05, 9.6325224149040878e-05, 3.7032790714874864e-05, 0.00016230637265834957, 0.00012224794772919267, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { -82, -3606, 28, -3096, -159, 1521, 3175, 1095, 1293, -4614, 20409, -1697, -3617, 14364, -1127, -7826, -8460, 3193, -9127, -7283, 15374, -1515, -4577, -543, -5325, 1337, -5160, -2675, -3732, 7976, 31982, -2002, 2340, 10014, 19858, -5749, 25084, 713, -2367, -19, -6654, -1860, -2791, -1640, 7863, -11395, -1279, -941, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00026815757155418396, 0.00015411573986057192, 0.00012195818271720782, 0.00014949828619137406, 0.0002148045168723911, 0.0002076041855616495, 0.00011469981836853549, 0.00017221059533767402, 0.00014904770068824291, 0.00022833229741081595, 8.1714279076550156e-05, 0.00012605614028871059, 0.00016383841284550726, 0.00011642786557786167, 0.00012013714876957238, 0.00014179697609506547, 0.00012729616719298065, 3.697178908623755e-05, 6.5366679336875677e-05, 0.00024516868870705366, 7.5452997407410294e-05, 0.00010496787581359968, 0.00020259646407794207, 0.0001986963179660961, 0.00019728757615666837, 0.00015502310998272151, 0.00018203583022113889, 0.00014359601482283324, 0.0002011636970564723, 0.00020232181122992188, 5.8143352362094447e-05, 8.6732747149653733e-05, 0.0001966285053640604, 0.00013077276526018977, 5.7988305343315005e-05, 0.00014244101475924253, 6.1677477788180113e-05, 0.00010555903281783685, 0.0002321031061001122, 0.00014029572776053101, 0.00016682421846780926, 0.00010301671863999218, 0.0002645796921569854, 0.00024432467762380838, 0.00016249335021711886, 0.0001565581769682467, 0.00013328564818948507, 0.00028749761986546218, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[48] = { 6889, 2502, 847, -152, 9577, -3387, 6589, -3491, 6352, 4746, 10340, 4905, 5308, 1252, 1934, 3476, 3942, 1986, 2346, 2606, 1732, 771, -497, 9667, 969, 2779, 5984, 1127, 5908, -3369, 6201, 12127, 214, -1857, 3715, 3804, -626, 8020, 9787, 6332, 10862, 3415, 283, -1156, 5383, -2554, 2841, 68, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00010437880700919777, 0.00012623144721146673, 0.0001114977421821095, 0.000177998241269961, 8.3550097770057619e-05, 0.0001066888653440401, 0.00011239315062994137, 0.00014156701217871159, 0.00011748407268896699, 0.00011324118531774729, 7.2424969403073192e-05, 0.00012165823136456311, 0.00012168333341833204, 0.00015560166502837092, 0.00013966583355795592, 0.00017166684847325087, 0.00011404681572457775, 0.00015524649643339217, 0.00012048269854858518, 0.00014604712487198412, 0.00011600592551985756, 0.00012431375216692686, 0.00016007921658456326, 7.8201876021921635e-05, 0.00021757114154752344, 0.00012323401460889727, 9.053931717062369e-05, 0.00019507098477333784, 0.00010314045357517898, 8.9231638412456959e-05, 0.00012226264516357332, 7.3866984166670591e-05, 0.00020031922031193972, 0.0001392270642099902, 0.00013420882169157267, 0.00012613020953722298, 0.00012950955715496093, 0.00010255137749481946, 8.3366816397756338e-05, 9.9933866295032203e-05, 7.9651937994640321e-05, 0.00014283212658483535, 0.00014294445281848311, 0.00012599691399373114, 0.00013191656034905463, 0.0001458346814615652, 0.00015821457782294601, 0.00013617934018839151, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[48] = { 16733, 407, -18033, -3480, -6499, -8168, -5088, -2762, 2799, 10886, -4270, -1006, -1363, -3236, -3457, 4351, -5147, 21067, -656, -3120, -4059, -3819, -2264, 866, -3971, -1605, 1541, -7867, 17249, -3621, 23766, 414, -899, -5306, -5305, 20751, 13507, 1958, 7453, 15178, 2086, -4364, -1740, 4852, -11368, -562, -11294, -309, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00010069667769130319, 0.00015005929162725806, 7.624435966135934e-05, 9.3778253358323127e-05, 0.00027093029348179698, 0.00012624438386410475, 9.3957671197131276e-05, 0.00026852719020098448, 0.00016359903384000063, 0.00013298277917783707, 0.00013912118447478861, 0.00013716281682718545, 0.00010834752902155742, 0.00010193116759182885, 0.00010589415614958853, 9.1696405434049666e-05, 0.00010731096699601039, 6.2599254306405783e-05, 0.00014638860011473298, 0.00015451255603693426, 0.00012962805340066552, 0.0001664028677623719, 0.00012902724847663194, 0.0002009938471019268, 9.4277900643646717e-05, 0.00011988940968876705, 0.00010708579065976664, 8.9656998170539737e-05, 7.1423601184505969e-05, 0.00014376618491951376, 8.1395286542829126e-05, 0.00019233091734349728, 0.00019512679136823863, 0.0001502738450653851, 0.00011455477942945436, 7.1561022195965052e-05, 0.00010042286885436624, 0.00013193258200772107, 0.00023607695766258985, 9.1788424469996244e-05, 0.00020251341629773378, 0.00015700513904448599, 0.0001355427666567266, 0.00016900112677831203, 9.1114154201932251e-05, 0.00033206419902853668, 8.8086497271433473e-05, 0.00015727135178167373, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int32_t tensor_data18[48] = { 4565, 3972, 1830, 4679, 2771, 600, 5556, -460, 16, 5109, -1729, 3595, 1390, 1109, 2125, 5053, 15596, 11333, 4156, 5191, 2462, 4055, -245, 46, -474, -2692, 5789, 7705, 427, 1278, 2143, 9639, 6766, 8428, 1915, -200, -258, -97, 2272, 3451, 7703, 2218, 373, 3735, 3906, 5803, 5448, 6299, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00013814249541610479, 0.00011630987137323245, 9.3047208792995661e-05, 0.00011176452971994877, 0.00016477939789183438, 0.00019471919222269207, 0.00012432088260538876, 0.00011413590254960582, 0.00015226038522087038, 0.00010317654960090294, 0.00017464137636125088, 0.00014108297182247043, 0.00013556295016314834, 0.000198661073227413, 0.00017624963948037475, 0.00012423035514075309, 5.9101061196997762e-05, 8.1005193351302296e-05, 0.00012476391566451639, 0.00011445763084338978, 0.00016507628606632352, 0.00010785614722408354, 0.00012741948012262583, 0.0001453804288757965, 0.00016241513367276639, 0.00012424365559127182, 0.00010656278027454391, 0.00010464343358762562, 0.00015538565639872104, 0.00022511537827085704, 0.00016922010399866849, 7.6379263191483915e-05, 0.00012298930960241705, 8.5542051238007843e-05, 0.00012512294051703066, 0.00022922428615856916, 0.00016550181317143142, 0.00016188023437280208, 0.00010837090667337179, 0.00011118277325294912, 9.5309173048008233e-05, 0.00019444232748355716, 0.00014980164996813983, 0.00014181123697198927, 0.00010228522296529263, 0.00013321454753167927, 0.00011261145846219733, 0.00010629985627019778, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[48] = { 3406, 7163, 14726, -4341, 6615, 19046, -4115, -5740, -6740, 9646, -4, -1000, -3369, -2762, -6654, -239, -1480, -1663, 32409, 3035, -6730, 562, -11022, -5823, -6326, -5494, -1536, 6316, -1603, 22521, 1901, 4407, 3551, -6136, -500, 8266, -9774, -8526, -1419, -208, 8290, 7302, -3911, 9149, -9620, -341, -362, -2689, };
const TfArray<1, int> tensor_dimension19 = { 1, { 48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00012680923100560904, 7.8507982834707946e-05, 7.3064366006292403e-05, 9.4255512522067875e-05, 0.00012332558981142938, 5.549222623812966e-05, 0.0001136200298788026, 0.00014453790208790451, 0.00011225962953176349, 9.3600130639970303e-05, 0.00014721104525960982, 0.00013811081589665264, 9.9890334240626544e-05, 0.00011295163858449087, 0.00014007337449584156, 0.00014610057405661792, 0.00013034811126999557, 0.00021463118901010603, 4.7787274525035173e-05, 0.00012524035992100835, 0.0001033269873005338, 0.00015925892512314022, 0.00010923703666776419, 8.0527875979896635e-05, 0.00013563336688093841, 0.00013010227121412754, 0.00016462430357933044, 0.00018990819808095694, 0.00017062295228242874, 5.4132629884406924e-05, 9.6752388344611973e-05, 0.00012742035323753953, 0.0001220093690790236, 0.00013780395966023207, 0.00013671259512193501, 0.00010778065916383639, 0.00010818122973432764, 0.00011869611626025289, 0.00012958665320184082, 0.00012835589586757123, 0.000145984478876926, 8.6751191702205688e-05, 0.00012548609811346978, 9.1631809482350945e-05, 8.2354847108945251e-05, 0.00015477258421014994, 0.00025392850511707366, 0.00017006613779813051, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int32_t tensor_data20[48] = { 3121, 2293, 3316, 3092, 2314, 4803, -3794, -811, -2568, 2187, 1510, 547, 8983, 2990, 2071, 1634, 25, -135, -2511, 3557, 2517, 6338, 11477, 1608, 9122, -785, 855, 4569, -2198, -2970, 2455, -1377, 1128, -983, 98, -8324, 965, 8, 139, -2059, 4111, 575, 2288, -2538, 9501, 3717, 222, -2164, };
const TfArray<1, int> tensor_dimension20 = { 1, { 48 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0001045556491590105, 0.00017941657279152423, 0.00015937979333102703, 0.00010097713675349951, 0.00017066681175492704, 9.3666611064691097e-05, 0.000136079455842264, 0.00016818524454720318, 0.00010111139272339642, 0.00019485359371174127, 0.0001393298152834177, 0.00019344751490280032, 8.5090912762098014e-05, 0.00017137729446403682, 0.00014725947403348982, 0.00012544888886623085, 0.00017264157941099256, 0.00013448418758343905, 0.00016518622578587383, 0.00017411747830919921, 0.00013453747669700533, 0.00011307209933875129, 7.4789677455555648e-05, 0.00013932993169873953, 6.920941814314574e-05, 0.00017419234791304916, 0.00015297239588107914, 0.00013873827992938459, 0.0001121475943364203, 0.00016811348905321211, 9.6783252956811339e-05, 0.0001370357203995809, 0.00022063715732656419, 0.00021556274441536516, 0.00026984344003722072, 6.3753432186786085e-05, 0.00014618122077081352, 0.0002471148909535259, 0.00018534522678237408, 0.00019392724789213389, 0.00012039121793350205, 0.00012252197484485805, 0.000163924356456846, 0.00013015333388466388, 7.2114969952963293e-05, 0.00014483746781479567, 0.00021933412062935531, 0.00016189314192160964, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int32_t tensor_data21[48] = { -2115, -5799, 143, 36, 2516, 12354, 15664, 50, 15, 2727, -11729, -272, 1240, 8623, 3394, 186, -1014, 11044, 13427, 15376, -1875, -19, -158, -188, 29, 3853, 1003, 22, 9623, -3023, -222, 10071, 9137, -17153, 5035, -2194, -148, 345, -688, 220, -41, 9557, 11130, 423, 22199, 11658, 13211, 22069, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00024544596089981496, 9.6298725111410022e-05, 0.00030264176893979311, 0.00055257155327126384, 0.00016484143270645291, 8.5008476162329316e-05, 8.33888043416664e-05, 9.4066934252623469e-05, 0.00043944863136857748, 8.4353043348528445e-05, 0.00011630132212303579, 0.00011096099478891119, 4.8966343456413597e-05, 0.00019949743000324816, 0.00012884908937849104, 0.0001031940191751346, 0.00014191753871273249, 0.00012505680206231773, 6.7754335759673268e-05, 0.00012763642007485032, 8.5120933363214135e-05, 0.00021301225933711976, 0.00099097436759620905, 0.00010330573422834277, 0.00048534275265410542, 6.2209037423599511e-05, 0.00011099892435595393, 0.00056544726248830557, 0.00011949426698265597, 0.00021691524307243526, 0.00028774121892638505, 0.00018258090130984783, 0.00012732118193525821, 0.00031829593353904784, 0.00015992771659512073, 0.00011795164755312726, 0.00015063413593452424, 0.00011976058158325031, 0.0001192636918858625, 5.6325661716982722e-05, 0.0006706765852868557, 0.00012516271090134978, 0.00023787407553754747, 6.5896718297153711e-05, 8.9913293777499348e-05, 0.00012180306657683104, 0.00011257024016231298, 5.8860474382527173e-05, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int32_t tensor_data22[48] = { -1233, 3474, 30527, 2491, 820, 7171, 38, -17200, -842, -1359, 21566, 1268, 17564, -2339, 1216, -2694, 302, -11018, 2763, 32470, -575, 26361, 32980, -1915, -2777, -2435, 28233, 33609, 1801, -1054, 2593, -434, -7689, 1395, -1975, -2357, -15310, 1175, -1568, -247, 32225, 21779, 29736, -8124, 42978, 1590, 17463, -1365, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.777218368370086e-05, 3.311213367851451e-05, 4.0863676986191422e-05, 5.8071564126294106e-05, 5.1440991228446364e-05, 6.4771964389365166e-05, 0.00010128289432032034, 4.7606012230971828e-05, 8.6559812189079821e-05, 5.5826494644861668e-05, 4.8891983169596642e-05, 4.8650534154148772e-05, 9.5670809969305992e-05, 4.5779546780977398e-05, 8.6052234109956771e-05, 5.165042239241302e-05, 3.5972989280708134e-05, 7.3358678491786122e-05, 9.5242721727117896e-05, 4.4062977394787595e-05, 8.9380191639065742e-05, 5.8860681747319177e-05, 7.5427662522997707e-05, 7.6629235991276801e-05, 7.3373608756810427e-05, 3.8392765418393537e-05, 4.1486524423817173e-05, 4.4259595597395673e-05, 7.077144255163148e-05, 0.00011948413884965703, 9.5017523563001305e-05, 9.9001888884231448e-05, 4.0322811400983483e-05, 5.064302240498364e-05, 5.3774303523823619e-05, 0.00025083997752517462, 6.3477295043412596e-05, 5.716690793633461e-05, 4.817697117687203e-05, 0.00011537921818671748, 4.2611805838532746e-05, 4.6032291720621288e-05, 5.3504791139857844e-05, 7.7157877967692912e-05, 4.0886618080548942e-05, 5.0748389185173437e-05, 5.2215862524462864e-05, 7.1789618232287467e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[48] = { 12400, 25722, 18834, -642, -7637, 11772, 5030, 4014, 4672, 3259, 5193, 18773, 26733, -437, 4288, -2854, 4465, 41394, 6107, 12007, 23221, 4635, 6497, 7355, 27366, 7790, 4583, 26529, 23698, 3245, 4693, 8741, 5699, 3409, 13517, 11078, 1894, 9813, 1966, 491, 1599, 11089, 7482, 22786, 11994, 17464, 2430, 1806, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 6.1600017943419516e-05, 3.710522287292406e-05, 4.9491987738292664e-05, 0.00011512346100062132, 6.2867067754268646e-05, 6.6969318140763789e-05, 9.0145069407299161e-05, 0.00012580773909576237, 6.5309614001307636e-05, 0.00012152863928349689, 0.00011993460066150874, 4.7117515350691974e-05, 3.5376779123907909e-05, 0.00012661032087635249, 9.4418879598379135e-05, 0.00011730739061022177, 0.00011540456034708768, 2.4854032744769938e-05, 7.9900215496309102e-05, 5.7336645113537088e-05, 4.1470906580798328e-05, 8.2303566159680486e-05, 7.146497955545783e-05, 8.0986930697690696e-05, 3.5229903005529195e-05, 8.7356973381247371e-05, 8.8622844486963004e-05, 3.55029187630862e-05, 3.9585727790836245e-05, 8.4911327576264739e-05, 0.00011041793914046139, 8.6188010754995048e-05, 9.3808615929447114e-05, 0.00011600823199842125, 5.7469827879685909e-05, 6.755365029675886e-05, 9.8669974249787629e-05, 6.7710745497606695e-05, 0.00014477390504907817, 0.00011205727059859782, 0.00012234764290042222, 7.0882153522688895e-05, 8.1710801168810576e-05, 4.0228092984762043e-05, 7.5839750934392214e-05, 5.4053954954724759e-05, 0.00010820610623341054, 0.00010677584214136004, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int32_t tensor_data24[48] = { 2259, 40918, 813, -1438, 5469, 34, -279, 14097, -6696, 12014, -7783, 16132, 4260, -4023, 4254, -3584, -11149, 27636, -470, 11038, -779, -2564, -3195, -5449, -238, -5191, 857, -2075, -909, 4019, 1168, 2862, -179, -477, -3320, -3111, -2152, 5973, -3621, -11046, -3910, -8736, 1279, -1125, 5961, 3046, -601, 10788, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00011204768088646233, 6.3790212152525783e-05, 0.00015647214604541659, 0.00030545174377039075, 0.00013685970043297857, 0.00010737484990386292, 7.0104746555443853e-05, 6.8514840677380562e-05, 0.00010331527300877497, 4.3901571189053357e-05, 5.18220585945528e-05, 0.00010692828800529242, 0.00024340096570085734, 0.00019059689657296985, 0.00013950883294455707, 5.7707740779733285e-05, 3.9178969018394127e-05, 0.00012506615894380957, 0.00010612176993163303, 7.8791599662508816e-05, 8.2233244029339403e-05, 0.00017187726916745305, 0.00015558033192064613, 8.5342777310870588e-05, 9.6435098384972662e-05, 7.8912315075285733e-05, 0.00020520374528132379, 0.00011821692896774039, 0.00011256265133852139, 8.1000456702895463e-05, 0.00012136092118453234, 9.5149116532411426e-05, 6.7776745709124953e-05, 0.00016199189121834934, 7.353552064159885e-05, 0.00023763181525282562, 0.00014591492072213441, 0.00015232816804200411, 8.1853038864210248e-05, 4.9758356908569112e-05, 0.00015551844262517989, 4.9698996008373797e-05, 0.00014671419921796769, 0.00018068948702421039, 0.0002478427195455879, 0.00010335785191273317, 0.00016139562649186701, 3.436003316892311e-05, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int32_t tensor_data25[48] = { 1471, 1539, 1666, -1674, 5155, 4202, 7396, 5751, 4163, -1559, 13931, 5865, -2562, 8245, 9975, 2310, 10593, 409, 40167, 11182, 5071, 17127, 10847, 4047, 3056, 19716, 415, 6175, 5287, -2243, 1820, 10498, 151, 4118, 1267, 10458, 2520, 7075, 914, 2687, -1063, 11660, 9081, 6054, 3773, 8451, 1100, 3949, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00010856295557459816, 0.00014387455303221941, 0.0001288596831727773, 0.00015208676632028073, 0.00012185653031338006, 0.00011012910545105115, 8.9398556156083941e-05, 0.00010162174294237047, 9.7194562840741128e-05, 0.00015477146371267736, 5.8810801419895142e-05, 6.2715138483326882e-05, 7.0350943133234978e-05, 7.6714684837497771e-05, 8.0969686678145081e-05, 0.00012475515541154891, 6.3142368162516505e-05, 0.0001028319020406343, 2.491821396688465e-05, 7.1950526034925133e-05, 9.3386952357832342e-05, 5.114101804792881e-05, 7.6959258876740932e-05, 0.00012823253928218037, 9.3153314082883298e-05, 4.7825502406340092e-05, 0.00012825944577343762, 0.00010860761540243402, 9.2582784418482333e-05, 0.00012677228369284421, 9.6943236712832004e-05, 4.9868129281094298e-05, 0.00011342178186168894, 0.00013061442587058991, 0.00012879927817266434, 6.5017047745641321e-05, 0.00011422473471611738, 8.8739005150273442e-05, 0.00013251339260023087, 9.6707670309115201e-05, 9.4344592071138322e-05, 6.1626778915524483e-05, 8.6859108705539256e-05, 0.0001244706945726648, 0.00011441083188401535, 7.9669654951430857e-05, 9.7199219453614205e-05, 9.403176954947412e-05, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int32_t tensor_data26[48] = { -16549, -3445, 2087, -1500, -4006, -695, -2722, -16054, -13114, -9893, -474, 11967, 2585, 22484, -348, 20872, -10636, -4265, -2156, 10447, -7254, -15200, 8534, -5502, -7529, 23540, -1054, -112, 23520, 69, 4567, -6767, -9048, 22873, -2854, 135, -9372, 7791, -11840, -534, -2480, 15376, -725, 25985, -3125, -1035, -13272, -41, };
const TfArray<1, int> tensor_dimension26 = { 1, { 48 } };
const TfArray<48, float> quant26_scale = { 48, { 6.762930570403114e-05, 9.8429918580222875e-05, 0.00011562486179172993, 0.00011262860789429396, 0.00022806730703450739, 0.00011880736565217376, 0.00017851284064818174, 7.1882153861224651e-05, 5.3714960813522339e-05, 0.00010955132165690884, 9.8039738077204674e-05, 0.00010864054638659582, 9.9688717455137521e-05, 6.2415310821961612e-05, 7.9210694821085781e-05, 7.240752165671438e-05, 9.4677896413486451e-05, 0.0001162843473139219, 0.00014514167560264468, 0.00012805669393856078, 0.00012841698480769992, 0.00010684215521905571, 0.0001167798982351087, 8.9473847765475512e-05, 6.5832522523123771e-05, 0.00011558407277334481, 0.00014168319466989487, 0.00013817760918755084, 7.4917239544447511e-05, 0.00016982278611976653, 0.00012920208973810077, 8.3171624282840639e-05, 0.00014527793973684311, 5.183301618671976e-05, 0.00013540634245146066, 0.00012864849122706801, 9.3564747658092529e-05, 5.0215232477057725e-05, 7.5707292126026005e-05, 8.3051629189867526e-05, 0.00016173667972907424, 7.6908574556000531e-05, 6.9191708462312818e-05, 6.5482672653160989e-05, 8.5774416220374405e-05, 6.8936133175157011e-05, 7.4725445301737636e-05, 8.7243104644585401e-05, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int32_t tensor_data27[48] = { -474, 3568, 2356, 29854, 9258, 7093, 8671, 2173, 4777, 17926, 2504, 2627, 4491, 30767, 6230, 4616, 8173, 6762, 5748, 27228, 18556, 4182, 2358, 4232, 2158, 11861, 289, 10748, -1248, 1486, 1394, 9254, 4088, 12253, 3304, 15490, -977, -2971, 16752, 10588, 6401, 2987, 7887, 2862, 5968, 29968, 7012, 1016, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 0.00011275489669060335, 0.00012617491302080452, 0.00014023574476595968, 3.4427041100570932e-05, 7.6881107816006988e-05, 8.2523605669848621e-05, 8.9201683294959366e-05, 0.00011728854588000104, 9.3034555902704597e-05, 5.3013558499515057e-05, 7.5996867963112891e-05, 8.4095154306851327e-05, 8.3322163845878094e-05, 3.1895451684249565e-05, 9.3089940492063761e-05, 8.7155240180436522e-05, 6.5982741944026202e-05, 8.1995967775583267e-05, 0.00012977897131349891, 3.6930563510395586e-05, 5.3989442676538602e-05, 0.00011349577107466757, 0.00011303544306429103, 9.2588939878623933e-05, 0.00010418761667096987, 6.6469430748838931e-05, 9.9963290267623961e-05, 7.1644863055553287e-05, 0.00014456284407060593, 0.00020107820455450565, 0.00014034104242455214, 5.5746666475897655e-05, 0.0001111892779590562, 7.0952046371530741e-05, 9.5721305115148425e-05, 5.866598803550005e-05, 0.00019375965348444879, 0.00011855741468025371, 5.8266949054086581e-05, 6.835474050603807e-05, 6.5539483330212533e-05, 9.2802853032480925e-05, 8.2811959146056324e-05, 0.00013275023957248777, 8.9774614025373012e-05, 3.2374631700804457e-05, 8.9639033831190318e-05, 9.9027609394397587e-05, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int32_t tensor_data28[48] = { -3656, 10877, -388, 4387, -12559, 38697, -12856, 27349, 33635, -255, 32034, -1707, 27445, -998, 15795, -311, -3422, 24613, -9603, 18471, 401, 27690, 1698, 26105, 3018, 2691, -3880, -7807, -2009, 759, -6983, 25326, -2370, 24378, -290, -3528, -164, -268, 17082, -455, 5532, 29293, -15457, -4774, 2252, -11319, -4131, -2595, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 7.91920319898054e-05, 0.00010835276043508202, 7.4882154876831919e-05, 0.00011596675176406279, 0.00014852020831312984, 3.9874514186521992e-05, 6.2741026340518147e-05, 3.7385416362667456e-05, 3.7692152545787394e-05, 0.00023143802536651492, 3.6447767342906445e-05, 0.00010364626359660178, 4.5826011046301574e-05, 0.00017119711264967918, 8.6609659774694592e-05, 0.00010593746992526576, 7.9399425885640085e-05, 5.4087337048258632e-05, 8.7185617303475738e-05, 0.00027797659276984632, 0.00016772327944636345, 4.0668659494258463e-05, 4.6444194595096633e-05, 3.5182823921786621e-05, 9.8309246823191643e-05, 0.00011466786963865161, 8.6597166955471039e-05, 0.00014492559421341866, 5.9673591749742627e-05, 0.00010307881166227162, 6.9528759922832251e-05, 8.8921966380439699e-05, 8.498848183080554e-05, 0.00010504249803489074, 8.6197505879681557e-05, 0.00010473470319993794, 0.00014685855421703309, 0.00013443389616440982, 0.00020180817227810621, 8.3105842350050807e-05, 8.9867084170691669e-05, 4.6573939471272752e-05, 6.4664163801353425e-05, 4.8652433179086074e-05, 9.917522402247414e-05, 0.00013021647464483976, 6.5365718910470605e-05, 8.0260397226084024e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int32_t tensor_data29[1280] = { -1691, -148, -422, -1034, 230, -563, -971, -164, -787, -120, -1203, 71, -832, 270, 194, 15, 619, -371, -167, -549, -2479, -1242, 651, 915, -2808, -1160, -477, -1217, -189, -745, -532, -394, -2922, -2224, -562, -780, -1031, -864, 161, -345, -1138, 110, -291, 283, -140, -1419, -698, -1045, -891, 131, -1078, 160, -1321, -540, -2785, -495, -1124, -1501, -1452, -575, 65, -2313, -872, 1568, -529, -2061, -489, -6, -1189, -218, -481, -463, -1741, -136, -943, -214, -662, -1697, 2061, 108, -1235, 121, -1694, -1243, -897, 538, -1735, 513, -1979, -574, 213, -1420, -1067, -1118, -1591, -1370, -428, 271, -807, -232, -97, -1975, -635, -1427, -15, -164, -1572, -1471, -1191, -1649, -1363, -1757, -441, 966, -972, -1554, -1249, -756, -153, -1078, 170, -500, -863, 124, -2008, -738, 489, -1220, -1394, 46, -447, 546, 127, -609, 62, -920, -1715, -1145, -1637, 38, -152, -1440, 174, 1462, -1685, -139, -336, -636, -1786, 158, -576, -466, -1156, -1212, -962, -1791, -1060, -1039, 72, -631, -1859, -550, -83, -374, -533, -1071, 138, -294, -1756, -1309, 2, -770, -2193, -132, -645, -1716, -247, -4008, 427, -1608, -248, -273, -244, 598, -1242, -347, -1312, -194, -720, -1083, -1019, -2471, -160, 734, 131, -1365, -1186, -1113, -1791, -380, -1814, -208, -327, -645, -1474, 1173, -1362, -185, -706, -716, -48, -586, -2357, -583, -1175, -798, -184, -487, -262, -272, -1770, 209, -210, -879, -766, -204, -2518, -985, -1398, -367, 265, -41, 366, -680, -186, -1759, -1863, -1492, -427, 151, -887, -1474, -1014, -366, -1645, -1771, -1295, -786, -931, -1138, -956, -628, -1405, -1086, -185, 341, 246, -11, -1567, 1076, -1349, -2004, -1012, -378, -1177, 550, -741, -326, -2305, -1060, -116, -566, -1001, 176, -23, -1010, 413, -986, -1984, -984, -698, 184, -1590, -1832, -1249, -1500, -807, 169, 271, -472, -726, -1505, -741, 602, -426, -2628, -2033, -412, -297, 33, 329, -1118, -1642, -1065, -1188, 576, 231, 37, -192, -613, 867, -2712, -1993, 455, -444, -364, -383, -1492, -19, -672, -1893, -1110, -410, -144, -1182, -1677, 543, -670, -407, -594, -1648, 671, -652, -876, 361, -43, -943, -208, -562, -1252, 366, -783, -1587, -2591, 1790, -1268, -1226, -130, 245, -1438, -1000, -2096, 482, -747, -501, -625, -1946, -591, 500, -935, 206, -871, -1548, -523, -603, -609, -1505, -464, -1845, -227, -593, -2684, -521, -1227, 829, -349, -620, 106, -1466, -657, -261, -330, -981, -1000, 312, -1544, -877, -1759, -281, -1566, 332, 81, -1775, -99, -845, 1321, -3080, 915, 871, -1785, -248, -315, -933, 573, -78, -465, 541, -836, -1166, -79, -1331, -634, 147, -1335, -1276, 298, -395, -621, -1036, 722, -518, -1205, -3461, -12, 20, -168, -185, -151, -1830, -370, -688, 1110, -232, 525, -231, -1144, -643, 13, 59, -516, -857, 62, 1223, 321, -1079, -690, -1655, 2033, -680, 334, -202, 29, -298, -636, -208, -577, -1076, -406, -1974, -947, -860, 70, 59, -990, -291, -1200, -980, -1135, -891, 381, 986, 78, 401, 441, 418, -800, -1017, -2691, 1054, -360, -67, 94, -606, 612, -88, -1103, -591, -1437, -961, -425, -400, -1139, -219, -1135, -1166, -1110, -22, -315, -1137, -882, -528, -88, -1164, -132, -678, -620, 356, -507, -655, 79, -914, 93, 137, -599, -14, -110, -881, -1002, -1819, -867, -1361, -40, -1646, 617, -933, -1493, -1775, -1008, -810, -744, 353, 182, 483, 552, -338, 19, -1596, -1607, -1854, 91, 247, -410, 282, -1694, 320, -24, -1674, 293, -1230, -274, 763, 123, 455, -672, -1013, -823, 339, -591, 354, -158, -901, -1029, -43, -1792, -859, -1209, -1623, -623, -344, -480, 541, -1103, -920, 145, -149, -1340, -414, -772, -486, -699, -989, -152, 117, 87, -1493, -743, -3044, -622, -395, -1269, -2510, -656, -284, -444, 553, -747, -321, -2647, 345, -1338, -710, -1767, 807, -442, -2105, 994, -1248, -316, -2536, -1791, 86, -2192, -627, -473, -1363, -1690, -754, -3897, -548, -438, -1194, -522, -1826, -402, -1435, -1222, -1581, -930, -1404, -2707, -1191, -1262, -790, 78, -1048, -785, 657, -813, 738, -658, -110, 1183, -749, -277, -742, 1273, -1567, 509, -326, -1164, -673, -803, -1169, 136, -894, -1361, -1067, -1247, -728, -1320, 93, -388, -1020, -1093, -1990, -1141, -84, -1574, 471, 9, -651, -148, -654, -1021, -131, -1297, -798, 13, 211, 528, -1744, -1409, -1880, -1413, -1414, -654, -1073, 47, -2180, -2124, -1491, -854, -423, -1229, 998, -240, 12, -1499, -1667, -1485, 428, -65, 238, -797, -429, -1320, -783, -270, -1576, -2388, -560, -2740, -137, -389, -1126, -2455, -478, -2385, -2003, -440, 781, -269, -1145, 977, -1821, -527, -959, -581, -898, 727, 1400, -1, -2029, -1635, 499, -905, -2087, -1680, -183, -1505, -77, 1410, 2596, -100, -1688, -733, 129, 929, -978, -1294, -2426, -877, -166, 2475, -317, 269, -2209, -298, -1278, 18, 462, -1349, -1213, 100, -1401, -603, -687, 217, -1136, 514, 664, 147, -610, -969, 139, -1339, 384, -1732, -310, -347, -1621, 533, 156, -502, -645, 71, -95, 326, -1141, -510, -1202, -810, -686, -605, -263, -398, -2156, 80, 576, 708, 14, -498, -978, 60, 1313, -907, -1535, -2908, -518, -1241, -1855, -2180, -1246, -954, -96, -348, -1588, -2366, -1991, -31, -1220, -263, 243, -536, -984, -776, 133, -262, -495, -569, -1270, -1285, 656, -1683, -741, -131, -444, -633, 698, -1247, -984, -302, -1032, -1912, -500, -1679, -1806, -2175, -1094, 275, -319, -1056, -1045, -440, -2235, -618, -617, -1899, -1197, -641, 786, -745, -1196, -1961, -1133, -881, -294, -1939, -146, -233, -716, -1138, -1529, -13, -1101, -136, 133, -1120, -271, 204, -1319, 244, -427, -797, 158, -1498, -295, 460, -4, -780, 311, 190, -518, -1367, -647, 221, -954, -1925, -236, -1252, -1002, 371, -992, -553, -735, 8, -331, -1747, -617, 62, -439, 255, -132, -473, -844, -452, -1745, -120, -3472, -746, -2084, -1644, -1746, -2708, -3514, -637, 693, 138, -606, -1501, -1552, -354, 230, -1813, -1092, -1643, -1178, 784, -721, -2404, 1072, -2522, 680, -2139, -365, -8, -1666, -1227, -696, -2439, -382, 1379, -241, -506, -3092, 184, 769, 143, -1240, -1445, 44, -754, -556, -1794, -283, -1202, 155, 502, 34, 463, -1190, -921, -2100, -319, -1156, -661, -791, -665, 783, -2647, 816, -1697, -1447, -1465, 198, -1165, -848, 496, -1600, -741, -456, -1904, 302, 837, 473, -716, 325, 75, -2155, -190, -1078, -913, -2005, -928, -1337, -627, 310, 54, -1064, -736, -644, -1114, -789, -762, 544, -1083, 227, 281, -1037, -686, -620, -1140, 491, -2014, 1190, -1073, -1527, -1956, -1263, -797, -515, -1210, -1375, -364, -808, -1026, -279, 301, -2323, -357, -317, -339, 266, -1851, -752, -775, 12, -1312, -978, 272, -1101, -1032, -356, -1124, -238, -1927, -1420, -670, -2236, -1170, -2166, -1460, -1457, -1638, -865, 505, -1867, -169, -1318, 1706, -307, -2689, -1210, -748, 126, -1125, -2291, -386, -1671, -343, 264, -460, -828, -871, -121, 44, -2933, -479, -1069, -481, -386, -660, -707, -2499, -13, -890, 207, -431, 263, -2881, -308, -2346, -349, -479, -1419, 217, -773, -265, -904, -465, -626, 407, -2979, -1498, -1768, 21, -729, 1659, -720, -1062, 1621, -2623, -1766, -877, -1418, -1781, -1717, -2186, -281, -1615, -1896, -307, -826, -1090, 216, 349, -1287, -441, 97, -803, -525, -748, -1058, -1387, -1993, 470, 161, -940, 43, -800, -4011, 43, -1800, 611, 977, -459, -1037, 298, 849, 1491, 133, -3113, -433, 862, -994, -1190, 912, -2482, -2514, -848, -1477, -770, 1088, -371, -1282, -1511, -65, 621, -1072, -2880, 463, -351, -2170, -1143, -1132, -284, 487, -703, -575, -702, 177, -47, -44, -1388, -874, -892, -763, -483, -915, -977, -2137, -1592, -1446, -2073, -176, -314, -1060, -837, -2517, -715, -3364, -955, 1314, 153, 254, -1348, -2640, -2110, -1465, -1933, -1005, 980, -657, -1388, -674, -1035, -555, -982, 246, -390, 79, -803, 233, -488, -228, -2242, 808, -807, 155, 154, -923, 1007, 1197, -512, -158, -1221, -462, -853, 366, -1560, -1719, -1500, -881, -582, -1193, -1404, -28, -1231, -1928, -791, -404, -671, -119, -1567, 1363, -145, 333, -879, -125, -893, -1017, -704, -991, 377, -1506, -2220, -825, -1349, 370, 3, };
const TfArray<1, int> tensor_dimension29 = { 1, { 1280 } };
const TfArray<1280, float> quant29_scale = { 1280, { 0.00018283700046595186, 0.00013284209126140922, 0.00017001942615024745, 0.00017709063831716776, 0.00015479199646506459, 0.00022524700034409761, 0.0002112683723680675, 0.0001699643034953624, 0.00021316345373634249, 0.00020938889065291733, 0.00016970111755654216, 0.00017935493087861687, 0.00020622546435333788, 0.00021845636365469545, 0.0001514535688329488, 0.00012171561684226617, 0.00019095883180852979, 0.00022805688786320388, 0.00017663004109635949, 0.000132886299979873, 0.00017318454047199339, 0.00025460723554715514, 0.00023246259661391377, 0.00012580599286593497, 0.00014053970517124981, 0.00024628479150123894, 0.00020570874039549381, 0.00015400959819089621, 0.00015939574223011732, 0.00023819549824111164, 0.00018094103143084794, 0.00016257958486676216, 0.00014910980826243758, 0.0001851431152317673, 0.00017200724687427282, 0.00024090826627798378, 0.0001924389653140679, 0.00018187073874287307, 0.00016182965191546828, 0.00019523281662259251, 0.00018245349929202348, 0.00016384755144827068, 0.00020317589223850518, 0.00019742344738915563, 0.00017285784997511655, 0.00018013778026215732, 0.00016546722326893359, 0.00020186264009680599, 0.00019468113896436989, 0.00015078602882567793, 0.00019096767937298864, 0.00014648846990894526, 0.00016142739332281053, 0.00019432968110777438, 0.00012230238644406199, 0.0001735928381094709, 0.00023880992375779897, 0.00016232604684773833, 0.00017809441487770528, 0.00014242494944483042, 0.00017507503798697144, 0.00016428441449534148, 0.00015965933562256396, 0.00018969610391650349, 0.00012774440983776003, 0.00013947649858891964, 0.00021076007396914065, 0.0001966228592209518, 0.00017750986444298178, 0.0002407681749900803, 0.000137113849632442, 0.00022080085182096809, 0.00017783282964956015, 0.00018602276395540684, 0.00016305471945088357, 0.00018601679767016321, 0.00016635254723951221, 0.00021861170534975827, 0.00018610108236316592, 0.00014924602874089032, 0.00018933368846774101, 0.00011203873145859689, 0.00011241312313359231, 0.00017589532944839448, 0.00012743443949148059, 0.00021238460612948984, 0.00014984342851676047, 0.00012624007649719715, 0.00022601512318942696, 0.00018534599803388119, 0.00016266661987174302, 0.00023804709780961275, 0.0002047672460321337, 0.00021550482779275626, 0.00012503191828727722, 0.00015936999989207834, 0.00019246159354224801, 0.0001680288405623287, 0.00023327874077949673, 0.00017337195458821952, 0.00023577339015901089, 0.00016574253095313907, 0.00013532205775845796, 0.00015468081983271986, 0.00016463639622088522, 0.00017273811681661755, 0.00016038707690313458, 0.00017526313604321331, 0.00017911524628289044, 0.00016581527597736567, 0.00016523187514394522, 0.00017443917749915272, 0.00016980257350951433, 0.00020796965691260993, 0.00014711797120980918, 0.00018984144844580442, 0.00015845907910261303, 0.00022272896603681147, 0.00015947148494888097, 0.0001286510523641482, 0.00017304456559941173, 0.00017673584807198495, 0.00017299717001151294, 0.00017098973330575973, 0.00015446489851456136, 0.00018994871061295271, 0.00010960342478938401, 0.00017461246170569211, 0.00022858174634166062, 0.00017597353144083172, 0.0001446569076506421, 0.00019363123283255845, 0.00015729745791759342, 0.00021848508913535625, 0.00019469032122287899, 0.00021105956693645567, 0.00016146260895766318, 0.0001907956029754132, 0.00013060489436611533, 0.00014404488319996744, 0.00019546013209037483, 0.00016789673827588558, 0.00016129706637002528, 0.00013660408149007708, 0.0001338718575425446, 0.00022221509425435215, 0.00012798578245565295, 0.00012075473932782188, 0.00014736205048393458, 0.0001439685293007642, 0.00013447123637888581, 0.00018337399524170905, 0.00015305081615224481, 0.00014927313895896077, 0.00017850077711045742, 0.0001795957941794768, 0.00015721863019280136, 0.0002204940392402932, 0.00019161167438142002, 0.00016611401224508882, 0.00019430778047535568, 0.00015480389993172139, 0.00018852265202440321, 0.00020023438264615834, 0.00015803905262146145, 0.00020449925796128809, 0.00011747416283469647, 0.00018758296209853142, 0.00013589435548055917, 0.00016471883282065392, 0.00028754561208188534, 0.00020316634618211538, 0.00016722097643651068, 0.00016392422548960894, 0.0001603623095434159, 0.00020352279534563422, 0.00018717847706284374, 0.00016158584912773222, 0.00019147437706124038, 0.00013337419659364969, 0.00014917078078724444, 0.00021405100414995104, 0.0001636385713936761, 0.00014180075959302485, 0.00013917579781264067, 0.00025828427169471979, 0.00015662969963159412, 0.00023587876057717949, 0.00022490242554340512, 0.00015048815112095326, 0.00014344624651130289, 0.00017532696074340492, 0.00017979250696953386, 0.00020007800776511431, 0.00018339097732678056, 0.00014587292389478534, 0.00017402332741767168, 0.00016524470993317664, 0.00016346730990335345, 0.00015302136307582259, 0.00022590091975871474, 0.00020934324129484594, 0.00016420254542026669, 0.00017110668704845011, 0.00011331444693496451, 0.00012382249406073242, 0.00019779907597694546, 0.00018756327335722744, 0.00022744841407984495, 0.00015610396803822368, 0.00015957721916493028, 0.00019431085092946887, 0.00015290761075448245, 0.00023056089412420988, 0.00013150843733455986, 0.00017076989752240479, 0.00018025115423370153, 0.00015882959996815771, 0.00015507922216784209, 0.00020803204097319394, 0.00017256324645131826, 0.0001747535279719159, 0.0002100311394315213, 0.00019245583098381758, 0.00017928807938005775, 0.00018134184938389808, 0.000156264693941921, 0.00015000127314124256, 0.00017215727712027729, 0.00019065452215727419, 0.00016853188571985811, 0.00022105523385107517, 0.00023178190167527646, 0.00019972714653704315, 0.00021203450160101056, 0.00015420440468005836, 0.00017161769210360944, 0.00014973105862736702, 0.00018341162649448961, 0.00017225397459696978, 0.00022382702445611358, 0.00013126645353622735, 0.00018896482652053237, 0.00016182883700821549, 0.00013222811685409397, 0.00018151337280869484, 0.0001846288942033425, 0.00017140635463874787, 0.00022836904099676758, 0.00016263351426459849, 0.00015089828229974955, 0.00017995719099417329, 0.00021458434639498591, 0.00027178364689461887, 0.00016810739180073142, 0.00019648236047942191, 0.00015412805078085512, 0.00015178235480561852, 0.00014943630958441645, 0.00015537743456661701, 0.00016762081941124052, 0.00017437268979847431, 0.00015389885811600834, 0.0001651572238188237, 0.00018683676898945123, 0.00018179939070250839, 0.00015815481310710311, 0.00014583887241315097, 0.00015499824075959623, 0.00013347374624572694, 0.00015179005276877433, 0.00015171573613770306, 0.00018538620497565717, 0.00015402716235257685, 0.00019519092165865004, 0.00017629768990445882, 0.00013679038966074586, 0.00016951427096500993, 0.0001548109867144376, 0.00019362528109923005, 0.00016604170377831906, 0.00014981719141360372, 0.0001239204138983041, 0.0001623967255000025, 0.00021425831073429435, 0.0001662738504819572, 0.00014951299817766994, 0.00019198242807760835, 0.00015765833086334169, 0.00016277551185339689, 0.00015125836944207549, 0.00014422736421693116, 0.00024652149295434356, 0.00017270198441110551, 0.00023961326223798096, 0.00018294433539267629, 0.00016263115685433149, 0.00017572703654877841, 0.00017396462499164045, 0.00020936658256687224, 0.00014632446982432157, 0.00016880639304872602, 0.00018274063768330961, 0.00021868989279028028, 0.00014460980310104787, 0.00019585699192248285, 0.00015418743714690208, 0.00020271961693651974, 0.00017385683895554394, 0.00017151182692032307, 0.00016115399193949997, 0.0001296690315939486, 0.00013011146802455187, 0.00018262134108226746, 0.00022065728262532502, 0.00015661274665035307, 0.00019280510605312884, 0.00019045907538384199, 0.00019595323828980327, 0.00018932718376163393, 0.00017071224283427, 0.00014356085739564151, 0.00019407953368499875, 0.00016277024406008422, 0.0001806919026421383, 0.00011976545647485182, 0.00017334950098302215, 0.00023191142827272415, 0.00016110939031932503, 0.0001302871824009344, 0.00021859633852727711, 0.00015157337475102395, 0.00020671448146458715, 0.00023386947577819228, 0.00015210792480502278, 0.00018772824842017144, 0.00014436575293075293, 0.00015811345656402409, 0.00023497063375543803, 0.00017727058730088174, 0.00016286855679936707, 0.00018946186173707247, 0.00013501239300239831, 0.00013219630636740476, 0.00015519231965299696, 0.00020199954451527447, 0.00015101672033779323, 0.00015162707131821662, 0.00023664849868509918, 0.00017474018386565149, 0.00014481309335678816, 0.00012901713489554822, 0.00014396043843589723, 0.00016367326315958053, 0.00016730795323383063, 0.00012990008690394461, 0.00014901260146871209, 0.000173340187757276, 0.00013561586092691869, 0.00026980994152836502, 0.00015292692114599049, 0.00017968218890018761, 0.00016915571177378297, 0.00014768759137950838, 0.00021970531088300049, 0.00015924319450277835, 0.0002280699263792485, 0.00019461447664070874, 0.00015531435201410204, 0.00012554255954455584, 0.00022486636589746922, 0.00012410225463099778, 0.0001675314997555688, 0.00018397948588244617, 0.00014307978563010693, 0.00015895033720880747, 0.00018834440561477095, 0.0001889534032670781, 0.00015206319221761078, 0.00020092600607313216, 0.00014003906107973307, 0.00014284237113315612, 0.00012298193178139627, 0.00019406476349104196, 0.00019671990594360977, 0.00016224528371822089, 0.00018012130749411881, 0.00015218318731058389, 0.0001979397056857124, 0.00012972656986676157, 0.00016616111679468304, 0.00015346283908002079, 0.00013582590327132493, 0.00016176501230802387, 0.00015192446880973876, 0.00012285608681850135, 0.00013656039664056152, 0.00013814408157486469, 0.0001482588704675436, 0.000191145358257927, 0.00021409908367786556, 0.00022086661192588508, 0.00017391394067090005, 0.00016143055108841509, 0.00022015545982867479, 0.00021585609647445381, 0.0001606672303751111, 0.00014323685900308192, 0.00017593716620467603, 0.00019009804236702621, 0.00014714863209519535, 0.00021830420882906765, 0.00021009641932323575, 0.0001482186489738524, 0.00017728884995449334, 0.00012588777462951839, 0.0001522129459772259, 0.00024062642478384078, 0.00013684631267096847, 0.00018873444059863687, 0.00015065021580085158, 0.00016169168520718813, 0.00018030776118393987, 0.0002055212389677763, 0.00026045565027743578, 0.00018637221364770085, 0.00017758153262548149, 0.00013763154856860638, 0.00012783252168446779, 0.00016964001406449825, 0.00019244314171373844, 0.00022336631081998348, 0.0001338812435278669, 0.00017850464791990817, 0.00011595615796977654, 0.00020425922411959618, 0.00019257761596236378, 0.00014982091670390218, 0.00019875422003678977, 0.00019292923389002681, 0.00017488723096903414, 0.00017579553241375834, 0.00013960627256892622, 0.00017281869077123702, 0.00026081260875798762, 0.00013525443500839174, 0.00015698581410106272, 0.00014855597692076117, 0.00023752977722324431, 0.0001430116972187534, 0.00019861260079778731, 0.00017100284458138049, 0.0001649494661251083, 0.00019669406174216419, 0.00016240360855590552, 0.00022962910588830709, 0.00017419403593521565, 0.00016293110093101859, 0.00018698845815379173, 0.00017033382027875632, 0.00022098352201282978, 0.0001693497906671837, 0.00021305093832779676, 0.0001767115609254688, 0.0002045479923253879, 0.00012862251605838537, 0.00014964060392230749, 0.00019856171275023371, 0.00013057125033810735, 0.0002167121710954234, 0.0001758977014105767, 0.00021145543723832816, 0.00015639385674148798, 0.00012900370347779244, 0.00021243648370727897, 0.00016437895828858018, 0.00020380856585688889, 0.00013667292660102248, 0.00015374855138361454, 0.0001462508225813508, 0.00017141054559033364, 0.00021489545179065317, 0.00020409803255461156, 0.00014512347115669399, 0.00013478346227202564, 0.00016958067135419697, 0.00022847077343612909, 0.00015171545965131372, 0.00022391782840713859, 0.00014512805500999093, 0.0001763936597853899, 0.00018733795150183141, 0.0001892596046673134, 0.00020219963334966451, 0.00016951130237430334, 0.00016803824109956622, 0.0001367318764096126, 0.00023191879154182971, 0.00018655086751095951, 0.0001579625386511907, 0.00013840934843756258, 0.00023632591182831675, 0.000164834811585024, 0.00022255607473198324, 0.00026627341867424548, 0.00016634634812362492, 0.00013934366870671511, 0.00019706806051544845, 0.00017063037375919521, 0.0001747709175106138, 0.0001462367654312402, 0.00020725264039356261, 0.00017072662012651563, 0.0001766212226357311, 0.00016267581668216735, 0.00016682178829796612, 0.00015410591731779277, 0.00018506008200347424, 0.00014637703134212643, 0.00017374698654748499, 0.0001225395972141996, 0.00016265932936221361, 0.0001841024641180411, 0.0001770379749359563, 0.00017695673159323633, 0.00013894966104999185, 0.00021739900694228709, 0.00016508104454260319, 0.00017311456031166017, 0.00023668941867072135, 0.0001981607056222856, 0.00022672489285469055, 0.00015188210818450898, 0.00015332471230067313, 0.00015346061263699085, 0.00018427347822580487, 0.00019511906430125237, 0.00016366566705983132, 0.00020020370720885694, 0.00013508200936485082, 0.00014147574256639928, 0.00013398207374848425, 0.00011841356172226369, 0.00014543122961185873, 0.00014303947682492435, 0.00023459560179617256, 0.00017554838268551975, 0.00020185692119412124, 0.0001507099368609488, 0.00023753939603921026, 0.00016794133989606053, 0.00013786941417492926, 0.00017968939209822565, 0.00021336533245630562, 0.00020527992455754429, 0.00014727535017300397, 0.00022584988619200885, 0.00020977597159799188, 0.00018665353127289563, 0.00024628706160001457, 0.00017648890207055956, 0.00017299879982601851, 0.00019936964963562787, 0.00015393398643936962, 0.00015423455624841154, 0.00016964292444754392, 0.0001472700823796913, 0.00014890595048200339, 0.00021080170699860901, 0.00018338885274715722, 0.00014995018136687577, 0.0001682642032392323, 0.00018337297660764307, 0.00014872910105623305, 0.00013575676712207496, 0.00017056179058272392, 0.00024194813158828765, 0.00016239102114923298, 0.00014406743866857141, 0.00017994355584960431, 0.00016699734260328114, 0.00014074204955250025, 0.00018007757898885757, 0.00021461406140588224, 0.00015888134657870978, 0.0001631044433452189, 0.00012237956980243325, 0.00020306483202148229, 0.00019082750077359378, 0.00015094512491486967, 0.0001698844280326739, 0.00016322884766850621, 0.00021467213809955865, 0.00019102556689176708, 0.00021856381499674171, 0.00022817855642642826, 0.00016701534332241863, 0.00016197045624721795, 0.00014827663835603744, 0.00013707524340134114, 0.00020017217320855707, 0.00013396564463619143, 0.00014012570318300277, 0.00018824725702870637, 0.00016946867981459945, 0.00021769409067928791, 0.00018674794409889728, 0.00015040597645565867, 0.00014432678290177137, 0.00017342520004604012, 0.00020245538325980306, 0.00016401021275669336, 0.00022015740978531539, 0.00015846750466153026, 0.0002111659268848598, 0.00017921725520864129, 0.00018003818695433438, 0.00013444221985992044, 0.00015141541371122003, 0.00016292073996737599, 0.00015325979620683938, 0.00018980453023687005, 0.00014755483425687999, 0.00015730138693470508, 0.00020928203593939543, 0.00014565177843905985, 0.00019503725343383849, 0.00018259506032336503, 0.00018363333947490901, 0.0001525726547697559, 0.00016472449351567775, 0.00017553455836605281, 0.00015382417768705636, 0.0001627119054319337, 0.00024501595180481672, 0.00018453413213137537, 0.00019254058133810759, 0.00026374578010290861, 0.00015528989024460316, 0.00020078742818441242, 0.00016856689762789756, 0.00014679312880616635, 0.00018189918773714453, 0.00015849711780901998, 0.00017840207146946341, 0.00015050872752908617, 0.00018982631445396692, 0.00021100086451042444, 0.00017222051974385977, 0.00016033195424824953, 0.00017263162590097636, 0.00018075050320476294, 0.00023584427253808826, 0.00020802405197173357, 0.00012887539924122393, 0.0002399254881311208, 0.00015354852075688541, 0.00017395657778251916, 0.00016113356105051935, 0.00012443387822713703, 0.00023067377333063632, 0.00011636511771939695, 0.00017725606448948383, 0.00016732203948777169, 0.00018056193948723376, 0.00013541102816816419, 0.00019450549734756351, 0.00019329934730194509, 0.00019595753110479563, 0.00013890309492126107, 0.00022608763538300991, 0.00015850720228627324, 0.00020516011863946915, 0.00013899526675231755, 0.00019648420857265592, 0.00012575778237078339, 0.00018185516819357872, 0.00022161318338476121, 0.00013747815683018416, 0.00021321905660443008, 0.00014120740524958819, 0.00017449955339543521, 0.00013618344382848591, 0.00015564775094389915, 0.0001979444787139073, 0.00021179563191253692, 0.00015187614189926535, 0.0001616695080883801, 0.0001265443570446223, 0.00018770803580991924, 0.00017634975665714592, 0.00014216630370356143, 0.00013624697749037296, 0.0001773480762494728, 0.00018788849411066622, 0.00018634955631569028, 0.00023093570780474693, 0.00025683356216177344, 0.00019172202155459672, 0.00015231993165798485, 0.00017046376888174564, 0.0001304768375121057, 0.00018636089225765318, 0.00019964524835813791, 0.00014286547957453877, 0.00015571212861686945, 0.00016956566832959652, 0.00019275289378128946, 0.00016035605221986771, 0.00012709657312370837, 0.00018886923498939723, 0.0001378913875669241, 0.00020126225717831403, 0.0001870910928118974, 0.00018893858941737562, 0.00014127552276477218, 0.00016118331404868513, 0.00016991900338325649, 0.00013332285743672401, 0.00019122401135973632, 0.00017427802958991379, 0.00021087276400066912, 0.0001502290106145665, 0.00013975726324133575, 0.00021159832249395549, 0.00022910983534529805, 0.00017217863933183253, 0.00018916233966592699, 0.00021103133622091264, 0.00013971693988423795, 0.0001186530280392617, 0.00014008489961270243, 0.00012916693231090903, 0.00016336770204361528, 0.00017204652249347419, 0.00018791441107168794, 0.00013437653251457959, 0.00016250328917521983, 0.00016133680765051395, 0.00016872974811121821, 0.00015060199075378478, 0.00013288378249853849, 0.00015939025615807623, 0.00016982259694486856, 0.00020977215899620205, 0.00016779868747107685, 0.00014089939941186458, 0.00020767599926330149, 0.00011336187162669376, 0.00017119172844104469, 0.00016205754945985973, 0.00014502393605653197, 0.00015916943084448576, 0.00011807912233052775, 0.00022183131659403443, 0.00013293750816956162, 0.0001504922256572172, 0.00015708092541899532, 0.00018147265654988587, 0.00022720453853253275, 0.00017404033860657364, 0.00017880515952128917, 0.0001853521098382771, 0.00014975872181821615, 0.00022250943584367633, 0.00018692063167691231, 0.00018492834351491183, 0.00017208736971952021, 0.00017255973943974823, 0.00013742958253715187, 0.00016186507127713412, 0.00013202574336901307, 0.00020340464834589511, 0.00012668484123423696, 0.00028405981720425189, 0.00022442927001975477, 0.0001902686053654179, 0.00015336264914367348, 0.00019025991787202656, 0.00014528032625094056, 0.00014087525778450072, 0.00012836496171075851, 0.00021291842858772725, 0.00016663674614392221, 0.00018114369595423341, 0.00018516431737225503, 0.00013532314915210009, 0.00021152182307559997, 0.00016534874157514423, 0.00022457499289885163, 0.00018004568119067699, 0.00015098400763235986, 0.00019286005408503115, 0.00014720715989824384, 0.00013288862828630954, 0.00016231989138759673, 0.00018004039884544909, 0.00015934251132421196, 0.00014643672329839319, 0.00023793686705175787, 0.00023409532150253654, 0.00022600420925300568, 0.00017317652236670256, 0.00014369614655151963, 0.00019476879970170557, 0.00013619335368275642, 0.00016348472854588181, 0.00014283762720879167, 0.00017866736743599176, 0.00014912651386111975, 0.00024824688443914056, 0.00018023271695710719, 0.00017058123194146901, 0.00017018744256347418, 0.00024282430240418762, 0.00014543488214258105, 0.00020222627790644765, 0.00016058243636507541, 0.00019483361393213272, 0.00018789224850479513, 0.00017475902859587222, 0.00015844484732951969, 0.00023347436217591166, 0.00019212948973290622, 0.00017381785437464714, 0.00016015201981645077, 0.0001475009776186198, 0.00021501048468053341, 0.00022436797735281289, 0.00015305684064514935, 0.00016657757805660367, 0.00018114759586751461, 0.00014720953186042607, 0.00014791815192438662, 0.00025111142895184457, 0.00014242173347156495, 0.00016829578089527786, 0.0001677468535490334, 0.00013470656995195895, 0.00013247338938526809, 0.00016410411626566201, 0.0001303650060435757, 0.00024513338576070964, 0.00015217895270325243, 0.00021855083468835801, 0.00014775375893805176, 0.00016203716222662479, 0.00011798608466051519, 0.00015093524416442961, 0.00018157616432290524, 0.00012455614341888577, 0.00018900650320574641, 0.00013966771075502038, 0.00020291171676944941, 0.00017765576194506139, 0.00015615671873092651, 0.00015493007958866656, 0.0001381854381179437, 0.00012868468184024096, 0.0001533579925308004, 0.00015178024477791041, 0.00020379605120979249, 0.00020162970758974552, 0.00015713054744992405, 0.00016354846593458205, 0.00018455377721693367, 0.00020939638488925993, 0.00018400030967313796, 0.00017912941984832287, 0.00013853880227543414, 0.00017877391655929387, 0.00018950781668536365, 0.00020493686315603554, 0.00017674014088697731, 0.00018926100165117532, 0.00020277233852539212, 0.00010713560186559334, 0.00014811183791607618, 0.00017390902212355286, 0.00011608060594880953, 0.00013527458941098303, 0.00014021192328073084, 0.00015442047151736915, 0.00014673033729195595, 0.0001521928352303803, 0.00012034091196255758, 0.00014489747991319746, 0.00015394872752949595, 0.00024752740864641964, 0.00017827698320616037, 0.00021065417968202382, 0.00020636749104596674, 0.0001925874239532277, 0.00012400430568959564, 0.00012922669702675194, 0.00017748639220371842, 0.00019267652533017099, 0.00013278887490741909, 0.00019335118122398853, 0.00016618969675619155, 0.00019912865536753088, 0.00012732548930216581, 0.00020535991643555462, 0.00021163059864193201, 0.000188271384104155, 0.00013004249194636941, 0.00018118800653610379, 0.0001458596671000123, 0.00016470268019475043, 0.00015150317631196231, 0.00016078889893833548, 0.00014640059089288116, 0.0001583320990903303, 0.0001823869242798537, 0.00014650760567747056, 0.00017385452520102262, 0.0002207170327892527, 0.00016611746104899794, 0.00016643202980048954, 0.00021573145932052284, 0.00013737540575675666, 0.00013802813191432506, 0.00020787664107047021, 0.00015738392539788038, 0.00012663881352636963, 0.00021563749760389328, 0.00016927375691011548, 0.00014928648306522518, 0.00017204154573846608, 0.0001937082561198622, 0.00019450293621048331, 0.00021117276628501713, 0.00019030747353099287, 0.00019363505998626351, 0.00017856496560852975, 0.00019025389337912202, 0.00015643073129467666, 0.00019278888066764921, 0.00017802280490286648, 0.0001832439738791436, 0.00016986449190881103, 0.00013380023301579058, 0.00014841939264442772, 0.00016350716759916395, 0.00017093823407776654, 0.00018102180911228061, 0.00014452690083999187, 0.00018265895778313279, 0.00015920359874144197, 9.4307404651772231e-05, 0.00022861053002998233, 0.00014356507745105773, 0.00015223787340801209, 0.00015091257228050381, 0.00016593233158346266, 0.00012382882414385676, 0.00019283972505945712, 0.00015503805479966104, 0.00011977679241681471, 0.00016263069119304419, 0.00012772911577485502, 0.00017690403910819441, 0.0001771374954842031, 0.00015312267350964248, 0.00013931315334048122, 0.00010201540135312825, 0.00015953955880831927, 0.00021896058751735836, 0.00018392637139186263, 0.00014901939721312374, 0.00020094471983611584, 0.0001894310989882797, 0.00013090689026284963, 0.00016968930140137672, 0.00012552218686323613, 0.00018011347856372595, 0.00016736783436499536, 0.00019695608352776617, 0.00020160387794021517, 0.00017064074927475303, 0.00014584875316359103, 0.00015729301958344877, 0.00016144613618962467, 0.00015420584531966597, 0.00014178521814756095, 0.0001976031344383955, 0.00019201924442313612, 0.00019047633395530283, 0.00012677443737629801, 0.00015719055954832584, 0.00023534335196018219, 0.00016063635121099651, 0.0001714439713396132, 0.00016666429291944951, 0.00020170483912806958, 0.00023951315961312503, 0.00020068742742296308, 0.00016045330266933888, 0.00016055954620242119, 0.00019630634051281959, 0.0001821025216486305, 0.00014266403741203249, 0.00013460207264870405, 0.00015705144323874265, 0.00017345072410535067, 0.00018334703054279089, 0.00020998672698624432, 0.00016138856881298125, 0.00017147907055914402, 0.00023136094387155026, 0.00024040800053626299, 0.00013674619549419731, 0.00020649482030421495, 0.00017409143038094044, 0.00015845501911826432, 0.00013888087414670736, 0.00014427908172365278, 0.00019482405332382768, 0.00026193947996944189, 0.00014199489669408649, 0.00013919416232965887, 0.00010634250065777451, 0.00021352306066546589, 0.00017493464110884815, 0.00016988198331091553, 0.00019091360445600003, 0.00015923287719488144, 0.00011619331053225324, 0.00014941676636226475, 0.00015060431906022131, 0.00021627254318445921, 0.00018358610395807773, 0.00021104582992848009, 0.00018841002020053566, 0.00018749131413642317, 0.00015485426411032677, 0.00013312193914316595, 0.00018256173643749207, 0.00015584980428684503, 0.00022241105034481734, 0.00020658524590544403, 0.00018644088413566351, 0.00012186118692625314, 0.00018897118570748717, 0.00020292625413276255, 0.00020591421343851835, 0.00016181613318622112, 0.00018595995788928121, 0.00019293563673272729, 0.00023213049280457199, 0.00017744497745297849, 0.000199333910131827, 0.00018070153601001948, 0.00012224959209561348, 0.00012605210940819234, 0.00012691646406892687, 0.00017001708329189569, 0.00012440590944606811, 0.00018977551371790469, 0.00021841176203452051, 0.00018948201613966376, 0.00017796970496419817, 0.00014702511543873698, 0.00014483850100077689, 0.00025097382604144514, 0.00020212253730278462, 0.00015180038462858647, 0.00017968464817386121, 0.00017746102821547538, 0.00012475209950935096, 0.00017682391626294702, 0.0001758552243700251, 0.00015007416368462145, 0.00015181479102466255, 0.00014628213830292225, 0.00018300735973753035, 0.0001344570773653686, 0.00013118497736286372, 0.00019512735889293253, 0.00018525922496337444, 0.00017416154150851071, 0.00017695514543447644, 0.00023458893701899797, 0.00014664471382275224, 0.00016017832967918366, 0.00012778346717823297, 0.00013808641233481467, 0.00016012844571378082, 0.00019329719361849129, 0.00017998610564973205, 0.00018335002823732793, 0.00014768462278880179, 0.00013052580470684916, 0.00015888980124145746, 0.00016420133761130273, 0.0001925081160152331, 0.00014721271872986108, 0.0001647320605115965, 0.0001602062548045069, 0.00013399381714407355, 0.00011816026380984113, 0.00020016959751956165, 0.00024873076472431421, 0.00018390505283605307, 0.00014923323760740459, 0.00022134507889859378, 0.00021588525851257145, 0.00014475405623670667, 0.0001748835202306509, 0.00013669957115780562, 0.0001712144585326314, 0.00013785318878944963, 0.00014652921527158469, 0.00013519109052140266, 0.00015386250743176788, 0.0001586431753821671, 0.00019970750145148486, 0.00016401520406361669, 0.00013460722402669489, 0.00012960977619513869, 0.00014284651842899621, 0.00018160026229452342, 0.00014003155229147524, 0.00021240393107291311, 0.00015756546054035425, 0.00017295619181822985, 0.00017953463247977197, 0.00014256169379223138, 0.00018695779726840556, 0.000195145039469935, 0.00019086356041952968, 0.00017829918942879885, 0.00020510076137725264, 0.00017516837397124618, 0.0001683131413301453, 0.00022653816267848015, 0.00013568298891186714, 0.00019285998132545501, 0.0002149128558812663, 0.00017954238865058869, 0.00016864850476849824, 0.00015704512770753354, 0.00016904941003303975, 0.00018087586795445532, 0.00014429248403757811, 0.00013885888620279729, 0.00014013353211339563, 0.0001972768222913146, 0.00019654903735499829, 0.00016037367458920926, 0.00011965424346271902, 0.00019627719302661717, 0.00012294611951801926, 0.00016318158304784447, 0.00019346334738656878, 0.00015941717720124871, 0.00019171528401784599, 0.00014782676589675248, 0.0002123162557836622, 0.00019242806592956185, 0.0001716117694741115, 0.00014603081217501312, 0.00017734523862600327, 0.00015072505630087107, 0.00017496060172561556, 0.00016188524023164064, 0.00013439808390103281, 0.0001554463233333081, 0.00018929204088635743, 0.00018471656949259341, 0.0001824562787078321, 0.00017949544417206198, 0.00012688676360994577, 0.00014042806287761778, 0.00019838854495901614, 0.00016434019198641181, 0.00024914828827604651, 0.00014674477279186249, 0.00017119961557909846, 0.00015011674258857965, 0.00022340416035149246, 0.00017179579299408942, 0.00017885993293020874, 0.00017824352835305035, 0.00018320573144592345, 0.00022141607769299299, 0.00015445436292793602, 0.00011806265683844686, 0.0001814716961234808, 0.00019027291273232549, 0.00021725472470279783, 0.00013830223178956658, 0.00020197515550535172, 0.00014203220780473202, 0.00014535494847223163, 0.0001952108577825129, 0.00018323850235901773, 0.0002096826647175476, 0.00019745514146052301, 0.00014743450446985662, 0.00012873177183791995, 0.00016540073556825519, 0.00017034754273481667, 0.00015405098383780569, 0.00023092131596058607, 0.00027291578589938581, 0.00015723824617452919, 0.00013035508163738996, 0.00018214063311461359, 0.00019981554942205548, 0.00016470918490085751, 0.0002192982065025717, 0.00013933988520875573, 0.00017206319898832589, 0.00018667259428184479, 0.00017684804333839566, 0.00016873991989996284, 0.00017624405154492706, 0.00018905247270595282, 0.0001613105705473572, 0.00017593501252122223, 0.00013534256140701473, 0.00016577042697463185, 0.00014972075587138534, 0.00013816433784086257, 0.00021002213179599494, 0.00015992464614100754, 0.00015478553541470319, 0.00020764608052559197, 0.000170055718626827, 0.00016384293849114329, 0.00015921982412692159, 0.00016722781583666801, 0.00019058608449995518, 0.0001621595147298649, 0.00018335878849029541, 0.0001899892813526094, 0.00024723968817852437, 0.00014793580339755863, 0.00019608526781667024, 0.00021444463345687836, 0.00015650512068532407, 0.00011925963190151379, 0.00018552377878222615, 0.00017645340994931757, 0.00020877771021332592, 0.00019760454597417265, 0.00016912541468627751, 0.00020216437405906618, 0.00015131487452890724, 0.00020977217354811728, 0.00014495375216938555, 0.00019816687563434243, 0.00015173050633165985, 0.00019256687664892524, 0.00016456136654596776, 0.00022603225079365075, 0.00015542848268523812, 0.00017592927906662226, 0.00014818190538790077, 0.00021334497432690114, 0.0001765561755746603, 0.00015976565191522241, 0.00016720878193154931, 0.00015314981283154339, 0.00017067795852199197, 0.0001718869898468256, 0.00017780413327272981, 0.00018268931307829916, 0.00014608573110308498, 0.00012920651352033019, 0.00017896074859891087, 0.00020411211880855262, 0.00017042242689058185, 0.00016007419617380947, 0.00016267398314084858, 0.00025281385751441121, 0.00016526355466339737, 0.00016631487233098596, 0.0001608331804163754, } };
const TfArray<1280, int> quant29_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[10*1280] = { 
  8, -76, 4, -67, -42, -91, 116, -5, -84, 3, -1, 58, 99, -35, 12, -80, 23, 78, 28, 84, -29, -90, -97, -82, 102, -26, 28, -3, -12, -40, 2, -12, -90, 73, 30, 14, -99, -82, 79, 36, -29, -30, 71, 103, 7, -72, -33, -30, 61, 7, -69, -91, 21, 17, -66, 85, 83, 14, -29, -9, -57, 33, 111, 80, -25, -3, 68, -4, 60, 59, 57, 57, -81, 74, -40, -39, 22, -66, -6, -98, -88, 83, 108, 57, 21, 38, 62, -93, 27, 52, 22, 79, 78, -17, -72, -83, 55, -5, -49, 6, -1, -103, 45, -73, -56, -22, 32, 79, -33, 54, -9, 28, -65, -89, -37, 8, -92, 37, 20, -46, 72, 80, -95, -85, -87, 75, 67, -70, -85, 66, 83, 1, 21, 34, -12, 74, 64, -14, -97, 28, 53, -57, 37, 64, -4, 42, 32, 112, -15, 75, -10, -43, -46, 24, 88, -104, -75, -43, 83, -8, -77, 89, 102, -74, -29, -96, 13, -67, -24, 96, -100, -93, 66, 14, 83, -34, 56, 61, -78, -107, 4, 69, 80, -11, 93, 15, 79, -44, -14, 99, -93, 88, -10, 76, -16, -43, -6, -15, -42, 75, 13, -70, 77, 25, -18, 106, -79, 88, -110, 97, 101, 76, 12, -80, 93, 23, -48, -12, 20, -99, 69, 30, -106, 100, -5, 67, -57, 100, 45, 89, 101, 60, 75, -88, -12, -57, -101, -21, -29, -78, 105, 57, 112, 17, 90, 12, 64, 40, -58, 30, -32, 61, -20, -75, -49, -31, -87, -2, 11, 43, 81, -31, 62, -26, 1, -33, 15, 41, -30, -54, 55, 43, -62, 74, 20, -58, -10, 77, -69, 93, -90, -75, -19, 45, -81, 61, -69, 102, 35, -39, -87, 45, 70, 116, -65, -63, 47, -32, -22, -90, -57, 89, -97, 96, 50, -4, 51, -54, 27, 102, -57, -32, 68, -10, 36, 94, 57, 86, -86, -49, -75, 107, -45, -77, 48, -16, 14, -89, 87, -93, -56, 12, 93, -114, -57, -96, -7, -44, -56, 94, -14, 90, -69, -32, -3, -69, 7, -2, -58, -104, -93, 23, 26, -84, 62, -58, -45, 49, -26, -9, 37, 16, 42, -30, 31, -21, -79, 33, 37, 34, 100, -80, 72, -43, 78, -83, 92, -89, -33, -99, 91, 74, 14, 5, -82, 34, -68, -37, 106, -93, -44, -67, 72, -52, -9, 52, -78, -36, -57, 101, -87, 51, -71, -119, 13, -107, 41, -23, 65, 58, 59, -82, -17, -50, -41, -18, 85, -7, -61, 102, -24, -104, 48, 23, 96, -34, 50, -35, -23, 57, 11, 49, -18, -36, 80, -9, -66, 65, -43, 41, -14, 102, -82, -36, -68, -88, 47, -25, 8, -31, -89, 107, 60, -56, 12, 97, 1, -8, -34, 7, 83, -50, -59, 17, 24, 34, 70, -31, 9, -91, 10, 1, -2, 61, -1, 21, -53, -39, -93, 18, 53, 52, -76, -48, -34, 13, -25, -88, -14, -87, 98, 74, 98, 88, -62, -73, 52, -74, 38, -25, -55, -38, -80, -67, 25, -19, -25, 8, -90, 21, 60, 50, 58, 60, 61, -14, 10, 101, 49, 72, -94, 65, 92, 59, 21, -45, 60, 69, 56, -59, 66, 60, 105, 50, -88, 94, -11, 91, 26, 103, 73, -93, 104, 88, 81, 51, 30, -61, 93, -63, -58, -77, -84, -2, -86, -94, -61, 15, -4, -72, 83, -64, -29, -11, 88, -63, -24, 38, 91, -85, 4, -17, -88, 6, -33, -57, 69, -38, -8, -29, -50, 75, -35, -22, 33, -102, -14, 6, -46, 36, 1, 35, 8, 85, 20, -85, 37, 78, -66, 10, -65, 100, 72, 62, -75, 86, 86, -93, -64, -51, -1, 34, -90, -71, -97, 84, -42, 21, -9, -42, 16, 65, -72, 6, 74, -15, 10, -27, 25, 75, 9, -67, 110, -83, -88, -45, 18, -89, 66, 83, 79, -33, 61, -100, -31, 51, -79, -7, 29, -11, -22, 68, -50, 31, -34, 35, -56, 4, -107, 49, 31, 28, 84, 41, 5, 52, -75, -36, -55, -89, -14, 7, 111, 68, -35, 71, 79, 2, 64, 20, 96, -64, -52, 13, 95, 71, 81, 94, -50, -9, -118, -68, -16, -57, 100, -101, 23, 80, 53, 55, 48, -26, 86, -32, -59, 68, -18, 65, 64, 36, -64, 70, -83, -44, -54, 79, 9, -44, 29, 93, 53, -61, 47, 112, 59, 76, 43, -79, 74, 73, -30, 79, -37, 102, -10, -50, 49, 35, 52, -54, -77, 101, -81, -33, -31, 81, -11, -19, 64, 42, 11, 71, -38, -43, 8, -71, 68, 15, -5, 64, -78, -49, -14, -94, -86, -38, -75, -84, -68, -7, -88, -78, 63, -82, 55, 88, -73, 74, 94, 15, 15, 59, -45, 93, -81, 6, 76, -83, -3, 36, 66, 71, -69, 109, -27, 95, -60, 79, -17, -83, -103, -85, 48, 27, -41, 44, -25, 18, 34, 86, -51, -64, 18, -38, -50, 84, -90, 62, -100, 50, -84, 36, -29, -80, -86, 86, 49, -97, 11, 35, 30, 85, 30, -72, 83, -27, 0, 24, -83, 47, 19, -84, 18, 82, 71, 26, -50, 3, 3, 38, -46, -49, 42, -34, -51, 78, 56, 52, 6, 39, 92, 15, -25, -66, 60, 85, -90, 11, -35, 40, 32, 11, -92, -35, -91, -90, 106, -77, 7, 53, 49, 46, -64, 76, -25, 54, 16, 19, 52, 74, 87, -114, 44, -79, -41, -41, -11, 90, -1, -2, 46, -15, -101, 91, 104, 85, -28, -23, 53, -96, -23, -46, -72, -34, -67, 79, -23, 42, -14, 19, -63, 98, -69, -81, 33, -96, 90, -20, 76, 38, 102, 53, 112, 58, 71, 82, -76, -40, -72, -59, -40, -10, 21, 73, -6, -105, 38, 9, -61, 108, 20, -11, -73, 23, 30, 17, -44, 75, -31, -49, 112, -72, -39, 20, -100, -13, -48, 90, -65, 13, -66, -34, -4, -79, -16, 107, 64, -101, -3, 10, -39, 77, 70, 81, 42, -27, -12, 28, 7, 90, -18, 63, -20, 72, 30, -78, -60, 97, -83, 24, -63, -17, -79, 82, 13, -25, -25, 56, -90, -20, 54, -106, 40, -68, -20, 42, -68, 38, -95, 76, -79, 105, 10, -1, -64, -72, -47, 93, -24, -91, -39, -99, 69, 84, -28, -50, 72, -19, -67, -4, 25, -110, 8, -49, -5, 100, -21, 54, -85, 61, 23, 83, -40, 8, -114, 72, -10, -23, 12, -53, 106, -48, 65, 90, 16, 7, 110, 0, 68, -14, -64, -22, -31, 82, 104, -44, 24, -61, 19, -15, -12, 64, -14, 32, -24, -30, -66, 10, 91, 51, 64, 65, -95, -69, -76, -15, -35, -35, -79, 70, -17, -5, 62, -100, -49, -1, 65, 46, -19, 73, 76, 35, -45, -69, -11, 7, -17, -3, 37, 35, -40, -57, -116, 95, 91, -12, 47, -16, -73, 35, 39, -85, -37, 6, 79, 7, 76, -96, -92, 93, -46, -4, 75, -102, 53, -44, -78, -81, 6, 87, 7, 29, 28, -51, 89, -14, 40, 59, 106, -82, -13, -20, 53, -13, -29, 38, 14, 51, -59, 88, 83, 75, -10, -66, 61, 67, -57, -16, 51, 30, -109, 78, 111, 64, 21, 1, 92, -47, -87, 32, 32, -9, -40, 27, 67, 40, 41, 85, 17, -42, 35, 85, -63, 2, 25, -72, -35, -62, -82, -42, -22, 41, 17, 102, -30, 12, 108, -52, 105, -116, -26, -41, 1, 19, 29, -80, 98, -11, -89, 13, 26, -71, -64, 98, 76, 17, -60, -76, 14, 92, 85, -10, -11, 48, -4, 16, 75, -104, 56, -91, -19, 28, 48, 46, -4, -67, 41, -96, 20, -24, 62, 18, 81, -8, -63, 22, -88, 79, -37, -106, -38, 20, 71, 14, 67, 35, 67, 72, 88, 63, 
  65, 84, 65, 48, -16, 60, -13, -54, -107, -95, -57, -71, 77, 95, 105, -75, -53, -15, -35, -1, 66, -61, 32, -35, 98, -11, -6, -100, -15, 32, -89, -97, -53, 31, 40, 53, 45, -36, -65, -36, -21, -106, 13, -38, 70, 88, 32, 44, -60, -55, -69, 23, 6, 25, 96, 13, 60, -108, 99, -98, -69, 92, 87, 11, 96, -41, -25, -12, 79, -59, -49, -4, -58, 84, 85, -23, 92, 107, 67, 52, 3, 85, 36, 91, -36, 31, -74, 105, -83, 59, -14, -25, 60, 40, -84, 65, -14, -1, 96, 48, 40, -91, 20, -93, 57, 105, 56, 95, -68, 25, 18, 98, -78, -53, 106, 90, -12, -83, -26, 0, -49, 56, -59, -26, -94, -34, 43, -64, 10, 39, 13, 4, 88, 36, -35, -53, -15, -11, -44, -43, 17, -58, 57, -88, 9, 45, 101, 80, 34, -103, -91, -52, -85, -46, 31, 13, -31, 106, 77, 86, -3, -46, 0, -43, -57, -15, 31, -27, -64, 109, -47, 4, -15, 96, 11, 49, -89, -78, -44, -1, -6, 45, 30, -90, 64, -35, -72, 80, 96, -83, -48, -21, 65, -32, 12, -2, -51, 43, 91, -30, 69, -101, 66, -48, 30, 2, -74, 101, -27, -18, 57, -71, 74, -59, -90, -94, 66, -72, 96, -22, 6, -33, -52, 105, 38, -55, 3, 98, 18, 13, -33, -101, -26, 12, 77, 31, 56, -42, 103, 29, 19, -81, 4, 64, 92, 1, -40, -50, -52, 9, 24, -87, 23, -60, -37, -7, -63, -85, -45, -13, -36, -49, -28, 0, 81, 85, -28, -41, 36, 78, 97, -37, 25, -59, -70, 76, -68, 55, -52, -72, 86, -23, 62, 67, -104, -86, -45, -56, 68, -24, -48, 28, 26, 25, -45, 41, -76, 93, 92, -53, 64, 39, -34, -66, 22, 20, -17, 69, 5, -25, -13, -47, 106, 85, -37, 18, 28, -93, -6, -11, -40, 54, 62, -75, -64, -64, -54, 73, -76, 45, 24, 75, 26, 61, 56, -86, -105, 73, 45, 104, 35, 107, -76, 34, 91, -16, 99, 91, 33, 21, 52, -72, 23, -70, -17, -52, 69, 42, -86, -15, -103, -30, 29, 58, -110, -82, 95, 56, 111, -40, -58, 68, -82, -111, 46, 107, 52, 23, -7, 94, 106, 3, -5, -67, -79, -9, 74, 67, -62, 121, -38, 12, 67, -30, 93, -43, -66, -77, -95, 93, -45, 8, -14, 23, 82, 36, -81, 91, 6, 92, 36, 108, -76, -71, 23, 9, 105, -46, -94, 9, -106, -79, 87, 24, -58, -63, -88, 70, -30, -51, 92, -32, -61, 17, 77, -29, 57, -87, 4, 57, 5, 52, -84, 29, -66, 67, -79, 71, 1, 66, 34, 72, -15, -98, 41, -31, -6, -114, 100, 14, -51, -7, -47, 17, 91, 42, -59, -68, 11, 79, 95, 63, -87, -35, -2, 10, 40, -66, 2, -5, -70, 85, -30, 50, -36, 0, 49, -110, -33, -60, 15, 62, -46, 29, 89, 12, -73, 68, -100, 75, 116, -68, -37, 22, 81, -51, 35, 38, 16, 64, 109, 76, 23, -55, 64, 79, 5, -52, 83, -32, 61, 44, 63, 82, 75, 110, 15, 14, -85, 76, 52, 56, -90, 91, -82, 50, 55, -39, -62, 43, 58, 95, 107, 48, -34, 76, -10, 73, 43, 59, -15, -95, -107, 15, -70, 83, -87, 29, -85, 32, -24, -99, 86, -33, -29, 82, 10, 24, 76, -52, 25, 17, -50, -104, 107, 2, 11, -95, -25, -80, -27, -42, -26, 41, -78, 22, 9, -59, 20, -73, 49, -18, -56, -22, 36, 27, -97, -84, 34, -43, 82, -58, -8, -77, -90, 92, 50, -103, -70, 70, -17, -32, 11, 87, -68, -47, 86, 91, 13, 52, 34, -76, -19, -59, -10, 15, -82, 85, -22, -49, 38, 2, 91, 29, -38, 59, -105, 102, 86, -97, 24, 92, -83, -67, 69, -52, -19, -107, 23, 15, 40, 43, 66, -11, 19, -44, -15, 78, 64, -101, -66, -25, -62, 77, -59, -81, 21, -71, -86, 97, -84, -41, 103, -44, 13, 62, -58, -25, 98, -84, 68, 73, -41, -42, 117, 107, 55, -98, 60, -60, 33, -33, 19, -104, -18, -51, 60, 33, -53, 12, 88, -55, 51, -6, 70, -80, -94, -24, -46, -17, -7, -94, 101, 51, 64, -41, -4, 43, 51, 51, -80, -28, -52, -96, -29, 49, -41, -36, 36, 66, 68, 33, -12, 81, 20, -60, -96, -60, -24, 81, -39, -33, 8, -83, -40, -77, 72, -93, -46, 44, 12, 78, 50, -86, -54, -23, -65, -93, -57, 32, -90, -10, -64, -63, 80, 83, -32, -33, 87, -85, -82, -42, -30, -28, -53, -23, -8, -67, -41, -85, 80, 65, -3, -8, 65, 48, 39, -68, 59, 47, 27, -35, 103, -3, 104, 27, -23, -82, 75, 26, 29, -27, 14, 27, 50, -35, 85, 14, -58, -31, 85, -32, -62, 69, 19, 33, 89, 57, -87, 115, 71, -56, 90, 35, -13, 60, -26, -62, 32, -83, -21, 61, -60, -1, -38, -86, -95, 4, -24, 55, -106, 42, 58, 36, 75, 73, -71, 82, 1, 45, -15, 79, 40, 79, 11, 96, 18, -69, 90, -38, -63, 5, -11, -72, -24, 0, 85, -19, -56, -43, 71, -7, 14, 76, -50, 28, -20, -70, -50, 105, 42, -89, -101, -42, 32, 74, -35, -31, -57, -22, 37, -44, -82, 58, -91, -40, -40, 100, -40, 10, 89, 91, 70, 57, 45, -95, -74, -91, -45, 24, -98, -16, 61, 59, 29, -1, -87, -1, 12, -62, 38, 37, 77, 22, -13, 19, 101, -44, -2, 4, -35, 6, -8, -34, -53, 3, 30, 80, -22, 88, 83, -3, -101, -92, 22, 62, -103, -103, -28, -16, -31, 27, -50, -110, -75, 35, 109, -25, 3, -99, 47, 39, -82, 65, 4, 51, 42, 77, -37, 74, 78, 13, -29, 16, 33, 20, 2, 9, -52, -60, 75, -4, 5, 94, 23, 30, -59, -58, 36, 103, 11, 55, -74, 10, -96, -53, -48, -18, 92, -55, 91, 60, 26, 86, -26, 67, -16, 72, 8, 22, -32, 33, -42, 64, -106, -41, -48, 64, 29, -29, 44, 11, -77, 13, -80, 32, 48, 49, -88, -47, 5, 62, -97, -109, 73, -90, -49, 22, 36, -95, 60, -92, 32, -61, -24, -42, -47, 64, 40, 44, 29, -43, 66, -37, -28, 46, -62, 73, -84, -88, 24, 25, 87, -12, 106, -64, 49, 96, -98, -44, -14, 50, 80, -56, 52, 91, 91, -85, -33, 47, -87, -91, 77, -55, -51, -21, -30, -77, 89, -6, 47, 30, 43, -10, 18, -87, 64, -84, -70, -76, -11, -48, 75, -15, 72, 58, -9, 20, -49, 74, 94, -89, -60, 90, 40, -102, -15, 39, 42, 127, -97, -1, 22, -7, -83, -31, 20, -39, -54, 70, -68, -44, -22, 73, -66, -89, -16, -91, -31, -92, 34, 23, -99, -13, 22, 109, 33, 104, 52, -5, -61, 4, -10, -56, -30, 83, 75, 59, 91, -17, -25, -10, 2, -63, 75, -9, 66, -44, 60, 76, 7, -24, -9, 30, 49, -37, -34, -76, 61, 45, 1, 30, 54, 62, -80, -55, -98, 61, 28, 28, -55, -35, 83, 9, -18, -2, -81, -54, -38, 36, -39, -64, 13, -50, 35, 90, -95, -47, -76, 34, 38, 41, 74, 99, -57, 54, 21, 97, 71, 82, -56, 14, -66, -20, -9, 94, -80, -60, -74, 16, 8, 27, 0, 81, -40, 82, 59, -31, -62, 51, -50, -67, -50, 78, 108, 22, -84, 4, -53, 83, 35, -78, 70, 20, 84, -21, 42, 61, -79, -64, 93, 86, -88, -2, 98, 14, -76, 60, 22, 96, -51, -97, 79, -12, -29, 44, 83, 36, 18, -84, 
  -10, -86, -39, 42, 45, -75, -80, -89, -90, -31, -78, 116, -14, 62, 43, 47, 18, -49, -100, 7, -102, 84, 44, -102, -87, 3, 13, -42, 35, 45, 53, -74, -58, -40, -41, -71, 49, -12, 62, -34, -16, 62, -61, 86, -71, 19, -19, 5, -97, 51, -118, 42, 92, -16, 71, 66, 81, 75, 14, -39, -79, -74, -97, 87, -85, -82, 51, -87, -49, -110, -82, 75, 28, 19, 32, 5, 84, -24, -27, -18, 45, 91, 37, -9, -20, -64, -36, -88, -88, 86, -38, -31, 30, -102, -71, 107, -74, 63, -77, 2, -78, -3, 47, -46, -17, -14, -5, -32, 53, -40, 109, -11, 4, -85, 44, -26, 90, 105, -86, -73, -34, 82, 12, -95, -98, -82, -75, -88, 49, 83, -24, -33, 14, -88, -94, 44, 94, -11, -14, -54, -83, -17, 76, -30, -7, -26, -64, -64, 5, -23, -47, 77, -50, -15, 36, -15, 8, -24, 2, -38, 12, -43, -93, 33, 84, -79, -42, 103, -51, 51, -93, -118, 98, -3, 69, 93, -56, 33, 44, -73, 28, -36, 78, -5, 27, 49, 0, -46, -67, -50, -98, -11, 78, 55, -63, 70, 49, 95, -104, -97, 52, 4, 11, 66, -109, -55, -21, -107, 97, -11, -92, -78, -9, 27, 16, -72, -102, -53, -18, 1, 12, 95, -18, -85, 67, 43, -107, 110, 20, 30, -73, 46, -97, -91, -55, 7, -61, 8, 29, -26, -58, -24, -14, -43, 68, -4, 36, -15, 74, -53, -42, -83, -8, 52, -12, 65, -69, 12, 107, 57, 29, 99, 32, 5, -71, 53, -101, -93, -10, 36, -76, -84, 24, -68, 88, -33, -73, -48, 47, 75, 12, -62, -5, 87, 42, -24, -15, 64, 72, -4, 108, 60, 73, -64, -111, -104, -99, 37, 4, 14, 60, -91, -57, 72, 56, 79, 63, 69, 110, 86, 56, 9, 84, -69, 83, 8, -93, 81, 84, -86, -88, 10, -77, 33, 82, 24, -1, -44, 80, -26, -95, -91, 70, -9, -77, 35, 86, 73, -38, -30, 31, -48, -9, 95, -61, 13, 77, -73, -83, -112, 96, -70, 40, 1, -73, 69, 19, -38, 82, -31, -36, -79, -50, 71, -95, 50, -67, 109, -4, -73, 26, 7, -11, -50, 29, -50, 82, -73, -17, 3, -57, 4, -22, 18, 99, 31, -34, -97, 49, 44, -3, -59, 25, -99, -72, 21, -8, 96, 107, -39, -87, -88, -69, -17, 22, 39, -31, -71, -42, -61, 28, -18, -108, -94, -43, -14, -26, -36, -86, -68, 29, 19, 98, 27, 89, -87, -86, -2, 89, -25, -100, -35, -98, -103, -32, -11, 31, 0, 49, 89, -81, 54, 26, -45, 32, -32, 50, -29, -53, -77, -56, 48, 102, -18, -73, 31, -20, -94, 63, 83, -4, 62, 25, 8, 15, 91, -61, 62, 42, 54, -54, -40, -24, -61, 49, 29, -50, -68, 39, -10, 61, 93, 46, -14, 8, -88, 14, -80, -43, -74, 107, 69, -83, -49, -95, 27, 9, 60, -60, 74, -85, 88, 52, 85, -56, -12, 6, 43, 94, 39, -109, 31, -37, -4, 47, 8, -74, 73, 83, 11, 61, -82, -22, 106, -72, 69, -72, 57, -30, 28, 85, 93, 16, 107, -52, -95, 42, -39, 32, 101, -63, -78, 10, -82, 1, -86, -88, 19, 115, 32, 61, -101, -36, 98, 101, -54, 7, 31, 69, 104, 86, 7, 68, -31, 2, 7, 57, 7, -76, 61, -29, 36, 91, -53, -84, 102, 11, -115, -35, 89, 79, -70, 109, -81, 5, -15, 111, -68, 24, -77, -91, -37, -30, -32, 85, 20, 24, 83, -45, 98, 66, -56, -18, 43, -7, 9, 54, -85, -28, -56, -69, 62, 39, 34, -63, -51, 79, 44, -111, -18, 76, 0, 85, 36, -75, -43, -3, 99, -102, 104, 8, -30, 94, 19, -72, -53, 49, 41, -35, 105, 74, 65, -92, 73, 67, -45, 81, -69, 25, 29, -87, 4, 40, 53, -5, -64, -40, 33, 106, 25, -7, 60, -65, -28, -32, -99, 112, -21, 2, -69, 78, -73, -24, -101, 83, 34, -63, -92, 103, 78, -46, 2, 4, 88, 93, -15, -58, -60, -57, 92, -34, 11, -33, -73, -5, -29, 14, 71, 26, -81, 7, 20, -70, -11, 5, 27, -37, 48, 39, -13, 46, -72, -26, -105, -67, -81, 48, -1, -53, 67, 42, -29, 92, 72, -65, -28, 85, 72, -97, 80, -40, 77, 102, -20, -36, -79, 15, -74, 28, -10, -17, -27, 37, 96, -65, -31, 62, 79, 70, -19, -69, -43, -82, -76, -62, -90, 8, -47, 76, 78, -73, 12, -106, -58, -87, 31, 75, -67, -102, -86, -43, -13, 33, 29, -53, -47, -103, 30, -118, 104, -24, 105, 5, -101, 44, 13, 43, -75, -34, -11, 4, -97, -113, -22, -53, -7, -36, 41, 21, 65, 111, -11, -61, -14, 14, -32, -42, -66, 5, 21, -31, -7, 12, 27, -68, 46, 5, 25, -57, 3, -11, 102, 69, -87, 13, 15, 39, 38, -80, 30, 27, -60, 71, -2, -78, -88, 14, 61, -72, -5, -32, -49, 46, 52, -70, -78, 64, -36, 64, 91, 6, 46, -61, 105, 45, -80, -79, -105, -92, 63, 0, -51, -34, -20, -18, -12, 97, -59, 40, 58, -5, 83, 88, -48, -65, 17, -75, 73, -97, -58, -44, -66, -105, 26, 32, -42, -12, -88, 67, 19, -73, -2, 56, 92, 112, -55, 23, 36, -36, 77, 13, -69, -72, 97, 111, -17, -41, -48, 55, -70, 33, 37, 23, -88, 58, -56, 58, 77, -49, -95, 40, 34, 72, 55, 69, -95, 96, 87, 94, -77, -26, 69, 64, -15, 93, 56, -47, 89, 98, 64, 79, 30, -31, -2, -50, -5, 85, 59, -113, 13, -88, -43, 53, -109, -14, 6, 71, 97, 76, -77, -73, -66, -47, -78, -26, -97, 2, 56, -107, -48, 61, 62, 25, -43, -103, 75, -53, -75, 101, -22, 50, -3, 93, 0, -60, -80, -2, -19, 95, -73, -69, -60, 49, 106, -55, 61, -53, 43, 1, 56, -10, -117, -44, -90, -65, 100, -90, -24, -47, 30, -45, 54, -33, -50, -46, -70, 35, -85, 53, -5, 81, 7, 31, -90, -23, -111, 105, 40, -55, 69, -88, -58, -27, 27, 76, -75, -41, -24, 92, -22, 114, 64, -51, 85, -78, -88, -47, 85, 53, -59, -49, 21, 97, -32, -11, -20, 72, -85, 21, -44, -35, -107, -53, -14, -23, 64, 83, -25, 4, 38, 32, 28, -74, -52, -98, 59, -75, -56, -57, 2, 71, -64, -16, -112, 19, 86, -50, 17, 91, 42, -81, -17, 58, -58, -88, -65, 65, 30, 83, -57, 65, 48, -20, 65, 96, 33, -1, -67, -31, 72, 42, -97, 88, 73, -112, 42, -59, -45, -107, -45, 62, 74, -75, 114, 15, -96, 18, -83, 100, -31, -40, -68, 26, -2, -56, -68, 26, 20, 2, -32, -44, 51, -25, -13, 68, -17, 76, 75, -49, -74, 55, 67, 60, -46, -21, -64, -56, -51, -54, -5, -14, 23, 100, 4, -90, 48, 21, -21, 80, -105, -13, -91, -22, 9, 85, -49, 81, -37, 95, -52, 36, 90, 77, -55, 60, 31, 7, 4, 92, 11, 5, -22, -2, 56, -86, 15, 58, 69, 58, 37, -49, -48, -99, 45, -65, -53, -66, -22, 105, 53, -75, 66, 79, -110, 18, -12, -53, -98, 11, -62, -81, -37, -47, 68, -42, 81, -85, 71, -30, -58, 94, -94, -37, 38, -43, 85, 22, -67, -76, -52, 8, -5, -81, -89, -83, 19, -56, 94, 73, 84, 4, -23, 64, 42, -9, -95, -44, -9, -93, 19, 56, -22, -76, 71, 30, 7, -20, -27, 2, -37, -18, -36, 25, -59, 98, 88, 61, -7, 99, 64, 
  -55, 61, -46, 15, 54, 106, 96, 13, -98, 32, -104, -42, 109, 24, -88, -2, 92, 16, -1, 0, -40, -81, 95, 30, 5, -109, 32, 10, -87, -78, -39, 57, 41, 25, 49, 57, -9, -83, -46, 97, 53, 57, 96, 87, 63, 92, -51, 69, 105, 69, -27, -63, -95, -24, -1, -32, -87, 77, -21, -38, 2, -12, 31, 0, -61, 94, 36, 70, -44, 55, -24, 32, 22, -83, -57, -14, -83, -110, -8, 40, 81, -70, -51, -35, 59, 70, -24, 54, -34, -52, -78, -50, 73, 29, -66, 62, -31, -54, -2, -79, 29, 5, 56, -70, 52, -85, -27, -25, -85, 60, -43, 82, -90, -2, -32, 27, 15, -87, 34, 2, -25, -90, -7, -28, -64, -44, -91, 115, -69, -19, 105, 88, -98, 34, 80, -4, 41, -18, 66, -84, 58, 86, 65, -11, -85, 3, -12, -48, -84, -105, 48, -22, 78, 16, 44, 10, -3, 97, -18, 11, -37, -51, -43, -48, 78, -54, 47, -85, 37, -64, 39, 11, 43, 39, 34, -110, -54, 77, 6, 31, -23, -34, 12, -70, -1, -26, -5, -59, -33, 55, -33, 15, -66, -109, -54, -82, -4, -38, -105, 43, 82, -68, -51, 73, -80, 54, -43, -80, 69, 28, -89, -3, 85, -54, 71, 58, 69, 39, 50, -68, 27, -60, -55, 10, 74, -104, -69, 86, 17, 16, -26, 38, 7, -31, 65, -40, -60, 11, 7, -24, -68, -25, -48, 60, -22, -69, -8, -66, 65, 37, -70, 89, 60, -15, -13, -86, 51, 62, -108, 83, -20, 89, 2, 64, 82, 16, 75, -50, -10, 46, -35, 95, -92, -34, -119, -99, -41, 7, 107, 9, -72, 82, 35, 20, 97, 86, -88, 92, 89, 35, -29, -33, -44, 74, -28, -77, -4, -97, -75, -69, 23, -2, 94, 83, -33, -86, 105, 54, 92, 23, 20, -21, 66, -12, 10, -72, 23, -24, 35, -62, -73, -96, -92, 4, -39, 35, -34, -94, -74, 86, -52, 73, -63, -33, 53, 91, -60, 22, 15, -78, 24, 39, 43, 25, -82, -23, -44, -100, 40, 24, -53, -32, 68, 80, 82, -53, -17, 102, -18, -101, -111, 33, 68, 104, -60, -73, 64, -12, 86, 4, -57, 103, 17, 12, 29, 86, -9, 101, -19, 29, 66, -68, 9, -34, 89, 104, 100, -20, 15, 71, -18, 5, 91, -70, -94, -95, 12, 95, 11, 60, -70, -27, 72, -109, -12, -9, 27, 82, -63, -82, 19, -101, -1, -115, -66, -51, 68, 42, 45, 85, -93, -97, -108, -39, 74, -74, 14, 59, 36, -105, -35, -50, 98, 17, 98, -105, 9, 51, -9, 20, -92, 61, -62, -3, 31, -113, -64, -43, 8, -76, -90, 51, 98, -89, 51, -92, 22, -34, -64, 24, -17, -8, -60, -83, 18, 88, -97, 21, 2, -4, -43, 68, -5, -3, 20, -31, -62, -42, -35, -95, 16, 100, -80, -92, -44, -60, 22, 100, 41, 32, 21, -10, -7, -14, -89, -56, -89, 30, 71, -81, 2, -2, 1, -60, -76, 0, 91, -2, 8, 13, 55, 31, 37, -19, 41, -8, 6, 1, -17, -51, -66, 83, -2, -98, -51, 29, -43, -5, -32, 14, -70, 87, -70, 15, -36, 3, 75, -9, 3, 30, -81, -10, 12, 96, 30, 80, -44, -26, 32, 66, 47, -107, -21, -94, -99, 59, 25, 95, -96, -93, 46, -91, 46, -66, -93, -60, -24, -45, -8, 18, -48, 24, 0, -44, 5, -61, 1, 48, 69, -80, 39, 65, 27, -54, -17, 42, 23, -88, -43, -22, -48, 39, -1, 63, 24, -36, 63, -6, 72, -73, -60, -89, 95, 66, -16, 31, 74, 22, 83, 93, 41, 72, 7, 38, -30, -62, -82, 42, -46, 78, -57, -55, 74, -45, 4, -37, 81, -30, -6, 56, -27, 86, -74, -47, -62, 88, 67, -60, 68, -66, 18, 82, 48, 51, 44, -9, -99, -97, -6, -70, 102, 50, -42, -39, -56, -47, -68, -33, -73, -99, -80, 17, 71, 80, -83, 37, 11, -22, 27, 7, -34, -39, 63, 45, -23, 36, -105, 13, -67, -52, -8, -55, -18, -35, 45, -49, 19, -32, 89, 49, 55, -62, -3, 29, -43, -58, 37, -56, -48, -44, -6, 49, 20, -76, 76, -22, -115, 13, -97, 3, 50, 66, -3, -38, 9, 71, -16, 10, 2, -48, 73, -36, 37, 90, 64, -33, 94, -77, -89, -56, -32, 65, -82, -31, -78, -99, 101, 80, -33, -19, 75, 54, 57, -42, -37, 42, 57, -69, -61, 0, 20, -19, 58, -50, -54, 25, 92, -109, -56, 85, -6, 88, -85, -88, 64, -82, 51, -103, 109, -2, -14, 19, 75, -28, -86, -61, -6, 13, 57, 23, -66, 42, 88, -7, 34, 28, 81, -16, 5, 25, 96, 4, -30, 31, 111, -84, 3, -82, 45, -39, -46, -21, -47, 8, 90, -87, -98, -69, 20, -2, 76, 5, 30, 6, -2, 95, -14, -48, 48, 79, -85, 40, -78, -110, 85, 3, -9, -42, -56, 56, 28, -4, -109, -23, -50, -102, 53, -61, -65, -104, -90, -43, -98, -64, -42, 0, -51, -57, -18, -8, 4, 51, -54, 7, 89, -72, 55, 39, -19, 63, 31, -58, -4, 96, -43, -101, -28, 30, -30, -88, -39, 64, 61, -10, 40, 39, 89, 39, -73, 18, -13, -57, -79, 113, 21, -6, -42, -110, 50, -60, -57, -104, -69, 47, -66, 20, 28, 102, -29, -89, 6, 79, 29, 58, -30, -16, -40, -60, -38, 53, -109, -36, -4, -77, 9, 85, 25, -21, 23, -64, 4, 74, 66, -95, 85, 104, 29, 79, -81, 89, 37, -47, 37, -20, 61, 71, -76, 49, 21, -77, -46, 70, 45, 88, -96, 67, 39, 25, 32, -51, -44, 36, 100, 85, 57, 23, 22, 61, 76, -1, -45, 64, 13, 79, 6, -95, 38, -101, -13, -46, 33, -83, -3, -78, -18, -107, 45, -64, 65, -77, 92, 50, -6, 44, 86, 40, -94, 10, -59, -10, -63, -69, 112, -95, -32, 31, -59, 32, -36, -48, 9, 103, -24, 96, -49, -77, -83, 72, -1, 89, 6, 92, -31, -60, -28, -102, -9, 96, 81, 59, -39, -101, 41, -42, -90, -34, 37, 28, 37, 83, -112, -37, 46, 70, 32, -18, -82, 44, -39, 26, 61, -80, -91, -28, 64, -59, -50, 59, -56, 92, -68, 42, 37, 106, -12, -37, 96, -78, -81, 3, -45, 67, -45, 48, 20, -75, 65, 8, -23, 41, 58, -18, -67, 48, 40, -58, 110, 81, 4, -21, 74, -41, -66, -44, 87, -49, -12, 26, 36, -65, 49, -38, 52, -42, 89, -42, -58, -76, -46, -15, -62, -93, 64, -34, 35, -97, -8, -60, 21, -28, -103, 70, -2, -47, 24, -38, 82, 86, -93, -55, -85, -24, -39, -18, 21, -81, 52, 75, -14, -8, -88, 80, 59, 70, 73, 35, 73, -100, -23, 94, 9, 94, 71, -5, 64, -68, 83, 35, -34, 38, -92, -18, -106, -21, -103, -48, 57, -46, 14, -13, 85, -51, -89, 25, -45, 2, -54, -23, -18, -10, -64, -65, 87, 50, -47, 58, 18, 100, 2, 38, 28, -47, -88, 29, 55, 74, -34, -54, 72, -68, -15, -47, -69, 15, -26, -37, -57, 51, 8, -96, -109, 33, 27, 91, 18, 17, -29, 63, -101, -48, -68, -87, -92, 92, 68, -90, 107, 104, -72, 18, -17, -25, -63, 19, 43, -56, 15, -69, -37, -5, 37, 70, -88, -77, -63, 67, 12, -50, -97, 46, 43, 17, -79, -44, -73, -12, 101, 93, -86, 18, -69, 44, -50, -84, -56, -30, 83, -15, 62, 76, 60, 44, 70, 21, 17, -19, -64, 89, -72, 85, -20, -33, 84, -13, 43, -70, -20, -73, -37, -3, 
  -76, -49, -16, -64, -44, -62, 18, -65, -17, -73, -11, -23, 61, -98, 67, 67, -6, -72, -23, 61, -46, 79, 69, -97, 36, -6, 66, -56, 53, 63, 37, -34, -104, -34, -82, -27, 44, 13, -98, -5, -37, 76, -78, 75, -73, -21, -115, 45, -90, 18, -64, -97, 24, -99, 81, 6, -53, 94, 62, -85, 33, 73, -26, -76, -90, -12, 88, -54, -41, 88, -22, -21, 81, 92, -37, 35, -75, -65, 97, 0, -104, -12, 55, -47, -85, -77, 99, -27, 10, -3, -81, -29, -51, -99, 80, 2, 107, 58, 92, 25, 62, -85, -82, 46, 24, 3, 7, 85, 5, 50, 21, 40, -39, 12, -36, -70, -5, 22, 23, -70, 28, -31, -52, -49, -23, 33, 49, 95, 97, 100, 11, -38, 75, -25, 83, 19, -80, -71, -27, -67, 43, -106, -95, -13, 65, -80, 50, 35, -59, 115, 85, 3, -49, -47, 47, 87, 93, 73, 48, 33, 95, -37, 30, 70, 51, 80, -31, 82, -7, -106, 19, -9, -42, -68, 47, 74, 30, -108, -36, -24, -6, 87, -75, -19, -116, 35, -9, -103, 23, 64, -52, -19, 68, -92, 83, 65, -42, -36, 42, 85, 51, 44, 75, 89, -103, 96, -13, 38, 37, 47, -16, -58, -7, -95, 38, 60, -61, 41, -78, 85, -86, -91, -49, -56, 20, 25, -21, -22, -22, -52, -54, -93, -94, 13, 76, 102, 59, 87, 51, -84, -60, -21, -41, 84, -115, -87, -62, 74, -70, -32, -15, -14, -13, -59, -45, 49, 16, 100, 69, 87, 76, -89, 60, -1, 72, 76, 40, 78, -38, 53, 87, -17, 93, -62, -65, 44, -26, -33, -50, 31, -107, 29, 40, 54, -75, -102, -91, 1, 72, -69, -58, 97, -6, 3, -93, 32, 55, -2, 101, -14, 44, 74, 55, 35, -97, -63, 113, -11, -97, -43, 6, 62, -76, 92, -49, 86, -74, -15, 19, -34, -45, -103, -6, 7, 11, -56, -69, -28, 50, 44, -101, -41, -19, -31, -101, 13, 47, -70, 69, 48, -7, 90, -53, -81, 82, 18, 93, -78, -91, -66, -104, 38, 4, -59, 69, 92, -42, -58, -28, 69, 49, -15, -34, -78, 51, 62, -73, -105, 97, -33, -53, 42, 86, -29, 29, -41, 54, 1, 88, 101, 5, -49, -52, -94, -22, -112, -47, -32, 52, 86, -25, 6, 90, 17, -93, 53, 117, 58, -32, -66, -47, -52, 33, -48, 71, -97, -35, -67, -63, -31, -9, -87, -112, 34, -55, 66, 97, 20, -92, -26, -11, -67, 37, 44, 1, -20, 63, -85, 49, -105, -22, -21, 51, -1, -36, 38, 40, -112, -89, -103, -52, 62, -98, -59, 72, 73, -63, -46, 80, -110, 81, 44, 74, -57, 15, 28, 63, -83, -39, -5, -32, -34, -69, 0, -107, -31, -11, -25, 24, -77, -23, 34, 80, -92, -10, -69, -106, -94, 35, -62, 27, -99, -86, 91, 42, 67, 88, -35, -78, -73, 76, 45, 24, -89, 76, 60, -106, -35, -72, 9, 80, 40, -63, -39, -110, 52, -44, -16, -54, -12, -66, 45, -36, 21, -27, 1, 63, 109, -33, -6, 88, 96, -48, -51, 45, -11, -77, 55, -103, 12, 69, -53, -45, 98, -23, 75, -48, 83, -15, 61, -90, -61, -7, 58, -12, 70, 1, -63, 24, 54, 37, -83, 4, -23, 23, 69, -41, -57, -68, -112, 43, -64, -72, 2, 46, -109, 12, 63, -96, 21, 1, -9, -15, 30, -61, 57, -70, -19, 38, 60, 85, -46, 1, -51, -41, -64, -88, 79, -50, -70, -47, 61, 90, -19, 89, -40, 78, -117, -17, -8, -16, -28, 18, 18, -56, 9, 62, -5, -12, -62, -87, -78, -62, -5, -65, 110, 25, -21, -31, -111, -75, -41, -75, -14, 55, 60, -60, -28, -13, 46, -43, 55, 10, -92, -87, 14, 12, -110, -91, -36, 50, -86, -40, -17, -21, -42, 58, 17, 33, 47, -7, 70, -3, 25, -92, 18, 28, -89, -16, -75, 64, 83, 78, 83, 60, 22, -28, -22, -41, 83, 19, -91, 41, 37, -92, -11, -64, 85, -59, -81, -73, -5, 56, -1, -10, 72, 17, -54, 74, 99, 80, 99, 33, 94, -65, -44, -69, 96, 66, -75, 47, 14, 24, 44, -83, -55, 43, 8, 41, 81, -94, -109, -7, -85, 70, -33, -35, -105, -78, -29, -76, -93, -87, -26, 52, -34, 50, 57, -91, 24, -84, 38, 1, 52, 70, 64, 40, -88, 53, 8, -108, 4, -73, 11, 50, 66, -59, 13, 25, 21, -3, -100, -110, -12, 30, -56, -32, -49, -84, -48, -34, 27, 62, -102, 67, 75, -6, -109, -33, -116, -90, -11, -16, 56, -25, -60, -73, -54, -90, 76, -94, 41, 16, -96, -26, -13, 87, -106, 79, -1, 110, -27, -96, 20, 58, 82, -90, 25, 0, -14, -93, -46, -13, -42, -42, 59, -25, -66, -74, 68, 30, 4, 20, 81, -86, 7, 5, 93, -37, 19, -50, 67, -32, -52, -25, -6, -83, 5, -65, 42, -88, -70, -52, -19, -33, 78, -37, 81, -87, 46, 70, 83, 60, 10, -45, 97, -49, 6, 14, 13, 88, -17, -48, -38, 27, -58, 6, -16, 90, 72, -71, 79, 59, 67, -93, 11, 90, 62, -26, 8, -96, -29, 24, -29, 52, -67, 11, 80, 53, -65, 23, 22, 71, -71, 56, 50, 67, -49, 30, -60, -42, -72, -28, 110, 44, 19, 21, -102, -37, -102, -89, -27, 76, 51, 90, -34, 97, -27, 54, -90, 88, 80, 72, 86, 52, 56, -34, -26, 6, 41, 44, 24, 89, -17, -107, 39, 106, 48, -70, -68, -1, 31, -105, 82, 7, 25, 7, 14, 24, 0, -97, -76, 90, 90, -17, -89, 101, 28, 79, 70, -79, 22, -11, 14, 66, -97, -16, 39, -56, 20, 46, 96, 83, 64, 31, -44, -30, 75, 22, 48, 19, 60, 52, -29, -8, 55, -44, 94, 66, -96, -13, -103, 75, 30, -31, -85, 21, -28, 95, -71, 8, 31, -60, -33, -73, -76, -47, -15, -62, -32, -74, -65, 50, 52, 5, 17, 100, 72, 2, 23, -72, -37, 68, -62, -34, -19, 31, -84, 14, 66, -25, 52, -61, 81, 62, -30, 58, 15, 86, 35, -48, -46, 9, 29, 80, 87, 29, 65, -100, 35, -41, 106, -92, -29, 40, 35, -75, 80, 31, 13, 54, -99, -59, -100, -43, 4, -21, -3, 88, -57, 48, -85, 82, -21, -74, -9, 16, -86, -4, -88, 54, 68, 79, 44, 90, -85, 31, -34, -112, -107, 45, -81, -25, 101, 71, 1, 66, -89, 68, 30, 84, 14, 74, 27, 89, 73, 24, -6, 3, -68, -90, 116, -26, -78, 78, -38, 73, 21, -3, 82, 70, -14, 38, -28, 74, 65, -76, 68, -71, -10, 92, -72, 26, 2, 3, -29, 21, 98, 67, 29, 59, -25, -55, -53, -29, -51, 76, -52, -53, -23, -72, -30, -4, -57, -84, -70, -103, -96, 83, -94, 43, -71, 55, -95, -77, 17, 88, -16, -30, -111, -26, 76, -67, -79, -8, 79, -12, 111, 98, -90, 22, -65, -5, -87, -65, 41, 6, 32, 91, 12, 4, -11, -91, 83, -2, 4, 42, 30, -43, 46, 36, 21, 81, -18, -25, 79, -79, -45, 42, 92, 14, 44, -19, -93, -23, -13, -62, 39, -24, -49, -63, 33, 22, 8, -51, 95, -40, 14, -108, 69, 38, 78, -111, 83, -18, -96, 72, 91, -91, -14, -12, 47, 106, 26, -26, -37, -87, -79, -105, -38, -3, 89, -53, 77, -58, -71, -91, 67, -85, 7, -68, -25, -50, 15, -14, 84, 76, 60, -42, -92, -103, -21, -5, 101, 81, 79, -32, 9, 3, 22, -20, 64, -41, 104, 53, -63, -7, -88, -94, -37, 
  -101, 34, -15, 99, 52, 8, 75, -54, 106, 71, 73, 76, 26, 98, -22, -16, -14, 79, 18, 79, 28, 61, 100, -69, -29, -60, 23, 89, -43, -64, -23, 87, 59, 105, 63, -57, 16, -99, -99, 20, -30, -62, 44, 77, -16, 82, 38, 70, 106, -20, -80, -89, 81, 30, -31, 74, -14, 53, -45, -24, -49, 49, 62, -89, 108, -12, 73, 79, -3, 99, -80, 46, 107, 97, -13, 95, -71, 104, -94, -101, 40, -12, -60, -77, 3, -56, -59, 84, 1, -37, 65, 63, -32, -17, 45, -54, 53, -97, -92, 101, -4, 112, -71, 58, -62, 69, -64, -24, 115, 68, -26, 40, 41, -11, 117, -79, 66, -9, -68, 104, -70, 108, -43, -51, 10, -71, 42, -30, 72, -54, -88, -23, -49, 50, 1, 101, -25, -73, 12, 51, 43, 24, 105, 65, 113, 64, -62, -23, 60, -92, 44, -22, 78, 12, -7, 88, -20, -28, -98, -38, 99, -21, -79, -78, -8, -27, -6, 59, 66, 24, 26, -68, -1, 64, 40, -118, -27, 24, -81, -83, 38, 43, 28, 81, -44, 42, 7, -103, -63, -89, -56, 17, 67, -86, -53, 26, -2, 55, -39, 106, 13, 98, 82, -36, 36, 0, -50, 39, -59, 33, -68, -42, -26, 14, 85, -18, -1, -40, 100, 90, 74, -85, -55, -2, 41, -71, 30, 11, 89, 98, 4, -71, -17, 76, 15, 77, -114, -24, -16, 13, -82, 85, 4, -100, -23, -117, -56, 54, 108, 76, 15, -63, 11, -12, -94, 22, 79, -34, -92, 108, 33, 19, -66, -90, 12, -78, -54, -74, -11, -42, 63, -85, -17, -26, -8, 94, -99, 114, 43, -16, 34, -81, -48, -54, -13, 117, 110, 31, -20, -72, -50, 91, -22, -55, -27, 82, -22, -29, 30, -44, -5, 90, 69, 66, 89, -57, 44, -23, 50, 10, 52, -40, -73, -31, 92, 92, -42, -46, -8, 67, 5, 13, -85, -10, -8, 8, -66, -53, 29, 52, 107, -95, -69, 37, -50, -64, 23, 67, 10, 1, -59, -91, -79, 60, 40, 58, -84, -24, -61, -50, -1, 38, 48, -42, 91, -20, -38, 35, -75, -32, -50, -55, 99, -73, 53, -1, 117, 44, 37, 33, 16, 54, -41, -4, 65, 9, 6, 50, -94, 83, 104, -87, -81, -97, 14, -47, 47, 90, 16, 14, -87, 27, -84, 86, -42, 85, -96, -31, 45, -58, -89, -81, -39, 37, -51, -71, -58, -18, -39, 18, 11, 88, -45, -98, 73, 20, 100, -57, 21, 14, -59, 22, -29, -5, 98, -15, -17, 14, 23, -86, -33, -32, -48, -71, 101, -26, 90, 39, -24, -46, 1, -90, 61, 52, -59, 14, -89, 64, 34, 42, -14, 93, 104, 105, -18, 19, 37, -112, 34, 30, -115, 0, 91, 45, -55, -74, -74, -8, 71, -29, -40, -41, 0, 7, 14, -37, 14, 31, 90, -45, 2, -78, 67, -66, -52, -31, 110, 67, -62, -74, -75, 60, 100, 25, 2, -58, -74, -61, 7, 118, -42, 82, -35, 17, -82, -84, -18, -63, -35, -27, -50, 0, -4, 23, 39, 30, 106, 23, 81, -1, -89, -103, 98, -42, 62, -56, -53, -39, 94, -76, -35, 88, 75, -51, -81, 85, -65, 108, 73, 44, 58, 4, 12, -36, -30, -6, -6, -81, 36, 11, -29, -64, 85, 4, 6, -99, -37, -86, -30, -12, 103, 40, -54, -63, 30, -42, 90, -49, -69, -62, 60, 24, 16, -49, -65, -62, -106, 62, 23, -6, 18, 8, 37, -48, 57, -67, -66, -73, 35, -26, -7, 23, 29, 101, -41, 55, 1, 91, 35, -4, 66, 64, -49, -2, 23, -46, -64, -40, -26, -98, 14, 56, 110, 7, 114, -48, 19, 7, -67, -51, -8, 22, -14, -47, 11, 74, -42, -37, 92, -87, -48, -36, -13, -93, 27, 94, 106, 113, -94, -78, -106, 79, -47, 68, 15, 79, 49, -76, 22, 30, 23, 74, -73, 24, -56, -94, -52, 13, -56, 22, -8, 98, -66, -36, 82, -17, -5, 70, -43, 71, -77, 41, -39, 1, -55, 62, 47, -27, -21, -85, -8, -5, 105, 15, -67, 58, -45, -93, 94, 84, 62, -42, 89, -43, 15, -77, -57, -93, 107, -80, -81, 24, 105, -94, -72, -88, 87, 82, 49, 101, 55, 48, -58, 29, -96, -33, 38, 14, -35, 67, 73, 105, 41, 107, -71, 45, 69, -9, 100, -33, 25, -83, -26, -27, 19, -64, 64, -71, -45, -40, -32, 62, 50, 42, -98, 88, 33, -94, 36, -75, 44, -75, -34, -44, 7, 69, -47, -23, -67, 101, 100, -43, 71, -72, -6, 93, -11, -55, 1, 86, -55, -45, -49, 62, 24, -31, -11, 42, -12, -9, 76, -62, 104, -96, -38, 84, 89, 31, 90, -85, 68, -38, -99, -53, -67, 74, 79, 92, 86, 0, -10, -56, -50, 45, -71, 80, 90, 24, -26, -69, 112, 43, -62, -13, -37, 21, 29, -66, -41, -91, 111, -92, 82, -102, 44, -90, 99, 47, -59, 92, -3, 35, 51, -64, -81, 31, 4, 70, 61, -29, 100, 46, 33, 114, 35, 88, -17, -76, 95, 71, 81, 67, -46, 1, 74, 81, -48, 89, 105, -82, 42, 106, -62, 62, 8, -73, 54, -3, 17, 1, 84, 3, -46, 91, -16, 77, 76, 102, -21, 5, 20, 54, 71, -84, 65, 16, -55, 88, 78, -39, -61, 103, -75, 96, 44, 39, -63, -15, 89, 19, -67, 5, -105, 54, -20, -77, 18, -2, 85, 12, 82, 26, 77, 48, 85, 108, -25, 78, 9, 34, 23, 85, 11, -22, 112, 13, -1, 13, 38, 97, -83, 54, 2, 16, 18, 62, -39, -62, -32, 20, -33, -55, 46, 16, 101, -1, 55, 105, -73, -54, 31, -51, 52, 87, 90, -17, 42, -41, -78, 46, 27, -50, -90, 9, 97, -21, 39, 2, -39, -66, 84, -30, -91, 10, -17, -6, 94, 64, -59, -43, -3, 49, -69, 71, -4, 16, -101, 65, -8, 14, -11, 102, 48, 11, 7, -89, -25, -90, 31, -94, 77, 39, 50, 14, 32, -20, 81, -18, -34, 83, 98, 41, 70, -67, -116, -83, -45, -77, -49, 11, -48, 102, -58, 30, -69, 77, 97, -19, 41, 100, -52, -49, 10, 4, 25, 103, -8, -77, -88, -44, -58, 88, -77, -27, 91, 33, 11, -11, -3, 44, -49, -73, -36, 92, -53, -26, 56, 91, -47, -19, 1, 4, -21, -2, -7, 51, 62, 43, 71, -72, 76, -97, -15, 61, 48, -52, -56, 54, 69, -42, -24, -23, 106, 49, 97, 51, 12, 17, 19, 109, 74, 20, 70, 2, -74, 1, -94, -31, 2, 28, 48, 72, 62, 59, 95, 101, -2, -31, -53, -45, 115, -117, -77, -59, 9, 8, -55, 101, -16, -37, 39, 38, -39, -29, 11, -37, 59, 100, 1, -67, -75, -54, 88, -84, -44, 78, 50, -60, 25, -71, 100, -18, 6, 74, 59, 4, 117, -36, 18, -9, -70, -71, -46, 113, -52, -22, 72, -88, -4, 80, 50, 12, -89, 34, 28, 16, 31, -96, 42, -73, 8, 38, -21, -92, -27, 100, 49, 76, 112, 23, -19, -1, -29, 113, -23, 109, 59, -23, 7, 81, 116, -19, 5, -79, -8, -82, -105, -63, -65, 84, 29, 48, 35, 81, -13, -38, 86, -64, -11, -99, 78, -23, 4, -5, -68, 85, -84, -31, 36, 74, 26, -21, 74, -23, 28, 68, -60, -49, 33, 25, 99, -55, 91, -15, 44, -93, -90, 102, -15, -75, 65, -86, 33, 32, 94, 26, 111, -92, -23, -21, -65, 68, -10, 22, 81, -16, 98, -32, 83, 80, -17, -13, 118, 51, 43, -19, 3, -70, 13, 28, -9, 85, -81, -94, 64, -28, 31, 63, 104, 67, 
  78, 5, 66, 21, -39, 86, -65, -74, 73, -59, -73, 50, -47, 63, 45, -3, -20, -73, -97, -5, 11, -87, 5, -57, 70, -3, 81, -43, -81, -104, 34, -47, 20, 90, -66, -37, -74, 64, 43, -81, -64, 109, 26, -60, 34, -116, 31, 33, 103, -24, -31, 83, -63, -16, 41, -25, 1, 31, -62, 106, 58, -68, -30, 95, -103, -93, 45, 70, 34, -16, 28, 44, -7, 34, 86, -32, -61, -47, 37, 67, 17, -63, -18, 94, 69, -63, -50, 10, 45, 69, -78, -7, 81, -83, -97, 16, -11, 107, -52, 12, -16, -17, 57, 21, -77, 77, 39, 104, -15, -67, 103, -35, 50, 1, 116, 81, 11, 22, 16, -72, -108, -76, 56, -83, 76, -55, -54, 98, -77, 47, 95, 90, 92, 109, 86, 45, -84, -50, 39, -5, -70, 4, -5, 107, 80, 0, 41, -53, 3, 44, 42, 66, -86, -78, -83, 58, -63, 93, 6, 14, -1, 97, 85, 102, -71, -32, -89, -48, -100, 73, -81, 74, -9, -3, -35, 7, -64, 5, 25, -110, 41, 67, 15, -69, 80, 7, 67, 52, -19, 27, 63, 88, 45, 49, 8, -41, -96, 44, -65, 106, -6, -97, 63, 60, 66, -1, -26, -61, 90, 20, -6, -97, 13, -61, -70, -72, -44, 38, 4, 20, 88, 45, -33, 48, -38, 61, 24, -15, -44, 19, 30, -99, 16, 35, -102, -77, -110, 120, -16, 88, 95, -54, -59, -31, -90, 16, 91, -38, -79, -37, 72, 52, 9, -5, -27, 67, 33, -40, 87, -86, -41, -36, 65, 99, -92, 28, 34, -33, 29, 66, -3, 53, -1, -50, -52, 26, -48, 0, 33, -65, 91, 18, 1, 98, 103, 70, 24, 13, -73, 85, 85, 41, -8, -11, -44, -95, -105, -67, 70, -62, 76, 99, -2, 6, -103, -78, -49, -8, -12, 33, -50, -109, 48, -68, 76, -69, 20, 92, 1, 11, -18, -95, -87, 64, 51, 80, 21, 104, -39, -39, 48, 62, -45, 91, 55, -47, 65, -77, 80, -87, 0, 75, -1, -14, -62, -25, -17, 26, 26, -108, 84, -3, 79, -54, -41, -6, -103, 78, 46, 29, 75, 45, 86, -4, -4, 26, 113, 53, 39, -5, 16, 32, 92, -62, 39, 20, -89, 84, -78, 66, -90, -67, -90, -56, -62, -44, 12, -70, 83, -79, -70, 12, 35, 62, 55, -54, 69, 79, -16, 75, -90, 85, 27, -15, 69, -15, 68, 88, -35, 108, -32, 70, 91, -105, 9, 72, -112, 66, -3, 10, -75, -71, 96, -86, 39, -6, 1, -7, -105, -89, -38, 19, -34, 29, -30, 73, -95, 42, 46, -85, 109, 43, -95, -99, 64, -85, -21, 40, -94, 30, 86, -45, -60, 21, -87, -93, -57, 55, -83, 110, -91, 90, 63, -80, -10, -97, -28, 51, 42, 23, 55, 73, 9, -10, -17, -25, -87, 33, -9, 92, -61, -102, 9, 88, 61, 83, 65, 25, 108, 71, -2, 112, 112, 21, 66, 38, -37, -44, 53, 64, 64, 12, -6, -79, -7, -71, 73, -87, -35, 15, -26, 82, -23, 32, -18, 27, 75, 110, -64, -24, 53, -80, 52, -35, -98, 50, -22, -25, 11, -112, 11, -36, -68, -70, 48, -97, 40, -76, -13, 46, 64, -13, 38, 16, -23, 61, -1, -3, 58, -64, -11, 80, 51, 40, -17, 31, 54, 38, 119, 27, -25, -14, 87, -77, -26, -37, -65, 30, 99, 23, 17, 23, 9, 81, 88, -7, 52, -102, -5, 29, -73, -26, 57, -11, 38, -62, 31, -42, 119, -14, 22, -59, -37, -93, 41, 36, 29, -39, -75, -61, 45, 29, 83, -97, 66, -2, -75, 70, 49, 12, 56, 58, 93, 8, 49, 11, -17, 34, 83, -4, -10, -38, -35, -39, -31, -113, 14, 21, 90, -61, 98, 100, 68, 79, 93, 58, -86, 38, 60, -8, 100, 56, 70, -78, -104, -83, 20, -51, 100, -82, 92, -106, 78, -70, 35, 67, 73, 18, -82, 41, 51, 67, -90, -15, 63, 47, -30, -71, 79, -26, -42, 62, 66, 90, -12, -85, 74, 10, 17, 75, 2, -63, 83, -58, -71, -77, 3, -17, -2, 45, -40, 6, -11, -93, 83, -66, 13, -74, 16, -93, -96, 11, 30, 14, 47, 25, -87, -64, 70, 4, -94, 21, 26, -29, 90, -72, -93, 20, 60, 85, 49, 15, -75, 85, 31, 18, -25, 33, 0, 18, 47, -15, -109, 64, 16, 27, -48, 79, 34, 19, -69, -96, -56, 62, -116, -30, -2, 0, -70, 43, -82, -85, 39, -62, -43, 72, -23, -100, 91, 8, 102, -38, -29, -46, 48, 87, 97, 31, 96, -101, -10, 23, 106, -63, -47, 61, -46, -100, 55, 11, 85, -72, 51, 2, -89, -85, -65, 44, -27, 52, -33, -70, -3, 0, -25, 95, -60, 20, -85, -15, -50, 106, -61, 13, -17, 10, 66, 11, -14, -31, 110, -89, -88, -23, -29, 15, 48, 27, 26, -43, -75, -73, -39, -18, 107, -11, -24, 96, -78, -4, -2, -98, 77, -77, -18, 92, -88, -89, -93, -1, 4, -49, -25, -78, 28, 52, -17, -81, -86, -64, -89, 30, 107, -6, -14, -65, 36, 28, 25, 56, 44, -77, -104, -37, -104, -36, -92, -24, 57, 59, -37, 48, -46, 72, 3, 1, 26, 48, -1, 109, 10, -80, -31, 29, -17, -92, 25, 51, -99, 63, -67, -62, -66, -56, 109, -64, -75, 104, -6, 61, -107, -18, -85, -35, 12, 5, -31, -88, 19, 84, 47, -87, 21, -62, 50, 59, 82, 111, -17, 22, 61, -35, -72, -66, -88, 59, -68, 11, 88, -100, 41, 12, 82, -74, -75, 69, -81, 94, 96, -29, -76, -103, 77, -47, 11, -19, 28, 98, -50, 37, 31, -58, 118, 43, 87, -42, -93, 81, 23, 47, -47, 45, 79, 63, 56, -56, 30, 114, -38, -36, 101, -93, 117, -8, -56, -62, 5, 29, -1, -63, -40, -69, -62, -81, 40, -5, 84, 103, -2, -17, -53, 83, 79, -69, -86, 11, -25, -96, 24, -26, -68, 13, 101, -71, -69, -53, -102, 25, -85, -60, -2, 18, 96, -78, 67, 14, -27, 61, -61, -58, 17, -76, 17, 76, -92, -35, 91, 98, -9, -12, -110, 64, 38, 12, -55, -71, -57, -46, -91, 0, 114, 76, -8, 103, -12, 68, -110, -8, 20, -62, -64, -81, -84, -18, -67, 68, 6, 13, -46, 56, 32, -107, 63, 66, -51, 17, -113, -89, -43, 80, 55, 93, 26, 7, -8, -53, 70, -92, -68, 8, -52, -34, 6, 56, -74, 4, 65, 97, -9, 28, -30, 1, 18, 56, 93, -7, -98, -102, 3, 97, -44, -49, 36, -50, 73, 9, 103, 2, 56, -84, 93, 28, 98, -63, 33, 51, -93, -18, 24, -61, 90, -42, 5, 0, 6, 71, -27, -5, -11, -63, 81, -3, -7, 19, 14, -71, -2, -25, -67, 6, 40, 82, 35, 16, 53, 47, 15, 99, -1, 56, -50, 111, 87, -31, 80, 0, 45, -107, -89, 3, 21, 78, -67, 35, 67, -3, -84, 88, -57, 14, 87, -23, -18, 104, 41, -14, 9, 61, 51, -34, -20, -49, 53, 113, 25, -52, -27, 70, -51, -25, 83, 82, 48, 78, -70, -99, 72, 80, 35, -19, 22, -4, 111, -85, 49, -50, -89, 74, -24, 10, -9, -19, -101, -47, 28, -95, -30, 107, -31, -108, -54, -52, 104, -19, 81, -7, 56, 66, -31, 7, 67, -60, -69, 71, -20, 65, -85, -51, -4, 47, -57, 0, -100, -47, -30, -61, 50, -100, 4, 40, -31, -27, -43, -67, -58, 1, -34, 75, 9, 59, 75, 81, 94, 1, 64, 44, -20, 51, 19, -11, -68, 67, -50, 89, 76, -15, -33, 61, 100, -27, 
  56, -10, 52, 110, 59, 6, 70, 72, 20, 49, -63, -65, -24, 42, 84, -31, -2, 15, -32, -29, 17, -70, 69, -42, 22, 32, -64, -12, -79, 52, -34, -13, 4, 95, -18, 28, -49, 31, 109, -14, -88, -91, -76, -51, -77, -37, 106, -61, 69, -56, -34, -90, -17, -43, 78, 59, 44, 17, -8, -58, -11, -57, 105, 100, 78, 24, -11, 11, -70, 102, -66, -22, 62, -55, -59, -52, 19, -58, 71, 81, -63, -3, 73, -20, 101, -51, 17, -60, -53, 87, 15, -58, -6, -98, 44, 78, -19, 64, 46, -15, 38, 67, -75, -6, 83, -72, 64, 31, 44, 112, -79, 105, -44, 46, 105, 88, -25, -94, -47, -92, 84, -31, -39, -82, -1, -44, 27, -14, -84, -41, 33, 6, 112, 104, -51, 72, 88, 29, -103, 29, 44, 52, -21, -64, -39, 31, -70, -9, -66, -101, -10, 50, 85, 27, 31, 46, -79, -24, 19, 74, -18, -2, 52, 52, -92, -60, -1, -20, -91, -92, -61, -29, -60, 33, 67, 60, 45, 27, -70, 78, 59, 49, -94, -43, -1, 94, -97, 64, 13, 12, -39, 18, 31, 98, 37, 48, -88, 106, -86, 80, 80, -35, -36, 69, -86, -98, 71, 78, -55, 27, 113, 46, -3, -85, -23, -117, -27, 76, 92, -13, -81, -41, 1, -6, -95, 5, 32, 1, 22, 66, 84, -30, 99, 36, -46, -69, -65, 75, 2, -21, 69, 50, -62, -54, -34, 6, -47, 69, 24, 103, -64, 111, 63, -49, 101, 51, -79, -72, -73, 108, -76, 4, -68, 3, -75, 82, 96, -1, -55, 67, 22, 33, -58, 38, -102, -78, 92, -10, -65, 82, -113, -51, -60, -24, -49, 98, 0, 42, 113, -21, 51, 90, 102, 2, -64, 62, 9, 24, 33, -75, -22, 36, 79, -47, -105, -17, -103, 6, 31, -42, 82, 70, -58, 45, -27, -12, -93, -64, 16, 19, -37, -48, -88, -44, 32, -65, -46, 65, 85, -48, -18, 93, 11, -17, 23, 0, 95, 30, -91, -56, 16, -19, 31, -74, 12, 38, 20, 77, 8, -85, 18, -19, 69, 56, -30, 2, -31, -4, -70, -79, 74, 70, -72, 20, -75, 46, -80, -50, -65, 31, -24, -6, 60, 34, -52, -32, -78, 66, 40, -93, -61, 111, -96, -94, -6, 105, 100, 78, 68, -38, -41, -8, -86, 27, 90, 1, 25, -6, 106, 68, -86, -38, -62, 27, -43, 16, 83, 11, 93, -84, -16, -82, -39, -1, 45, -25, -9, -90, -52, 73, 43, -44, -31, 38, 76, 111, 12, 102, -79, -62, 33, -91, 64, 83, -90, 10, -37, 50, -27, 98, -9, -60, 68, 37, 79, 113, 12, 75, -21, -74, 27, -56, -49, 38, -39, -14, -91, -91, -32, -80, 83, -72, -33, -19, -64, 47, 38, 50, 42, -29, -43, -22, -72, 21, -26, -84, -77, 63, 95, 68, -2, -18, 69, 97, -5, 4, -63, 37, -43, -50, 97, 91, -90, 14, 75, -59, -88, 72, 17, 85, 91, -88, 76, -94, -51, -101, -1, 10, 66, 101, -2, -82, 87, 32, -95, 41, -25, -3, -44, 12, -62, -102, -52, -49, 40, -14, -39, 103, 101, 0, 74, 25, -65, 97, -28, -83, -42, -72, 14, 60, -58, -42, 25, 22, -73, -93, 67, 40, -7, 71, -51, -110, -46, -5, -77, -67, -81, 16, 73, -65, -77, 89, -32, -12, 72, -20, 74, 51, 30, -13, -65, -54, -80, 37, 92, 37, 0, 18, 28, -34, -30, 101, -52, 82, 31, -24, -59, -18, -58, -73, 65, -107, -23, -80, -34, -13, -119, 15, 103, 16, -74, -76, -80, 45, -73, 96, 90, -23, 73, 45, 79, 115, 93, -45, 88, -33, -91, 86, -80, 108, -15, 61, -45, -64, -106, 69, 41, 99, -34, -82, 67, 80, 8, 86, 50, 79, -67, 98, 111, -31, 0, -18, 107, 17, -13, 22, -68, 16, 95, 9, 31, -108, 18, 96, -16, -23, -35, 82, -102, -86, 25, 3, 65, -75, 41, -65, -41, -24, -28, 46, 15, -5, -86, 109, -62, -97, -45, 86, -45, -50, 79, 50, -29, 67, -46, 26, 22, 3, 18, -62, 14, 52, -72, 60, -89, 77, 28, 39, 35, -57, 54, -82, 6, 2, 41, -94, -36, 98, -76, -86, -46, 85, -12, -73, -49, -42, -30, 55, 73, -22, 84, -4, 61, 113, 109, -14, 36, -32, 91, 41, -87, 39, 27, 6, -7, -1, 58, 105, -103, 105, -90, 69, -90, -10, -65, 32, -13, 71, -73, 38, 112, 35, 27, -43, 63, -99, -28, 54, 36, -91, 77, -42, 35, 44, 40, -23, 42, -75, -83, 26, 64, 107, -79, 80, 42, 94, 37, -4, 82, 23, -65, 0, -49, 110, -69, -22, 105, -5, -111, 57, -25, 68, 52, -24, -6, 91, 92, -78, -80, -43, 76, -52, 34, 83, -38, -25, 54, -38, -90, -21, -67, -76, 0, -12, 7, 111, -29, -18, -70, 39, -60, 118, 83, -114, 56, -92, -29, -1, 54, -13, 108, -50, 67, 116, 94, -11, 107, -38, 8, 107, 97, 25, 85, 58, 23, -45, -9, -11, 90, -106, 103, 77, -78, 58, -92, 0, 107, -116, -19, 13, 94, -3, 89, 8, -61, 48, 46, -55, 100, -38, -27, 2, -54, -68, 73, 23, 66, -94, -54, 42, 30, 14, 40, -56, -98, 18, 99, 67, 13, -37, -66, -28, 9, 16, 40, 6, -80, 29, 46, -11, 7, 50, -80, 101, -27, -28, -33, 87, -82, -43, 5, 88, 88, -113, -21, -34, 109, -27, -9, 81, 75, -74, 12, -100, 67, 32, 100, -47, 21, 76, -40, 71, 36, -40, -15, -16, 84, 68, -83, 10, 28, 76, 67, -60, 94, 47, -14, -69, -115, 22, -48, -5, -44, 58, -85, -19, -14, -89, 0, 101, 89, 20, 103, -84, -43, 92, 19, 96, -75, 18, -8, -5, -61, 100, 51, -41, -6, -5, -9, -29, -79, -8, 7, -61, 48, -71, -24, 31, -26, 49, -14, 32, -85, 64, -42, 35, 80, 74, 11, 70, -1, 27, -31, 55, 108, 73, -69, 46, 98, 99, -90, 4, -76, 17, -85, -79, -57, 89, -96, -83, 64, 16, -14, 86, -35, -78, -77, -9, 26, 114, -11, -27, -90, -55, 11, 110, 5, 39, 111, -10, -49, -4, 32, 61, -56, 101, 92, -34, 61, -22, -82, 104, -84, -37, 86, -11, 24, -23, 31, -8, 1, -43, -41, -58, -82, -72, -52, 26, 20, -54, -74, -21, 58, -24, 77, 25, -59, 20, 45, -36, 85, 81, 35, 81, -30, -43, 106, -45, -49, 2, -37, -50, 38, 38, -20, 33, -16, 50, 3, 78, 109, 49, -97, 111, -5, -16, 63, 78, 15, 87, -22, 8, -71, 78, 36, 50, -56, 62, -49, -27, -86, -53, 0, -43, 43, -65, -89, 93, 17, 64, 0, -21, -12, 48, 46, 3, -92, -37, -77, -79, 7, -98, 47, -42, -11, 97, 71, -16, -25, 78, -24, 66, -67, -16, 96, -25, 80, -21, 15, -19, -18, -80, 110, 5, 40, -46, -86, 47, 64, -100, 78, -20, -45, -41, 59, -18, 105, -57, 44, 78, 81, -32, 42, -58, 8, -12, -83, 29, 46, 59, -71, 72, 44, 4, -31, 68, -11, 98, 27, -64, 1, -66, -53, -108, -84, -33, -75, 30, -85, 57, -44, -66, 49, 55, 43, -20, -88, -74, -49, 53, 61, -7, 86, 16, 73, 31, -12, 75, 60, -80, -77, 2, 16, -70, 32, 76, 2, 113, 13, -103, 14, 14, 5, 14, -30, -1, -79, -110, 102, -105, 33, 54, -65, -93, 50, 84, -13, -27, -71, 7, 29, 41, -73, -33, 110, 85, 32, 91, -7, -98, 34, 13, -35, 113, -74, 1, 99, 93, 43, 70, 
  -35, 58, -100, -30, 11, -76, 59, 75, 89, -114, 92, -37, -70, -53, 92, 66, -15, 33, 88, 31, 92, 82, -38, -24, 81, 16, -32, 37, -19, -94, -56, 16, 95, -83, -100, 84, -45, 21, -75, 9, 9, 63, -77, 18, -37, 76, -11, -106, -19, 33, -94, -82, 23, 90, 39, -37, 26, -49, 16, -94, 15, 35, 33, -8, 80, -84, 76, 90, -22, -57, -99, -32, -28, 13, 33, 84, 78, 20, -105, 7, -84, -13, -69, -115, -75, 38, 43, 10, -56, -24, 78, -37, -83, -62, -74, -44, -79, 18, -8, 52, 18, -38, -107, -37, 91, -61, -23, 97, 16, 83, 72, 14, 115, -60, -64, -95, -4, -7, -6, 55, -29, -77, 54, -85, -25, 90, 6, -19, -23, -91, -91, 19, 31, -7, -76, 91, -66, 64, -63, -16, 51, -24, 28, 56, -63, 26, 102, -80, -92, 106, -53, -34, -52, -25, -66, -64, 84, 90, 2, 82, -41, -54, -104, -33, 74, -2, 86, -23, -36, -73, -102, 102, -7, 75, 30, 95, -96, 29, 47, -53, 25, 64, -14, -90, -36, 61, -73, -90, 47, -18, 17, -16, -94, -100, 36, -38, -12, 94, -10, -1, 38, 91, -29, 7, 68, -38, 45, 89, -47, 30, -20, -36, 52, -93, -71, 2, 115, -9, -108, 74, -83, -24, 69, 72, -101, -62, 65, -19, 12, 30, -59, -103, -14, -2, -51, 70, -31, 18, -18, -64, 71, 89, 17, -39, 81, -4, 81, 3, -55, -78, 72, 41, -23, -2, -57, -40, 19, -37, -51, -35, 40, 7, 51, 86, 36, 17, -24, -65, -52, 6, 63, 60, -57, -63, 30, -25, 1, -22, -70, 49, -47, 75, -81, 26, 26, 18, 9, 16, -67, -45, 65, -29, -103, 83, 73, -19, -56, -39, -90, 94, -52, 13, 19, -81, -31, -113, 106, -67, -38, 74, 57, -17, -94, -24, 67, -18, -4, 42, -44, -8, -3, 13, 18, -74, 76, 25, -107, 53, -33, 94, -69, -38, -47, 110, 43, 46, -43, -51, -79, -75, -46, -69, -50, -90, -4, 9, -82, -80, 33, 94, -26, 46, 83, -21, -87, -1, -69, -95, -95, -4, -93, -48, 93, -37, 69, 57, -47, 67, -13, 2, -20, 21, 59, -55, -53, -88, -15, 52, 50, 89, -29, 61, -76, -60, 90, -41, -20, -82, -24, 67, 66, 28, 35, 38, -33, 34, -34, -37, 41, -73, -25, -31, -26, -88, -111, -68, -107, 76, -76, 72, -6, 88, 83, 110, -22, 30, 13, 93, -21, 56, -20, 73, 95, 108, 41, 99, 36, 59, 92, -99, -72, 0, 11, -49, 84, 66, -50, -46, -78, 13, -16, -96, 68, -45, 18, -56, 46, 42, -2, 90, -85, -92, 19, 22, -79, 78, -41, 41, 66, -4, 59, 42, -7, 55, 5, -92, -61, -52, 20, -14, 74, 83, 44, -22, -113, 18, 83, 69, -111, -59, -20, 98, 95, 53, -102, 95, 50, -70, -58, -110, -81, -26, -67, 28, 52, 41, 64, -15, 11, 3, 45, 32, -58, 39, -36, 69, 79, 5, -91, 91, 88, 71, 66, 84, 32, -14, -45, -66, 56, -6, 44, -51, -18, 76, 35, -41, 22, 79, -65, -75, 49, 79, 53, -27, -16, 31, 29, -88, 81, -71, -1, -83, 34, -67, 4, 82, -32, 47, 72, -91, -26, -34, -65, -27, -83, 25, 86, -45, 8, 36, 47, -111, -10, -32, -3, -79, 40, 88, 21, -11, 63, -76, 10, 84, 42, 88, -10, 42, -85, -41, 3, -14, -25, 79, 83, -26, 73, -16, 27, -58, -22, 34, 33, -101, 100, -74, 0, -12, 92, -106, -53, -56, 38, 84, 2, 33, -70, 10, 76, -68, -74, -4, 72, 108, 68, -73, 84, 50, 19, -84, -89, -35, 47, -34, 28, -19, -117, -16, -105, 35, -109, 91, 83, -87, -3, -50, -3, -103, -4, 82, -52, 31, 76, 54, -19, 6, 27, 90, -29, 47, 9, -36, -80, -76, -67, 20, -61, 68, -74, 52, 59, -10, -19, -62, -48, -36, 16, 113, -82, 41, 3, 3, -75, 64, -88, -14, -37, -36, 8, -62, 50, 89, -105, -54, 76, -18, -67, 27, 60, -15, -70, 22, 47, 52, 31, -95, -53, 36, -35, -13, 48, -44, 41, 91, -79, -104, -67, 89, 108, -70, -97, -106, 19, -27, -66, -63, 88, -46, 24, 52, -93, -77, -15, -58, 85, -82, 18, -64, -37, -94, -51, -7, -31, -30, -43, -15, -40, 21, 55, 86, -8, 2, -47, -62, 21, 38, -104, 64, 45, 99, -65, -67, -86, -45, -80, -87, -107, 75, 94, -44, -45, -1, -19, -69, 22, 24, -1, 11, 5, -45, 95, -2, -88, -41, -69, 32, -41, 52, -27, -24, -69, -25, -55, -39, 86, 6, -28, -60, -40, -58, -41, 89, 38, 70, 47, 101, -26, -20, -53, 49, -79, -111, -102, -87, 31, -31, -12, -24, -23, 29, 58, -30, -46, -46, 90, 53, 63, 72, -40, 59, -108, -112, 75, -24, 7, -31, -80, 13, 3, -46, 41, -32, -62, 8, 16, 42, 18, -40, 53, 89, 72, 104, -7, -56, 89, -56, -19, -1, -78, -76, -87, 102, -38, -75, 42, 77, 104, -60, -67, 27, -105, -10, 52, -12, 34, 15, 95, -49, 26, -82, 10, -81, 81, 77, 97, -63, -65, -2, -79, 68, -19, 77, -3, -13, 6, -2, 80, -92, -89, 75, 50, 100, -105, 82, -79, 31, 57, 2, 73, -114, 37, 45, 40, -70, -8, -98, -13, 11, -48, 8, 99, -16, -24, 72, 40, -24, -67, 100, -109, -76, 29, -43, 55, 14, 6, -53, 18, 1, -95, 27, -13, -74, -1, 42, -24, -30, -10, -60, 73, -88, 10, 62, 2, 56, -60, -17, 94, -32, 50, -45, 79, 39, 77, -33, 51, -38, 44, -43, 88, -89, -5, 39, -20, 45, -23, -41, 70, 66, 64, -92, -83, 37, 70, -79, 48, -20, -88, -85, 8, -21, 91, -55, 38, 28, 26, -78, 81, 73, 11, 13, -43, 6, -84, 40, 47, 59, -71, 86, 7, -59, 86, -84, 96, 45, -49, -19, 26, 8, 57, -14, -62, -60, 23, 28, 4, 68, -23, -1, 102, -57, 52, -43, -69, -24, -5, -71, -32, -79, -71, 78, -3, 48, -48, 95, 36, 11, -15, 89, 18, -3, -74, 112, 85, 46, -84, -96, 54, -21, 41, 14, -97, -44, 77, 17, 52, -32, -47, 65, -60, 27, 70, -107, -73, -23, -56, 83, 48, -86, -7, -77, 5, -54, -111, -86, 100, 5, -95, 93, -65, -53, 45, 65, 27, 28, -104, 29, -81, 57, 78, 2, 41, -53, -74, -74, -98, -44, -70, 76, 30, -67, -10, -37, -52, 47, 58, 55, 75, -61, 89, -109, 28, 91, -44, -20, 51, -69, -81, -50, 54, -71, 38, 90, 11, -53, -43, -34, 0, 94, -94, 24, 24, 69, -92, 80, -13, -58, -79, -62, 28, -81, -79, -50, -56, -7, -61, -32, 31, -27, 89, 80, 33, -72, 64, 6, 6, -40, 1, -47, 40, -19, -38, 24, 90, -60, 7, -109, 92, -82, 99, -66, 59, -82, -65, -61, -18, -31, 62, -75, -44, -77, 32, 27, -6, 48, 64, 86, 93, 18, -43, 44, 1, 88, 10, -71, 86, 15, -16, -87, -68, -3, -111, 61, -31, -8, 18, 23, -48, 69, 46, -1, -53, -35, -35, 23, 69, 26, -105, -41, -104, 10, 53, 16, -90, 39, -42, 85, 36, -17, -55, 56, -78, 26, -51, 43, 56, -12, -40, -71, 16, 93, -45, -47, -75, -26, 3, -68, 68, -25, 46, 99, -97, -92, -28, -93, -71, 14, -109, -77, -85, 96, 53, 66, 97, 3, 21, -99, -80, -28, 74, 40, -34, 58, -92, 83, 35, 2, -48, 88, -100, -23, 
  -12, 53, 8, 53, 77, 31, -54, 6, -18, -60, -74, -26, 26, 80, -11, -39, 55, 70, 13, -30, -36, -4, 67, 45, 35, 92, 15, 18, 61, 43, 108, -49, 69, -8, -51, -29, -20, 9, -70, -3, -77, 33, 88, 76, 27, 58, -85, 72, -11, -30, -12, 63, 25, 31, 113, 78, -26, -53, 0, 32, -17, -45, -88, 25, -65, -66, 33, -81, -10, 46, -35, -38, -32, 11, -70, 7, 47, -88, 80, 60, -50, -2, -64, 43, -45, -25, -44, 91, -40, 40, 17, -90, 33, 52, -96, 84, -15, 92, -42, 23, -90, -98, -75, 57, -95, 37, -109, -61, -90, -105, 102, 62, -10, 85, -13, 108, 40, 89, -46, 99, 63, -58, 58, 69, 14, -73, 17, -58, 90, 66, 102, 20, 111, 48, -1, 93, 77, 15, 93, -98, 25, 81, -69, 25, 44, 28, 49, -63, -73, 103, -19, -71, -87, -41, -68, 36, -91, 69, -91, -29, -82, 64, 16, 93, -89, 97, -63, -67, 3, 45, -89, 87, -44, -49, -81, 5, 61, 94, 90, 64, -69, 87, -32, 2, -20, 52, 73, 60, 23, 62, 83, 92, 14, -44, 100, -55, 92, -73, 7, -86, -93, -29, -56, -97, 119, 40, -21, 13, 61, 2, -81, -86, -81, 25, 46, -58, 95, -20, -77, 94, 72, 83, -35, 30, -89, -72, -22, 16, -33, -90, -83, 49, 19, 76, -4, 30, 58, 12, -32, -15, -95, 67, -94, -48, -95, -70, 68, 105, -17, 93, -17, -79, -21, -14, 80, -69, -103, -79, -5, 30, 4, -74, -82, -49, -54, -69, 107, -75, 25, -3, -88, -11, -49, 5, -98, -8, -49, 61, -6, -25, 54, -18, -57, -25, -57, 41, 48, 81, 30, -16, -67, -55, 65, 105, -26, -3, -8, -41, 111, -44, 27, 109, 97, -107, 38, -82, -49, -97, -66, -35, -22, 44, -61, 38, -46, -20, -24, 38, 25, -87, 10, -87, 17, 75, 27, -56, 1, -81, -76, -46, 44, -40, -79, 8, -78, -33, -70, 79, 34, -74, -24, 48, -8, 76, 19, -103, -34, 63, -12, -16, 65, -35, 10, -36, -45, 28, -4, -88, 19, -42, -21, -65, 63, 45, -51, 77, -3, 43, 81, -2, 60, 42, 25, -11, 58, 108, 22, 103, 114, -31, -32, -18, 37, 25, 47, 43, -8, 59, -83, 21, -14, 28, 48, 104, 90, 57, -70, 6, 83, -70, -11, -20, -39, 95, -39, -31, 23, -66, 60, -83, 108, 2, 20, -88, 22, -67, 68, 70, -28, -81, -50, 55, 27, 67, 47, -36, 20, 33, 22, -13, -42, 72, -33, 66, -21, -57, -53, -67, -86, 65, -65, -61, 57, -11, -29, -105, -10, 4, -80, -81, -92, -13, 1, 88, 100, 81, -49, -43, -35, -50, 3, 44, 53, -112, 35, 14, -9, 50, -21, 76, -32, -50, 53, 115, -72, 107, 17, 56, 35, -70, 46, 57, 16, -51, 28, -52, 20, 75, -8, -22, 52, -36, -44, 18, -49, 69, 6, -83, 86, 92, 24, -53, -6, -54, -35, 9, -104, -80, 62, -92, 100, -31, -19, -68, -62, 44, -77, 71, -31, -44, -32, -16, -63, 42, -25, -3, 103, 66, -57, 0, 56, 94, 24, -65, -73, 54, -17, 72, -84, -70, 42, -31, 1, 4, 2, 73, -55, 71, -59, 50, 81, -89, -71, -13, -29, 79, 48, 46, 19, 36, 52, 43, -79, 42, -17, -80, -47, 66, 96, -100, 55, -11, 38, 47, 33, 72, -13, 2, -80, -60, 106, -84, 94, 31, 30, 59, 113, -42, -85, -92, 81, -16, -1, 11, 50, -5, -57, 72, 56, 10, 64, -81, 23, 92, 43, 58, 18, 32, 30, -85, 53, 23, -87, 17, -73, 93, 97, -30, -32, 87, -67, -72, 93, 62, -60, 62, 22, 19, -55, 15, -12, -1, 66, -95, 0, 0, -107, 38, 80, 75, 94, 80, 13, 70, 19, -97, -50, -4, -50, 15, -108, -27, 111, -38, -17, -66, -10, 87, 9, 41, -64, 15, -92, -22, -41, 10, -43, 10, -30, -73, 70, 23, -33, -78, -47, 107, 42, -68, -71, -89, -86, 84, 20, 77, -46, -24, -23, 95, -34, 23, -2, -87, 54, -19, -17, 44, -86, -53, 112, 53, 94, -77, -84, 66, -61, -98, 31, 85, 26, -30, 19, -35, 45, 10, -13, -61, 6, 51, -89, -30, 81, -61, -62, 34, -2, 48, 50, -43, 19, 13, -4, -57, -19, -3, -68, -103, 69, 26, -13, 5, 83, 107, -75, -54, -12, -39, 79, 91, -74, 52, 19, -28, -52, -5, 60, 52, -26, 9, 32, 5, -60, -1, -102, 87, 15, 16, -63, -77, 31, 94, -66, 14, 103, -68, 12, 66, -100, 60, 76, 49, -93, -93, 73, 20, 79, -7, 93, -39, 58, -48, -84, 94, -31, 60, 35, 40, 83, -66, 11, -46, 64, -46, -42, -99, 6, -57, -92, -57, 44, -17, -109, 49, 60, 9, 66, -12, -66, 108, -45, 62, 54, -40, -67, -2, -41, 63, -30, 59, -13, 70, -84, -23, 82, -40, 14, 22, 14, 4, 98, 92, 42, 65, 82, -37, 59, 110, -55, 5, 69, 17, -25, 100, 31, 25, 28, -2, -87, 42, -14, -107, 65, -48, -75, -65, 0, -15, 2, 9, 58, 80, -96, 50, 44, -33, -23, 116, -52, 15, -46, 10, 30, -99, -90, 42, 27, 86, -92, -51, 44, 56, -25, 12, -10, 52, 86, -101, -38, -48, -38, 72, -71, 51, -4, -92, -50, 21, -79, 92, 112, 0, 41, 87, -89, 40, 109, -85, -55, -86, 88, -93, -6, -119, 90, 24, -86, -25, -37, -97, 102, -4, -72, -96, -69, 33, -13, -79, 58, 67, 73, 21, 40, 69, -53, -28, -28, -50, -88, -34, -84, 22, 33, 86, -52, 105, 74, 37, 3, -36, 122, -82, 24, -78, 64, -80, -97, -89, 8, 89, -75, 94, 73, -41, -18, 86, -22, 78, 41, 79, -33, -91, -45, 95, -25, 85, -92, -47, -67, -76, -13, -88, 5, 55, -41, -21, 114, 81, -102, 112, 79, 64, -17, 89, -95, -51, -31, -87, 63, -104, 72, 92, -2, -39, 82, 40, 111, 115, -45, -6, 68, 85, 85, 91, -46, -92, 18, 93, 77, 38, -40, 110, -51, 54, -3, 40, 36, -85, 34, 55, 63, 6, -62, -103, -20, 79, 46, -24, -12, 96, -80, -59, 89, -2, -12, 42, 25, -1, 104, 17, 15, 104, 48, -58, 58, 61, -86, -76, 72, 75, -91, -4, 82, -37, -72, -87, -32, 104, -40, -98, -37, 65, -70, -26, 100, -43, -7, -72, -92, -70, -91, 86, -63, -69, 12, -107, -28, 4, -37, 86, 103, -74, -36, -69, -12, -31, -10, -78, 60, 49, -27, -114, 81, -70, 89, 12, -53, -108, 86, -64, 5, -22, 34, -49, 100, -79, 19, 29, -10, -59, -110, -87, 48, 49, 1, 4, 36, 37, 86, 84, 81, -52, -20, 52, -97, -91, 74, 64, 6, -102, 97, -18, 79, -62, -85, 91, -105, -30, 31, 59, 68, 92, 29, 90, 34, 19, 44, 101, 71, 77, 42, -24, 107, 72, 109, -42, -64, 88, 81, -37, -71, -23, 119, 54, -103, 24, 81, -79, 116, -10, 52, -14, 34, 94, 87, 53, 34, -84, -39, 6, -30, -36, -108, 2, -31, 66, 53, 44, 39, -109, 90, 32, 55, 17, -22, -84, 19, -46, -12, -24, 95, 103, -25, 91, 12, 71, 45, -71, -55, -99, -101, -47, 24, 89, -93, -23, 4, 35, 31, 58, 71, 66, 108, 24, 59, -91, 72, 2, 81, -74, -45, -57, 47, -28, 84, -69, -45, 56, -18, -82, -23, 56, -43, -64, 66, 67, -99, 9, -101, -6, -27, 31, 39, -44, 74, -101, -7, 83, -83, 31, -11, 80, 
};
const TfArray<2, int> tensor_dimension30 = { 2, { 10,1280 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00064840563572943211, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[2*90] = { 
  -54, -8, -55, -62, 110, 6, 107, 1, 44, -94, -109, -57, 77, -33, 122, -24, -110, 9, 93, 14, 78, -42, 102, -58, -39, 88, 2, -115, -76, -88, 31, 15, 1, 96, 27, 43, -15, -113, 68, 87, -13, -28, 33, 20, 14, -58, -61, -38, 103, 43, -16, -98, -33, 102, 59, -44, -94, -112, 27, 107, 80, 92, -55, 102, -115, -7, -83, -11, 53, -96, -83, -60, -109, -14, -18, -44, 58, 49, -88, -114, 102, 19, -83, 24, -26, 95, -58, 106, 23, -103, 
  97, 120, -92, -75, 13, 98, 18, -54, 72, -106, -87, 55, -68, 5, 28, 87, -83, 99, 101, 73, -67, -1, -21, 49, 98, -6, -78, -90, 59, 88, 112, -115, 27, 9, -67, 56, -69, 49, -51, -24, -28, -20, 70, 72, 80, -61, 127, 58, -108, -60, 78, -85, 117, 34, -82, 31, -11, -70, -71, 103, -41, -19, -47, -115, -89, 99, 83, 56, -15, -26, 23, -86, -15, 6, -53, -63, -87, 7, -101, -85, 3, 48, -35, 62, 40, 78, 50, 108, -26, -42, 
};
const TfArray<2, int> tensor_dimension31 = { 2, { 2,90 } };
const TfArray<1, float> quant31_scale = { 1, { 0.002074019517749548, } };
const TfArray<1, int> quant31_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(8) int32_t tensor_data32[48] = { 7817, 9316, -5, 1457, 53449, 3739, -3400, 13821, 5080, -1531, 12090, -56, 484, 1930, 387, 2729, -2244, -6805, 10031, 25897, 7671, -670, 1562, 11845, 8578, 4224, 954, 6685, -1152, -3599, 11187, 3209, 3015, 3723, 8632, 5699, 2205, 2236, 13328, 11559, 2154, 17126, 5799, -3457, 1579, 2329, 7636, -1009, };
const TfArray<1, int> tensor_dimension32 = { 1, { 48 } };
const TfArray<48, float> quant32_scale = { 48, { 9.9089789728168398e-05, 8.2775382907129824e-05, 0.0001262993027921766, 0.00018900308350566775, 2.4179122192435898e-05, 0.00014362647198140621, 0.00015754603373352438, 6.2105995311867446e-05, 9.8613432783167809e-05, 0.00019810011144727468, 7.3056631663348526e-05, 0.00012531023821793497, 9.759154636412859e-05, 0.00020309186947997659, 0.00014184929023031145, 0.00019641350081656128, 0.00020365367527119815, 0.00010350330558139831, 8.4438892372418195e-05, 3.7638848880305886e-05, 0.00010440285404911265, 0.00017499219393357635, 0.00026886060368269682, 7.5760821346193552e-05, 9.1749046987388283e-05, 0.000141076699947007, 0.00020238567958585918, 0.00010580653179204091, 0.0001667513424763456, 9.8447009804658592e-05, 8.4453211457002908e-05, 0.00013675527588929981, 0.00021021184511482716, 0.00013568825670517981, 8.4798593888990581e-05, 0.00012463060556910932, 0.00021733299945481122, 0.00021849744371138513, 6.8535504397004843e-05, 8.0001169408205897e-05, 0.00012922473251819611, 5.5134260037448257e-05, 0.00013413428678177297, 0.00019005252397619188, 0.00011085814912803471, 0.0001555897033540532, 0.00011675664427457377, 0.00011433202598709613, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int32_t tensor_data33[48] = { -14038, -799, -3492, 23078, 21845, 7658, -21, 2727, 535, -4152, -3159, 8693, -58, 8006, -3273, -5230, -1805, 3, 4435, 840, -151, 8954, -1773, 185, 29, -30, -208, -4679, -7, 257, -2018, 45, -2, -12312, -463, 9544, -804, 514, 28, -1186, 174, -464, -122, -687, -35, -65, -10200, 5487, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.00011962342250626534, 0.00019520366913639009, 0.00013186612341087312, 7.5595184171106666e-05, 0.00020666900672949851, 0.00012805272126570344, 0.00062430993421003222, 0.00032871466828510165, 0.00020081475668121129, 0.00020811236754525453, 0.00055111938854679465, 0.00014550988271366805, 0.00045889819739386439, 0.00010894025763263926, 0.00052567204693332314, 0.00021966019994579256, 0.00010132663010153919, 0.0037105376832187176, 0.00026791467098519206, 0.00085039343684911728, 0.00022731442004442215, 0.00015460504801012576, 0.00017844737158156931, 0.00022150386939756572, 0.00031551954452879727, 0.00022384598560165614, 0.00025051648844964802, 0.00052776926895603538, 0.0002324821543879807, 0.0011831903830170631, 0.0005147273768670857, 5.921822230448015e-05, 0.0002337839687243104, 0.00026962006813846529, 0.00029954305500723422, 0.00011188435746589676, 0.00014445722626987845, 0.00020158648840151727, 0.00050285761244595051, 0.00033450365299358964, 0.00011928666936000809, 0.00077544193482026458, 0.00030318618519231677, 0.00072638504207134247, 0.00038647875771857798, 0.00017985855811275542, 0.00025463986094109714, 0.00014100546832196414, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int32_t tensor_data34[48] = { 330, -997, 1569, 3689, 6915, 1141, 4924, 5011, 5544, -1129, -96, 2736, 4310, -371, 2806, 1811, -569, 3739, 5717, -3094, 5772, -1254, -2265, 3261, 7544, -5051, -306, -6231, -13, 339, 1677, 1094, 1678, 1118, 7503, 2082, 6120, -2176, 548, 1110, 2061, 1010, 3770, 5948, -127, 832, 996, 1924, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00022367393830791116, 0.00019524880917742848, 0.00020883895922452211, 0.00015054375398904085, 0.00010339651635149494, 0.00019182130927219987, 0.00013398412556853145, 0.00012192506255814806, 0.00012800100375898182, 0.00028359322459436953, 0.0002780795912258327, 0.00015733738837298006, 0.00016587958089075983, 0.00016377156134694815, 0.00020864608814008534, 0.00025704360450617969, 0.00027402269188314676, 0.00019454433640930802, 0.00014698914310429245, 0.00014978676335886121, 0.00013337633572518826, 0.00019146208069287241, 0.00012037297710776329, 0.00018672090664040297, 9.9243348813615739e-05, 0.00011078747047577053, 0.00015521074237767607, 0.00010895953892031685, 0.00018973743135575205, 0.00018062452727463096, 0.00018177127640228719, 0.00042211689287796617, 0.00020722943008877337, 0.00016760997823439538, 0.00011272988194832578, 0.00019129425345454365, 0.00013116850459482521, 0.00014926806034054607, 0.00020863962708972394, 0.00014272301632445306, 0.00012921486631967127, 0.00016057438915595412, 0.00015416537644341588, 0.00012871417857240885, 0.0001952175225596875, 0.00035967704025097191, 0.00015406277088914067, 0.00014714730787090957, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int32_t tensor_data35[8] = { 3028, 31756, 1830, -11803, 14912, 2079, 24513, 10227, };
const TfArray<1, int> tensor_dimension35 = { 1, { 8 } };
const TfArray<8, float> quant35_scale = { 8, { 0.00021455221576616168, 0.00010344332258682698, 0.00030920753488317132, 0.00018583670316729695, 0.00031513816793449223, 0.0001659574918448925, 0.00014133720833342522, 0.00017409736756235361, } };
const TfArray<8, int> quant35_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(8) int32_t tensor_data36[48] = { 12248, -4444, 8107, 443, 7338, 10382, 14605, 12542, 34963, -525, -8626, 22464, 1, -2140, 12704, 24786, -263, 23602, 27052, -1007, 22944, -10524, -677, 3193, 23489, 169, 211, -336, 16152, 13216, 20303, -7709, -9719, 10285, 22343, 14643, 18947, -1884, 15263, -289, 41682, -6402, 26446, 25090, 22678, -23346, -7050, 12347, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 9.869210043689236e-05, 0.00011220318992855027, 9.6558178483974189e-05, 9.3072092568036169e-05, 0.00010174111957894638, 0.000100624245533254, 9.8621268989518285e-05, 7.9662182542961091e-05, 5.6223485444206744e-05, 0.00011875145719386637, 0.00011606272892095149, 7.9580859164707363e-05, 0.00015293592878151685, 9.107086225412786e-05, 8.9636581833474338e-05, 6.5434185671620071e-05, 9.8666256235446781e-05, 0.00010909545380854979, 8.7108906882349402e-05, 0.00025515910238027573, 9.1115311079192907e-05, 0.00014317125896923244, 0.00019229532335884869, 7.3104958573821932e-05, 0.00010951930016744882, 0.00048788194544613361, 0.00010077869956148788, 0.00051364157116040587, 9.275393676944077e-05, 0.00012832017091568559, 9.2470581876114011e-05, 3.6722292861668393e-05, 0.00011502840789034963, 7.9917888797353953e-05, 0.0001333129039267078, 0.00010102435044245794, 0.00011051896581193432, 0.00011179134889971465, 0.00010246313468087465, 8.4937120846007019e-05, 5.5673252063570544e-05, 7.826380169717595e-05, 5.7299188483739272e-05, 0.0001008515027933754, 7.245037704706192e-05, 5.8205099776387215e-05, 6.8047054810449481e-05, 0.00010777970601338893, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int32_t tensor_data37[48] = { 11, 12825, -1289, -5570, 7459, -2986, 2905, 13250, 11113, -327, 2475, 8394, 8422, 2420, 9825, -522, -505, 19501, 1664, 7999, -825, -5684, 13616, 3037, -1200, 8841, 9606, 378, 6368, -5218, 941, 5737, 12199, 4860, 705, 1962, 2293, 9877, 6530, 2198, 4774, 441, 9597, -6453, 1342, 2981, 7628, -3059, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00016268926265183836, 6.9915098720230162e-05, 0.00018185959197580814, 8.0636273196432739e-05, 0.00012914078251924366, 0.00012039773719152436, 0.00014268263475969434, 7.0058711571618915e-05, 7.8417753684334457e-05, 0.00018109520897269249, 0.00017529749311506748, 9.6715833933558315e-05, 8.655469719087705e-05, 0.00014286437362898141, 8.0531834100838751e-05, 0.00010700934217311442, 0.00014932354679331183, 4.9559323088033125e-05, 0.00014787224063184112, 8.9531946287024766e-05, 0.00014649516378995031, 9.6246629254892468e-05, 6.3119892729446292e-05, 0.0001751256495481357, 0.00010884826770052314, 8.8447603047825396e-05, 7.4535077146720141e-05, 0.00017820450011640787, 9.8829019407276064e-05, 5.1059680117759854e-05, 0.00011704670760082081, 8.3549930423032492e-05, 7.1726557507645339e-05, 9.989763202611357e-05, 0.00011689309030771255, 0.00017489830497652292, 0.00011892092152265832, 8.086927846306935e-05, 0.00011887474829563871, 0.00013779992877971381, 0.00011808948329417035, 0.00021701096557080746, 7.3835100920405239e-05, 8.8476961536798626e-05, 1.9225939468014985e-05, 0.00013216333172749728, 9.6955744083970785e-05, 0.00011738470493583009, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int32_t tensor_data38[48] = { -1718, -1648, -1909, -395, 34751, -5688, -12848, -304, 0, 5467, 19260, -831, -610, 17478, 19210, 11648, -3003, 10771, 15277, -1846, -71, -1320, -205, -8600, 18425, -2193, 14241, 22819, 26388, -1359, -363, -2464, 23221, -22462, 12541, 17222, 14741, 18948, 18, 18015, 12893, -4405, -2708, -52, -775, 2208, -112, -41, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 8.3385246398393065e-05, 0.00017355810268782079, 0.00021015103266108781, 0.00043686229037120938, 8.0347803304903209e-05, 0.00019440312462393194, 7.3150535172317177e-05, 0.00030253789736889303, 0.00020164088346064091, 4.9968075472861528e-05, 5.2475548727670684e-05, 0.0001974853512365371, 0.00018039254064206034, 6.8241257395129651e-05, 0.00010473823931533843, 8.6209845903795213e-05, 0.00018162856576964259, 0.00021577723964583129, 9.6759402367752045e-05, 0.0001797814475139603, 0.0002359119534958154, 0.00037254372728057206, 0.00031118662445805967, 0.00010679009574232623, 5.9553527535172179e-05, 0.00030099175637587905, 6.5789827203843743e-05, 4.9974176363321021e-05, 5.5117514420999214e-05, 0.00019481543859001249, 0.00023119465913623571, 0.00013424668577499688, 0.00010462712089065462, 5.0236249080626294e-05, 9.194733138429001e-05, 7.3999588494189084e-05, 9.612467692932114e-05, 8.1416605098638684e-05, 0.00018921696755569428, 5.9721936850110069e-05, 7.7225435234140605e-05, 0.00015676452312618494, 0.00014267786173149943, 0.0003219354257453233, 0.00094149768119677901, 0.00014302958152256906, 0.00023114835494197905, 0.00024984465562738478, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int32_t tensor_data39[48] = { 1320, -240, 789, 3898, 1348, 5338, 7376, 7511, 27298, 1421, 10764, -593, 662, 5454, 1669, 3958, -79, -36, -536, 2779, 4259, -1408, -279, 11135, 17438, 4159, -922, -6100, 10306, 4796, 5074, 151, 3331, 13731, 5221, 902, 8956, 2909, 5901, 14843, 3925, 1374, 3717, -250, 15288, 1318, 9218, -2266, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00012922444147989154, 0.00017721278709359467, 0.00021613380522467196, 0.0001130038799601607, 0.00015612429706379771, 0.00012038635759381577, 0.0001115014820243232, 0.00010247846512356773, 3.5239285352872685e-05, 0.00018684982205741107, 7.789245864842087e-05, 0.00016204417624976486, 0.00027566886274144053, 0.00011812473530881107, 0.00013788834621664137, 0.00015000245184637606, 0.00013071190915070474, 0.00019941142818424851, 0.00026331399567425251, 0.00015022633306216449, 0.00014301932242233306, 0.0001996794599108398, 0.00025220026145689189, 6.9285139034036547e-05, 5.4093761718831956e-05, 0.00016490544658154249, 0.00025407059001736343, 9.1052934294566512e-05, 8.6927168013062328e-05, 0.00014314749569166452, 0.00010785122867673635, 0.00014904922863934189, 0.00013386411592364311, 6.5595595515333116e-05, 0.00014300168550107628, 0.00017668564396444708, 8.5804465925320983e-05, 0.0002082840510411188, 0.00012606380914803594, 6.1648846894968301e-05, 0.00013675697846338153, 0.00016705685993656516, 0.00014349978300742805, 0.00020910728198941797, 6.095153366914019e-05, 0.00024822514387778938, 9.8915501439478248e-05, 0.00011216100392630324, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(8) int32_t tensor_data40[48] = { -7379, -66, -5650, 799, -4009, 26653, 10123, -5451, -5789, -3416, 23787, 11689, -11065, -3401, -3871, -8087, 14221, -23565, -6647, -9738, 25606, -3576, -2697, -1385, 569, 4312, 26752, -652, 1293, 1297, -272, -12032, -9025, -740, -5568, -8622, 11266, 21135, 47, 3424, 22187, -5734, 427, -6028, 13481, 27701, 1290, -1769, };
const TfArray<1, int> tensor_dimension40 = { 1, { 48 } };
const TfArray<48, float> quant40_scale = { 48, { 0.00011843894753837958, 0.00010605789429973811, 5.8897294366033748e-05, 0.00010563271644059569, 0.00012637041800189763, 5.7034194469451904e-05, 0.00014828958956059068, 0.00018603811622597277, 0.0002530636265873909, 0.00011962966527789831, 0.00010217151429969817, 7.0442707510665059e-05, 0.00015050456568133086, 0.00017223968461621553, 0.00012545844947453588, 4.4819305912824348e-05, 7.5213938544038683e-05, 5.7441888202447444e-05, 0.00014948187163099647, 0.00011311870184727013, 6.4082123572006822e-05, 0.00016529577260371298, 0.00010059461055789143, 0.00017225574993062764, 0.00043995704618282616, 0.00014544963778462261, 4.5874341594753787e-05, 0.00023665698245167732, 0.00023274756676983088, 7.9679783084429801e-05, 0.0001421234046574682, 9.3655035016126931e-05, 8.7997213995549828e-05, 0.00023226553457789123, 0.00014081722474656999, 8.0557154433336109e-05, 0.00015857008111197501, 5.9165216953260824e-05, 0.00018624140648171306, 0.00017608156485948712, 7.7475080615840852e-05, 0.00013468593533616513, 8.8978471467271447e-05, 9.2221176601015031e-05, 0.00014115996600594372, 4.8132216761587188e-05, 0.00021299549553077668, 0.00027290754951536655, } };
const TfArray<48, int> quant40_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int32_t tensor_data41[48] = { 1927, 696, 6022, 4295, 9832, 428, 2652, 1083, -2593, -2530, 1676, 10585, 4309, -6465, 740, 7486, 7567, -4972, -320, 4955, 8641, 861, -71, 1281, 802, -4961, 1008, 66, 2827, 7406, 10852, 66, 5003, 3170, -3038, 3526, -1495, 3660, 8961, -3168, 1762, 315, -2007, 3245, -2817, 3875, 631, 2183, };
const TfArray<1, int> tensor_dimension41 = { 1, { 48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.00014813794405199587, 0.00017567106988281012, 0.00011116098175989464, 0.00015186803648248315, 8.8690161646809429e-05, 0.00014608347555622458, 0.00013961739023216069, 0.00017313014541286975, 0.00014069121971260756, 0.00019182807591278106, 0.00016377220163121819, 8.7376531155314296e-05, 0.00015765875286888331, 0.00011089947656728327, 0.00015377717500086874, 9.6937023045029491e-05, 0.00010027494863606989, 0.00011758655455196276, 0.00015645314124412835, 0.00012560495815705508, 9.7893091151490808e-05, 0.00014219401055015624, 0.00015362234262283891, 0.00015373490168713033, 0.00017908769950736314, 0.00012776834773831069, 0.00012852621148340404, 0.00015846127644181252, 0.00015049891953822225, 0.00010667310561984777, 7.99156041466631e-05, 0.00022315225214697421, 0.00014175489195622504, 0.00015994840941857547, 0.00015769123274367303, 0.00015279756917152554, 0.00020027255231980234, 0.00012399333354551345, 9.0456051111686975e-05, 0.0001502994418842718, 0.0001525423867860809, 0.00017887524154502898, 0.00017231296806130558, 0.00018600601470097899, 0.00018171856936533004, 0.00013930059503763914, 0.00019312719814479351, 0.00018670907593332231, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(8) int32_t tensor_data42[48] = { 39575, -10431, 47225, 26684, 25595, -9610, -16772, 1511, -1289, -8, -25230, 28311, 28089, -1209, 27960, -13531, 23061, -5903, 31843, 22121, 29011, 44544, 15066, 25873, 1368, -1806, -7580, 42, 436, 27639, 27374, 19756, 31548, 1171, -196, 8765, 23, 29271, -471, -2780, 22106, 1355, -5851, 32965, -72, 22071, -6827, -2656, };
const TfArray<1, int> tensor_dimension42 = { 1, { 48 } };
const TfArray<48, float> quant42_scale = { 48, { 4.8465411964571103e-05, 7.9279663623310626e-05, 4.1157763916999102e-05, 6.4201252826023847e-05, 0.00011867883586091921, 8.4560568211600184e-05, 6.6780703491531312e-05, 6.0572689108084887e-05, 0.00011648357758531347, 0.0001219036421389319, 7.2835639002732933e-05, 0.00012121846521040425, 7.7974211308173835e-05, 0.00020957655215170234, 6.0967558965785429e-05, 0.00010585800191620365, 9.6771073003765196e-05, 0.00013393559493124485, 4.629145041690208e-05, 7.1975271566770971e-05, 9.5049632363952696e-05, 4.2528889025561512e-05, 8.248031372204423e-05, 7.0091118686832488e-05, 6.2888480897527188e-05, 0.00019923191575799137, 8.0549791164230555e-05, 7.2002869274001569e-05, 6.9427718699444085e-05, 7.3810471803881228e-05, 9.2850401415489614e-05, 6.8294139055069536e-05, 6.6707420046441257e-05, 0.00012976137804798782, 0.00012426884495653212, 7.3465300374664366e-05, 0.00010331319936085492, 6.0753569414373487e-05, 0.00012762653932441026, 0.00015643492224626243, 6.9527763116639107e-05, 6.9421665102709085e-05, 0.00012204586528241634, 6.1079990700818598e-05, 0.00012277910718694329, 7.0988782681524754e-05, 8.6856052803341299e-05, 6.8408924562390894e-05, } };
const TfArray<48, int> quant42_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ 97, -118, 10, 
  /* [0][1][][] */ -113, 127, -4, 
  /* [0][2][][] */ 14, -15, 0, 
  /* [1][0][][] */ 20, 27, 54, 
  /* [1][1][][] */ -25, -127, 32, 
  /* [1][2][][] */ 3, 6, 20, 
  /* [2][0][][] */ -127, 102, 18, 
  /* [2][1][][] */ -31, -20, 61, 
  /* [2][2][][] */ -3, -4, 5, 
  /* [3][0][][] */ 54, 51, 9, 
  /* [3][1][][] */ 47, 66, 9, 
  /* [3][2][][] */ -85, -127, -19, 
  /* [4][0][][] */ -38, 60, -18, 
  /* [4][1][][] */ -82, 127, -45, 
  /* [4][2][][] */ -13, 17, -4, 
  /* [5][0][][] */ -77, -66, -4, 
  /* [5][1][][] */ 127, 105, 7, 
  /* [5][2][][] */ -47, -43, -3, 
  /* [6][0][][] */ 57, 119, -71, 
  /* [6][1][][] */ 48, -44, -127, 
  /* [6][2][][] */ 27, 27, -22, 
  /* [7][0][][] */ -45, -127, 36, 
  /* [7][1][][] */ 93, 61, 11, 
  /* [7][2][][] */ 14, -11, 3, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.018473751842975616, 0.020399753004312515, 0.020062800496816635, 0.015465610660612583, 0.018865054473280907, 0.019704878330230713, 0.012503535486757755, 0.0092278299853205681, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(8) int8_t tensor_data44[8*1*1*8] = { 
  /* [0][0][][] */ -61,110,5,-3,7,7,-127,-4, 
  /* [1][0][][] */ 91,-18,23,46,13,127,-2,-14, 
  /* [2][0][][] */ 127,-58,52,18,104,-56,75,3, 
  /* [3][0][][] */ -14,38,1,-22,-1,-83,-50,127, 
  /* [4][0][][] */ -127,-98,-107,-56,-35,49,111,9, 
  /* [5][0][][] */ 57,4,-2,-127,-9,64,-4,-15, 
  /* [6][0][][] */ 102,57,127,71,109,28,-77,2, 
  /* [7][0][][] */ -43,-58,24,-127,35,-125,53,34, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant44_scale = { 8, { 0.013249308802187443, 0.0038006382528692484, 0.0071859173476696014, 0.0053968396969139576, 0.0025548273697495461, 0.0066342405043542385, 0.0028770735953003168, 0.0040036365389823914, } };
const TfArray<8, int> quant44_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(8) int8_t tensor_data45[48*1*1*8] = { 
  /* [0][0][][] */ -43,-22,-47,13,-127,-6,9,31, 
  /* [1][0][][] */ -52,19,26,-74,127,3,-62,28, 
  /* [2][0][][] */ -7,-127,26,-59,-67,9,-33,-42, 
  /* [3][0][][] */ 40,127,-10,119,43,-27,54,-34, 
  /* [4][0][][] */ 5,-3,-36,-127,-5,-118,-9,-15, 
  /* [5][0][][] */ -23,104,-13,-20,10,127,53,-109, 
  /* [6][0][][] */ 27,-8,-12,-91,32,17,-127,74, 
  /* [7][0][][] */ -10,127,36,-26,90,71,118,18, 
  /* [8][0][][] */ -4,-127,16,-48,-72,16,-33,-21, 
  /* [9][0][][] */ -33,80,3,71,15,-95,41,-127, 
  /* [10][0][][] */ 39,-78,15,-95,-1,11,-32,127, 
  /* [11][0][][] */ -127,4,-4,-11,57,-48,-43,3, 
  /* [12][0][][] */ -6,-22,23,-46,-46,12,-10,-127, 
  /* [13][0][][] */ -50,120,111,61,-46,127,29,-16, 
  /* [14][0][][] */ -126,-77,-28,-6,27,14,127,1, 
  /* [15][0][][] */ 127,-24,-44,5,-74,1,13,-15, 
  /* [16][0][][] */ -76,-77,-127,31,-19,-8,-36,30, 
  /* [17][0][][] */ -45,-23,-107,7,-127,5,57,20, 
  /* [18][0][][] */ -6,-62,127,7,41,29,106,-38, 
  /* [19][0][][] */ 54,-77,4,-68,-9,-35,-56,127, 
  /* [20][0][][] */ -77,71,45,-3,116,-17,-127,-15, 
  /* [21][0][][] */ -22,-127,9,8,-61,-71,-37,-46, 
  /* [22][0][][] */ -36,-77,-20,5,-127,15,78,0, 
  /* [23][0][][] */ 127,-37,-21,7,-75,-14,3,-19, 
  /* [24][0][][] */ -18,-127,18,5,-14,27,-78,-34, 
  /* [25][0][][] */ -47,107,-106,-59,5,29,32,-127, 
  /* [26][0][][] */ 68,-34,-49,16,-127,11,31,-8, 
  /* [27][0][][] */ 40,-20,1,-127,18,0,-24,55, 
  /* [28][0][][] */ -105,44,-6,2,127,-28,-69,4, 
  /* [29][0][][] */ 35,-100,-48,83,-70,27,-100,127, 
  /* [30][0][][] */ 18,-127,3,-30,-97,51,-76,-18, 
  /* [31][0][][] */ -30,-61,-127,23,-61,-85,-82,40, 
  /* [32][0][][] */ 34,-33,-78,2,-127,-1,27,13, 
  /* [33][0][][] */ -17,-13,-7,30,-24,-127,-9,-58, 
  /* [34][0][][] */ 36,-3,127,10,20,9,-9,20, 
  /* [35][0][][] */ 37,-127,-9,-67,-89,4,44,108, 
  /* [36][0][][] */ 21,-5,-4,-127,8,1,3,31, 
  /* [37][0][][] */ 9,-127,4,8,-102,23,98,-2, 
  /* [38][0][][] */ -97,30,10,-22,127,-44,-56,1, 
  /* [39][0][][] */ -36,24,-35,3,-127,0,-39,19, 
  /* [40][0][][] */ -22,-56,-6,26,-127,14,70,6, 
  /* [41][0][][] */ 27,-74,-17,-109,-14,73,-36,127, 
  /* [42][0][][] */ 47,-42,62,-14,127,-18,7,-12, 
  /* [43][0][][] */ 127,-22,18,3,126,-30,-55,-22, 
  /* [44][0][][] */ -93,42,41,-22,92,-29,-127,-56, 
  /* [45][0][][] */ -20,-1,-30,96,23,-25,8,127, 
  /* [46][0][][] */ -3,29,-27,37,3,-127,-12,-73, 
  /* [47][0][][] */ 37,127,109,-35,56,90,71,-36, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant45_scale = { 48, { 0.0087279202416539192, 0.0060267974622547626, 0.0052753970958292484, 0.0022775873076170683, 0.010649227537214756, 0.011772763915359974, 0.0087567325681447983, 0.0077295703813433647, 0.006117724347859621, 0.011880208738148212, 0.0088518159464001656, 0.006810399703681469, 0.022011538967490196, 0.0028363761957734823, 0.010187190026044846, 0.0069075040519237518, 0.0076169976964592934, 0.0096847033128142357, 0.0097068678587675095, 0.010592611506581306, 0.0051663578487932682, 0.0057390215806663036, 0.002074450021609664, 0.0064075230620801449, 0.0037294900976121426, 0.013057484291493893, 0.0076279947534203529, 0.0031685794238001108, 0.0080545553937554359, 0.0027380988467484713, 0.005321490578353405, 0.0091237183660268784, 0.010431429371237755, 0.0028746956959366798, 0.010077964514493942, 0.009003104642033577, 0.010372706688940525, 0.0062954393215477467, 0.0059377965517342091, 0.025137970224022865, 0.0019473471911624074, 0.0095100011676549911, 0.0061209346167743206, 0.0085374815389513969, 0.0056208330206573009, 0.010272287763655186, 0.010278577916324139, 0.016511589288711548, } };
const TfArray<48, int> quant45_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(8) int8_t tensor_data46[8*1*1*48] = { 
  /* [0][0][][] */ 36,69,35,-33,18,6,-40,5,-18,53,-74,31,-6,38,9,31,33,89,3,20,-127,48,-32,-46,-26,71,32,-35,103,39,43,-19,-3,-31,31,34,19,25,19,41,-30,100,44,56,43,-11,79,-32, 
  /* [1][0][][] */ -60,-18,-45,-32,36,-70,60,53,-31,14,68,-77,21,9,122,-57,18,77,27,70,52,-16,-23,15,-23,39,-38,-26,60,-68,-49,-88,63,25,40,-47,-7,42,-105,-22,-38,57,-32,-80,18,-40,127,-99, 
  /* [2][0][][] */ 34,87,-29,-41,127,87,-17,-49,-57,-2,-10,39,-57,34,-12,23,10,16,-2,9,30,-31,-47,12,-47,-43,56,-50,-8,-17,-18,-23,-15,58,14,40,-19,65,60,17,-24,36,25,33,68,-31,18,-28, 
  /* [3][0][][] */ 14,-10,-44,-24,6,-13,21,16,-45,-82,23,23,-16,30,-53,2,-43,27,-48,-45,-44,-5,-25,-9,-27,9,-12,-26,39,-65,-58,68,32,-29,-27,1,-63,-74,-8,124,-15,3,3,127,-62,107,-13,68, 
  /* [4][0][][] */ -41,-67,-24,-16,-38,-12,-11,-42,-16,-38,72,-57,-34,-7,74,-58,-31,-45,73,10,24,-17,-14,88,-16,15,-49,-16,45,-22,-28,69,-51,28,2,-20,-14,-21,-71,-92,-27,-31,-1,-127,-21,29,-14,66, 
  /* [5][0][][] */ -38,-24,-49,67,20,-36,73,23,41,-29,-14,-42,29,-83,-111,-70,26,-12,-34,5,2,-67,70,79,52,-127,-34,66,-48,-64,-61,-44,-75,-3,-64,-65,-27,44,-59,59,63,-39,-107,3,69,-38,2,-46, 
  /* [6][0][][] */ 21,60,13,-12,6,-20,-52,-27,-18,36,-49,17,-6,-4,-69,10,-26,26,52,108,-61,-3,-13,11,-11,-43,46,-13,-14,31,25,127,74,12,-72,51,18,-90,27,31,-16,39,8,48,60,-17,75,121, 
  /* [7][0][][] */ -6,-18,-2,32,51,93,53,-95,26,-16,-83,-5,-127,-11,-29,16,101,10,-8,-56,-67,-9,33,-118,27,-4,-45,26,-28,5,0,-23,42,-47,36,-56,-17,25,-19,20,35,42,-5,16,-23,-65,15,-28, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant46_scale = { 8, { 0.0070832832716405392, 0.0047227968461811543, 0.0069609633646905422, 0.0065438835881650448, 0.006282399408519268, 0.0065269949845969677, 0.0078062508255243301, 0.0048903441056609154, } };
const TfArray<8, int> quant46_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(8) int8_t tensor_data47[48*1*1*8] = { 
  /* [0][0][][] */ 25,91,-127,-94,50,-23,3,-12, 
  /* [1][0][][] */ 16,49,-106,28,-127,37,-58,-85, 
  /* [2][0][][] */ -95,78,127,-40,-127,85,-30,-85, 
  /* [3][0][][] */ 73,-45,-36,14,82,52,-66,-127, 
  /* [4][0][][] */ 91,0,-7,-61,-75,-27,-34,127, 
  /* [5][0][][] */ -17,7,-102,-127,61,-63,7,-7, 
  /* [6][0][][] */ 127,13,2,49,110,51,-15,12, 
  /* [7][0][][] */ -9,82,-127,-100,82,-62,-37,79, 
  /* [8][0][][] */ -109,-123,108,127,25,17,-109,-100, 
  /* [9][0][][] */ 55,27,-7,-36,-37,36,45,127, 
  /* [10][0][][] */ 47,12,123,53,-39,-14,-127,122, 
  /* [11][0][][] */ -54,43,31,69,102,92,6,127, 
  /* [12][0][][] */ -38,73,127,-90,124,-86,-96,32, 
  /* [13][0][][] */ -34,-97,127,-15,-61,-11,-38,-8, 
  /* [14][0][][] */ -20,98,-65,-49,127,-21,-1,41, 
  /* [15][0][][] */ -127,68,-31,12,-110,-83,43,62, 
  /* [16][0][][] */ -51,-36,-19,-26,27,33,127,-64, 
  /* [17][0][][] */ -10,-18,43,29,127,-41,48,100, 
  /* [18][0][][] */ 5,22,-51,-6,-126,39,-9,-127, 
  /* [19][0][][] */ 44,25,-41,12,-127,43,-5,-92, 
  /* [20][0][][] */ 126,-47,58,-59,127,122,54,-34, 
  /* [21][0][][] */ -92,90,87,-19,127,6,66,-50, 
  /* [22][0][][] */ -45,-127,-51,-57,33,20,5,25, 
  /* [23][0][][] */ -21,-1,127,-101,-19,13,99,48, 
  /* [24][0][][] */ 39,19,-127,-12,-39,-35,25,-101, 
  /* [25][0][][] */ -21,-127,7,51,81,18,-109,-70, 
  /* [26][0][][] */ 20,-58,127,14,-63,-9,-18,-21, 
  /* [27][0][][] */ -62,-25,127,54,40,40,25,74, 
  /* [28][0][][] */ -127,57,-69,20,-10,-108,51,99, 
  /* [29][0][][] */ 9,40,127,76,94,-67,-7,93, 
  /* [30][0][][] */ -82,-58,37,-127,119,-31,24,-48, 
  /* [31][0][][] */ 72,81,88,51,-67,-127,-19,41, 
  /* [32][0][][] */ -127,40,1,-10,-94,-74,35,38, 
  /* [33][0][][] */ -37,-69,-25,127,66,-42,-104,11, 
  /* [34][0][][] */ 18,-3,-127,65,-58,67,29,-84, 
  /* [35][0][][] */ -95,6,127,29,-22,86,8,-46, 
  /* [36][0][][] */ -127,82,-15,-36,-84,-86,18,1, 
  /* [37][0][][] */ 88,-62,-8,-16,127,53,-51,-64, 
  /* [38][0][][] */ 18,-26,-10,89,-127,61,39,-92, 
  /* [39][0][][] */ -46,-20,127,-9,-2,44,53,30, 
  /* [40][0][][] */ -35,-127,74,113,-67,47,-91,2, 
  /* [41][0][][] */ 42,25,53,-23,39,-46,-97,127, 
  /* [42][0][][] */ 127,-115,34,-29,115,91,-25,-66, 
  /* [43][0][][] */ 127,-82,-21,3,108,64,-44,4, 
  /* [44][0][][] */ 58,127,-95,-63,74,-70,-25,88, 
  /* [45][0][][] */ 19,-24,-53,-127,45,-121,17,-77, 
  /* [46][0][][] */ 127,-83,13,-12,89,74,-24,-43, 
  /* [47][0][][] */ -123,-27,-127,51,-79,-107,-104,-62, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant47_scale = { 48, { 0.0024387016892433167, 0.0020371873397380114, 0.0031083559151738882, 0.0046515604481101036, 0.00059507309924811125, 0.0035347952507436275, 0.0038773701526224613, 0.0015284925466403365, 0.002426978200674057, 0.0048754476010799408, 0.0017979990225285292, 0.0030840141698718071, 0.002401828533038497, 0.0049983002245426178, 0.0034910570830106735, 0.0048339385539293289, 0.0050121266394853592, 0.0025473230052739382, 0.0020781280472874641, 0.00092633086023852229, 0.0025694617070257664, 0.0043067382648587227, 0.0066169365309178829, 0.0018645517993718386, 0.0022580386139452457, 0.0034720427356660366, 0.0049809198826551437, 0.0026040077209472656, 0.0041039222851395607, 0.0024228822439908981, 0.0020784805528819561, 0.0033656882587820292, 0.005173529963940382, 0.0033394277561455965, 0.0020869807340204716, 0.0030672873836010695, 0.0053487890399992466, 0.0053774472326040268, 0.0016867293743416667, 0.001968911150470376, 0.0031803539022803307, 0.001356910914182663, 0.0033011827617883682, 0.0046773883514106274, 0.002728333231061697, 0.003829222870990634, 0.0028735012747347355, 0.0028138288762420416, } };
const TfArray<48, int> quant47_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(8) int8_t tensor_data48[8*1*1*48] = { 
  /* [0][0][][] */ -91,25,23,3,24,-51,-15,73,-15,21,81,56,32,-26,49,68,-9,10,127,-29,-67,43,-79,-33,55,-73,1,83,-19,0,-49,48,-68,-8,-6,18,-30,13,50,20,43,-23,-93,16,46,-3,0,-29, 
  /* [1][0][][] */ -49,31,-33,89,51,0,2,28,-26,41,79,-54,-39,96,-68,22,-4,-18,-13,-28,-31,-46,47,-37,-127,43,-73,-51,-13,-27,-5,-30,25,-28,-44,13,-69,-54,-109,71,19,18,34,-25,-12,-38,50,24, 
  /* [2][0][][] */ 33,-31,40,35,29,27,56,-88,-2,-11,-22,25,-51,-65,-13,43,27,-38,27,-12,56,-109,59,23,-21,21,13,127,54,-69,9,16,-4,-98,48,-62,31,55,-76,-9,34,-11,9,42,65,18,-9,32, 
  /* [3][0][][] */ -43,21,-13,-111,64,-36,10,-26,-56,-37,36,-57,17,-5,-40,-17,13,-13,-59,-18,-18,28,26,-24,-28,-10,-18,33,11,-29,-6,10,-14,127,44,-52,50,12,-15,40,21,-29,-16,-18,50,-7,26,-45, 
  /* [4][0][][] */ -23,3,52,-37,22,24,-5,10,-12,-48,-12,14,9,31,5,72,24,13,127,53,-9,-62,-51,19,30,-24,-4,7,23,-16,29,-12,-1,9,23,-2,15,-3,32,8,26,-25,-21,1,-8,-8,74,8, 
  /* [5][0][][] */ 73,-48,46,25,28,2,7,-21,-56,18,6,-59,52,-3,-53,96,18,39,31,35,34,-4,-101,-82,35,45,-69,56,-11,24,-64,-63,15,-47,17,-127,-25,-3,5,21,22,51,22,-13,-10,-56,27,24, 
  /* [6][0][][] */ 71,-65,-21,127,6,-47,-16,25,40,48,-79,-60,6,24,-109,2,104,-52,2,-76,-31,-18,-50,-20,-6,-26,-34,-97,-29,-49,-88,-7,-60,-75,-76,18,-40,-25,21,-75,-65,-105,-52,81,-50,-32,0,-6, 
  /* [7][0][][] */ -10,-4,-19,56,48,-45,-26,35,-22,3,-16,-43,-1,-36,56,-63,-26,-29,127,13,-3,35,23,-15,-8,-7,15,31,-48,-11,-30,-71,-14,-119,-24,9,-21,-33,-15,-27,-12,16,-1,-24,-28,14,-46,15, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant48_scale = { 8, { 0.0077351555228233337, 0.0069292238913476467, 0.0049433819949626923, 0.0073372721672058105, 0.012884062714874744, 0.0065884613431990147, 0.0050323354080319405, 0.007651893887668848, } };
const TfArray<8, int> quant48_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(8) int8_t tensor_data49[48*1*1*8] = { 
  /* [0][0][][] */ -89,-6,0,-9,127,-15,88,67, 
  /* [1][0][][] */ -93,59,-127,-41,38,-29,12,0, 
  /* [2][0][][] */ -24,-23,-105,0,-17,127,-45,-49, 
  /* [3][0][][] */ 51,33,-6,-100,74,81,-93,-127, 
  /* [4][0][][] */ 25,-88,-120,-127,55,-103,51,-25, 
  /* [5][0][][] */ 33,12,-113,127,-47,-22,-66,-107, 
  /* [6][0][][] */ -30,-81,-62,127,-110,21,-5,-26, 
  /* [7][0][][] */ -35,-28,-110,-127,-7,-83,-38,-55, 
  /* [8][0][][] */ 127,-39,-89,-102,50,44,-78,-77, 
  /* [9][0][][] */ 11,127,-51,19,41,20,30,-38, 
  /* [10][0][][] */ -25,-46,69,-65,6,34,47,127, 
  /* [11][0][][] */ 51,-77,-27,65,-46,96,127,83, 
  /* [12][0][][] */ -33,-12,-127,-22,68,54,78,0, 
  /* [13][0][][] */ -3,97,-34,-127,88,-97,-124,1, 
  /* [14][0][][] */ 49,23,-32,-55,-13,15,-127,-85, 
  /* [15][0][][] */ 1,127,57,-23,-13,-18,-32,-111, 
  /* [16][0][][] */ 6,6,12,-28,-27,-16,-11,-127, 
  /* [17][0][][] */ -36,38,-1,96,2,-57,22,-127, 
  /* [18][0][][] */ -4,-127,-60,-5,77,3,94,82, 
  /* [19][0][][] */ 0,13,-71,77,23,-54,109,127, 
  /* [20][0][][] */ -127,10,7,-80,21,-84,-6,-18, 
  /* [21][0][][] */ -26,59,127,9,22,-97,-46,33, 
  /* [22][0][][] */ 34,39,127,112,86,41,121,30, 
  /* [23][0][][] */ 71,-127,66,-44,-62,-39,-62,-2, 
  /* [24][0][][] */ -93,-49,73,94,116,127,62,82, 
  /* [25][0][][] */ -26,53,107,-46,45,-55,10,127, 
  /* [26][0][][] */ -22,-42,70,127,36,90,-98,97, 
  /* [27][0][][] */ -6,101,127,96,34,-38,50,78, 
  /* [28][0][][] */ -32,21,84,41,11,-89,28,127, 
  /* [29][0][][] */ 59,62,68,-127,35,16,-2,95, 
  /* [30][0][][] */ -44,7,52,-32,-127,-12,112,-111, 
  /* [31][0][][] */ 121,-13,127,103,-73,-52,-35,2, 
  /* [32][0][][] */ 127,0,-5,58,-16,-115,56,-13, 
  /* [33][0][][] */ 36,-28,49,5,-77,127,-82,-91, 
  /* [34][0][][] */ -18,5,127,-42,-89,-10,124,-82, 
  /* [35][0][][] */ -9,-75,42,64,-127,41,-30,-18, 
  /* [36][0][][] */ -16,24,127,-74,34,-7,14,-112, 
  /* [37][0][][] */ -70,-11,78,126,-98,127,81,-17, 
  /* [38][0][][] */ 13,-54,-15,46,103,-35,-48,127, 
  /* [39][0][][] */ 127,100,-81,-49,29,-115,-126,107, 
  /* [40][0][][] */ -104,-111,-24,127,17,-44,-104,-46, 
  /* [41][0][][] */ 13,60,-96,-88,-119,127,-34,-65, 
  /* [42][0][][] */ 65,32,-105,127,-94,107,-51,-63, 
  /* [43][0][][] */ 46,-8,65,37,101,-119,127,-5, 
  /* [44][0][][] */ -127,50,33,-22,-30,96,-105,-9, 
  /* [45][0][][] */ -83,127,-2,25,-27,106,-94,-17, 
  /* [46][0][][] */ -32,-127,-125,103,-15,-24,53,-71, 
  /* [47][0][][] */ 0,36,-85,-62,-100,-126,-13,-127, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant49_scale = { 48, { 0.003355975728482008, 0.0029294886626303196, 0.0031333935912698507, 0.0022587396670132875, 0.0015513483667746186, 0.0028780628927052021, 0.0020102809648960829, 0.0018293482717126608, 0.0019205110147595406, 0.0042549972422420979, 0.0041722711175680161, 0.0023606703616678715, 0.0024888364132493734, 0.0024572080001235008, 0.0031304997391998768, 0.0038566500879824162, 0.0041114022023975849, 0.0029189188499003649, 0.0022054065484553576, 0.0022473817225545645, 0.0020011616870760918, 0.0028726730961352587, 0.0018060610163956881, 0.0028015370480716228, 0.0014890347374603152, 0.0016622412949800491, 0.0023287625517696142, 0.0016348152421414852, 0.0028467965312302113, 0.0027100676670670509, 0.0027272733859717846, 0.0063333888538181782, 0.0031092443969100714, 0.0025147991254925728, 0.0016913849394768476, 0.0028701550327241421, 0.0019680357072502375, 0.0022395991254597902, 0.0031304026488214731, 0.0021413981448858976, 0.0019387236097827554, 0.0024092379026114941, 0.0023130779154598713, 0.0019312113290652633, 0.0029290192760527134, 0.0053965491242706776, 0.0023115384392440319, 0.0022077797912061214, } };
const TfArray<48, int> quant49_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(8) int8_t tensor_data50[8*1*1*48] = { 
  /* [0][0][][] */ -17,-42,127,7,-19,25,2,29,48,-6,-34,17,-30,13,60,66,40,-40,13,-71,-11,32,8,-39,-25,-46,18,-11,-90,55,-49,49,25,14,-2,40,17,-43,1,-35,-95,-56,48,-67,68,-31,-83,38, 
  /* [1][0][][] */ -16,32,17,36,-58,-24,73,78,26,-74,22,39,1,-127,27,75,103,-25,45,46,46,-47,-77,-45,32,-9,-33,-44,-26,52,-88,102,-13,41,-22,52,63,123,58,41,-25,84,76,-9,-42,43,35,91, 
  /* [2][0][][] */ 29,-8,-1,-31,22,24,-28,36,119,-11,47,-5,-12,71,52,-22,-97,110,97,47,4,73,17,127,14,87,15,21,0,-101,28,28,-21,-16,-28,-86,-25,17,2,-23,106,16,-30,25,-45,21,-72,-68, 
  /* [3][0][][] */ -49,47,77,15,1,35,7,71,-63,47,-1,32,-2,-11,-89,-14,17,-18,37,45,10,9,-24,-127,-18,2,23,18,-44,-20,-24,-17,2,-8,4,74,-61,-16,-28,76,26,-2,-21,29,-21,52,-48,65, 
  /* [4][0][][] */ -43,50,-24,-19,-15,-51,16,-74,50,-14,-26,87,16,67,-27,27,3,17,33,-12,-97,49,-34,86,62,-9,13,0,13,9,-44,-79,-43,53,86,9,60,35,8,23,-127,-37,13,32,-37,35,21,-68, 
  /* [5][0][][] */ 30,35,35,-42,34,-29,-26,46,81,72,-4,-81,26,16,115,-16,-61,-4,7,-11,-4,13,24,-6,-28,-37,66,-35,-16,44,2,-127,-41,72,31,-69,95,26,50,-75,-88,-28,62,41,-50,14,50,14, 
  /* [6][0][][] */ 41,-11,22,7,29,52,24,48,-20,-4,-84,-10,-18,24,-28,3,-21,-63,3,26,18,42,5,39,-46,-40,127,14,26,8,-32,53,4,-54,81,-16,33,3,-65,15,-34,8,-37,51,-19,23,16,-1, 
  /* [7][0][][] */ -43,-9,-86,0,51,-75,-17,30,-7,0,43,46,22,-2,-51,14,29,12,37,-80,-51,-61,11,10,-63,37,-20,-34,21,-27,10,-10,-127,-47,-6,-4,-67,18,7,-76,-93,-68,-28,-28,-104,59,-26,29, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant50_scale = { 8, { 0.0063601736910641193, 0.0044879843480885029, 0.0043336953967809677, 0.006300952285528183, 0.0053807245567440987, 0.0052278847433626652, 0.0055707897990942001, 0.0046247825957834721, } };
const TfArray<8, int> quant50_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(8) int8_t tensor_data51[48*1*1*8] = { 
  /* [0][0][][] */ -23,22,27,61,44,-127,55,-27, 
  /* [1][0][][] */ -1,82,127,75,14,34,76,-112, 
  /* [2][0][][] */ 47,24,39,31,127,77,-37,-9, 
  /* [3][0][][] */ -71,-123,-83,127,69,118,-115,-108, 
  /* [4][0][][] */ 9,-127,45,-40,24,82,37,-38, 
  /* [5][0][][] */ -9,51,-31,83,-111,64,127,81, 
  /* [6][0][][] */ -93,4,-127,89,0,58,7,-59, 
  /* [7][0][][] */ 49,6,127,41,31,-38,3,9, 
  /* [8][0][][] */ 66,19,19,-65,-31,127,-67,10, 
  /* [9][0][][] */ 127,-25,-12,-91,83,56,-15,-7, 
  /* [10][0][][] */ -53,-127,-89,67,-106,42,2,31, 
  /* [11][0][][] */ -119,-2,-127,36,-56,-62,72,66, 
  /* [12][0][][] */ -80,-2,-127,-96,-45,71,-25,-13, 
  /* [13][0][][] */ -119,-127,76,59,-97,28,-13,45, 
  /* [14][0][][] */ -93,108,12,127,24,118,12,99, 
  /* [15][0][][] */ -15,-90,-109,-37,103,-49,-127,-104, 
  /* [16][0][][] */ -53,-127,-22,81,68,45,-46,-23, 
  /* [17][0][][] */ 107,23,65,24,-8,95,-127,-101, 
  /* [18][0][][] */ -23,115,66,9,35,-2,-97,127, 
  /* [19][0][][] */ 14,29,-26,-82,127,-102,-23,47, 
  /* [20][0][][] */ -72,-33,-127,-25,25,35,-54,-27, 
  /* [21][0][][] */ -29,109,38,127,-68,50,64,24, 
  /* [22][0][][] */ 101,-43,50,37,122,2,-100,-127, 
  /* [23][0][][] */ -127,59,55,46,-32,42,31,-25, 
  /* [24][0][][] */ -125,-9,-9,125,89,127,-51,-35, 
  /* [25][0][][] */ 23,-54,-22,42,72,26,-89,-127, 
  /* [26][0][][] */ -127,24,-126,-105,-105,84,-15,-18, 
  /* [27][0][][] */ 72,-127,13,-82,-4,-64,-34,-38, 
  /* [28][0][][] */ -96,10,-127,92,-98,72,-119,21, 
  /* [29][0][][] */ 90,29,-127,11,-97,-19,-64,-82, 
  /* [30][0][][] */ -8,28,103,23,-127,88,101,-25, 
  /* [31][0][][] */ -88,105,-93,-127,-19,-27,28,106, 
  /* [32][0][][] */ -63,-25,127,-122,100,120,63,-123, 
  /* [33][0][][] */ -100,79,-4,115,127,-24,37,35, 
  /* [34][0][][] */ 5,113,127,89,101,-45,-89,-77, 
  /* [35][0][][] */ 33,-15,-127,-38,-24,-32,-48,110, 
  /* [36][0][][] */ 51,81,22,-41,-89,-17,91,127, 
  /* [37][0][][] */ 17,-127,98,-109,120,16,-25,87, 
  /* [38][0][][] */ -47,-65,-40,6,-52,-66,127,23, 
  /* [39][0][][] */ -105,-106,52,-46,-83,-22,-127,24, 
  /* [40][0][][] */ 103,-42,33,10,2,-127,61,27, 
  /* [41][0][][] */ -1,15,-33,49,-19,-127,-17,104, 
  /* [42][0][][] */ 10,54,-110,-127,-63,23,85,76, 
  /* [43][0][][] */ -51,-57,-62,-59,91,-15,-59,127, 
  /* [44][0][][] */ -81,6,38,127,27,121,-5,19, 
  /* [45][0][][] */ -8,-127,23,-37,-111,27,90,81, 
  /* [46][0][][] */ -117,32,-127,-39,-93,31,15,-26, 
  /* [47][0][][] */ 18,22,57,-127,-78,-42,55,8, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant51_scale = { 48, { 0.0041092578321695328, 0.0017659382428973913, 0.0045934682711958885, 0.0020367370452731848, 0.0032618797849863768, 0.0030410450417548418, 0.0036039240658283234, 0.0017695656279101968, 0.001980700995773077, 0.0045741614885628223, 0.0044277207925915718, 0.0024428798351436853, 0.0021862264256924391, 0.0036085145547986031, 0.0020340990740805864, 0.0027028764598071575, 0.0037716624792665243, 0.0012517854338511825, 0.0037350049242377281, 0.0022614267654716969, 0.0037002221215516329, 0.0024310285225510597, 0.0015943027101457119, 0.0044233803637325764, 0.0027493247762322426, 0.0022340381983667612, 0.0018826310988515615, 0.0045011467300355434, 0.0024962553288787603, 0.0012896818807348609, 0.0029564036522060633, 0.0021103310864418745, 0.001811692607589066, 0.0025232466869056225, 0.0029525235295295715, 0.0044176378287374973, 0.0030037430115044117, 0.0020426223054528236, 0.0030025767628103495, 0.0034805950708687305, 0.0029827423859387636, 0.0054813330061733723, 0.0018649508710950613, 0.0022347797639667988, 0.00048561498988419771, 0.0033382242545485497, 0.002448939485475421, 0.0029649408534169197, } };
const TfArray<48, int> quant51_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(8) int8_t tensor_data52[8*1*1*48] = { 
  /* [0][0][][] */ 45,-33,-20,-51,69,-9,42,-74,-4,-94,55,-23,-37,35,32,23,-36,113,36,-31,49,-46,-70,100,20,-51,-6,61,50,-13,-8,57,-127,7,-37,-39,25,27,70,-16,44,-3,10,-21,-53,-15,-59,-36, 
  /* [1][0][][] */ 52,-41,23,-39,78,12,-45,26,-24,-20,-7,54,-34,54,-106,-127,-42,-22,51,-15,17,-52,67,-3,-93,58,29,-1,75,-32,7,1,-29,-44,-74,-70,-17,19,-23,-36,3,-53,-54,-2,35,-97,-19,15, 
  /* [2][0][][] */ 108,-116,81,-45,81,27,-13,-45,-40,-59,-25,-100,-34,-76,61,-23,40,75,25,-98,2,123,-52,78,-29,6,-32,-57,-55,87,-13,-45,110,-34,127,94,55,-94,-7,118,8,-42,-61,-55,52,53,-83,-1, 
  /* [3][0][][] */ 70,13,43,1,-27,20,21,16,46,-34,-22,-65,59,-51,-71,-77,35,-58,24,58,-46,66,41,-16,-27,-6,-53,-48,-11,51,-1,68,-60,-64,19,-56,-127,10,25,-52,-5,-1,12,24,117,-10,36,-2, 
  /* [4][0][][] */ -95,-80,27,-1,94,65,29,-41,-12,18,32,-23,-127,-18,-60,-2,31,10,99,-71,-23,37,-59,71,9,-20,-86,17,47,24,29,-26,14,-38,-3,34,67,-64,30,71,-5,-93,-37,-65,2,-65,-127,-9, 
  /* [5][0][][] */ 53,-6,51,-14,59,54,67,-99,-107,57,-36,-53,-57,-2,-112,-38,53,127,-20,37,-58,27,-73,-29,4,-62,-92,-25,-37,33,-87,-49,88,-16,-12,48,56,-25,2,79,102,-78,-52,-6,11,-21,-37,31, 
  /* [6][0][][] */ -26,3,15,3,-30,110,-11,-71,-3,52,32,1,2,-6,53,55,40,-127,58,24,-18,76,43,-24,51,57,-14,-32,-27,62,11,-35,-1,-16,-22,-33,-7,-24,-4,-30,-33,-63,-80,-34,103,43,16,-19, 
  /* [7][0][][] */ -26,42,8,8,-37,48,-57,40,-13,-13,-53,14,29,-9,-118,-38,28,-30,127,37,21,0,80,-19,-50,108,57,26,57,-34,-8,-14,-35,54,2,25,18,35,-12,37,-55,1,-8,41,-40,3,28,62, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant52_scale = { 8, { 0.003862032201141119, 0.0043785553425550461, 0.0023003921378403902, 0.0044295182451605797, 0.0036787074059247971, 0.0044720703735947609, 0.0038620042614638805, 0.0037942896597087383, } };
const TfArray<8, int> quant52_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(8) int8_t tensor_data53[48*1*1*8] = { 
  /* [0][0][][] */ -42,-37,-127,120,126,-93,-54,-45, 
  /* [1][0][][] */ -16,-11,127,33,-71,-38,27,32, 
  /* [2][0][][] */ 22,127,42,1,-50,64,-22,98, 
  /* [3][0][][] */ 50,46,79,-86,-99,-67,83,127, 
  /* [4][0][][] */ -19,47,-19,51,-5,-127,119,0, 
  /* [5][0][][] */ -127,-8,119,35,-39,-87,-37,-20, 
  /* [6][0][][] */ -40,5,-36,6,8,-25,-73,-127, 
  /* [7][0][][] */ -22,97,127,1,-93,-54,33,52, 
  /* [8][0][][] */ -5,88,125,113,-5,-18,-95,-127, 
  /* [9][0][][] */ -6,11,6,-90,16,-8,6,127, 
  /* [10][0][][] */ 127,-31,112,-19,43,67,42,-113, 
  /* [11][0][][] */ 127,-77,-53,89,77,-96,113,-6, 
  /* [12][0][][] */ -127,70,-6,19,-35,19,52,-46, 
  /* [13][0][][] */ -7,15,-83,13,127,-44,-95,-66, 
  /* [14][0][][] */ 4,-77,-89,-24,120,-92,-127,-44, 
  /* [15][0][][] */ 33,-33,90,-8,127,-17,-58,-63, 
  /* [16][0][][] */ -49,-15,-94,106,127,-8,-101,-39, 
  /* [17][0][][] */ 120,37,-99,30,-71,30,-90,127, 
  /* [18][0][][] */ 71,127,65,-33,54,6,4,8, 
  /* [19][0][][] */ -58,36,-32,-46,25,-105,69,-127, 
  /* [20][0][][] */ -72,97,53,-15,-127,102,71,-62, 
  /* [21][0][][] */ 28,-49,24,-45,-1,-26,53,127, 
  /* [22][0][][] */ 127,-38,22,-5,79,-70,-53,81, 
  /* [23][0][][] */ -120,60,-98,32,127,57,-110,-75, 
  /* [24][0][][] */ -102,34,-21,-65,26,-26,-127,92, 
  /* [25][0][][] */ -46,-16,47,-13,-13,127,-17,-12, 
  /* [26][0][][] */ 127,-25,-20,13,60,26,21,-10, 
  /* [27][0][][] */ -36,-95,-7,127,122,63,-63,-86, 
  /* [28][0][][] */ -58,71,-49,127,49,0,-70,-36, 
  /* [29][0][][] */ 28,58,-17,-32,-99,47,-127,0, 
  /* [30][0][][] */ 85,11,64,-102,-127,-47,79,20, 
  /* [31][0][][] */ 76,17,-20,-127,54,77,-53,-62, 
  /* [32][0][][] */ 28,-54,-33,-35,-41,-93,80,-127, 
  /* [33][0][][] */ -127,46,-101,79,59,25,-77,-66, 
  /* [34][0][][] */ -4,53,-41,-16,37,7,-127,-9, 
  /* [35][0][][] */ 127,54,15,98,-78,-26,-79,18, 
  /* [36][0][][] */ 83,55,105,-106,-64,-25,127,63, 
  /* [37][0][][] */ -37,-46,31,-127,28,-11,31,18, 
  /* [38][0][][] */ 40,-40,28,-10,-42,-5,75,127, 
  /* [39][0][][] */ 113,21,57,127,48,-78,-28,-99, 
  /* [40][0][][] */ -93,39,-66,8,-11,-127,38,28, 
  /* [41][0][][] */ -39,-127,-34,-116,120,-73,-28,-14, 
  /* [42][0][][] */ -48,-127,-28,57,25,83,-80,24, 
  /* [43][0][][] */ -54,-127,-64,99,-7,-39,5,16, 
  /* [44][0][][] */ 11,117,-93,92,62,-127,-63,-118, 
  /* [45][0][][] */ 29,127,17,-28,-13,44,-55,68, 
  /* [46][0][][] */ -30,-13,22,-39,-127,30,11,-33, 
  /* [47][0][][] */ -75,-3,-84,72,97,50,-127,81, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant53_scale = { 48, { 0.0023602743167430162, 0.0032367778476327658, 0.0039476673118770123, 0.0020640071015805006, 0.002851598197594285, 0.0021988474763929844, 0.0020365659147500992, 0.001871761167421937, 0.00064364279387518764, 0.0034127975814044476, 0.0014226996572688222, 0.0029597242828458548, 0.0050350702367722988, 0.0021575391292572021, 0.0025185199920088053, 0.0027397831436246634, 0.002387442858889699, 0.0036422342527657747, 0.0048094098456203938, 0.0027438723482191563, 0.002612236887216568, 0.003647129749879241, 0.0046064183115959167, 0.0012654877500608563, 0.00098801834974437952, 0.0030119852162897587, 0.0046405796892940998, 0.00166307482868433, 0.0015877180267125368, 0.0026145779993385077, 0.0019698943942785263, 0.0027223725337535143, 0.0024450176861137152, 0.0011980984127148986, 0.002611914649605751, 0.0032271496020257473, 0.0015672119334340096, 0.0038042920641601086, 0.0023025455884635448, 0.0011260113678872585, 0.0024978555738925934, 0.0030512805096805096, 0.002621012507006526, 0.0038193282671272755, 0.0011132750660181046, 0.0045338128693401814, 0.001806683954782784, 0.0020486121065914631, } };
const TfArray<48, int> quant53_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(8) int8_t tensor_data54[8*1*1*48] = { 
  /* [0][0][][] */ -102,1,-54,3,71,39,63,110,56,-97,-68,8,-127,-13,-10,-42,-11,2,20,-105,65,-72,120,-29,-76,-79,-77,7,-49,48,-125,70,-44,113,-38,17,50,25,-88,89,-53,-53,-60,56,-57,-8,-31,-71, 
  /* [1][0][][] */ 1,-29,-11,-56,57,-59,21,34,-2,-44,-36,-8,10,-68,-64,-30,-19,-71,50,11,5,-32,-11,-30,0,-36,-48,-1,-127,31,-114,59,-63,52,9,-63,-100,-29,-32,-25,-55,-81,-32,17,46,-50,-98,-38, 
  /* [2][0][][] */ -49,10,35,12,-32,-28,15,-81,127,-97,-89,76,-30,35,1,25,-11,-69,76,-20,-49,37,65,61,-31,-26,12,21,-21,31,-84,36,26,96,-51,34,-45,-40,5,74,-52,-16,-24,62,4,28,-59,31, 
  /* [3][0][][] */ 127,64,-11,-56,37,49,-69,-70,33,0,-35,-34,-15,0,-23,36,32,0,-41,63,-82,55,-33,19,-60,-58,-40,-25,-6,7,21,-11,-60,-5,-14,-55,-27,32,38,-73,-87,-18,-1,-42,74,-8,-71,39, 
  /* [4][0][][] */ -17,-45,-8,52,40,13,17,-30,-21,-50,52,77,-6,-92,-53,-106,109,-15,71,98,-60,-12,83,-62,-56,-22,17,10,22,-127,63,-21,-47,-59,-94,30,30,-81,-53,3,78,19,-49,94,69,57,-25,38, 
  /* [5][0][][] */ 44,-29,109,-11,44,47,88,-66,127,9,41,13,8,12,11,81,63,-6,55,35,13,-1,32,16,-92,-1,-66,-67,-5,44,14,-26,68,-65,-34,67,-39,29,-19,69,103,5,-19,16,-41,80,17,70, 
  /* [6][0][][] */ 77,0,73,15,8,36,-58,-40,-127,40,15,20,17,59,19,5,-77,-7,25,7,-36,-58,-12,97,-70,-5,10,35,65,-109,38,-69,36,25,-94,-44,-9,-8,82,-19,9,42,35,-34,-7,22,3,42, 
  /* [7][0][][] */ 11,-24,93,-46,39,-45,0,-61,-97,48,127,-10,41,20,26,-90,73,91,-41,116,39,-72,-13,-37,67,17,-45,-115,-38,6,64,-56,25,-123,-30,-53,80,95,62,7,34,-13,5,-127,-104,8,31,59, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant54_scale = { 8, { 0.00440172478556633, 0.010688110254704952, 0.0046150581911206245, 0.0041379816830158234, 0.0034910973627120256, 0.0046023726463317871, 0.0046276212669909, 0.0031533222645521164, } };
const TfArray<8, int> quant54_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(8) int8_t tensor_data55[48*1*1*8] = { 
  /* [0][0][][] */ -26,-127,37,-30,66,-49,2,-73, 
  /* [1][0][][] */ -45,-58,42,-45,-78,91,-127,92, 
  /* [2][0][][] */ -118,1,-36,-99,-2,-127,20,-99, 
  /* [3][0][][] */ -54,-21,36,-44,122,-84,-127,35, 
  /* [4][0][][] */ 70,-12,-98,-65,18,-57,-127,123, 
  /* [5][0][][] */ 49,-49,-113,-8,106,-94,-18,-127, 
  /* [6][0][][] */ 54,-30,127,81,-35,20,-68,23, 
  /* [7][0][][] */ -47,-27,-127,45,16,116,-34,39, 
  /* [8][0][][] */ 55,-1,-83,-31,-60,127,-72,-83, 
  /* [9][0][][] */ -75,-43,23,-13,57,-36,-127,23, 
  /* [10][0][][] */ 65,21,85,-117,127,13,-19,-53, 
  /* [11][0][][] */ 38,-8,54,-127,1,37,61,25, 
  /* [12][0][][] */ 16,-37,-42,127,-87,-12,9,87, 
  /* [13][0][][] */ 53,-127,33,-46,-83,35,72,-4, 
  /* [14][0][][] */ -39,110,1,44,45,102,-127,-18, 
  /* [15][0][][] */ -23,-22,-17,-102,127,-32,-122,-108, 
  /* [16][0][][] */ 62,-8,-13,64,121,71,-127,-31, 
  /* [17][0][][] */ 127,-55,76,81,47,39,-16,-33, 
  /* [18][0][][] */ 67,9,113,108,127,-108,11,54, 
  /* [19][0][][] */ 47,-52,-94,-14,122,-127,-20,-64, 
  /* [20][0][][] */ -49,4,-81,76,127,-47,-86,24, 
  /* [21][0][][] */ -32,47,-60,-85,127,-8,85,8, 
  /* [22][0][][] */ 48,3,40,-89,-127,-40,118,92, 
  /* [23][0][][] */ -76,-35,-32,-78,24,82,-127,-79, 
  /* [24][0][][] */ -27,-26,55,-65,7,-40,87,127, 
  /* [25][0][][] */ 127,-45,-6,74,72,82,-3,25, 
  /* [26][0][][] */ 40,-33,-48,-95,-103,-127,-8,-105, 
  /* [27][0][][] */ -66,-20,-107,-127,-67,81,-43,-29, 
  /* [28][0][][] */ -3,-127,-51,80,71,-50,27,82, 
  /* [29][0][][] */ -127,-51,45,-34,-38,-71,-115,102, 
  /* [30][0][][] */ 0,-123,21,-54,110,-35,4,127, 
  /* [31][0][][] */ -3,20,1,42,-32,51,-11,127, 
  /* [32][0][][] */ -95,11,-18,-127,42,37,-24,-43, 
  /* [33][0][][] */ 30,50,14,-4,-97,-11,24,127, 
  /* [34][0][][] */ -32,2,-36,-31,127,17,-77,86, 
  /* [35][0][][] */ -59,8,48,-127,-64,-44,37,82, 
  /* [36][0][][] */ -7,-1,-57,16,28,-127,6,69, 
  /* [37][0][][] */ 94,7,-90,-9,-70,80,-63,-127, 
  /* [38][0][][] */ 25,46,13,127,72,72,-111,-46, 
  /* [39][0][][] */ 99,-11,-127,-43,-7,56,64,52, 
  /* [40][0][][] */ 53,-27,-127,-69,-32,48,99,69, 
  /* [41][0][][] */ 59,10,-120,-38,-12,14,-127,102, 
  /* [42][0][][] */ 78,12,7,-10,34,44,-127,-22, 
  /* [43][0][][] */ 44,-56,-25,11,-69,-7,46,127, 
  /* [44][0][][] */ 72,-58,-2,-19,-2,20,-91,127, 
  /* [45][0][][] */ -58,29,53,-10,127,-71,78,49, 
  /* [46][0][][] */ -61,25,54,-113,-1,127,-22,-82, 
  /* [47][0][][] */ 17,-30,59,-127,17,67,-12,83, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant55_scale = { 48, { 0.002347797155380249, 0.0027841620612889528, 0.0017617595149204135, 0.0024069144856184721, 0.0014056257205083966, 0.0023152364883571863, 0.0022127572447061539, 0.0027438916731625795, 0.0022297760006040335, 0.0030402299016714096, 0.0025955801829695702, 0.0013848063535988331, 0.0024986898060888052, 0.0017576150130480528, 0.0024371717590838671, 0.0015363279962912202, 0.0015892297960817814, 0.0018635967280715704, 0.0024795823264867067, 0.001990678021684289, 0.0015514804981648922, 0.0022535934112966061, 0.0024347179569303989, 0.0024365019053220749, 0.0028383112512528896, 0.0020249651279300451, 0.0020369761623442173, 0.0025114088784903288, 0.0023852156009525061, 0.0016906324308365583, 0.0012665602844208479, 0.0035366781521588564, 0.0022466338705271482, 0.0025349778588861227, 0.0024992045946419239, 0.0024216463789343834, 0.003174064215272665, 0.0019651360344141722, 0.0014336128951981664, 0.0023820542264729738, 0.002417601877823472, 0.0028349440544843674, 0.002730940468609333, 0.0029479577206075191, 0.0028800072614103556, 0.0022077364847064018, 0.003060819348320365, 0.0029591002967208624, } };
const TfArray<48, int> quant55_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(8) int8_t tensor_data56[8*1*1*48] = { 
  /* [0][0][][] */ -12,-43,37,70,-34,117,-101,70,-56,-69,50,-81,31,16,17,4,-29,-20,105,-80,-11,-61,8,25,-63,6,24,72,3,121,35,59,-75,3,0,34,-28,49,-1,107,-127,24,-5,-37,-89,44,2,16, 
  /* [1][0][][] */ 62,93,21,64,3,-47,-30,23,3,-57,7,-44,-35,-5,8,28,60,-5,93,64,14,121,-23,-80,36,-34,48,127,-30,-48,29,-30,-40,-29,-74,30,-62,12,-26,-6,2,-20,-65,-65,-10,18,87,104, 
  /* [2][0][][] */ 71,17,-44,-24,13,36,-48,67,-32,9,-5,58,-61,-53,88,42,49,-74,32,33,-115,-35,88,-94,71,5,-93,112,127,-21,-51,-35,-107,-22,74,13,-64,-24,-28,-31,16,-81,-63,25,-2,-83,5,4, 
  /* [3][0][][] */ 30,22,23,-20,-53,13,-21,55,6,26,-38,42,22,-38,-20,-2,-59,33,-4,-5,-73,58,42,-6,-127,-2,-10,52,-35,-6,62,5,-53,41,11,8,20,-37,-9,-30,4,79,43,43,-9,39,29,-52, 
  /* [4][0][][] */ -97,43,99,-20,-103,71,12,-120,-63,35,-85,14,-20,19,120,43,0,-86,95,-62,-15,127,15,-74,-33,-72,95,59,46,-19,-36,-8,38,-82,-102,14,98,65,-23,47,-12,66,-69,-118,9,113,-69,-20, 
  /* [5][0][][] */ -127,16,58,-52,41,49,46,-10,-16,8,75,-32,-23,20,25,35,-15,-23,-20,-17,26,54,94,-6,-17,59,19,-40,60,31,-15,87,13,23,-22,48,-111,49,-17,-30,69,-31,-6,-3,-50,27,67,36, 
  /* [6][0][][] */ 82,40,77,-2,-127,-18,-3,-15,-87,-43,-31,-65,58,-18,48,-7,-37,34,31,21,-52,38,59,-22,-72,43,-67,-41,14,15,-51,-19,-5,-12,22,-15,-25,-5,-31,43,-38,110,-27,-69,82,18,-26,121, 
  /* [7][0][][] */ 4,-17,78,59,43,-54,29,54,72,-46,-62,78,-98,4,55,23,4,28,-41,67,-13,58,16,-86,33,11,-23,-31,127,23,-45,-39,78,-5,-45,29,-20,-101,-13,31,-21,-53,-41,-64,11,-17,9,-43, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant56_scale = { 8, { 0.004359981045126915, 0.0048525715246796608, 0.0041460362263023853, 0.0052597005851566792, 0.0035572338383644819, 0.0044706612825393677, 0.0046754274517297745, 0.0059349001385271549, } };
const TfArray<8, int> quant56_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int8_t tensor_data57[48*1*1*8] = { 
  /* [0][0][][] */ 70,10,80,32,27,-127,-8,-23, 
  /* [1][0][][] */ 24,27,-55,127,2,47,-77,-16, 
  /* [2][0][][] */ -127,-76,-3,49,5,100,-80,72, 
  /* [3][0][][] */ -54,-10,113,-127,-91,-31,-5,55, 
  /* [4][0][][] */ -98,-52,102,-127,98,15,65,-91, 
  /* [5][0][][] */ -34,97,-94,-103,-25,-53,59,127, 
  /* [6][0][][] */ -22,-1,51,-76,-127,-24,58,22, 
  /* [7][0][][] */ -101,-22,94,36,54,34,127,-7, 
  /* [8][0][][] */ 5,-76,-33,-91,-35,-127,-38,47, 
  /* [9][0][][] */ -11,64,85,-5,4,127,-10,62, 
  /* [10][0][][] */ 29,-7,87,-34,93,127,-13,6, 
  /* [11][0][][] */ -19,74,53,26,54,-11,-127,68, 
  /* [12][0][][] */ 12,55,-10,-127,94,-37,-38,-58, 
  /* [13][0][][] */ 47,66,19,-72,127,83,-56,12, 
  /* [14][0][][] */ 127,-39,17,-5,-10,-81,15,28, 
  /* [15][0][][] */ -127,-54,-15,-22,87,-8,40,-21, 
  /* [16][0][][] */ -127,24,9,-10,20,123,-57,-65, 
  /* [17][0][][] */ 90,52,14,127,-21,-95,18,-21, 
  /* [18][0][][] */ -77,-26,39,-33,-123,-76,127,35, 
  /* [19][0][][] */ 42,120,13,127,-46,-89,-103,89, 
  /* [20][0][][] */ 90,-80,-123,-6,-114,127,15,-124, 
  /* [21][0][][] */ -34,-66,92,127,-22,95,-33,101, 
  /* [22][0][][] */ -46,-127,59,-14,64,-78,13,-95, 
  /* [23][0][][] */ 101,114,-23,22,-125,40,127,-9, 
  /* [24][0][][] */ 34,-28,15,58,69,127,-16,-49, 
  /* [25][0][][] */ -45,-127,-76,-16,27,11,71,-69, 
  /* [26][0][][] */ -101,-12,26,14,-127,94,-120,53, 
  /* [27][0][][] */ 40,-95,61,127,-94,57,-76,-68, 
  /* [28][0][][] */ 39,20,9,19,52,127,-49,-20, 
  /* [29][0][][] */ -127,1,-47,109,38,-7,-38,-13, 
  /* [30][0][][] */ 56,59,-16,82,-21,127,12,15, 
  /* [31][0][][] */ 127,-73,-64,19,-90,-90,-36,48, 
  /* [32][0][][] */ 69,-9,17,72,72,28,-127,-8, 
  /* [33][0][][] */ 82,-27,16,-127,17,-82,33,66, 
  /* [34][0][][] */ -127,0,59,-11,-49,-34,36,33, 
  /* [35][0][][] */ -93,-11,127,8,123,-68,51,4, 
  /* [36][0][][] */ -16,88,127,1,21,-90,-69,23, 
  /* [37][0][][] */ -126,74,107,-12,-16,117,-93,-127, 
  /* [38][0][][] */ 42,110,-50,-127,44,-45,19,-46, 
  /* [39][0][][] */ 32,-19,-117,59,127,-32,-18,15, 
  /* [40][0][][] */ 27,67,116,-41,0,-79,-127,83, 
  /* [41][0][][] */ -53,29,127,-58,87,-105,7,-36, 
  /* [42][0][][] */ 34,-127,10,-70,20,-127,0,-19, 
  /* [43][0][][] */ -127,6,-118,36,1,37,12,42, 
  /* [44][0][][] */ -38,-89,45,127,-61,75,66,12, 
  /* [45][0][][] */ 73,85,127,0,-58,-40,-118,-41, 
  /* [46][0][][] */ -84,127,81,-99,-22,39,-41,111, 
  /* [47][0][][] */ 43,-40,-32,127,31,115,65,-106, 
};
const TfArray<4, int> tensor_dimension57 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant57_scale = { 48, { 0.0026049457956105471, 0.0031097012106329203, 0.0010223524877801538, 0.002733355388045311, 0.00096035923343151808, 0.0020037977956235409, 0.0037365993484854698, 0.002041093073785305, 0.0021622679196298122, 0.004731734748929739, 0.0035318478476256132, 0.0011695645516738296, 0.0024122963659465313, 0.0034047265071421862, 0.0029453844763338566, 0.0033084901515394449, 0.0021981608588248491, 0.0017336797900497913, 0.0029045897535979748, 0.00195266492664814, 0.0022063017822802067, 0.0017329775728285313, 0.0019629118032753468, 0.0021084893960505724, 0.0027988320216536522, 0.0016870402032509446, 0.0021035496611148119, 0.0011934946523979306, 0.004503544420003891, 0.0026871927548199892, 0.0022058577742427588, 0.0035743424668908119, 0.003511935705319047, 0.001546656247228384, 0.0035445548128336668, 0.001416715094819665, 0.0016099032945930958, 0.0020814796444028616, 0.0026711591053754091, 0.0040211770683526993, 0.0018769721500575542, 0.001448751543648541, 0.0029661576263606548, 0.00082916335668414831, 0.0027097281999886036, 0.0018664976814761758, 0.0026514288038015366, 0.0026291434187442064, } };
const TfArray<48, int> quant57_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(8) int8_t tensor_data58[8*1*1*48] = { 
  /* [0][0][][] */ -29,-17,7,53,-22,-13,-29,-35,-8,-7,0,-42,25,-17,21,11,-63,23,-12,24,-43,6,19,33,-5,-34,53,11,40,21,-50,-56,-19,9,-44,-38,28,-28,14,43,2,-32,-13,-127,-8,-34,5,-10, 
  /* [1][0][][] */ -36,-9,53,14,-45,34,-29,4,-41,-27,0,8,57,-5,-58,-53,-13,-17,-14,57,9,2,-111,127,50,-60,-16,-88,-64,-45,-67,20,40,-4,-8,-78,94,22,-6,11,56,6,-24,42,-91,11,23,-22, 
  /* [2][0][][] */ -15,42,-55,-21,27,10,48,-4,-33,-45,14,55,-31,-31,-18,-11,19,34,13,9,27,66,11,32,40,-33,-27,-26,-43,2,-25,-42,15,33,43,-38,46,53,27,-19,29,66,-19,-127,28,2,24,-30, 
  /* [3][0][][] */ 32,-103,-55,31,-88,-1,-69,29,54,35,51,-11,-34,78,-16,-52,-61,-7,28,90,14,-32,24,8,-68,-61,14,127,93,77,-20,20,-34,-75,-28,65,28,-44,-44,34,-44,-81,29,46,13,-15,-31,-12, 
  /* [4][0][][] */ -52,42,64,118,92,-109,-58,80,54,-7,19,78,15,-34,127,0,-10,81,-82,-12,-15,54,60,-25,34,-18,69,-60,-62,60,24,39,17,70,4,58,10,0,50,-5,36,44,-4,114,-3,96,40,-50, 
  /* [5][0][][] */ 5,-28,-32,57,15,-17,-3,-5,-66,-22,-10,-46,8,-16,-44,-18,14,-50,-28,-40,-41,59,-55,26,15,22,-6,35,22,-6,-55,63,-23,-2,-24,-95,-16,32,53,17,77,127,-35,67,57,-39,24,-15, 
  /* [6][0][][] */ -24,4,87,15,-41,-14,-8,42,62,83,98,2,-75,47,-26,-24,-94,40,15,-116,-12,11,-36,53,-76,127,-10,-49,21,-28,-58,-60,-33,-30,65,-43,-99,-28,20,2,90,-15,-2,88,27,67,-47,62, 
  /* [7][0][][] */ -69,40,-69,24,27,96,23,-37,-84,-38,-34,-44,59,-66,1,5,-46,-100,33,64,87,89,-103,-7,123,-8,-55,-120,46,5,-24,-127,77,65,20,-30,122,-45,-2,9,-16,21,-29,-84,41,40,39,-44, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant58_scale = { 8, { 0.005185490008443594, 0.0035167920868843794, 0.0041805044747889042, 0.0028873507399111986, 0.0028820452280342579, 0.0044631622731685638, 0.002468200633302331, 0.0025851246900856495, } };
const TfArray<8, int> quant58_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(8) int8_t tensor_data59[48*1*1*8] = { 
  /* [0][0][][] */ -50,-127,-35,63,-124,118,25,40, 
  /* [1][0][][] */ 57,-17,-122,-8,-14,127,48,57, 
  /* [2][0][][] */ -70,-121,-127,-19,-93,-12,18,28, 
  /* [3][0][][] */ -98,69,109,-31,56,-121,51,127, 
  /* [4][0][][] */ -39,-90,99,-31,-1,0,127,33, 
  /* [5][0][][] */ 23,-8,127,-8,-34,-53,-8,86, 
  /* [6][0][][] */ -38,-31,31,16,-51,-127,-70,-49, 
  /* [7][0][][] */ 26,42,-99,-13,127,78,-9,-28, 
  /* [8][0][][] */ 8,14,-127,7,-25,-16,-100,64, 
  /* [9][0][][] */ -33,29,23,-73,91,-127,-48,2, 
  /* [10][0][][] */ -66,-127,-95,7,-113,-18,-1,21, 
  /* [11][0][][] */ -11,-122,123,127,11,-7,-10,-10, 
  /* [12][0][][] */ -127,55,-13,14,36,-30,-23,-20, 
  /* [13][0][][] */ -29,-11,-8,2,127,-51,20,28, 
  /* [14][0][][] */ 33,70,-127,73,46,-26,-71,-93, 
  /* [15][0][][] */ -67,111,-45,-127,-51,-97,21,46, 
  /* [16][0][][] */ 127,-19,91,-3,22,-7,-20,9, 
  /* [17][0][][] */ -35,19,-127,-60,-45,96,81,55, 
  /* [18][0][][] */ -17,83,-28,-42,-24,78,127,91, 
  /* [19][0][][] */ -22,43,-21,48,-113,66,127,-126, 
  /* [20][0][][] */ 62,3,-27,-25,127,0,-85,-74, 
  /* [21][0][][] */ -39,-11,-15,-105,-16,127,59,21, 
  /* [22][0][][] */ 0,113,74,-38,127,-45,-21,36, 
  /* [23][0][][] */ -49,99,-80,-86,-45,-127,35,-25, 
  /* [24][0][][] */ 19,43,-42,61,31,32,41,127, 
  /* [25][0][][] */ 19,-127,-123,83,-104,36,-6,-62, 
  /* [26][0][][] */ 12,-28,42,51,25,33,-127,-75, 
  /* [27][0][][] */ 87,-92,-25,-73,-40,-127,62,-13, 
  /* [28][0][][] */ -40,89,-50,-127,-34,-73,-95,-36, 
  /* [29][0][][] */ 127,-80,-24,-17,47,33,34,68, 
  /* [30][0][][] */ -30,-11,127,-78,31,-110,36,-17, 
  /* [31][0][][] */ -37,-29,110,-29,127,12,-4,105, 
  /* [32][0][][] */ 71,61,-72,-127,-82,49,11,61, 
  /* [33][0][][] */ 3,-54,127,-29,102,116,42,94, 
  /* [34][0][][] */ -29,-22,72,-117,34,42,-127,-44, 
  /* [35][0][][] */ -18,-14,-36,-127,-30,-88,29,8, 
  /* [36][0][][] */ 37,-42,-52,102,26,127,20,0, 
  /* [37][0][][] */ -46,-44,-23,-10,12,81,127,-45, 
  /* [38][0][][] */ 33,103,-77,-51,-127,94,33,26, 
  /* [39][0][][] */ 75,22,-69,102,127,35,64,-77, 
  /* [40][0][][] */ -66,25,-127,26,-2,92,-57,-10, 
  /* [41][0][][] */ -11,43,-18,89,-27,93,127,72, 
  /* [42][0][][] */ -117,-27,-86,69,-84,-127,49,61, 
  /* [43][0][][] */ -55,-112,115,127,-64,7,56,49, 
  /* [44][0][][] */ 40,-75,-117,83,-81,-63,-2,-127, 
  /* [45][0][][] */ -89,8,-122,94,-4,8,-59,-127, 
  /* [46][0][][] */ -59,-12,107,9,62,-27,18,-127, 
  /* [47][0][][] */ -18,-22,-127,-13,-37,-41,-77,83, 
};
const TfArray<4, int> tensor_dimension59 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant59_scale = { 48, { 0.0019083534134551883, 0.0019616165664047003, 0.0023082289844751358, 0.0017398061463609338, 0.0025569384451955557, 0.0021677128970623016, 0.0034390729852020741, 0.0026001236401498318, 0.0026262036990374327, 0.0018613064894452691, 0.0024053442757576704, 0.0019307913025841117, 0.0039323335513472557, 0.0033327843993902206, 0.0016667814925312996, 0.0018945980118587613, 0.0022711623460054398, 0.0012652006698772311, 0.0021715136244893074, 0.0018086861819028854, 0.0029910707380622625, 0.0029155509546399117, 0.0021685785613954067, 0.0019269585609436035, 0.0021846296731382608, 0.0020820403005927801, 0.0020469976589083672, 0.0025957142934203148, 0.0016305921599268913, 0.0033501924481242895, 0.0018988425144925714, 0.0014240586897358298, 0.0015513279940932989, 0.0023293348494917154, 0.0014704305212944746, 0.0028777059633284807, 0.0023961262777447701, 0.0033727970439940691, 0.0017163441516458988, 0.0022965106181800365, 0.0023013788741081953, 0.0022379430010914803, 0.0023151058703660965, 0.0021767746657133102, 0.0019374489784240723, 0.0021092602983117104, 0.0021857188548892736, 0.002493624109774828, } };
const TfArray<48, int> quant59_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(8) int8_t tensor_data60[8*1*1*48] = { 
  /* [0][0][][] */ 16,31,24,47,31,98,-41,-35,-22,18,-53,-28,-127,-39,-5,-25,-65,-15,-59,-30,20,-78,57,9,-39,35,42,95,6,0,-53,-14,63,0,45,19,-35,-49,76,5,25,5,-15,-5,-4,-12,-41,4, 
  /* [1][0][][] */ 44,-32,63,-52,-46,6,15,1,-3,120,-122,-53,8,-8,48,31,-56,-62,-20,-12,-25,-5,-95,-127,-36,88,-46,-16,4,-12,-4,40,-8,-34,51,-36,37,-55,72,-15,-26,-42,0,93,-25,8,51,30, 
  /* [2][0][][] */ -29,6,52,17,-15,30,-5,7,33,10,-60,-31,-3,69,11,15,59,73,-81,-34,-72,21,-11,15,-34,21,-79,4,-76,-27,-38,108,-62,18,-72,-88,31,70,17,-38,-3,-4,-34,-127,-56,-47,20,34, 
  /* [3][0][][] */ -7,21,36,-7,-3,-62,-38,10,4,-127,-32,38,17,-32,-31,-69,-12,65,15,48,29,39,1,102,-2,-29,54,-21,2,23,3,17,-8,15,33,11,-59,-7,-38,-6,20,-27,-1,19,-5,19,-4,18, 
  /* [4][0][][] */ 14,-58,40,3,-1,-74,20,60,-24,127,-29,-33,50,-43,43,3,11,23,-12,-28,24,12,-22,-33,-33,18,-18,6,15,13,7,40,-31,19,-14,10,27,31,59,-39,-58,-10,-42,-35,-29,-62,52,-4, 
  /* [5][0][][] */ -63,-55,8,44,-7,-83,-85,-71,122,-84,6,-78,1,102,-39,-35,-14,-42,-43,65,-59,28,40,-55,4,93,68,-24,-127,-32,-101,51,40,81,-5,-90,10,0,12,84,-40,-18,71,-97,-91,21,-14,127, 
  /* [6][0][][] */ -53,43,4,-66,-127,-7,62,-48,23,-88,-4,-23,-58,-39,-24,-17,-11,-68,-9,30,-62,-6,-71,-1,46,12,16,10,0,12,105,-48,-13,-31,120,76,10,122,53,-16,20,-58,95,-14,33,26,1,50, 
  /* [7][0][][] */ -40,-5,-17,-73,-41,127,10,-82,-10,70,-8,9,-94,-20,-73,-5,-70,-68,-7,-35,-39,-69,22,-9,1,37,-14,67,-46,36,-67,99,7,20,74,-75,28,-21,-37,-59,75,-47,50,-3,10,-45,4,-22, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant60_scale = { 8, { 0.0025433660484850407, 0.0027978990692645311, 0.0035734407138079405, 0.0044661457650363445, 0.0053973393514752388, 0.0024109345395117998, 0.0020156423561275005, 0.0034391027875244617, } };
const TfArray<8, int> quant60_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int8_t tensor_data61[48*1*1*8] = { 
  /* [0][0][][] */ 66,-32,17,-67,-43,51,18,-127, 
  /* [1][0][][] */ 81,-69,58,12,3,-35,-127,20, 
  /* [2][0][][] */ -70,38,-108,-127,-46,-9,-73,-66, 
  /* [3][0][][] */ 34,39,104,-26,37,-37,-127,-49, 
  /* [4][0][][] */ -15,30,40,-115,77,-127,24,-30, 
  /* [5][0][][] */ 30,-9,-69,-127,-28,-42,-86,-50, 
  /* [6][0][][] */ -14,16,28,-27,9,-127,-79,1, 
  /* [7][0][][] */ -118,114,45,127,46,60,-7,93, 
  /* [8][0][][] */ -57,-12,14,-64,-29,-127,-2,-46, 
  /* [9][0][][] */ -11,15,-4,33,127,-66,25,-9, 
  /* [10][0][][] */ 106,-45,-127,79,-19,90,-109,26, 
  /* [11][0][][] */ 127,41,42,62,4,-14,-64,-125, 
  /* [12][0][][] */ -104,20,127,3,-72,-77,59,105, 
  /* [13][0][][] */ 62,78,82,-52,-15,17,-127,-13, 
  /* [14][0][][] */ 89,-54,48,-98,68,-127,9,-33, 
  /* [15][0][][] */ 84,76,29,-8,-127,24,44,-65, 
  /* [16][0][][] */ 26,57,127,65,81,-77,27,-1, 
  /* [17][0][][] */ 127,62,-60,108,96,-29,-65,7, 
  /* [18][0][][] */ 36,-26,17,-105,-33,-127,62,-48, 
  /* [19][0][][] */ -37,-4,127,0,50,-101,55,-4, 
  /* [20][0][][] */ 47,-35,-1,-33,33,-127,7,0, 
  /* [21][0][][] */ 35,-123,62,127,-67,77,-52,2, 
  /* [22][0][][] */ -31,61,-85,23,-127,10,-16,124, 
  /* [23][0][][] */ 68,-37,-54,-26,31,127,-117,-20, 
  /* [24][0][][] */ -116,44,111,-20,127,52,-56,-44, 
  /* [25][0][][] */ -71,5,-127,-9,-45,76,-39,63, 
  /* [26][0][][] */ 127,-58,-3,11,79,68,-54,24, 
  /* [27][0][][] */ -29,-127,-21,105,-45,32,-55,-44, 
  /* [28][0][][] */ -37,62,28,-18,80,-127,92,91, 
  /* [29][0][][] */ -43,-103,-72,-72,15,-127,120,30, 
  /* [30][0][][] */ -29,-39,-127,6,6,125,72,16, 
  /* [31][0][][] */ 11,-35,-20,47,-92,81,127,-68, 
  /* [32][0][][] */ 27,43,-25,-123,11,-43,-127,-85, 
  /* [33][0][][] */ -90,127,28,76,-45,51,19,38, 
  /* [34][0][][] */ 26,-8,30,14,-99,-39,127,14, 
  /* [35][0][][] */ 98,-64,1,10,32,47,-127,-40, 
  /* [36][0][][] */ -43,-6,127,-24,76,58,50,-109, 
  /* [37][0][][] */ -43,-43,124,-25,39,9,127,68, 
  /* [38][0][][] */ -8,45,-16,127,-79,-6,22,61, 
  /* [39][0][][] */ 78,-45,-67,37,-88,-82,-38,-127, 
  /* [40][0][][] */ -7,11,-43,-95,-15,-127,-68,-45, 
  /* [41][0][][] */ -59,12,-29,-32,-45,-119,-127,-82, 
  /* [42][0][][] */ 101,-127,59,17,36,26,-51,-18, 
  /* [43][0][][] */ -51,-32,-43,17,-23,-127,-50,-13, 
  /* [44][0][][] */ 55,-127,24,0,16,36,-27,4, 
  /* [45][0][][] */ -51,-10,127,96,-48,-33,26,98, 
  /* [46][0][][] */ -9,67,127,-27,-110,16,8,6, 
  /* [47][0][][] */ -62,25,-59,-127,-111,2,-51,100, 
};
const TfArray<4, int> tensor_dimension61 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant61_scale = { 48, { 0.0027069512289017439, 0.00089632684830576181, 0.0022387334611266851, 0.0022654912900179625, 0.001929737045429647, 0.0027242971118539572, 0.0029447055421769619, 0.00065988703863695264, 0.0018829511245712638, 0.0033308041747659445, 0.0016013770364224911, 0.001599443145096302, 0.0020173883531242609, 0.0026327562518417835, 0.0018333244370296597, 0.001995783532038331, 0.0013577977661043406, 0.0022716114763170481, 0.0011648890795186162, 0.0020630606450140476, 0.0028182922396808863, 0.0016476248856633902, 0.0017522358102723956, 0.0023258039727807045, 0.001732875476591289, 0.0020162663422524929, 0.0028862378094345331, 0.0015515002887696028, 0.001733836717903614, 0.0021493176463991404, 0.0012179899495095015, 0.002123804297298193, 0.0016631317557767034, 0.0015105021884664893, 0.0024404511786997318, 0.0025421618483960629, 0.0023265224881470203, 0.0024088204372674227, 0.0022907056845724583, 0.0024310587905347347, 0.0024912592489272356, 0.0023513000924140215, 0.0020050443708896637, 0.0038928512949496508, 0.0029615440871566534, 0.0023996043018996716, 0.0021038716658949852, 0.0019429416861385107, } };
const TfArray<48, int> quant61_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const ALIGN(8) int8_t tensor_data62[8*1*1*48] = { 
  /* [0][0][][] */ -76,107,-55,8,-17,-2,31,-127,-29,57,16,92,-7,-32,23,-54,24,-1,37,0,4,55,-29,-93,-91,51,-76,-86,43,27,53,5,70,55,-78,1,-3,-42,-27,63,-1,26,61,-53,84,-14,-11,-39, 
  /* [1][0][][] */ 14,-26,-2,42,-11,-42,10,51,-46,61,-19,-13,-50,-41,-39,-127,117,21,-46,37,-41,-94,-1,-19,55,-40,31,-21,101,7,-12,30,48,-46,23,-10,-31,-58,-70,45,-48,2,-17,-37,-34,48,-31,-25, 
  /* [2][0][][] */ 1,-59,20,60,30,-16,-29,26,-53,41,43,82,-118,-21,-44,-71,46,-96,-43,114,-61,-37,-59,1,30,36,-40,127,55,-65,-37,27,-47,-37,-26,-2,-64,41,15,41,-66,74,39,-90,48,31,49,-46, 
  /* [3][0][][] */ 8,-20,-72,-65,-27,84,45,-3,61,77,-6,-23,8,3,43,-27,70,34,-19,-3,18,95,16,25,-13,-2,54,98,68,-53,-126,-53,-127,34,21,81,34,-22,-112,-24,-34,-82,-49,36,-74,8,61,50, 
  /* [4][0][][] */ 74,-11,91,-27,29,-80,-58,-98,-46,114,54,54,21,11,-86,74,66,0,35,56,-105,-77,-84,-45,108,96,-33,56,127,-18,4,21,14,21,31,38,-78,-3,103,49,-68,72,28,-90,93,-116,21,42, 
  /* [5][0][][] */ -24,-5,-54,-33,-93,42,19,127,-33,-11,76,-23,19,-60,-28,-45,-85,-23,-46,6,14,7,38,-62,43,-17,-37,-5,-29,-38,-50,-12,-2,-70,23,39,22,10,8,-6,4,-6,49,-6,-20,9,-24,-31, 
  /* [6][0][][] */ -44,-25,-80,-85,18,27,-71,50,-34,35,65,-20,-4,29,30,-27,69,-35,-98,88,40,-10,38,75,-56,73,55,-24,95,43,-43,-57,-120,-23,-90,-13,15,114,17,1,-40,-26,-39,-4,-34,-12,23,127, 
  /* [7][0][][] */ 127,-90,-30,-43,-20,-52,43,16,-28,34,13,-47,4,-52,6,68,-14,-19,57,17,-24,-36,26,-62,-42,-1,-47,-11,47,18,-84,62,12,-52,-27,-53,-49,17,13,-20,0,17,58,-58,38,-14,-56,-63, 
};
const TfArray<4, int> tensor_dimension62 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant62_scale = { 8, { 0.0021428856998682022, 0.0030355865601450205, 0.0035665272735059261, 0.0027872133068740368, 0.0028776510152965784, 0.0042688800022006035, 0.0027986648492515087, 0.0033926309552043676, } };
const TfArray<8, int> quant62_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(8) int8_t tensor_data63[48*1*1*8] = { 
  /* [0][0][][] */ -4,-127,-7,119,-40,109,-51,90, 
  /* [1][0][][] */ 55,99,23,2,-15,-127,-7,-51, 
  /* [2][0][][] */ 34,-31,9,-28,74,-19,14,-127, 
  /* [3][0][][] */ 127,-59,-38,-32,32,-122,69,94, 
  /* [4][0][][] */ -127,9,-107,41,-2,49,44,-52, 
  /* [5][0][][] */ 25,-21,-59,127,-82,-106,-66,27, 
  /* [6][0][][] */ -42,-5,127,27,33,-109,-64,24, 
  /* [7][0][][] */ 1,-40,80,-127,20,-52,-23,80, 
  /* [8][0][][] */ 26,98,35,26,127,-59,90,71, 
  /* [9][0][][] */ 48,-21,82,-127,44,-63,1,60, 
  /* [10][0][][] */ 54,22,53,27,99,-18,-127,-95, 
  /* [11][0][][] */ -11,122,23,27,82,-37,53,127, 
  /* [12][0][][] */ -46,53,37,105,65,-81,-127,60, 
  /* [13][0][][] */ -44,-127,-26,20,35,27,-82,-56, 
  /* [14][0][][] */ -20,58,-17,10,21,-127,-24,37, 
  /* [15][0][][] */ -73,-43,-127,8,-85,30,39,94, 
  /* [16][0][][] */ 16,-127,-80,-46,-9,22,25,-86, 
  /* [17][0][][] */ -18,-9,41,-78,11,-16,-127,-89, 
  /* [18][0][][] */ -2,-121,49,42,-45,84,-127,11, 
  /* [19][0][][] */ -104,66,-13,127,49,36,-15,-97, 
  /* [20][0][][] */ -45,120,-57,95,99,-7,78,127, 
  /* [21][0][][] */ 25,97,-47,82,4,-42,-127,55, 
  /* [22][0][][] */ -17,123,-36,-127,40,-87,-3,0, 
  /* [23][0][][] */ 64,-69,127,1,-60,-43,-74,-112, 
  /* [24][0][][] */ 112,-65,-127,-60,-97,-49,43,0, 
  /* [25][0][][] */ 31,13,-52,-51,83,-112,4,-127, 
  /* [26][0][][] */ -53,-45,-121,-97,-9,103,127,-44, 
  /* [27][0][][] */ -114,-18,-27,58,-23,-19,60,-127, 
  /* [28][0][][] */ 89,111,34,-127,-40,62,-79,-38, 
  /* [29][0][][] */ -21,22,10,25,127,-35,-22,13, 
  /* [30][0][][] */ -109,127,-43,-54,68,55,25,-34, 
  /* [31][0][][] */ -73,127,123,-7,84,87,-4,-23, 
  /* [32][0][][] */ 23,-31,-38,15,-55,127,92,-39, 
  /* [33][0][][] */ -12,127,-52,-73,17,-38,37,-28, 
  /* [34][0][][] */ -17,127,34,109,-18,125,54,-72, 
  /* [35][0][][] */ -41,127,21,-34,45,-69,3,-10, 
  /* [36][0][][] */ -17,-105,-89,-127,19,51,16,57, 
  /* [37][0][][] */ 52,-127,103,37,-3,9,-81,4, 
  /* [38][0][][] */ 62,-71,104,-101,-15,27,-124,-127, 
  /* [39][0][][] */ 24,78,55,-41,-45,-102,127,-94, 
  /* [40][0][][] */ 19,-124,127,23,-101,-74,-27,-90, 
  /* [41][0][][] */ -2,-15,-62,-35,-127,127,-100,-61, 
  /* [42][0][][] */ 105,43,124,-18,56,-8,12,-127, 
  /* [43][0][][] */ -20,126,42,98,43,-127,-75,-31, 
  /* [44][0][][] */ -7,95,127,-75,93,74,-52,-4, 
  /* [45][0][][] */ -44,-61,83,127,-5,25,94,73, 
  /* [46][0][][] */ -86,114,-8,-13,127,-23,-24,64, 
  /* [47][0][][] */ -39,97,127,53,8,58,-125,-39, 
};
const TfArray<4, int> tensor_dimension63 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant63_scale = { 48, { 0.0019094839226454496, 0.0023249329533427954, 0.002518742810934782, 0.0020354371517896652, 0.0021263323724269867, 0.00091041717678308487, 0.0019776979461312294, 0.0020149156916886568, 0.002163466764613986, 0.0015130661195144057, 0.0015773430932313204, 0.0024018511176109314, 0.0026197277475148439, 0.001575821079313755, 0.0032214529346674681, 0.0017312730196863413, 0.0026755607686936855, 0.0026986536104232073, 0.0021708044223487377, 0.00089940236648544669, 0.0023262272588908672, 0.002036260673776269, 0.0022386137861758471, 0.0022415413986891508, 0.0011937348172068596, 0.0024701496586203575, 0.0015397298848256469, 0.0024339063093066216, 0.0021755164489150047, 0.0021457015536725521, 0.0017691199900582433, 0.0016967349220067263, 0.0025398654397577047, 0.0031295348890125751, 0.0018869751365855336, 0.0029528050217777491, 0.0014735268196091056, 0.0022478839382529259, 0.0020240815356373787, 0.0019452190026640892, 0.0020706942304968834, 0.0008401254890486598, 0.001217795186676085, 0.00089816527906805277, 0.0017318297177553177, 0.00066581193823367357, 0.0029181037098169327, 0.0021978940349072218, } };
const TfArray<48, int> quant63_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(8) int8_t tensor_data64[8*1*1*48] = { 
  /* [0][0][][] */ 0,63,32,-35,103,-127,-78,41,16,93,-14,8,26,-72,-16,96,0,-1,-9,-34,-23,11,-25,-24,-109,19,-110,11,38,-36,-53,-6,23,37,-29,8,-40,55,8,29,-36,-24,9,-55,-10,-17,-67,-15, 
  /* [1][0][][] */ -29,16,1,38,-19,-31,-46,20,11,-48,-71,23,7,-81,-35,107,68,24,22,105,0,10,71,68,61,39,-123,15,27,-18,52,118,-65,29,30,127,-97,-30,-35,-38,-108,-29,-13,126,47,-76,19,30, 
  /* [2][0][][] */ 2,13,57,56,42,-17,-48,24,4,98,-93,-11,-58,23,-33,59,72,-2,-44,127,16,-8,-54,-35,124,-68,-110,-27,34,-46,1,63,20,-61,49,25,-5,57,23,25,79,-14,14,57,76,43,-23,26, 
  /* [3][0][][] */ 5,2,17,-30,-38,114,88,-109,23,-112,-42,23,41,40,33,-21,-9,23,-11,9,-3,-5,-32,14,58,23,-36,22,-31,-15,5,9,-16,-4,39,-47,-68,-38,-23,7,4,76,-16,60,-31,127,-19,6, 
  /* [4][0][][] */ 17,-53,87,-71,-22,28,-127,11,-5,75,-91,-28,-56,-6,-50,45,107,33,27,71,87,-41,-14,22,71,33,-79,-31,-10,-81,57,22,84,-19,-36,-31,90,-7,14,12,-96,15,-5,-44,75,39,61,-8, 
  /* [5][0][][] */ -3,-14,-27,14,-14,-127,-15,-2,-24,-10,-6,-29,-1,7,6,4,-8,-74,1,2,-18,-25,-61,3,19,-19,109,-20,4,32,-15,28,13,4,-8,-9,1,11,-6,23,-24,-56,31,-30,12,26,24,-10, 
  /* [6][0][][] */ -19,-10,-10,-76,-24,-10,-81,-22,53,-18,5,37,20,-63,8,-58,28,83,71,-57,30,10,-3,20,-75,7,127,-51,-29,36,20,-19,89,20,8,-12,-6,-46,-58,-60,17,59,37,-69,-57,37,-40,-49, 
  /* [7][0][][] */ -70,-3,-68,-31,115,-9,-32,53,51,127,74,89,-6,-67,-69,-44,-35,-61,-50,126,73,53,-37,107,41,-108,-36,-25,47,-95,-39,28,-41,-74,-49,-33,-43,16,30,56,-76,36,-76,8,14,-6,70,5, 
};
const TfArray<4, int> tensor_dimension64 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant64_scale = { 8, { 0.0027745920233428478, 0.0035285737831145525, 0.0041020223870873451, 0.0048500699922442436, 0.0034928207751363516, 0.0092503754422068596, 0.0030196027364581823, 0.0030105677433311939, } };
const TfArray<8, int> quant64_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(8) int8_t tensor_data65[48*1*1*8] = { 
  /* [0][0][][] */ -63,127,-58,41,-19,75,95,10, 
  /* [1][0][][] */ -73,2,-73,-49,59,65,127,24, 
  /* [2][0][][] */ -84,-81,-127,-2,105,15,115,76, 
  /* [3][0][][] */ 127,-93,5,54,-61,-68,-13,-16, 
  /* [4][0][][] */ 2,59,-60,71,-40,127,-55,-30, 
  /* [5][0][][] */ 8,9,79,-12,16,-127,-99,-96, 
  /* [6][0][][] */ 28,68,45,55,26,127,-49,105, 
  /* [7][0][][] */ -127,-29,40,-7,104,-73,22,17, 
  /* [8][0][][] */ 63,-79,70,-13,-34,-35,2,-127, 
  /* [9][0][][] */ -119,127,8,11,56,-76,95,89, 
  /* [10][0][][] */ 12,-126,-97,-116,-86,26,61,127, 
  /* [11][0][][] */ 12,81,49,88,-18,-14,-48,127, 
  /* [12][0][][] */ 63,-79,-127,-68,-44,-38,2,69, 
  /* [13][0][][] */ -127,-98,28,-55,-5,-16,-95,48, 
  /* [14][0][][] */ 69,38,66,-114,-115,85,-70,-127, 
  /* [15][0][][] */ 0,127,48,8,2,32,40,-52, 
  /* [16][0][][] */ -116,13,70,-42,52,127,64,-87, 
  /* [17][0][][] */ -127,-53,58,28,36,27,33,113, 
  /* [18][0][][] */ 1,13,71,-16,-53,-95,-9,127, 
  /* [19][0][][] */ -16,-9,-72,-107,41,-68,-127,-33, 
  /* [20][0][][] */ 64,79,-127,78,-104,78,85,-11, 
  /* [21][0][][] */ 79,73,43,121,-28,89,127,-66, 
  /* [22][0][][] */ 127,2,33,-102,37,-54,3,62, 
  /* [23][0][][] */ 114,-34,90,23,64,-127,75,31, 
  /* [24][0][][] */ -5,-44,-37,-2,68,-8,-127,37, 
  /* [25][0][][] */ 12,3,11,-46,-87,-127,9,80, 
  /* [26][0][][] */ -10,-24,127,22,56,-122,-109,35, 
  /* [27][0][][] */ -127,80,-18,20,3,-47,-31,33, 
  /* [28][0][][] */ -95,-109,-22,-1,-50,31,127,-79, 
  /* [29][0][][] */ -117,-68,-113,124,-16,127,-115,91, 
  /* [30][0][][] */ 33,-68,127,-55,2,9,-49,-24, 
  /* [31][0][][] */ -13,-60,63,-127,110,3,-27,67, 
  /* [32][0][][] */ 56,-18,-127,35,31,-11,-62,6, 
  /* [33][0][][] */ 49,-8,52,106,-61,-37,-127,-69, 
  /* [34][0][][] */ -2,67,127,-3,-105,15,92,47, 
  /* [35][0][][] */ 23,-127,42,-107,-40,-96,-25,-26, 
  /* [36][0][][] */ -92,-127,38,39,-87,103,-75,92, 
  /* [37][0][][] */ -38,60,58,-74,-8,-39,127,35, 
  /* [38][0][][] */ 43,100,127,34,43,-16,32,-18, 
  /* [39][0][][] */ 104,87,-27,-127,-28,-72,-87,-33, 
  /* [40][0][][] */ -73,121,127,23,81,7,-28,15, 
  /* [41][0][][] */ -58,-79,-16,-42,-60,-28,-24,127, 
  /* [42][0][][] */ 45,-63,4,86,2,76,-65,-127, 
  /* [43][0][][] */ 24,-23,-127,34,-52,94,-24,-55, 
  /* [44][0][][] */ -36,41,41,127,-51,-5,55,-40, 
  /* [45][0][][] */ -7,-45,-46,127,-22,82,-5,33, 
  /* [46][0][][] */ 51,-67,127,-73,6,12,-45,-34, 
  /* [47][0][][] */ -50,-18,63,-37,2,-127,0,53, 
};
const TfArray<4, int> tensor_dimension65 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant65_scale = { 48, { 0.0015667403349652886, 0.0018947514472529292, 0.0016735965618863702, 0.0026717782020568848, 0.0012540984898805618, 0.0016014146385714412, 0.0016870367107912898, 0.0021249405108392239, 0.0017634521936997771, 0.0016997657949104905, 0.0010871087433770299, 0.0018261068034917116, 0.0018264836398884654, 0.0023356024175882339, 0.0020964033901691437, 0.0025767430197447538, 0.0017118584364652634, 0.0023302712943404913, 0.0018084619659930468, 0.0021921875886619091, 0.0017412649467587471, 0.0018659665947780013, 0.0024028110783547163, 0.0011738209286704659, 0.0032657729461789131, 0.0018497594865038991, 0.0013590076705440879, 0.0029280423186719418, 0.0015481524169445038, 0.0013393792323768139, 0.0018351791659370065, 0.0011087536113336682, 0.0030068191699683666, 0.0020898175425827503, 0.0020144928712397814, 0.0018932317616418004, 0.0019439563620835543, 0.0015393103240057826, 0.0012513474794104695, 0.0015000210842117667, 0.0011955866357311606, 0.0021439299453049898, 0.0021456158719956875, 0.0018912311643362045, 0.0019800858572125435, 0.0021889987401664257, 0.0023748227395117283, 0.0020440707448869944, } };
const TfArray<48, int> quant65_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(8) int8_t tensor_data66[8*1*1*48] = { 
  /* [0][0][][] */ -33,-28,12,20,-127,-6,11,-60,23,-90,-50,-27,18,-53,34,15,5,6,-20,-8,-45,13,23,71,-5,37,47,-64,-18,-17,-81,28,-36,42,65,50,-1,-5,102,-8,-104,-30,-2,2,6,18,85,-30, 
  /* [1][0][][] */ 83,14,25,-23,-4,-19,-48,-40,-74,56,45,-3,-29,-70,14,90,-14,18,-12,-13,-37,8,-28,-40,37,-24,-53,92,-65,36,95,-49,-1,-7,-26,-38,-16,14,84,-62,127,-4,10,-4,-57,66,-112,6, 
  /* [2][0][][] */ 41,-21,-53,-5,-127,71,-38,-18,43,9,32,-28,-42,31,-23,-49,-82,64,3,-63,59,-6,-53,3,-29,-120,27,8,-10,19,-44,60,56,-3,-63,32,29,24,83,17,69,43,-3,50,31,0,58,49, 
  /* [3][0][][] */ -16,-13,10,-14,95,5,-15,11,61,35,127,64,7,-19,-12,59,25,-7,82,-26,-15,89,58,0,7,-54,-68,-16,-38,-18,-20,-114,-19,-4,-27,-98,-4,-31,-6,-31,35,51,-69,-15,19,-74,6,84, 
  /* [4][0][][] */ 77,49,123,-42,-111,40,-68,43,-8,73,-11,-46,-37,-72,-17,-29,-63,17,-28,-24,43,9,-25,43,67,-28,116,13,6,-111,29,87,-50,-18,29,3,-32,-28,80,-118,127,-39,-18,26,18,20,-39,-3, 
  /* [5][0][][] */ 63,-60,-21,37,0,-15,-3,-55,-37,-43,-15,-27,-47,9,70,19,32,-34,20,-22,-39,35,-53,-75,7,-60,2,34,4,-22,-26,3,40,63,-47,27,42,-2,28,75,127,56,-60,64,-64,9,16,23, 
  /* [6][0][][] */ 9,-36,8,76,9,-78,80,8,-14,58,-56,-33,-19,-31,74,15,57,-24,-12,-40,-51,127,13,65,37,30,-13,-27,99,47,105,-81,43,16,2,68,-97,107,8,27,-10,-68,26,18,-74,-66,-21,11, 
  /* [7][0][][] */ -53,-24,-24,-26,-7,-57,26,9,-100,12,-78,37,27,92,-41,10,30,27,-35,-86,108,-55,-75,14,8,-32,-97,-11,-29,46,32,123,-45,-31,67,3,127,-55,-93,80,-57,49,79,77,74,-71,-32,15, 
};
const TfArray<4, int> tensor_dimension66 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant66_scale = { 8, { 0.0042083184234797955, 0.0038121656980365515, 0.0045261555351316929, 0.0037632621824741364, 0.0038317975122481585, 0.005013488233089447, 0.0021335887722671032, 0.0024617998860776424, } };
const TfArray<8, int> quant66_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(8) int8_t tensor_data67[48*1*1*8] = { 
  /* [0][0][][] */ 36,3,48,-82,-30,-13,-96,-127, 
  /* [1][0][][] */ -87,4,119,-127,-42,-103,83,7, 
  /* [2][0][][] */ -56,6,-116,-48,5,106,127,-76, 
  /* [3][0][][] */ 121,-55,-127,-95,-51,56,13,105, 
  /* [4][0][][] */ 57,-71,38,67,63,37,-127,-18, 
  /* [5][0][][] */ -127,-36,-31,99,11,-62,16,26, 
  /* [6][0][][] */ 57,35,127,21,38,71,23,126, 
  /* [7][0][][] */ 9,-46,-111,92,127,76,-46,-113, 
  /* [8][0][][] */ -65,-37,-127,83,-3,17,13,-73, 
  /* [9][0][][] */ 56,48,37,110,-23,-50,-96,127, 
  /* [10][0][][] */ -77,-51,-40,-22,20,-96,127,12, 
  /* [11][0][][] */ 119,46,-59,-27,-32,-16,127,107, 
  /* [12][0][][] */ -65,127,116,21,48,107,10,-8, 
  /* [13][0][][] */ -2,48,12,-96,74,-21,127,15, 
  /* [14][0][][] */ -1,-60,51,-9,127,-35,21,100, 
  /* [15][0][][] */ -37,56,127,41,42,-43,-60,8, 
  /* [16][0][][] */ 1,81,-108,84,-127,-44,38,-103, 
  /* [17][0][][] */ -50,11,127,-7,31,-24,-18,65, 
  /* [18][0][][] */ 42,-36,-127,32,25,77,-81,-90, 
  /* [19][0][][] */ 23,91,85,-127,48,-78,45,69, 
  /* [20][0][][] */ 37,-7,10,20,-4,-31,-127,54, 
  /* [21][0][][] */ 43,-109,-34,89,-127,-55,-65,77, 
  /* [22][0][][] */ 62,55,90,-127,-101,-83,41,-12, 
  /* [23][0][][] */ -65,-9,71,21,-98,86,127,-45, 
  /* [24][0][][] */ -103,-127,-79,57,12,20,-91,34, 
  /* [25][0][][] */ -93,77,39,-109,-24,-127,121,-121, 
  /* [26][0][][] */ 85,-110,127,26,-18,-33,-31,-67, 
  /* [27][0][][] */ -127,-80,-63,-41,37,-1,-105,32, 
  /* [28][0][][] */ -127,-7,74,46,4,30,67,-86, 
  /* [29][0][][] */ 10,19,52,-127,-27,-15,37,34, 
  /* [30][0][][] */ -127,85,66,5,81,-17,14,-19, 
  /* [31][0][][] */ -100,-52,-127,-71,-28,98,5,102, 
  /* [32][0][][] */ 7,-28,-56,-71,1,-38,-9,-127, 
  /* [33][0][][] */ 58,81,127,64,-2,-69,-67,-69, 
  /* [34][0][][] */ 74,79,-75,-34,2,-91,-56,127, 
  /* [35][0][][] */ 0,12,-57,127,-15,-1,40,-21, 
  /* [36][0][][] */ -127,-27,-21,-64,21,22,-3,-80, 
  /* [37][0][][] */ -26,-16,-86,120,-127,-11,-17,26, 
  /* [38][0][][] */ 98,-127,-118,-113,-1,90,75,115, 
  /* [39][0][][] */ -69,-80,-127,-52,-18,64,54,118, 
  /* [40][0][][] */ -114,127,127,-5,81,36,52,38, 
  /* [41][0][][] */ -93,-8,-9,26,-11,-41,-58,-127, 
  /* [42][0][][] */ -114,-56,33,-85,52,-43,-127,-87, 
  /* [43][0][][] */ 63,-44,-17,42,-24,127,-39,-64, 
  /* [44][0][][] */ 29,-77,62,17,99,-127,-70,94, 
  /* [45][0][][] */ 42,75,-38,-37,-36,12,8,-127, 
  /* [46][0][][] */ 40,42,127,46,-13,-45,-76,-73, 
  /* [47][0][][] */ 39,-84,74,-127,122,-20,-47,-42, 
};
const TfArray<4, int> tensor_dimension67 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant67_scale = { 48, { 0.0019380977610126138, 0.0016317925183102489, 0.0013054243754595518, 0.0015680227661505342, 0.0023118054959923029, 0.0027318517677485943, 0.0017441845266148448, 0.0016012924024835229, 0.0021361673716455698, 0.0014475359348580241, 0.0024501660373061895, 0.0019793517421931028, 0.0019019073806703091, 0.0027871550992131233, 0.0024727294221520424, 0.0017429144354537129, 0.00082917010877281427, 0.0011364785023033619, 0.0017504002898931503, 0.0016058061737567186, 0.002315970603376627, 0.0015131892869248986, 0.0017876570345833898, 0.0020396437030285597, 0.002278635511174798, 0.0017431011656299233, 0.0014950437471270561, 0.0014681159518659115, 0.0021800140384584665, 0.0031583011150360107, 0.0023741072509437799, 0.001071578124538064, 0.0017255030106753111, 0.0012001292780041695, 0.0017554372316226363, 0.003215947886928916, 0.0023219406139105558, 0.0022711309138685465, 0.0015204112278297544, 0.0015598608879372478, 0.0013371590757742524, 0.0027279674541205168, 0.0021016721148043871, 0.0019895690493285656, 0.0014350309502333403, 0.0018689600983634591, 0.0015799049288034439, 0.0014913550112396479, } };
const TfArray<48, int> quant67_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const ALIGN(8) int8_t tensor_data68[8*1*1*48] = { 
  /* [0][0][][] */ 51,-124,-21,53,15,-38,-4,-20,19,-9,-22,-35,-71,-6,16,61,2,-77,38,-37,22,10,-26,16,-93,-41,15,-127,-18,37,13,3,-16,81,44,21,-29,4,21,50,-32,-35,-27,32,28,0,58,40, 
  /* [1][0][][] */ 10,10,44,24,-6,11,12,14,-18,127,-45,-11,56,41,-56,-81,-38,87,0,106,29,72,74,22,61,25,-67,-85,-39,-59,-53,6,17,-48,46,-18,-8,-42,-4,-45,57,51,-40,45,-73,-30,-70,-61, 
  /* [2][0][][] */ 0,127,17,49,7,31,43,-40,3,43,-39,-11,51,-2,-3,-43,19,84,-33,37,2,-26,95,39,-70,4,-33,-42,-5,-8,-29,-53,-44,-49,-13,18,20,15,-1,-18,38,26,11,13,48,33,-58,-2, 
  /* [3][0][][] */ -100,-81,8,-54,63,91,68,104,46,57,32,39,3,-67,-29,-56,-80,125,-49,78,18,-47,-127,-7,90,8,-4,-39,8,-42,-36,-3,38,-64,-64,-58,-114,-62,-23,-24,47,5,-46,-49,30,68,-73,-68, 
  /* [4][0][][] */ -127,-79,37,47,40,11,14,41,-33,-65,-30,-47,57,92,51,-104,103,50,63,75,-87,70,-42,-65,-7,7,-52,14,-6,-49,-88,-41,16,-90,-11,37,12,83,-44,-83,69,20,23,8,78,5,-91,62, 
  /* [5][0][][] */ 9,-127,-5,69,18,-26,20,-2,-93,40,-16,26,60,-33,6,-46,62,39,110,50,16,68,8,38,44,-52,5,-48,15,26,-72,87,-46,13,1,-6,-16,12,-22,16,-3,-9,-39,41,-34,33,28,-9, 
  /* [6][0][][] */ -68,8,-53,40,-68,-53,15,-6,-37,-76,45,-5,-19,64,28,74,-15,-115,-14,-32,-122,26,-26,-19,-48,29,57,-127,42,13,2,42,-19,32,-16,-28,-2,-2,-7,48,-63,-27,-42,13,-5,2,64,8, 
  /* [7][0][][] */ -115,-14,-59,87,25,37,98,-109,70,59,13,-95,10,-3,107,37,88,18,-3,65,20,-57,54,-45,75,-62,-2,1,-45,6,58,35,-127,36,72,40,-65,17,37,-9,40,-19,-11,63,121,107,51,1, 
};
const TfArray<4, int> tensor_dimension68 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant68_scale = { 8, { 0.005941467359662056, 0.0034853138495236635, 0.0078889150172472, 0.0040555321611464024, 0.0041966992430388927, 0.0060039553791284561, 0.0041100154630839825, 0.0037763239815831184, } };
const TfArray<8, int> quant68_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(8) int8_t tensor_data69[48*1*1*8] = { 
  /* [0][0][][] */ -127,26,101,8,59,-113,32,121, 
  /* [1][0][][] */ 61,53,62,127,3,-8,108,23, 
  /* [2][0][][] */ 36,-29,32,-120,-53,51,-51,-127, 
  /* [3][0][][] */ 73,14,127,7,-95,-97,-11,81, 
  /* [4][0][][] */ 127,62,101,27,-43,-8,11,-95, 
  /* [5][0][][] */ 92,85,127,79,-83,-127,-21,20, 
  /* [6][0][][] */ -8,127,-43,98,-16,13,80,-9, 
  /* [7][0][][] */ 3,21,112,-9,44,-84,127,-9, 
  /* [8][0][][] */ 127,-38,11,7,-40,-114,0,45, 
  /* [9][0][][] */ 5,18,30,9,-48,-10,-20,127, 
  /* [10][0][][] */ -15,75,-86,-127,117,26,-53,-73, 
  /* [11][0][][] */ -60,-57,42,16,-15,-56,127,57, 
  /* [12][0][][] */ 61,54,94,91,56,20,-26,-127, 
  /* [13][0][][] */ -8,127,-34,-98,23,-60,18,-22, 
  /* [14][0][][] */ 127,10,91,-5,22,-84,27,-15, 
  /* [15][0][][] */ -127,19,-17,24,47,81,-3,-11, 
  /* [16][0][][] */ 2,31,-30,-127,33,-30,9,115, 
  /* [17][0][][] */ -57,93,-127,56,122,-53,-33,-56, 
  /* [18][0][][] */ -127,-71,-96,-25,44,2,-12,91, 
  /* [19][0][][] */ -28,127,-14,-90,-6,-37,42,7, 
  /* [20][0][][] */ 127,24,85,54,-94,-53,-2,1, 
  /* [21][0][][] */ 29,100,111,65,-96,-50,127,-76, 
  /* [22][0][][] */ -68,-33,-4,-11,127,18,-125,-20, 
  /* [23][0][][] */ -13,-22,-49,83,-44,-127,-33,-2, 
  /* [24][0][][] */ -127,96,108,88,42,21,-64,-17, 
  /* [25][0][][] */ -81,-100,-44,-20,103,-17,-127,72, 
  /* [26][0][][] */ 31,84,3,-127,-62,106,26,-75, 
  /* [27][0][][] */ -50,6,-48,-70,39,22,127,55, 
  /* [28][0][][] */ -112,54,-43,-99,-86,98,127,127, 
  /* [29][0][][] */ 16,-127,24,108,-11,52,-26,9, 
  /* [30][0][][] */ 61,89,-109,9,-45,124,73,-127, 
  /* [31][0][][] */ 8,18,57,-77,49,127,38,3, 
  /* [32][0][][] */ 14,20,-3,53,36,4,-127,27, 
  /* [33][0][][] */ 97,127,38,17,39,-27,76,-11, 
  /* [34][0][][] */ -63,11,22,-19,-127,24,19,-46, 
  /* [35][0][][] */ 121,-127,-126,-71,-75,-14,60,13, 
  /* [36][0][][] */ -44,60,20,34,49,1,22,-127, 
  /* [37][0][][] */ 68,-5,-16,28,127,-29,-8,48, 
  /* [38][0][][] */ 74,64,-37,-27,13,66,-127,-55, 
  /* [39][0][][] */ 1,-17,-30,-16,49,12,23,-127, 
  /* [40][0][][] */ 77,-54,-25,96,36,93,-97,-127, 
  /* [41][0][][] */ -33,-5,-9,118,-99,127,47,-21, 
  /* [42][0][][] */ -2,22,104,-7,43,-89,127,-7, 
  /* [43][0][][] */ 40,-6,-53,98,-8,53,127,-41, 
  /* [44][0][][] */ -53,97,127,-69,87,54,67,-34, 
  /* [45][0][][] */ -6,-127,39,-83,13,-28,-70,9, 
  /* [46][0][][] */ -3,-76,-34,-28,43,62,-127,-44, 
  /* [47][0][][] */ -7,-31,-97,9,-36,99,-127,10, 
};
const TfArray<4, int> tensor_dimension69 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant69_scale = { 48, { 0.0013336049159988761, 0.0022884542122483253, 0.0020328855607658625, 0.0012879610294476151, 0.0021768512669950724, 0.0011947154998779297, 0.0017356902826577425, 0.0021451988723129034, 0.0012896734988316894, 0.0024853530339896679, 0.0017771485727280378, 0.0024674185551702976, 0.0010853325948119164, 0.0021859135013073683, 0.0018782911356538534, 0.0016000976320356131, 0.0022020393516868353, 0.0017153427470475435, 0.0021069464273750782, 0.0022208644077181816, 0.0017160223796963692, 0.001442232052795589, 0.00095394061645492911, 0.0017771500861272216, 0.00088276452152058482, 0.0022218194790184498, 0.001951159443706274, 0.0017696035793051124, 0.0014304399956017733, 0.0021442836150527, 0.0012344681890681386, 0.0017478874651715159, 0.0028142218943685293, 0.0027494977694004774, 0.0034418466966599226, 0.00081317353760823607, 0.0018645381787791848, 0.0031519448384642601, 0.0023640741128474474, 0.002473537577316165, 0.0015355872455984354, 0.0015627649845555425, 0.0020908513106405735, 0.0016601027455180883, 0.00091982475714758039, 0.0018473985837772489, 0.0027976017445325851, 0.0020649433135986328, } };
const TfArray<48, int> quant69_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(8) int8_t tensor_data70[8*1*1*48] = { 
  /* [0][0][][] */ -43,29,-31,-29,30,-10,19,-85,-20,40,-4,-127,-8,-65,-25,51,-5,-14,-20,1,22,-34,-38,-79,108,33,-4,7,-27,42,2,74,95,9,-32,-70,-17,16,89,-21,-28,4,99,39,-6,-25,-14,78, 
  /* [1][0][][] */ 33,-1,-21,53,-38,1,-8,-53,20,37,-16,-28,6,-7,7,-36,-27,-11,24,9,9,4,14,127,12,13,14,38,6,9,13,-114,17,-28,25,26,4,-10,26,-22,7,-25,56,-13,59,8,9,35, 
  /* [2][0][][] */ 16,-41,3,-40,-127,27,10,-28,-63,-30,0,45,-6,-6,-28,96,-8,6,68,-17,-29,-18,8,-18,81,28,-10,-8,-6,8,19,15,-27,-52,34,-63,21,-42,-32,17,-27,-8,26,1,8,8,13,22, 
  /* [3][0][][] */ -29,-94,-27,18,-1,-8,-52,-32,12,-7,-26,-36,-20,66,5,-36,53,0,16,3,5,22,-8,-69,-89,3,-5,-57,15,-28,4,53,11,-9,44,24,-50,-66,32,4,38,4,46,-22,20,127,-11,39, 
  /* [4][0][][] */ -7,-30,-1,21,94,-4,14,18,-39,61,-4,2,-10,64,-4,18,13,-10,-67,-13,34,5,5,-2,127,-49,-7,19,-6,-41,7,14,4,25,81,-50,19,-118,3,-41,2,1,-21,-5,-20,-38,54,-27, 
  /* [5][0][][] */ 18,-1,19,15,-20,-46,2,9,-8,127,-10,22,7,17,14,30,40,-6,25,22,5,-7,-27,-16,21,19,-1,-2,27,-1,18,21,11,-13,-15,-1,-53,23,-30,-75,-3,-9,-2,-11,1,8,3,-5, 
  /* [6][0][][] */ 2,-22,-14,7,43,6,-70,34,-4,-31,9,12,12,-55,15,-2,-25,-25,-21,33,8,16,-14,-15,59,16,15,23,6,59,5,21,11,-41,21,-24,19,-29,-7,4,-5,0,-26,-8,-32,127,3,-17, 
  /* [7][0][][] */ 49,-61,32,-45,-18,21,-34,16,6,-75,-9,-61,53,127,-11,23,37,39,-29,-30,-46,-38,-52,83,124,44,36,6,-62,-74,5,-66,32,-18,-56,-41,109,86,65,24,50,-10,-45,-59,-21,49,-10,-29, 
};
const TfArray<4, int> tensor_dimension70 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant70_scale = { 8, { 0.0043901768513023853, 0.0063390149734914303, 0.0058535989373922348, 0.0052521377801895142, 0.0046737696975469589, 0.0069012199528515339, 0.0072245919145643711, 0.0037454671692103148, } };
const TfArray<8, int> quant70_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(8) int8_t tensor_data71[48*1*1*8] = { 
  /* [0][0][][] */ -95,-87,-127,58,-8,80,35,2, 
  /* [1][0][][] */ 35,64,-101,-85,70,22,-127,-52, 
  /* [2][0][][] */ 10,10,-127,-11,49,-31,-26,-68, 
  /* [3][0][][] */ -127,-43,62,-1,33,41,-3,-126, 
  /* [4][0][][] */ -99,-54,38,57,3,-104,-36,-127, 
  /* [5][0][][] */ 46,-19,114,10,-32,-30,-9,-127, 
  /* [6][0][][] */ 45,62,127,40,-77,51,-18,-101, 
  /* [7][0][][] */ 49,-11,-51,17,-79,13,-60,127, 
  /* [8][0][][] */ -127,61,-30,99,-92,-84,-43,-124, 
  /* [9][0][][] */ -83,12,46,-127,-4,27,26,-56, 
  /* [10][0][][] */ -27,21,52,31,-14,-127,37,53, 
  /* [11][0][][] */ -30,-85,57,127,-117,-72,36,27, 
  /* [12][0][][] */ -94,-40,-80,8,-50,27,81,127, 
  /* [13][0][][] */ 36,46,28,127,-13,-55,8,71, 
  /* [14][0][][] */ 75,48,-55,-24,118,-72,-77,-127, 
  /* [15][0][][] */ 89,-9,-57,127,8,-6,-25,62, 
  /* [16][0][][] */ -127,31,-31,-21,-36,-37,17,54, 
  /* [17][0][][] */ 70,127,34,41,-40,-2,-86,-51, 
  /* [18][0][][] */ -84,-99,92,-16,74,15,-127,9, 
  /* [19][0][][] */ -19,-86,127,-43,48,11,107,106, 
  /* [20][0][][] */ 8,-127,-62,-50,5,6,42,-61, 
  /* [21][0][][] */ 80,60,-124,4,101,-127,81,70, 
  /* [22][0][][] */ 94,118,43,64,-97,53,-127,-86, 
  /* [23][0][][] */ 108,-24,34,-47,-35,-52,-71,-127, 
  /* [24][0][][] */ -33,40,127,79,-68,-10,-7,-44, 
  /* [25][0][][] */ -69,-56,3,46,127,-51,-66,92, 
  /* [26][0][][] */ -1,-39,-127,75,19,58,119,32, 
  /* [27][0][][] */ 74,-71,127,37,-28,14,-67,-102, 
  /* [28][0][][] */ -65,25,111,9,-9,-41,-127,6, 
  /* [29][0][][] */ -100,-115,84,58,-57,-80,-51,-127, 
  /* [30][0][][] */ -36,-32,42,97,53,29,-127,2, 
  /* [31][0][][] */ 21,-64,-127,-16,-34,1,79,16, 
  /* [32][0][][] */ -57,-91,-38,125,66,17,-83,127, 
  /* [33][0][][] */ -24,-49,-127,-42,65,-19,43,18, 
  /* [34][0][][] */ 78,-10,-72,-72,3,-127,90,95, 
  /* [35][0][][] */ 127,43,-37,59,-19,32,64,125, 
  /* [36][0][][] */ 50,-37,-78,-1,121,-127,-11,-119, 
  /* [37][0][][] */ -32,-59,-53,-102,91,10,127,64, 
  /* [38][0][][] */ 15,-7,-48,-22,34,127,-41,8, 
  /* [39][0][][] */ 78,35,-20,-16,-118,54,127,-7, 
  /* [40][0][][] */ -16,16,127,-14,-57,54,-69,-49, 
  /* [41][0][][] */ -45,-52,-53,-127,-51,-28,-12,-108, 
  /* [42][0][][] */ -33,127,-41,-1,-8,71,58,-42, 
  /* [43][0][][] */ 30,-41,120,20,-55,-61,-127,-69, 
  /* [44][0][][] */ 2,13,-21,-17,-9,127,12,36, 
  /* [45][0][][] */ -25,37,127,55,5,-38,-56,-9, 
  /* [46][0][][] */ 38,26,-127,-3,94,-76,70,31, 
  /* [47][0][][] */ -127,-26,60,-48,50,107,-20,36, 
};
const TfArray<4, int> tensor_dimension71 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant71_scale = { 48, { 0.0016611885512247682, 0.0010006291558966041, 0.0013346672058105469, 0.0031045733485370874, 0.00169535749591887, 0.0018059842986986041, 0.0024309726431965828, 0.0033926998730748892, 0.001761226449161768, 0.0032773041166365147, 0.003234317060559988, 0.0012706340057775378, 0.00095401762519031763, 0.0034143435768783092, 0.0025462259072810411, 0.0031634680926799774, 0.0031121538486331701, 0.00067024712916463614, 0.0021546962670981884, 0.0015462167793884873, 0.0011183599708601832, 0.0022195081692188978, 0.0019272202625870705, 0.00218400196172297, 0.000950056710280478, 0.002355785109102726, 0.002389922272413969, 0.00095741928089410067, 0.0010675217490643263, 0.0022898325696587563, 0.0029776780866086483, 0.002324261236935854, 0.0025297687388956547, 0.0031284333672374487, 0.0015498083084821701, 0.001821742276661098, 0.0026608665939420462, 0.0018259786302223802, 0.0039041668642312288, 0.0030218863394111395, 0.0032993904314935207, 0.0019115031464025378, 0.0022035229485481977, 0.0010848445817828178, 0.0020451962482184172, 0.001457691309042275, 0.002918030833825469, 0.0028794603422284126, } };
const TfArray<48, int> quant71_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(8) int8_t tensor_data72[8*1*1*48] = { 
  /* [0][0][][] */ 127,46,18,-32,37,-56,21,-38,-41,113,19,-61,-48,-20,15,-96,43,82,17,-26,56,28,29,56,21,-26,-5,-96,46,-65,-7,18,29,-30,33,86,-8,-7,-21,-34,-1,7,-64,-41,7,7,7,64, 
  /* [1][0][][] */ -14,85,16,-1,-55,47,-80,-5,69,-13,-56,-35,34,17,-1,-8,-21,127,40,14,-8,35,63,-12,-98,-14,-12,103,7,-43,-2,2,-22,-58,-47,14,19,5,-6,-22,28,47,74,60,10,-9,7,0, 
  /* [2][0][][] */ 45,-85,76,-7,11,-14,-18,14,-106,-32,13,25,-36,13,-31,28,44,13,-32,44,43,-40,9,20,-54,19,-20,-25,-51,11,-8,26,25,-46,-8,-20,33,-14,17,-6,44,19,-38,-47,-19,-127,35,-35, 
  /* [3][0][][] */ -28,-76,-19,3,-1,11,-29,25,-2,127,50,73,-4,45,-5,-91,22,28,30,0,21,15,16,-4,-42,4,17,7,19,54,21,-2,12,-16,19,44,-14,-20,12,25,-12,37,9,9,-15,-56,0,8, 
  /* [4][0][][] */ 21,101,-15,4,-6,-24,21,16,-81,53,12,-67,32,-36,64,-6,49,14,-33,40,-72,24,-64,7,56,127,16,-20,-2,-47,-2,-38,29,53,11,24,-26,27,13,47,15,69,-32,-28,28,56,-7,-5, 
  /* [5][0][][] */ -58,22,-21,18,-3,-45,-13,-24,27,-43,-1,-40,38,-16,6,24,4,-3,-10,-37,15,-44,21,-35,23,40,36,-75,36,-17,13,-72,33,-17,25,56,8,45,-67,12,46,60,12,-18,127,53,63,-97, 
  /* [6][0][][] */ -41,-127,-3,-2,31,-29,-17,-39,-18,-48,-7,19,52,-8,10,26,-3,-75,24,8,8,20,-25,-21,-80,-15,41,18,91,-14,-42,-52,-41,31,-29,10,-14,27,8,-12,-31,22,-4,37,19,48,-19,45, 
  /* [7][0][][] */ -25,-55,85,-22,71,-4,37,-64,104,0,-34,24,55,56,-47,-18,-14,-85,-107,37,27,-4,-44,-93,-54,70,-9,22,-89,-71,6,32,43,-36,-97,104,44,37,-31,-18,-13,57,-127,-76,38,-96,-19,53, 
};
const TfArray<4, int> tensor_dimension72 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant72_scale = { 8, { 0.0027735689654946327, 0.0033480608835816383, 0.0048927897587418556, 0.0038173629436641932, 0.0025933561846613884, 0.0034756571985781193, 0.0043172752484679222, 0.002213427796959877, } };
const TfArray<8, int> quant72_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(8) int8_t tensor_data73[48*1*1*8] = { 
  /* [0][0][][] */ -92,-113,47,47,1,-127,-40,-86, 
  /* [1][0][][] */ 34,-50,-110,37,58,-127,7,-30, 
  /* [2][0][][] */ -5,29,-17,26,-109,1,127,30, 
  /* [3][0][][] */ 49,127,-47,-58,58,-2,25,65, 
  /* [4][0][][] */ 26,59,16,-18,-15,26,90,-127, 
  /* [5][0][][] */ -34,-53,33,-127,31,32,-94,28, 
  /* [6][0][][] */ 2,98,120,63,-39,127,76,-2, 
  /* [7][0][][] */ 65,-19,-45,70,-69,-127,119,3, 
  /* [8][0][][] */ -25,44,127,40,-123,105,76,123, 
  /* [9][0][][] */ 20,-3,-22,12,43,127,23,-45, 
  /* [10][0][][] */ -127,85,63,-79,90,1,-79,-111, 
  /* [11][0][][] */ 127,-29,115,-100,17,-35,4,83, 
  /* [12][0][][] */ 121,-78,41,-127,122,66,36,-40, 
  /* [13][0][][] */ -22,80,-104,-87,44,-53,119,127, 
  /* [14][0][][] */ -3,-84,-19,3,12,-29,1,127, 
  /* [15][0][][] */ -35,-23,-16,-3,-1,127,65,58, 
  /* [16][0][][] */ 118,6,-80,-127,85,-23,50,85, 
  /* [17][0][][] */ 64,114,127,69,-67,58,-57,-56, 
  /* [18][0][][] */ -53,127,-4,35,55,55,-64,-40, 
  /* [19][0][][] */ 50,11,-70,12,52,127,34,-91, 
  /* [20][0][][] */ -23,29,-127,-9,3,11,108,15, 
  /* [21][0][][] */ -112,-50,107,-31,-24,-78,32,127, 
  /* [22][0][][] */ 122,13,-127,-26,60,-29,-45,-30, 
  /* [23][0][][] */ 43,127,39,13,-12,4,-53,-61, 
  /* [24][0][][] */ -127,-122,-45,-112,61,111,-118,51, 
  /* [25][0][][] */ 16,-61,21,-105,-127,-53,-41,-92, 
  /* [26][0][][] */ 27,94,127,-8,-57,-21,-20,-22, 
  /* [27][0][][] */ -56,-47,-20,64,71,-5,-37,127, 
  /* [28][0][][] */ -36,30,-127,30,-70,-73,-27,8, 
  /* [29][0][][] */ -127,-70,-19,-67,-35,85,57,36, 
  /* [30][0][][] */ -59,76,-73,-52,-19,127,9,-4, 
  /* [31][0][][] */ 96,-86,124,-59,105,58,53,127, 
  /* [32][0][][] */ -3,33,-68,-40,49,127,-45,-107, 
  /* [33][0][][] */ 27,-31,-17,47,-91,-31,0,127, 
  /* [34][0][][] */ -47,9,-127,12,-7,-13,-33,59, 
  /* [35][0][][] */ -89,89,127,-8,64,-126,-64,-100, 
  /* [36][0][][] */ 92,-74,-106,26,-116,-45,-42,127, 
  /* [37][0][][] */ -63,-48,19,14,127,-55,-92,78, 
  /* [38][0][][] */ -7,-9,48,109,80,-127,60,-52, 
  /* [39][0][][] */ 126,37,-26,80,-127,-12,54,-97, 
  /* [40][0][][] */ -6,-127,-9,-50,109,44,-61,65, 
  /* [41][0][][] */ 14,-4,48,-89,76,-127,24,69, 
  /* [42][0][][] */ -86,-36,68,-57,61,-2,13,-127, 
  /* [43][0][][] */ 23,22,1,127,6,27,-21,2, 
  /* [44][0][][] */ -45,7,-53,13,15,127,-56,23, 
  /* [45][0][][] */ -61,23,78,115,59,127,-109,-24, 
  /* [46][0][][] */ -127,-83,37,-126,6,-115,-30,-113, 
  /* [47][0][][] */ -14,-62,-93,46,-127,73,38,97, 
};
const TfArray<4, int> tensor_dimension73 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant73_scale = { 48, { 0.0025967222172766924, 0.003441341919824481, 0.0030822006519883871, 0.0036377701908349991, 0.0029146918095648289, 0.0026341830380260944, 0.0021383280400186777, 0.0024306951090693474, 0.0023248011711984873, 0.0037019858136773109, 0.0014066982548683882, 0.0015000862767919898, 0.0016827273648232222, 0.001834942027926445, 0.0019367175409570336, 0.0029840243514627218, 0.0015103050973266363, 0.0024596408475190401, 0.00059601990506052971, 0.0017209878424182534, 0.0022337266709655523, 0.0012232443550601602, 0.0018407920142635703, 0.0030672000721096992, 0.0022281382698565722, 0.0011439403751865029, 0.0030678436160087585, 0.0025977904442697763, 0.0022144918330013752, 0.003032271983101964, 0.002318789716809988, 0.0011927980231121182, 0.0027129407972097397, 0.0031241723336279392, 0.0030807559378445148, 0.0015551457181572914, 0.0027321465313434601, 0.0021225523669272661, 0.0031695938669145107, 0.0023131552152335644, 0.00225663254968822, 0.0014740537153556943, 0.0020775869488716125, 0.0029772203415632248, 0.0027365977875888348, 0.0019056220771744847, 0.0023249124642461538, 0.0022491500712931156, } };
const TfArray<48, int> quant73_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const ALIGN(8) int8_t tensor_data74[8*1*1*48] = { 
  /* [0][0][][] */ 24,38,-29,-9,6,-6,-14,-45,28,12,61,-47,1,-18,36,31,-80,21,18,4,21,-6,45,-9,43,16,-1,8,3,-53,10,-127,-29,-36,-53,23,-5,93,4,-19,9,-54,36,8,21,73,31,-34, 
  /* [1][0][][] */ 51,-62,39,-57,34,-9,24,3,-59,11,-27,24,-3,14,47,1,106,7,-127,-18,-16,54,-23,-39,47,-58,53,-45,-10,19,3,103,-8,-34,44,0,3,51,3,-62,-32,69,28,8,-35,-36,18,33, 
  /* [2][0][][] */ -26,-64,-21,7,14,38,53,-7,-74,56,-49,-65,-52,-48,-62,-70,26,73,81,-99,127,29,-45,-6,47,-24,54,-39,-49,23,-67,-102,-10,0,-64,-87,57,-41,11,2,9,-3,-63,3,-22,7,18,-82, 
  /* [3][0][][] */ -22,33,9,39,30,-36,27,-40,-13,16,30,40,19,-27,75,50,-44,29,127,-16,-51,-8,-16,14,-4,-123,-5,62,-22,-44,-42,58,-36,-90,39,26,25,-16,-44,1,-16,-90,8,15,71,-45,19,22, 
  /* [4][0][][] */ 9,21,-22,3,4,24,10,-8,65,-21,-36,-38,-61,0,-63,-5,-17,-16,-54,20,19,-18,46,-2,-13,-70,-39,9,-42,-4,-2,-55,-10,-11,-22,-32,44,-127,-28,24,31,31,-57,44,-28,-29,-19,-37, 
  /* [5][0][][] */ 40,-42,-8,-32,33,58,127,34,-37,-49,32,-17,18,45,-31,-25,22,0,6,68,-27,-19,15,-1,-24,-9,-29,105,-84,60,74,-19,64,62,-14,48,18,-45,-21,31,42,-22,19,0,-19,-25,3,9, 
  /* [6][0][][] */ 37,8,58,-34,105,-38,84,-127,-14,-57,42,-70,-39,65,69,-13,-39,30,-23,76,-77,-40,14,19,125,26,-26,-8,-51,36,-5,-35,-1,52,-75,2,66,79,-94,-69,-50,-36,-48,41,-5,23,2,11, 
  /* [7][0][][] */ 91,-11,1,-43,-109,66,-32,32,-61,14,44,-16,-15,127,73,-48,26,-70,-52,-2,38,-124,18,57,-88,-66,41,40,43,18,-96,-68,-13,-3,10,-15,-103,-98,-6,33,38,-38,88,87,-70,-16,48,29, 
};
const TfArray<4, int> tensor_dimension74 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant74_scale = { 8, { 0.002525565680116415, 0.0024411710910499096, 0.0018962997710332274, 0.0021094838157296181, 0.0029295163694769144, 0.0018618527101352811, 0.0016352439997717738, 0.0020558163523674011, } };
const TfArray<8, int> quant74_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(8) int8_t tensor_data75[48*1*1*8] = { 
  /* [0][0][][] */ 73,55,-84,-36,94,127,1,-41, 
  /* [1][0][][] */ 127,42,-18,66,-42,-83,3,-11, 
  /* [2][0][][] */ -16,-27,-20,50,39,11,-83,127, 
  /* [3][0][][] */ -51,125,-40,76,-76,-127,40,97, 
  /* [4][0][][] */ -51,-34,40,-85,3,-56,-127,-55, 
  /* [5][0][][] */ -102,-32,-36,-127,95,53,60,51, 
  /* [6][0][][] */ -76,-13,36,-127,33,26,57,-84, 
  /* [7][0][][] */ 106,68,13,-48,-109,-17,127,-36, 
  /* [8][0][][] */ -54,-32,-20,54,77,127,-102,101, 
  /* [9][0][][] */ -27,5,27,7,-30,-27,127,-6, 
  /* [10][0][][] */ -119,-15,127,66,-125,-66,-85,-125, 
  /* [11][0][][] */ -89,127,-5,100,-77,39,-38,-14, 
  /* [12][0][][] */ 69,-102,-107,-55,127,-33,65,43, 
  /* [13][0][][] */ 73,30,104,-127,94,-22,11,-49, 
  /* [14][0][][] */ -19,-11,41,-81,-15,-50,-127,-67, 
  /* [15][0][][] */ 106,106,64,82,-127,-63,-12,8, 
  /* [16][0][][] */ -49,-83,-66,127,-59,106,91,66, 
  /* [17][0][][] */ 70,-50,-101,47,65,-127,55,92, 
  /* [18][0][][] */ 0,127,21,-55,-7,-1,0,-2, 
  /* [19][0][][] */ -62,-127,-2,6,-44,-52,-56,-68, 
  /* [20][0][][] */ -55,6,-46,-6,14,17,29,127, 
  /* [21][0][][] */ 32,26,-22,37,18,70,70,127, 
  /* [22][0][][] */ -78,-7,-16,12,25,17,127,109, 
  /* [23][0][][] */ -11,-47,-119,-127,100,-85,-58,-82, 
  /* [24][0][][] */ -55,78,-127,-12,-13,-8,28,-16, 
  /* [25][0][][] */ 103,-126,-7,-127,-83,6,96,-9, 
  /* [26][0][][] */ 115,56,-127,23,64,-127,-5,61, 
  /* [27][0][][] */ 95,72,-33,127,3,-99,78,18, 
  /* [28][0][][] */ -17,13,44,-9,24,127,47,40, 
  /* [29][0][][] */ 61,-23,-19,-59,-127,31,5,39, 
  /* [30][0][][] */ 127,64,-59,-1,4,45,-115,-11, 
  /* [31][0][][] */ 46,-17,54,-127,115,-107,87,82, 
  /* [32][0][][] */ 43,-44,127,54,22,-3,-45,-18, 
  /* [33][0][][] */ 27,-12,-21,7,32,127,-10,-73, 
  /* [34][0][][] */ -15,90,124,51,-127,81,40,82, 
  /* [35][0][][] */ -21,3,-127,-27,41,25,70,36, 
  /* [36][0][][] */ -63,27,19,61,127,-27,-8,-33, 
  /* [37][0][][] */ -127,-41,22,-73,44,84,-5,18, 
  /* [38][0][][] */ 19,24,-17,-127,-8,-7,17,-23, 
  /* [39][0][][] */ -21,-108,-127,-98,33,-46,111,29, 
  /* [40][0][][] */ 100,-127,116,-25,82,60,39,73, 
  /* [41][0][][] */ 0,-20,-125,22,10,43,127,48, 
  /* [42][0][][] */ -104,-24,-81,-6,-49,60,-39,127, 
  /* [43][0][][] */ 1,-69,-71,23,127,-13,53,-14, 
  /* [44][0][][] */ -66,-106,-127,-74,53,-23,73,43, 
  /* [45][0][][] */ -112,63,52,-61,-8,-113,52,127, 
  /* [46][0][][] */ -13,-15,-71,-37,-12,-71,127,-102, 
  /* [47][0][][] */ 75,-93,-12,-120,-62,70,47,127, 
};
const TfArray<4, int> tensor_dimension75 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant75_scale = { 48, { 0.0029256823472678661, 0.0032738950103521347, 0.003638735506683588, 0.00089328794274479151, 0.0019948552362620831, 0.0021412626374512911, 0.0023145405575633049, 0.0030433181673288345, 0.0024139932356774807, 0.0013755573891103268, 0.0019719116389751434, 0.0021820401307195425, 0.0021619831677526236, 0.00082760007353499532, 0.0024154302664101124, 0.0022614409681409597, 0.0017120722914114594, 0.0021275719627737999, 0.0033674105070531368, 0.00095824751770123839, 0.0014008788857609034, 0.0029449060093611479, 0.0029329617973417044, 0.0024024306330829859, 0.0027033847291022539, 0.0017247006762772799, 0.0025937750469893217, 0.0018589890096336603, 0.0037510120309889317, 0.005217431578785181, 0.0036414675414562225, 0.0014464741107076406, 0.0028850587550550699, 0.001841012155637145, 0.002483706921339035, 0.0015222225338220596, 0.005027534905821085, 0.0030762418173253536, 0.001511868555098772, 0.0017736192094162107, 0.0017005709232762456, 0.0024079810827970505, 0.0021487446501851082, 0.0034445067867636681, 0.0023294065613299608, 0.00084003346273675561, 0.0023258887231349945, 0.0025694966316223145, } };
const TfArray<48, int> quant75_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(8) int8_t tensor_data76[16*1*1*48] = { 
  /* [0][0][][] */ -11,-41,-1,-27,-6,69,-53,-28,-7,99,15,-10,-28,7,7,-100,68,-77,-37,10,22,-30,-61,-24,-48,13,16,-121,36,-23,-24,0,-20,-27,51,-1,12,-41,127,-14,33,12,-16,-3,21,11,33,0, 
  /* [1][0][][] */ 2,23,23,50,49,47,25,16,-10,41,-29,37,23,-70,-49,-115,-46,-62,-23,-42,-83,-70,-42,-31,115,1,31,51,56,-37,-21,39,-18,117,-44,-50,33,68,18,-58,100,-58,-79,-95,-119,-64,127,40, 
  /* [2][0][][] */ -30,-12,-26,67,-64,-36,35,21,-3,-63,-17,50,-50,-89,45,-15,-70,-1,-41,79,-97,19,-10,-11,-44,-13,-38,-32,0,-23,0,11,3,68,44,-82,-14,-39,-76,-4,127,92,31,37,14,21,-28,2, 
  /* [3][0][][] */ -45,-19,-26,30,72,50,53,44,49,-43,37,-4,36,28,-37,-30,56,-9,16,63,5,16,61,23,-33,-32,22,38,5,-24,30,-52,30,127,32,-3,33,-20,62,-21,5,-5,32,13,-9,-22,20,31, 
  /* [4][0][][] */ -4,5,-90,54,-20,28,56,43,31,-127,46,3,-12,126,12,-65,101,-10,-12,125,43,-25,12,16,-28,-11,5,-68,43,-35,1,13,-56,-32,-25,-6,12,-4,-61,-19,-97,-33,3,2,-15,-103,8,-20, 
  /* [5][0][][] */ -39,-24,7,127,7,16,-12,4,3,-66,72,-55,25,33,-7,-28,31,20,-39,-16,-66,-10,-38,-48,37,-9,-53,-26,-27,16,-28,104,-8,116,20,88,-53,-43,-42,21,-78,-18,15,27,45,43,22,-37, 
  /* [6][0][][] */ -11,69,-1,-47,-24,-35,-30,52,15,21,-61,48,-2,-45,16,-11,-20,15,-6,-84,-25,18,54,15,86,-2,-12,-26,16,-83,3,21,-19,21,3,8,44,99,44,28,-41,-2,34,17,58,127,-43,9, 
  /* [7][0][][] */ 21,-32,-34,-38,-7,4,-20,34,32,-71,-25,-29,35,-100,-2,16,-69,37,6,127,-97,-1,24,35,106,-18,-34,-16,-21,30,43,119,41,-73,14,71,-36,-72,107,-5,64,-58,38,89,-7,-29,12,-21, 
  /* [8][0][][] */ 23,-20,51,10,11,-5,-23,-60,-63,61,-4,-30,-33,-1,3,35,-30,-28,3,127,13,-20,-80,-51,-7,37,-13,-15,-5,-83,-39,-45,-33,4,-33,33,78,-19,-36,38,-26,-9,-17,-13,63,1,12,-4, 
  /* [9][0][][] */ -14,45,-32,-26,31,-37,39,4,-11,127,36,-31,37,-11,7,54,80,63,-27,16,-29,54,32,-7,-15,22,-31,18,-11,64,18,-99,64,40,-54,76,-39,65,-11,51,117,-17,25,21,86,-105,-30,9, 
  /* [10][0][][] */ -34,-51,-46,12,57,56,-95,10,57,-63,-71,55,-68,52,-100,53,27,-22,-43,11,119,-67,63,14,83,23,-63,-111,-80,-69,-47,-55,-4,92,-67,26,-3,-43,-7,76,87,-90,-127,-34,107,-46,-89,34, 
  /* [11][0][][] */ 27,59,55,-87,61,71,-53,-10,53,-32,45,-127,45,-9,-91,7,-54,27,99,-44,81,-35,16,55,-65,-14,8,-123,19,-38,11,-69,119,-77,59,104,33,12,-51,-15,49,-26,-29,24,-17,87,35,-17, 
  /* [12][0][][] */ -47,2,20,27,38,67,-63,-9,-11,86,-8,13,3,7,-49,-67,4,-38,6,127,41,-49,8,-28,57,28,25,-79,74,56,-24,41,-41,57,70,-31,-59,2,-13,-7,-29,-36,-12,-40,-39,48,26,6, 
  /* [13][0][][] */ 10,-41,-81,3,-5,9,12,49,76,127,-11,3,28,-28,12,-33,-38,-21,33,-74,10,-8,59,28,4,-40,18,-20,9,12,37,59,12,-75,23,19,-18,-78,-70,-12,-21,-5,-5,47,-3,41,11,-7, 
  /* [14][0][][] */ 0,-13,-27,-42,-45,-44,-61,27,36,-64,50,-78,42,-11,12,9,-30,-23,-18,14,34,-19,80,58,-6,-30,17,-2,43,19,13,35,-25,-59,-127,25,-39,3,41,-42,55,-9,-21,-14,-82,64,1,-11, 
  /* [15][0][][] */ 40,13,62,-63,43,98,57,53,19,-86,0,26,12,-60,13,-118,-26,-95,49,-66,-15,31,-7,-2,8,-31,127,24,31,108,83,-93,29,-8,61,-20,-49,-6,-28,-33,-16,30,72,113,58,12,88,86, 
};
const TfArray<4, int> tensor_dimension76 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant76_scale = { 16, { 0.0099452603608369827, 0.0093745039775967598, 0.010553588159382343, 0.014466127380728722, 0.0090903621166944504, 0.0088930539786815643, 0.0067827305756509304, 0.0091994283720850945, 0.010293667204678059, 0.007640340831130743, 0.0081686936318874359, 0.0067562907934188843, 0.0086820237338542938, 0.010112222284078598, 0.011983294971287251, 0.007214544340968132, } };
const TfArray<16, int> quant76_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(8) int8_t tensor_data77[1280*1*1*16] = { 
  /* [0][0][][] */ -41,-69,-6,43,33,-127,39,73,88,-57,-23,43,39,-5,-119,24, 
  /* [1][0][][] */ 88,98,9,6,68,115,-27,-84,-127,61,107,-73,58,5,43,83, 
  /* [2][0][][] */ -66,28,-6,-2,-41,27,46,-53,-39,69,30,27,11,117,-9,-127, 
  /* [3][0][][] */ 53,-20,127,-87,-41,-39,81,30,-51,38,0,-78,78,27,-3,7, 
  /* [4][0][][] */ 86,98,109,-16,-45,11,65,38,-37,16,127,83,90,11,51,-73, 
  /* [5][0][][] */ -50,-22,1,1,-35,-12,127,-70,-32,87,-29,15,46,-40,85,5, 
  /* [6][0][][] */ 42,-4,-19,-21,38,67,25,-127,-74,-68,-10,-26,-15,11,26,-43, 
  /* [7][0][][] */ 8,24,-15,-15,32,38,28,-104,-9,41,-104,78,-65,-76,-13,-127, 
  /* [8][0][][] */ -32,-69,58,82,85,49,-30,-127,-100,56,22,-67,7,-66,15,-34, 
  /* [9][0][][] */ 50,-20,25,-75,54,18,-30,11,-8,-30,-47,1,3,-127,-114,26, 
  /* [10][0][][] */ -12,53,-83,32,27,38,116,6,58,5,32,12,95,-102,79,-127, 
  /* [11][0][][] */ 100,-8,17,-16,-37,31,-7,-53,127,53,46,-39,-6,54,-17,-89, 
  /* [12][0][][] */ -53,74,32,-127,-24,14,-36,-68,-34,0,-37,-4,-9,33,19,-38, 
  /* [13][0][][] */ 8,-29,7,9,20,52,-40,-50,7,-22,41,-6,127,16,4,-97, 
  /* [14][0][][] */ -11,127,11,-91,-102,36,-81,5,80,64,-19,69,19,68,49,-28, 
  /* [15][0][][] */ -15,-25,56,29,3,-57,-81,-106,127,-47,81,-23,-98,109,-50,96, 
  /* [16][0][][] */ -2,-37,127,-45,25,42,-1,35,-96,56,102,10,15,-31,40,-44, 
  /* [17][0][][] */ -70,-19,-30,-24,6,-46,127,24,75,-17,39,16,7,47,64,-109, 
  /* [18][0][][] */ 74,27,-50,127,51,-14,-63,17,-34,-18,-15,-19,83,105,78,2, 
  /* [19][0][][] */ 87,-61,32,98,61,21,31,-24,14,27,103,-40,118,-5,-81,-127, 
  /* [20][0][][] */ -119,-127,-8,-5,-22,23,70,-23,41,39,105,-12,68,28,43,47, 
  /* [21][0][][] */ -1,-48,-10,2,36,16,127,43,-9,-19,-7,-4,-42,-45,22,29, 
  /* [22][0][][] */ 65,8,127,-6,-18,28,-64,-15,-38,-120,-77,11,-34,29,-46,22, 
  /* [23][0][][] */ 23,44,65,-117,127,69,7,47,-74,-22,26,89,70,65,-81,-121, 
  /* [24][0][][] */ -111,54,48,-28,-11,40,-127,-42,-89,109,20,-14,44,93,12,61, 
  /* [25][0][][] */ 20,18,-127,-14,26,67,-37,26,9,35,29,-42,-24,-13,-18,-25, 
  /* [26][0][][] */ -9,-24,27,-3,29,35,-75,27,-127,-18,86,-5,44,-30,-37,21, 
  /* [27][0][][] */ -4,-10,-12,-127,17,84,37,-2,-13,72,-4,-39,2,115,-52,-43, 
  /* [28][0][][] */ -26,-65,87,-127,33,-63,82,31,124,-6,22,-47,-101,52,-66,19, 
  /* [29][0][][] */ -30,-18,-25,41,3,13,79,-11,25,5,39,-30,127,25,21,-34, 
  /* [30][0][][] */ 115,43,50,67,-127,-30,25,8,49,-65,33,-32,-29,39,30,-6, 
  /* [31][0][][] */ 73,-24,47,58,19,127,7,84,13,-66,50,64,-27,-54,-28,40, 
  /* [32][0][][] */ 50,22,-45,49,-99,-15,-18,1,-18,82,127,-5,49,-19,-118,-87, 
  /* [33][0][][] */ -69,-55,-96,-9,-9,-40,59,-3,95,127,45,70,-58,42,17,23, 
  /* [34][0][][] */ 11,22,0,-20,-13,46,-88,-53,2,-42,86,0,80,127,87,-16, 
  /* [35][0][][] */ -127,28,54,-32,-1,-66,-22,-2,8,69,-53,-60,-46,-64,35,15, 
  /* [36][0][][] */ -109,44,-14,11,62,-15,-127,24,15,-14,-27,1,-23,26,-38,-13, 
  /* [37][0][][] */ -103,23,-28,74,55,-7,-6,-18,127,-44,-18,43,-2,-13,-14,56, 
  /* [38][0][][] */ 27,-127,78,6,-41,2,-32,50,3,44,60,-46,118,10,7,-11, 
  /* [39][0][][] */ -41,31,43,-35,-19,-32,7,-105,19,-127,-39,3,88,8,-18,24, 
  /* [40][0][][] */ 1,-28,-89,-127,-73,-34,30,52,-66,33,101,36,81,-64,57,-15, 
  /* [41][0][][] */ 20,-55,-15,127,-31,39,98,34,-6,31,5,74,-68,-17,7,-103, 
  /* [42][0][][] */ 3,28,88,-39,-14,18,26,19,54,-50,-16,-35,-123,2,-15,-127, 
  /* [43][0][][] */ 127,32,79,-60,-12,5,-46,-91,37,-7,-53,37,5,20,60,2, 
  /* [44][0][][] */ -20,-73,26,-32,33,-50,127,-47,68,-36,63,37,10,99,-28,-86, 
  /* [45][0][][] */ 5,106,19,-43,38,7,-68,-87,68,-32,-83,50,59,-63,-46,-127, 
  /* [46][0][][] */ -18,48,-88,-61,-21,-36,-42,-56,97,43,106,51,-127,25,46,-15, 
  /* [47][0][][] */ 4,1,37,126,-3,38,-3,-85,-127,31,-125,-12,-21,3,30,0, 
  /* [48][0][][] */ 45,-5,-17,-52,-10,12,-127,39,53,60,47,-28,87,-28,-15,7, 
  /* [49][0][][] */ 46,100,35,-55,17,-32,-35,-61,-6,-70,-102,60,-14,107,127,109, 
  /* [50][0][][] */ 94,-38,-42,45,-82,-50,12,103,-55,-38,-26,-28,46,-11,-73,127, 
  /* [51][0][][] */ -69,35,-102,16,-38,97,-81,-53,-26,11,88,127,-23,-57,-51,81, 
  /* [52][0][][] */ 104,78,127,78,24,-4,86,81,-27,-119,15,72,-69,4,-40,33, 
  /* [53][0][][] */ -59,58,-8,127,31,-14,24,11,-4,-26,35,97,-15,-61,13,-42, 
  /* [54][0][][] */ -36,-72,-96,-127,62,125,-24,15,22,26,37,-73,58,-1,90,73, 
  /* [55][0][][] */ 127,23,-15,-60,60,-19,-48,25,-111,72,-49,-19,44,11,3,-5, 
  /* [56][0][][] */ -16,-52,57,50,6,28,-32,14,-27,44,29,-15,-42,127,-24,-1, 
  /* [57][0][][] */ 38,-36,4,-37,115,11,8,39,60,127,31,-83,63,35,46,-45, 
  /* [58][0][][] */ 24,26,11,-25,-60,-23,85,32,-56,127,-9,-72,-2,70,65,40, 
  /* [59][0][][] */ -53,43,33,45,83,-76,6,-119,4,-65,39,91,-17,-73,127,-47, 
  /* [60][0][][] */ -15,67,47,-127,-11,104,3,-94,11,32,-10,-127,33,-56,26,-47, 
  /* [61][0][][] */ -127,-47,-14,-9,41,47,-25,-15,10,-103,53,-21,93,2,-21,69, 
  /* [62][0][][] */ -38,17,-61,29,56,-68,54,103,-126,-86,-64,15,127,-72,44,39, 
  /* [63][0][][] */ 30,-65,56,-16,-22,75,-5,-71,-5,-30,15,48,-10,-60,48,-127, 
  /* [64][0][][] */ -92,25,83,-57,-52,17,60,-8,-73,-114,20,29,5,-126,-4,127, 
  /* [65][0][][] */ -25,-1,125,-16,-9,-9,-9,-32,39,105,55,127,81,55,27,49, 
  /* [66][0][][] */ 39,18,-7,-18,-127,4,14,47,39,57,50,44,39,-62,30,54, 
  /* [67][0][][] */ 43,-25,34,-39,-5,36,61,-16,-56,-10,-23,44,1,90,-13,-127, 
  /* [68][0][][] */ 127,85,50,95,8,41,-76,-126,-32,-77,-106,36,8,3,3,81, 
  /* [69][0][][] */ 47,-34,-24,-38,46,-49,-73,-127,-4,-20,-15,-32,8,-9,55,44, 
  /* [70][0][][] */ -3,92,109,82,44,2,-83,90,4,-90,-46,-39,113,8,49,127, 
  /* [71][0][][] */ -70,61,-23,-31,43,-70,-14,-18,-21,-44,-127,54,75,-62,19,-32, 
  /* [72][0][][] */ 63,-7,-9,36,114,-11,-49,23,-40,55,-12,61,-94,-66,-127,27, 
  /* [73][0][][] */ 81,-27,10,-64,-40,12,12,-45,-38,21,73,36,85,-98,127,-76, 
  /* [74][0][][] */ -80,-14,88,50,88,97,38,-51,25,118,-20,0,70,2,23,-127, 
  /* [75][0][][] */ 51,-89,-2,44,36,-68,43,127,15,-48,-7,-30,-85,106,-13,-21, 
  /* [76][0][][] */ 11,-8,127,-38,61,108,-94,-59,37,11,9,-70,42,-18,65,26, 
  /* [77][0][][] */ -16,61,37,-48,-22,13,127,51,-31,-18,-57,42,-98,1,46,-32, 
  /* [78][0][][] */ -14,-32,108,35,-22,127,-8,-99,-66,-35,-34,-3,-68,-5,-80,-48, 
  /* [79][0][][] */ -42,-51,1,82,-92,-25,61,-22,-45,-35,-18,6,92,-53,24,-127, 
  /* [80][0][][] */ -27,-44,46,33,6,-55,7,78,42,-127,63,1,47,-4,14,29, 
  /* [81][0][][] */ 94,-48,-55,104,-23,-57,-127,114,33,-42,-64,-114,17,-46,31,-78, 
  /* [82][0][][] */ 41,26,-127,-60,96,116,89,-113,3,-29,-72,36,-46,105,77,111, 
  /* [83][0][][] */ -94,8,-127,-72,-15,33,-8,-3,-57,-51,-60,18,-1,24,57,70, 
  /* [84][0][][] */ -86,17,22,-13,21,113,87,64,-60,92,-52,110,46,-82,-59,-127, 
  /* [85][0][][] */ 127,34,57,35,-58,30,-65,-60,-7,-13,-77,-64,-14,29,5,16, 
  /* [86][0][][] */ -3,124,45,-63,-69,34,-127,6,32,-127,42,39,-28,-65,-124,-28, 
  /* [87][0][][] */ 97,68,11,50,-1,83,106,-118,-60,-17,-63,-37,127,94,116,-83, 
  /* [88][0][][] */ -31,-12,-46,17,5,-30,34,-15,42,127,15,-49,49,-24,-9,-75, 
  /* [89][0][][] */ -39,-19,-127,-43,36,68,109,47,-38,-66,-20,27,-20,80,55,-22, 
  /* [90][0][][] */ -4,-27,-35,-4,1,-65,7,95,-127,63,60,-13,-59,-75,-34,-59, 
  /* [91][0][][] */ -7,-11,-40,-11,118,50,-18,-61,17,20,-9,0,-28,12,18,-127, 
  /* [92][0][][] */ -32,-43,-99,-13,24,-39,-5,36,24,2,-23,20,-31,-127,84,-26, 
  /* [93][0][][] */ 75,-11,-29,32,-26,-66,-127,28,27,50,45,35,-81,20,-122,53, 
  /* [94][0][][] */ 36,45,-110,-89,95,-33,73,-127,-97,25,-93,114,115,-71,32,-77, 
  /* [95][0][][] */ 49,116,-65,127,15,19,-93,11,-27,-36,11,21,116,-47,43,-84, 
  /* [96][0][][] */ -9,-48,-44,32,-48,46,16,76,127,-70,60,-57,-43,-47,-80,-49, 
  /* [97][0][][] */ -29,37,-40,1,17,11,35,-80,127,54,95,-39,19,-18,36,17, 
  /* [98][0][][] */ -43,-26,56,-26,14,-44,42,55,9,-15,-28,52,0,12,-127,-15, 
  /* [99][0][][] */ 27,-37,-85,-84,89,19,-127,-12,70,-74,29,-98,-42,41,5,-40, 
  /* [100][0][][] */ 127,-10,116,-22,39,19,-29,-49,36,-43,41,-18,-30,-14,-32,-71, 
  /* [101][0][][] */ -93,-1,-125,41,64,-92,42,30,46,33,-30,127,-37,-80,8,99, 
  /* [102][0][][] */ 40,-82,127,-49,-49,-67,119,-18,-31,24,-4,97,-77,-87,-126,31, 
  /* [103][0][][] */ -73,25,-97,-108,-18,-51,-2,127,-53,90,-6,-103,2,-60,-9,49, 
  /* [104][0][][] */ 23,-90,61,127,57,-24,80,-90,-35,21,7,-7,-50,127,127,66, 
  /* [105][0][][] */ 83,-106,32,-74,-57,34,-117,-12,39,-34,-38,-33,26,-36,-127,-19, 
  /* [106][0][][] */ -127,-49,86,27,91,-12,-16,109,30,29,-19,37,91,55,-8,10, 
  /* [107][0][][] */ -61,64,40,71,60,-110,-15,47,-58,18,-42,17,27,-127,22,-33, 
  /* [108][0][][] */ 127,-84,34,51,-65,16,41,-57,40,17,-9,3,-77,44,8,81, 
  /* [109][0][][] */ 48,-66,63,76,34,18,71,-49,-35,3,-25,1,11,-100,-127,-46, 
  /* [110][0][][] */ -37,22,63,-24,-36,-31,44,-35,92,71,-15,127,-18,-42,77,-63, 
  /* [111][0][][] */ -71,19,19,-21,-44,49,-80,-43,25,127,-4,-46,72,14,-26,49, 
  /* [112][0][][] */ -59,-22,-62,67,127,-100,-25,13,-25,-25,-39,-59,71,37,44,-33, 
  /* [113][0][][] */ 76,24,38,-127,-3,64,10,-20,17,10,43,-57,-25,-27,-4,13, 
  /* [114][0][][] */ -34,-21,-96,-27,-52,-32,15,-71,-117,72,127,46,-102,15,-20,-52, 
  /* [115][0][][] */ -46,-41,-82,-6,5,127,-8,-15,5,-23,-76,15,-115,-10,-94,-29, 
  /* [116][0][][] */ 59,-127,-124,-9,-38,-52,-70,0,31,1,20,10,78,45,-83,55, 
  /* [117][0][][] */ 20,-25,24,-3,-45,66,60,127,-47,4,-29,-61,-26,58,-41,-19, 
  /* [118][0][][] */ -6,39,-85,-30,110,127,-88,58,64,-48,-39,-15,-21,26,44,-40, 
  /* [119][0][][] */ 127,7,84,-16,45,-70,-3,121,-10,109,-22,-14,4,-46,-83,-98, 
  /* [120][0][][] */ 44,98,-33,3,-25,8,-127,0,62,-60,-20,-8,-79,-35,14,-37, 
  /* [121][0][][] */ -5,45,127,-77,45,67,-25,25,63,80,15,-24,7,1,-63,-8, 
  /* [122][0][][] */ 42,47,3,-29,-25,105,127,126,-39,-33,20,63,-16,16,103,66, 
  /* [123][0][][] */ 24,19,11,55,-7,37,-62,39,42,59,57,-127,91,-51,57,-46, 
  /* [124][0][][] */ -66,30,15,4,65,20,-55,46,32,117,-12,-127,123,-13,-17,-54, 
  /* [125][0][][] */ -53,7,-102,-57,-50,2,79,12,-55,-1,74,127,70,-38,103,60, 
  /* [126][0][][] */ -125,-24,-25,-127,-5,71,-122,-93,-126,14,-70,68,-28,-21,71,-35, 
  /* [127][0][][] */ 5,29,-50,-33,55,-21,-21,21,-32,-90,-9,-67,127,-96,21,3, 
  /* [128][0][][] */ -14,-20,-67,-34,-16,53,127,21,-5,14,30,-23,4,18,15,33, 
  /* [129][0][][] */ 73,-3,10,-11,-14,48,-68,-43,28,-31,-68,48,19,-36,39,-127, 
  /* [130][0][][] */ -10,-85,127,-72,19,-89,-63,47,86,-7,32,-68,87,-15,61,-80, 
  /* [131][0][][] */ 27,-21,-13,-1,78,82,-7,-127,-51,-30,-12,-23,8,65,-3,4, 
  /* [132][0][][] */ -32,-69,-40,-57,-8,127,48,-90,-4,34,100,-28,104,8,3,-48, 
  /* [133][0][][] */ -48,-5,-9,1,-30,14,-65,-66,19,55,127,-41,-37,-17,85,-33, 
  /* [134][0][][] */ 107,32,-46,-91,22,-20,-39,13,20,-52,-88,-9,-42,22,0,127, 
  /* [135][0][][] */ -24,-22,-5,-8,5,2,127,-14,-18,-52,-18,64,83,-47,62,-84, 
  /* [136][0][][] */ -5,83,-103,-58,90,5,-114,-10,-71,-5,-55,66,19,-127,-123,-23, 
  /* [137][0][][] */ -19,15,-85,20,32,6,3,127,-83,-32,-29,-13,-85,21,26,21, 
  /* [138][0][][] */ 114,14,-127,38,-91,-97,5,-44,26,-17,-43,-64,45,105,38,-21, 
  /* [139][0][][] */ -102,21,-2,2,-36,-43,-97,-127,-56,47,42,118,21,15,-62,93, 
  /* [140][0][][] */ 13,11,-49,-89,-14,-59,16,39,-27,82,-50,-8,-8,-127,90,60, 
  /* [141][0][][] */ -30,34,127,-66,-10,72,-40,-115,78,38,27,-41,-42,-34,43,18, 
  /* [142][0][][] */ -58,93,-85,93,18,-19,-127,46,-45,106,76,-44,-80,-65,55,53, 
  /* [143][0][][] */ -75,-124,77,-127,-27,-85,-56,-2,39,91,68,29,-53,-62,45,-76, 
  /* [144][0][][] */ 40,73,41,103,-105,-61,55,52,-127,50,0,110,34,-127,-58,57, 
  /* [145][0][][] */ -8,-15,-34,70,127,-14,-34,2,-47,2,54,66,53,23,-44,70, 
  /* [146][0][][] */ -68,-9,-50,-112,107,35,-76,20,42,-76,97,116,48,127,-73,40, 
  /* [147][0][][] */ 47,96,-127,-36,67,96,-14,-22,78,47,-88,107,83,-12,-21,-40, 
  /* [148][0][][] */ -31,-24,26,6,-84,-109,52,36,-127,6,-103,-73,-121,-95,-39,0, 
  /* [149][0][][] */ 35,-76,22,115,1,0,-19,-22,62,61,-127,-45,28,-81,-24,-111, 
  /* [150][0][][] */ 64,55,104,93,115,-29,10,-26,40,-45,86,76,96,59,58,127, 
  /* [151][0][][] */ 6,-60,-51,25,-22,-94,-71,-127,31,-66,-62,71,8,8,73,-7, 
  /* [152][0][][] */ 79,-18,96,56,-88,3,-12,-61,127,-26,-24,1,33,109,12,90, 
  /* [153][0][][] */ -11,93,66,6,-5,-36,-24,12,-97,-1,106,49,-16,11,-72,127, 
  /* [154][0][][] */ -16,71,-127,27,19,84,-6,30,33,-93,-28,50,10,22,32,67, 
  /* [155][0][][] */ -110,52,-9,-47,53,-54,35,24,60,70,-36,-32,-19,127,11,-28, 
  /* [156][0][][] */ 5,-18,27,-46,-53,-105,11,0,-92,-11,-7,-58,127,48,11,11, 
  /* [157][0][][] */ -5,14,48,13,12,-127,-15,17,-11,51,56,74,1,-61,29,-8, 
  /* [158][0][][] */ -26,13,98,-62,-2,-26,-6,-39,-25,-127,-68,-56,38,15,5,-32, 
  /* [159][0][][] */ -7,-102,51,42,121,42,45,20,-22,32,19,50,-11,-6,127,90, 
  /* [160][0][][] */ -17,2,60,53,-107,-22,87,-14,41,127,1,-39,-6,-42,49,44, 
  /* [161][0][][] */ 88,-72,-25,5,22,-81,79,78,-90,127,-7,-30,36,-47,29,-15, 
  /* [162][0][][] */ -16,89,20,-15,103,-8,-32,-46,29,3,-76,-12,64,-14,127,41, 
  /* [163][0][][] */ -90,-82,10,-45,5,-59,64,-2,-13,21,10,-15,-6,-127,6,-79, 
  /* [164][0][][] */ -84,-26,34,45,76,-120,18,-41,31,-39,-3,127,-46,3,-18,-9, 
  /* [165][0][][] */ -7,6,-38,43,-20,-127,55,29,96,-52,-26,-43,-45,-38,2,26, 
  /* [166][0][][] */ -22,36,22,-38,98,-51,84,-9,127,102,-40,95,-28,78,2,47, 
  /* [167][0][][] */ -37,-7,60,-73,89,3,-6,75,-63,61,3,18,24,-127,-50,-1, 
  /* [168][0][][] */ 16,10,-68,-55,55,-100,51,-7,122,-27,-9,10,127,121,81,99, 
  /* [169][0][][] */ -39,-61,-18,61,-127,-8,-48,13,-39,-29,43,-29,42,-29,-83,49, 
  /* [170][0][][] */ 19,-127,67,7,7,-70,15,-43,-1,-19,-6,-16,-35,20,-52,-8, 
  /* [171][0][][] */ -84,-64,-63,-42,23,-33,-1,27,20,-61,49,47,127,62,-25,46, 
  /* [172][0][][] */ -60,58,-75,63,-11,127,4,45,32,76,96,-30,23,-70,-48,54, 
  /* [173][0][][] */ -21,19,-47,-88,98,-13,53,-38,58,72,58,53,36,-127,42,-33, 
  /* [174][0][][] */ 71,58,22,22,20,-127,-121,-38,-53,-39,-49,58,-100,-10,-70,21, 
  /* [175][0][][] */ -64,62,-69,43,21,-127,23,37,62,62,-55,24,-27,7,-30,-42, 
  /* [176][0][][] */ 105,-11,127,34,-30,-4,7,-18,-63,9,-49,62,61,-47,-42,-35, 
  /* [177][0][][] */ 4,21,-10,50,124,-123,-88,3,3,127,23,77,-28,65,-1,67, 
  /* [178][0][][] */ 65,41,-68,-1,3,25,-35,0,62,13,11,-19,127,-48,-8,-74, 
  /* [179][0][][] */ -105,125,-57,46,-112,-41,-30,2,127,25,-17,86,16,46,-9,-35, 
  /* [180][0][][] */ 49,41,127,121,-2,4,-32,9,9,35,119,81,49,-7,81,-88, 
  /* [181][0][][] */ -4,-4,-7,-44,18,11,-127,-25,63,17,96,28,13,-91,32,-9, 
  /* [182][0][][] */ 33,50,85,58,124,5,51,33,-9,-49,-7,36,-15,-12,-127,-78, 
  /* [183][0][][] */ 15,3,124,-67,-102,84,47,-127,-44,10,93,41,53,9,4,40, 
  /* [184][0][][] */ 23,-26,15,116,-54,5,36,-84,127,103,39,64,-61,126,-51,61, 
  /* [185][0][][] */ 33,17,-40,-49,32,23,-27,-43,26,40,64,46,-40,-24,-6,-127, 
  /* [186][0][][] */ -69,-104,-127,-3,55,-89,-74,4,-1,79,-7,-53,-45,-37,-56,-104, 
  /* [187][0][][] */ 34,0,60,15,54,5,103,24,21,-24,-17,-8,-36,127,16,-33, 
  /* [188][0][][] */ -41,27,-57,13,127,-42,15,11,-40,-6,-61,39,2,45,-20,13, 
  /* [189][0][][] */ -97,22,46,-31,45,-40,46,-76,91,127,105,45,19,67,53,-57, 
  /* [190][0][][] */ -110,71,18,-41,37,1,-98,127,23,-10,42,35,110,-90,75,16, 
  /* [191][0][][] */ 51,84,112,-25,-30,-24,127,39,33,48,-58,8,-45,-48,-7,-2, 
  /* [192][0][][] */ 11,6,-70,-55,-57,80,-14,-62,-60,65,-3,-33,93,-127,-24,34, 
  /* [193][0][][] */ 99,-3,-51,-81,-8,127,18,-22,-34,-26,11,-45,-67,56,-1,-14, 
  /* [194][0][][] */ 60,-14,-98,24,13,-11,39,-33,52,-13,88,127,16,112,68,-9, 
  /* [195][0][][] */ -36,65,44,-4,118,-24,97,-1,-50,5,-68,127,-105,100,-78,-82, 
  /* [196][0][][] */ 99,6,-71,94,-2,11,14,-38,-46,-50,-13,69,-105,127,-65,48, 
  /* [197][0][][] */ 11,-6,69,-46,50,43,127,68,37,-47,12,91,11,-57,-6,-6, 
  /* [198][0][][] */ -23,97,92,81,-31,-127,-41,-44,28,11,-41,82,-5,-15,1,34, 
  /* [199][0][][] */ -99,127,47,-44,-20,36,-78,37,-21,35,72,-36,81,-89,-65,-117, 
  /* [200][0][][] */ -19,-17,-127,-22,-72,-75,16,-5,-31,78,28,38,-7,5,-13,74, 
  /* [201][0][][] */ -14,34,37,31,14,7,-39,67,-59,35,-108,-40,-127,74,5,63, 
  /* [202][0][][] */ 127,123,21,45,81,17,2,-65,-49,-122,18,115,34,-28,85,-20, 
  /* [203][0][][] */ 92,-121,-6,-30,-72,29,-16,44,60,-127,32,37,104,-5,2,56, 
  /* [204][0][][] */ 10,100,-7,99,43,-19,71,-2,-108,-124,4,-38,14,-98,-66,-127, 
  /* [205][0][][] */ -127,-37,37,-20,86,57,61,-110,-101,-21,-66,106,115,104,-29,-105, 
  /* [206][0][][] */ 71,-71,-45,20,-16,-47,15,-82,12,-127,-51,9,13,99,-9,88, 
  /* [207][0][][] */ -12,67,31,62,6,78,127,16,-65,-8,-48,-94,-45,-46,87,22, 
  /* [208][0][][] */ -127,-10,-25,54,35,13,-54,-70,5,53,-42,-22,42,-31,62,-44, 
  /* [209][0][][] */ -19,55,-1,-15,-13,27,82,-31,38,-96,79,61,61,-25,-66,-127, 
  /* [210][0][][] */ 75,1,77,-127,57,21,-10,57,-78,28,13,10,-61,-45,-57,-104, 
  /* [211][0][][] */ -62,75,75,-3,-56,21,-28,-71,35,-33,-11,-19,31,-127,-23,-71, 
  /* [212][0][][] */ -61,56,44,56,-100,-19,-61,-62,-47,60,86,23,127,70,-29,-24, 
  /* [213][0][][] */ -127,21,-8,10,50,-2,50,16,18,60,37,-68,18,-59,33,3, 
  /* [214][0][][] */ 22,-60,-7,-17,-114,-35,127,10,-83,-79,55,99,-52,54,-110,-91, 
  /* [215][0][][] */ -47,48,63,80,47,-17,64,-11,3,0,-28,5,-14,127,-77,-52, 
  /* [216][0][][] */ -28,26,-71,61,-53,-6,89,-127,49,-74,-85,-7,-34,-55,0,-34, 
  /* [217][0][][] */ 45,-6,-20,-52,-82,29,-17,-20,-74,-33,82,-127,15,-29,106,-10, 
  /* [218][0][][] */ 27,97,23,-9,32,-10,-95,-127,58,-56,29,-48,56,-112,13,63, 
  /* [219][0][][] */ 38,-18,-19,52,-18,-48,127,-9,91,-33,-35,19,-12,-16,23,3, 
  /* [220][0][][] */ -24,2,-81,121,-46,41,19,29,15,127,83,-30,29,25,24,0, 
  /* [221][0][][] */ 24,-81,43,-47,17,-54,-25,-67,-69,26,-28,38,42,-127,-16,-100, 
  /* [222][0][][] */ -68,16,12,-49,-13,47,-6,-56,-15,86,0,-16,127,-14,59,-71, 
  /* [223][0][][] */ -13,-5,-39,69,-38,-41,-91,30,1,-41,127,81,9,9,-112,6, 
  /* [224][0][][] */ 98,31,30,18,11,26,127,48,-11,-105,-33,28,-47,-30,-28,21, 
  /* [225][0][][] */ 47,98,-21,-16,-4,20,-6,-48,58,52,-127,-18,-63,-51,48,17, 
  /* [226][0][][] */ 37,-28,-67,-11,-48,0,80,-47,-127,-35,-30,8,-13,106,-106,6, 
  /* [227][0][][] */ 29,38,-122,-15,10,-13,8,30,-78,63,-97,-127,-63,13,45,-30, 
  /* [228][0][][] */ -123,-30,52,12,6,-43,127,34,49,75,-12,106,23,-38,45,19, 
  /* [229][0][][] */ -9,-127,48,32,1,56,4,49,-56,16,81,-40,84,-69,10,44, 
  /* [230][0][][] */ -41,85,69,-43,-104,58,90,-127,39,1,-71,35,41,-13,15,-89, 
  /* [231][0][][] */ 20,-11,29,1,28,26,127,-20,47,-18,18,43,38,18,-7,-9, 
  /* [232][0][][] */ 39,-7,127,-38,-34,-4,58,-67,-19,46,12,-50,4,-18,20,-75, 
  /* [233][0][][] */ -44,-95,9,26,-16,-24,-96,-127,42,18,61,12,-11,-14,-123,29, 
  /* [234][0][][] */ 27,37,43,-13,127,-43,2,-53,24,-83,-27,-1,50,-31,-18,0, 
  /* [235][0][][] */ 47,-84,-40,71,60,21,-28,-84,-25,-121,-46,90,105,-127,33,105, 
  /* [236][0][][] */ 23,17,49,124,-17,-50,-127,-84,-15,-14,-44,20,55,38,-67,45, 
  /* [237][0][][] */ 18,-71,-127,-66,55,86,-26,72,21,0,-29,-53,79,73,8,-19, 
  /* [238][0][][] */ -48,25,42,24,-70,-76,46,13,35,-127,-44,99,90,87,-4,80, 
  /* [239][0][][] */ 32,26,-11,13,29,-13,-71,27,85,-103,32,-13,-45,-20,-44,127, 
  /* [240][0][][] */ 0,-81,9,31,52,-51,-6,-127,-42,-68,-61,38,50,11,9,25, 
  /* [241][0][][] */ 127,126,41,-87,72,7,77,51,111,51,21,-46,-24,-30,117,29, 
  /* [242][0][][] */ 73,61,11,-53,-32,48,127,18,48,-21,-6,21,-8,-49,-15,-4, 
  /* [243][0][][] */ 27,125,27,-60,-83,-78,2,32,-16,1,-20,25,-72,-70,-17,-127, 
  /* [244][0][][] */ 14,-36,-44,-72,-53,42,13,-97,112,89,-56,-17,35,127,-55,54, 
  /* [245][0][][] */ -108,71,39,-21,-41,-67,67,65,85,42,-77,-127,-49,-86,-28,-12, 
  /* [246][0][][] */ 45,49,-71,-127,-11,-80,-35,-24,-6,-11,26,80,40,79,-24,-51, 
  /* [247][0][][] */ -64,63,29,10,127,-6,-38,-15,91,-16,11,52,9,23,56,7, 
  /* [248][0][][] */ -95,-38,22,-20,4,52,127,-36,-18,44,-47,-11,25,-13,68,-39, 
  /* [249][0][][] */ -27,33,-40,16,-68,-28,97,82,-87,-45,44,25,-45,66,-127,0, 
  /* [250][0][][] */ -3,10,-12,121,24,14,63,-33,-83,103,-65,-42,83,127,33,-15, 
  /* [251][0][][] */ -10,38,115,-11,2,-21,127,41,-2,-26,-18,-54,-18,-97,92,-24, 
  /* [252][0][][] */ 54,-35,127,21,-5,-15,42,24,31,60,30,31,12,3,37,60, 
  /* [253][0][][] */ -127,13,18,18,-5,-7,47,-39,22,10,-27,-46,0,-35,28,-78, 
  /* [254][0][][] */ -92,-80,-42,-9,-41,-45,29,90,-82,-80,-27,48,68,36,-127,75, 
  /* [255][0][][] */ -45,-54,96,-21,127,61,40,8,-37,-10,-5,-41,59,37,35,0, 
  /* [256][0][][] */ 127,36,-39,20,-20,42,-71,-83,76,23,99,-7,89,58,-55,52, 
  /* [257][0][][] */ -75,74,-96,-33,-31,93,2,-86,127,-67,26,61,52,53,-9,-119, 
  /* [258][0][][] */ -120,31,-107,-36,127,15,30,-11,109,51,-40,-109,-12,-12,-30,30, 
  /* [259][0][][] */ 79,7,-23,70,-11,76,12,-87,46,9,-47,-118,-71,-48,127,12, 
  /* [260][0][][] */ -15,-27,-13,-13,-17,-38,127,108,113,27,44,-101,-115,24,-58,-39, 
  /* [261][0][][] */ 93,-127,-66,-16,-31,-54,61,65,39,-20,45,-43,-115,-30,16,-4, 
  /* [262][0][][] */ -67,19,-57,-66,18,-84,-127,81,-68,-49,-16,-5,11,-54,-70,-4, 
  /* [263][0][][] */ 127,-63,12,8,65,47,4,-12,-63,-37,26,42,-85,-115,70,27, 
  /* [264][0][][] */ -29,-35,13,34,-104,23,-56,-22,-21,101,40,-127,-72,-48,-76,40, 
  /* [265][0][][] */ 53,-2,-41,-127,-68,46,-25,-86,68,-21,68,-40,-69,20,-28,-70, 
  /* [266][0][][] */ -6,17,-82,-60,45,-20,-127,-61,-88,93,120,16,107,-8,84,31, 
  /* [267][0][][] */ 36,35,47,-107,1,-40,123,73,45,122,47,3,30,30,-37,-127, 
  /* [268][0][][] */ -59,-90,-86,-23,-54,9,85,25,68,-21,35,-64,-29,-127,-2,76, 
  /* [269][0][][] */ -76,21,10,-78,127,11,-45,-36,114,37,50,8,-57,-52,-63,48, 
  /* [270][0][][] */ 105,99,65,-117,-7,70,-71,122,88,-127,50,-54,-9,48,-98,-61, 
  /* [271][0][][] */ 36,64,84,-72,77,-60,-17,12,-19,48,127,-33,57,-124,13,20, 
  /* [272][0][][] */ -34,-41,23,-34,6,-35,-71,-120,-28,127,57,-30,110,-28,27,-31, 
  /* [273][0][][] */ -86,22,91,-67,-12,-30,77,-40,-79,105,-63,-15,-20,-127,-5,82, 
  /* [274][0][][] */ -63,27,44,-26,127,21,8,-36,72,25,13,-26,-36,48,-27,-46, 
  /* [275][0][][] */ 28,89,82,23,-8,-61,-127,-12,41,-3,38,4,24,-72,48,-53, 
  /* [276][0][][] */ 31,16,-66,-35,72,61,-127,120,47,-57,50,49,-13,25,69,-75, 
  /* [277][0][][] */ -34,-36,-29,-30,19,93,7,-22,127,11,10,-39,7,-42,78,62, 
  /* [278][0][][] */ -61,15,-63,23,-31,36,17,-52,-72,39,19,-79,127,-105,56,89, 
  /* [279][0][][] */ -23,-30,65,-27,32,28,-78,-25,127,22,15,-101,55,-74,-8,10, 
  /* [280][0][][] */ 84,-17,27,-28,-42,-73,74,7,44,51,-31,67,-8,30,-127,-46, 
  /* [281][0][][] */ 29,35,-64,-86,12,-36,35,82,30,43,9,-127,23,79,58,-26, 
  /* [282][0][][] */ 23,-41,104,20,-124,-42,127,-28,-21,1,80,106,-76,-125,4,70, 
  /* [283][0][][] */ -71,89,-14,-64,-58,17,-127,-55,-34,81,44,-59,108,-16,1,49, 
  /* [284][0][][] */ -39,31,-16,0,34,31,-12,46,-3,72,-18,-45,-6,-127,-70,-95, 
  /* [285][0][][] */ -127,18,-9,-4,51,5,32,-16,83,-35,3,23,-35,50,44,80, 
  /* [286][0][][] */ -29,53,-22,-127,-76,14,-79,17,-76,-10,31,-126,-63,68,-44,-36, 
  /* [287][0][][] */ -56,20,-98,-58,8,6,-16,-3,-78,5,57,-33,66,-71,127,28, 
  /* [288][0][][] */ 118,16,107,-127,25,54,-2,-49,-110,34,43,63,52,59,-1,-27, 
  /* [289][0][][] */ -49,-13,43,-40,24,-20,93,86,-120,13,-31,-127,9,36,-22,-2, 
  /* [290][0][][] */ 50,-25,-82,116,-36,-22,-127,42,-24,67,68,-40,43,6,-37,-12, 
  /* [291][0][][] */ 118,41,60,83,30,-1,127,50,77,-117,-40,96,18,4,-11,36, 
  /* [292][0][][] */ 127,33,49,38,-23,-49,-36,33,-19,-59,28,6,17,10,42,21, 
  /* [293][0][][] */ 88,67,-66,-51,-80,21,-119,35,12,-34,127,67,11,-117,-4,61, 
  /* [294][0][][] */ 27,-127,35,-38,11,-75,48,-22,-12,-75,45,6,-19,49,25,30, 
  /* [295][0][][] */ -2,82,-57,-1,-11,-32,16,-1,-93,127,-10,19,-45,63,-40,-5, 
  /* [296][0][][] */ -14,61,22,-2,62,-96,24,88,-127,-36,-28,67,42,-28,-92,-18, 
  /* [297][0][][] */ 127,51,-32,49,-36,56,-27,-94,3,-62,81,-73,-38,19,63,16, 
  /* [298][0][][] */ -38,6,13,0,-25,105,-25,-115,-79,-17,-15,25,107,-16,-4,127, 
  /* [299][0][][] */ -27,-43,-52,-16,76,26,-33,-3,-15,40,-35,12,-38,127,-38,-44, 
  /* [300][0][][] */ -30,-11,63,-34,99,48,127,-25,88,31,26,50,33,-27,82,-57, 
  /* [301][0][][] */ 32,-47,-127,-46,-36,-59,-31,-19,19,-19,53,93,48,-126,-24,-99, 
  /* [302][0][][] */ -33,-90,-4,-10,-72,73,127,-24,-15,57,64,64,51,32,11,-41, 
  /* [303][0][][] */ -31,-64,33,1,-25,4,9,-68,-60,6,-11,-37,-14,127,-4,63, 
  /* [304][0][][] */ -90,-54,-64,41,-23,-16,-59,41,108,-67,124,-24,-27,127,34,-10, 
  /* [305][0][][] */ 21,-107,-8,-79,-45,-9,28,3,11,92,68,-127,-81,21,0,-14, 
  /* [306][0][][] */ -16,-11,-79,-20,-48,-10,-40,54,127,-92,-16,-101,3,-27,68,-68, 
  /* [307][0][][] */ 65,-50,84,63,29,19,-23,127,2,-23,13,-77,-8,108,-45,65, 
  /* [308][0][][] */ 94,-14,10,-24,-12,59,21,-16,26,0,51,127,14,-39,-54,90, 
  /* [309][0][][] */ 53,31,-11,-127,73,-28,-32,51,-78,94,-40,-81,-37,36,-87,62, 
  /* [310][0][][] */ 99,-51,48,-12,-54,29,-69,44,6,-97,44,-18,62,67,-28,-127, 
  /* [311][0][][] */ -87,105,-41,-4,-62,107,85,-4,84,40,-102,-73,12,-127,15,72, 
  /* [312][0][][] */ 127,14,-72,-3,90,16,37,-22,22,55,69,-86,-2,-1,-82,-31, 
  /* [313][0][][] */ 19,11,20,67,59,-47,69,30,-127,102,-12,39,122,-18,25,63, 
  /* [314][0][][] */ -48,-19,28,127,42,59,41,106,2,-30,-20,22,16,74,-27,24, 
  /* [315][0][][] */ 82,-6,64,14,-89,-127,-39,24,-69,96,17,3,29,-79,-21,-43, 
  /* [316][0][][] */ -26,-61,71,36,47,127,102,29,7,-49,-24,5,-32,24,78,-25, 
  /* [317][0][][] */ -32,-23,-107,3,-49,-127,-43,62,83,6,24,-16,-108,-45,58,68, 
  /* [318][0][][] */ 39,-18,8,13,-29,45,8,-16,-127,-72,55,-3,11,-54,67,25, 
  /* [319][0][][] */ 38,-62,-16,19,-85,-18,8,-27,-105,-24,-5,40,14,13,-127,16, 
  /* [320][0][][] */ 46,64,-116,-18,71,25,-74,-2,117,127,62,-33,-16,-45,0,-51, 
  /* [321][0][][] */ -3,-46,-102,-118,-82,-20,39,-21,-45,-1,23,66,-125,-49,-127,-44, 
  /* [322][0][][] */ 126,-2,10,7,38,-57,-68,-2,-3,-114,-127,36,3,-37,-75,76, 
  /* [323][0][][] */ 127,23,33,15,78,87,-114,34,-41,-115,93,-3,72,41,-27,-67, 
  /* [324][0][][] */ 67,44,53,102,21,-127,-80,-105,-26,20,18,30,51,-71,69,9, 
  /* [325][0][][] */ 12,17,44,38,-33,-104,-14,-88,43,-7,117,-127,-45,-57,-111,82, 
  /* [326][0][][] */ -43,-81,-48,-65,-18,14,45,-77,-37,-27,-9,127,21,29,107,-96, 
  /* [327][0][][] */ 20,-127,40,86,7,-7,39,30,23,16,-12,-16,-16,-52,-3,12, 
  /* [328][0][][] */ 25,30,10,50,61,-71,-101,36,-32,126,-42,-16,-10,127,10,-33, 
  /* [329][0][][] */ -24,83,64,90,64,5,-127,26,43,116,55,61,-82,34,-35,-92, 
  /* [330][0][][] */ 18,-53,-6,127,5,-32,6,23,-82,15,20,76,-58,41,-71,77, 
  /* [331][0][][] */ 57,73,-1,8,67,69,67,93,-127,-94,53,5,48,30,5,-116, 
  /* [332][0][][] */ -87,-127,19,-10,-19,-59,-13,-23,-4,-14,20,-38,-9,-7,-35,108, 
  /* [333][0][][] */ -25,-58,19,38,0,-62,45,-27,-17,-10,-100,-64,-127,3,-23,27, 
  /* [334][0][][] */ -86,20,-123,37,-41,-50,27,67,-45,-51,127,125,-81,-22,34,-49, 
  /* [335][0][][] */ 16,-1,-10,-15,16,76,13,-127,28,51,28,30,17,37,66,20, 
  /* [336][0][][] */ 82,-7,41,48,44,-20,67,75,89,-51,5,-49,-75,-127,-17,-95, 
  /* [337][0][][] */ 127,5,72,11,93,94,34,-34,32,71,-6,11,5,-66,-5,-95, 
  /* [338][0][][] */ -21,-76,55,7,3,-127,-16,6,-40,16,-7,-53,-45,7,4,8, 
  /* [339][0][][] */ -85,35,-20,56,9,26,-19,102,-85,-43,127,32,45,62,10,-23, 
  /* [340][0][][] */ 30,-28,-35,-80,-81,22,-79,28,-22,-88,121,37,127,-47,45,60, 
  /* [341][0][][] */ 30,92,127,-98,-26,12,-82,86,42,-7,23,-78,36,-39,-23,33, 
  /* [342][0][][] */ -81,-53,-36,-41,-105,-60,-72,-2,-62,47,38,0,127,121,58,78, 
  /* [343][0][][] */ 10,3,85,125,18,-127,49,49,42,100,-24,-124,37,76,90,25, 
  /* [344][0][][] */ 52,-72,39,-71,10,61,30,-40,-79,14,43,99,20,23,-127,-84, 
  /* [345][0][][] */ 92,38,50,66,-36,-65,13,-11,-43,127,63,17,-22,17,37,36, 
  /* [346][0][][] */ -44,47,-89,114,-29,27,-2,71,-27,10,-94,59,-6,-127,15,3, 
  /* [347][0][][] */ 52,-70,-24,42,66,65,87,-38,127,-56,33,22,-22,-16,55,35, 
  /* [348][0][][] */ 39,61,47,28,-12,17,-54,-82,-8,3,-43,8,-3,-22,127,-21, 
  /* [349][0][][] */ 40,-37,-22,80,21,-83,41,12,23,-1,41,-24,127,49,12,-6, 
  /* [350][0][][] */ 78,74,-32,10,-21,-114,14,50,-70,-25,-47,-49,-42,-127,6,-31, 
  /* [351][0][][] */ -1,-120,-57,-7,6,117,-127,62,126,-74,84,-89,19,44,-33,28, 
  /* [352][0][][] */ 2,-127,-23,75,-51,43,-68,-12,100,24,-15,-95,-30,81,-89,-93, 
  /* [353][0][][] */ 59,110,-34,-40,71,-35,-40,-54,16,5,-26,127,31,95,-51,-28, 
  /* [354][0][][] */ 11,-18,9,32,-127,42,28,-69,-20,-43,11,-101,74,55,18,-90, 
  /* [355][0][][] */ -44,-93,-20,58,-76,-7,40,66,70,82,15,-127,117,-50,102,21, 
  /* [356][0][][] */ 69,29,-85,-22,-81,-67,-88,-8,94,-103,-1,-1,90,-127,-88,-29, 
  /* [357][0][][] */ 34,-2,15,-22,-109,-53,86,127,-109,73,64,10,35,48,111,40, 
  /* [358][0][][] */ 120,38,-57,67,18,-29,-108,67,41,52,56,-94,15,52,34,-127, 
  /* [359][0][][] */ 59,39,-1,-12,-46,53,-65,-34,22,-7,-18,16,-3,-9,-127,-4, 
  /* [360][0][][] */ 91,13,19,-17,19,81,87,22,67,-69,127,-1,-62,44,-31,19, 
  /* [361][0][][] */ -35,19,-22,-112,-13,-127,101,39,92,27,3,65,101,-28,30,-48, 
  /* [362][0][][] */ -15,-10,59,127,62,78,118,27,-83,-18,30,21,11,-66,9,26, 
  /* [363][0][][] */ -105,40,119,29,30,14,6,85,-127,-13,43,-127,-121,-42,-19,12, 
  /* [364][0][][] */ -127,-63,42,60,-13,15,-3,23,-25,88,14,-7,33,38,-22,31, 
  /* [365][0][][] */ -14,8,-127,-104,-114,-15,-120,-67,51,-68,36,40,91,-114,52,14, 
  /* [366][0][][] */ -39,-45,-127,31,-14,17,-30,18,66,11,-10,-59,9,-73,18,14, 
  /* [367][0][][] */ 117,20,34,-9,-127,35,30,-41,-23,54,-6,-62,-46,23,-44,-31, 
  /* [368][0][][] */ 35,74,-19,19,-95,94,71,-74,-127,12,-62,-31,41,-34,-53,-21, 
  /* [369][0][][] */ -118,-16,74,-127,-25,15,35,-45,-98,-54,105,110,72,-4,105,-11, 
  /* [370][0][][] */ 41,-34,12,-26,-52,44,78,14,25,55,62,14,-9,21,-20,-127, 
  /* [371][0][][] */ -117,-111,12,-35,-58,4,-5,-40,96,5,31,78,123,127,-65,-84, 
  /* [372][0][][] */ -91,-16,-35,25,-16,72,64,-127,117,-73,11,25,-14,-10,23,-81, 
  /* [373][0][][] */ -36,-13,-78,57,64,-65,-127,-64,61,20,9,11,38,71,40,45, 
  /* [374][0][][] */ 90,-8,24,27,-107,60,-122,1,61,-127,95,5,53,27,65,-61, 
  /* [375][0][][] */ 122,8,59,-122,125,-69,-101,-17,7,-35,12,-32,-7,-52,55,-127, 
  /* [376][0][][] */ 13,57,-29,-29,12,-15,-127,-27,-101,-104,-34,20,-17,-35,-57,39, 
  /* [377][0][][] */ -40,-26,19,-36,-75,42,30,-11,-120,0,-10,-32,23,25,-42,127, 
  /* [378][0][][] */ 9,110,38,32,-92,-76,23,-26,-11,-124,48,93,-21,127,-30,41, 
  /* [379][0][][] */ 5,-12,-34,-16,58,9,-127,80,-44,74,6,-24,36,-61,-87,-37, 
  /* [380][0][][] */ 94,-9,-73,-127,58,46,127,-5,-55,-44,-63,1,84,-24,46,3, 
  /* [381][0][][] */ 52,-33,-112,40,-127,81,-121,-123,-37,4,62,-48,29,-36,39,-33, 
  /* [382][0][][] */ 127,10,-30,-32,-36,52,20,17,78,118,-119,-66,20,16,43,-25, 
  /* [383][0][][] */ -53,47,-4,-5,58,-9,56,-12,127,29,-27,17,-26,82,40,-34, 
  /* [384][0][][] */ -76,68,-13,-67,61,-72,33,-11,-19,36,26,26,-15,1,127,-91, 
  /* [385][0][][] */ -27,58,19,16,-93,-21,-26,-60,-102,-2,12,-11,127,-69,19,119, 
  /* [386][0][][] */ 70,-73,39,-18,52,-13,-67,56,84,-3,127,-22,64,-101,-22,11, 
  /* [387][0][][] */ -29,-7,34,86,-17,-43,14,-11,-12,27,40,-49,127,-105,-25,51, 
  /* [388][0][][] */ 77,-46,2,-5,67,-47,-68,-49,-33,55,90,60,-11,21,38,-127, 
  /* [389][0][][] */ -50,117,-31,-40,14,-112,51,92,-127,-50,32,117,-85,-14,106,58, 
  /* [390][0][][] */ -19,-15,127,-111,93,56,-125,19,20,-12,-52,-78,-73,-10,-56,-20, 
  /* [391][0][][] */ 26,88,-4,71,127,28,17,-67,-64,-2,-9,112,-77,29,48,7, 
  /* [392][0][][] */ 123,-41,-9,78,77,-28,-68,-76,-49,-62,84,-127,-25,-96,-52,66, 
  /* [393][0][][] */ -47,25,25,31,-64,2,-6,10,77,68,26,69,-127,-43,-78,104, 
  /* [394][0][][] */ -86,-8,33,-29,-43,-50,-33,-27,-111,50,24,84,127,-78,-38,-19, 
  /* [395][0][][] */ -31,127,5,-78,83,-5,27,-126,-3,23,-22,114,-72,127,76,-45, 
  /* [396][0][][] */ -127,-19,-37,110,15,-56,-123,73,16,33,-49,-77,34,43,-83,-44, 
  /* [397][0][][] */ 85,90,-29,-9,93,-30,-127,74,-19,-89,-13,-7,-113,25,117,-37, 
  /* [398][0][][] */ -122,-6,45,-55,127,46,-63,57,-20,15,-36,-38,-112,-112,-55,73, 
  /* [399][0][][] */ -127,-38,3,53,-89,22,7,-11,-41,39,93,16,67,-36,-33,-2, 
  /* [400][0][][] */ 127,8,-9,-28,23,-57,33,-36,42,-25,-17,38,30,12,72,-64, 
  /* [401][0][][] */ 32,-12,-14,-7,-20,-24,-37,-75,-16,-112,-14,48,127,16,43,59, 
  /* [402][0][][] */ 30,60,-80,-127,-14,5,58,58,7,-113,-32,94,67,127,-11,43, 
  /* [403][0][][] */ 29,-99,-38,2,37,29,51,-127,122,-98,-58,29,-85,66,53,-21, 
  /* [404][0][][] */ 127,46,39,-69,-33,71,-84,-30,5,-79,73,-2,76,-60,-50,1, 
  /* [405][0][][] */ -43,-12,42,23,25,3,-127,38,22,-60,-2,-38,-17,-27,-22,46, 
  /* [406][0][][] */ 41,-6,25,-74,-126,-74,-3,24,86,101,127,-46,13,28,28,-47, 
  /* [407][0][][] */ 87,88,75,5,20,-105,-104,2,-47,43,48,55,-32,127,-5,-78, 
  /* [408][0][][] */ 8,28,73,-96,-127,-42,59,70,13,-100,76,87,32,122,-78,75, 
  /* [409][0][][] */ 18,61,127,77,-32,22,52,16,62,-44,16,-63,-37,-3,59,-75, 
  /* [410][0][][] */ 70,127,-82,-89,-56,-84,-20,88,64,122,70,38,42,73,47,40, 
  /* [411][0][][] */ -8,4,2,-90,-30,-55,-51,-43,38,-5,-11,-46,-38,-127,-9,-56, 
  /* [412][0][][] */ 16,1,-46,-2,-101,55,9,-21,-51,-71,-16,-22,65,-22,58,127, 
  /* [413][0][][] */ 21,70,13,-64,60,-7,-61,-75,92,-3,-3,70,-62,127,-46,-58, 
  /* [414][0][][] */ -9,37,-31,3,120,-12,60,37,-35,4,-127,36,15,-14,-102,-30, 
  /* [415][0][][] */ 92,9,-10,15,-127,-74,-38,16,56,79,-67,-69,-78,98,68,-68, 
  /* [416][0][][] */ -34,-25,-19,67,54,-57,28,71,-36,-64,127,108,64,39,-87,-82, 
  /* [417][0][][] */ 18,-3,-1,42,-39,-3,47,-9,25,-3,50,127,-12,1,-34,-31, 
  /* [418][0][][] */ -58,-63,-90,-73,24,-90,-13,-106,108,-127,12,13,14,73,-82,-97, 
  /* [419][0][][] */ 33,127,-82,22,-65,70,44,-60,-24,36,-22,75,32,18,91,-1, 
  /* [420][0][][] */ 64,-26,-41,58,-1,65,2,82,127,-58,108,-15,107,46,-11,-49, 
  /* [421][0][][] */ -118,-8,2,-93,14,5,-10,9,127,21,26,-110,109,9,55,29, 
  /* [422][0][][] */ 56,-12,-77,28,-127,-24,52,-60,-6,67,2,7,-55,-1,-74,-39, 
  /* [423][0][][] */ -67,-40,-28,-71,-42,-127,41,27,83,-24,-29,-74,32,-9,84,35, 
  /* [424][0][][] */ -72,-27,20,-53,19,17,9,-7,-6,19,10,-42,5,9,-2,-127, 
  /* [425][0][][] */ -66,-27,-39,-100,27,65,-41,-38,-22,11,-38,-10,49,9,-41,-127, 
  /* [426][0][][] */ -51,66,94,78,-110,105,-55,-30,31,28,-32,-127,-56,-29,-98,10, 
  /* [427][0][][] */ -16,-46,41,-127,53,-51,56,33,63,-39,21,116,21,-43,-127,-93, 
  /* [428][0][][] */ -16,28,-14,-72,16,18,123,127,0,113,-97,77,42,126,54,-97, 
  /* [429][0][][] */ -60,-3,8,-51,43,26,-25,40,-46,-21,90,-19,72,-106,88,-127, 
  /* [430][0][][] */ -72,-17,-30,-25,-22,-2,80,6,127,-32,63,-46,54,-34,-15,27, 
  /* [431][0][][] */ 127,-13,-7,-58,-101,9,17,-18,-74,-7,-33,-18,-40,17,23,-22, 
  /* [432][0][][] */ -80,-67,-78,79,14,127,0,31,-17,-112,-57,-9,50,-116,50,-64, 
  /* [433][0][][] */ 27,91,-37,-1,-53,-5,-41,-80,107,53,-28,-127,-2,-57,47,-26, 
  /* [434][0][][] */ 77,-9,-87,53,-79,-113,-127,34,13,122,-88,-118,23,-48,61,-4, 
  /* [435][0][][] */ -88,21,-82,17,88,74,49,11,-27,127,-53,5,-34,-40,26,-101, 
  /* [436][0][][] */ 14,19,-127,30,42,8,14,-26,-55,-41,25,-24,20,-75,-36,-34, 
  /* [437][0][][] */ -6,-24,77,-127,61,28,68,-57,-105,-51,-20,12,59,-5,34,63, 
  /* [438][0][][] */ -6,-21,-8,1,-14,23,65,-4,13,-2,42,20,82,-127,85,-37, 
  /* [439][0][][] */ 81,64,19,-46,65,-58,-5,-20,-21,127,23,-2,-91,-57,40,-26, 
  /* [440][0][][] */ 43,-98,12,42,-18,47,17,-108,-48,-26,80,25,124,-20,127,27, 
  /* [441][0][][] */ 86,-26,-56,46,-23,37,13,17,24,51,56,-73,-39,127,7,-2, 
  /* [442][0][][] */ -10,68,-25,-100,92,127,45,-24,86,-95,-96,-22,-81,-38,13,-11, 
  /* [443][0][][] */ 22,-60,-29,-127,-30,-85,59,-89,66,16,-34,-111,-63,24,55,-10, 
  /* [444][0][][] */ 36,10,-34,-38,44,-21,-127,-17,-27,35,20,53,-29,-2,-50,-32, 
  /* [445][0][][] */ 18,-117,70,35,13,119,74,-2,-37,35,-26,-25,-34,-127,42,88, 
  /* [446][0][][] */ -11,-38,118,31,-63,-43,-37,74,57,-81,-59,-105,-31,-42,-127,28, 
  /* [447][0][][] */ 51,67,-43,-7,-72,54,14,-103,-127,-88,-21,120,-67,42,-59,22, 
  /* [448][0][][] */ -70,0,30,127,22,21,32,48,-11,-33,-10,-25,-18,33,29,-59, 
  /* [449][0][][] */ 114,54,-65,-2,52,-33,69,11,-67,116,-74,-12,-60,-46,18,-127, 
  /* [450][0][][] */ -11,66,0,41,57,105,-2,127,23,48,21,-126,-60,-13,-6,19, 
  /* [451][0][][] */ 16,17,-30,8,-32,85,-127,15,-99,1,62,69,113,13,-10,67, 
  /* [452][0][][] */ 39,-64,-76,-39,-76,-1,-63,59,-19,1,-28,97,-127,79,-14,15, 
  /* [453][0][][] */ 127,64,68,18,4,42,25,4,-42,8,-28,-58,-3,-3,-79,-48, 
  /* [454][0][][] */ -96,12,-12,2,-12,99,-11,-82,81,-127,-36,-9,39,22,15,79, 
  /* [455][0][][] */ -16,52,-7,35,94,9,-12,2,-2,12,-18,-19,14,18,102,-127, 
  /* [456][0][][] */ 31,24,29,-56,123,-81,-17,67,-127,-27,26,67,9,62,75,53, 
  /* [457][0][][] */ 36,63,-48,8,127,-44,16,23,120,-35,59,82,-26,85,0,-71, 
  /* [458][0][][] */ 9,-73,-11,-49,118,-49,-21,30,44,86,84,8,41,-58,-45,-127, 
  /* [459][0][][] */ 34,45,-87,-30,-32,22,-101,-127,35,77,-36,33,56,-103,-27,87, 
  /* [460][0][][] */ -17,21,-31,5,68,-127,-59,122,74,3,-58,-33,-77,37,6,46, 
  /* [461][0][][] */ 32,-74,-13,-67,29,-32,-41,-38,111,78,50,-7,22,127,4,-75, 
  /* [462][0][][] */ -59,3,-55,-127,68,-12,6,-31,68,49,-38,-3,10,13,-23,-32, 
  /* [463][0][][] */ 7,-120,57,-23,46,-31,9,76,60,68,-5,-51,-127,4,-94,104, 
  /* [464][0][][] */ -31,23,99,31,-26,127,35,39,-13,-15,103,-41,-24,-12,-95,-26, 
  /* [465][0][][] */ 45,-87,56,-7,-74,-31,6,68,56,99,-29,-47,105,41,127,-16, 
  /* [466][0][][] */ 5,3,-79,-50,6,-44,-20,-5,-113,57,-127,-55,56,-127,36,-88, 
  /* [467][0][][] */ -1,78,-86,-31,58,-82,-46,18,63,28,86,34,79,-30,77,-127, 
  /* [468][0][][] */ -47,-1,40,12,47,-83,-23,75,-127,-65,13,104,92,-78,-57,-66, 
  /* [469][0][][] */ -54,32,45,-33,27,54,-22,127,49,-29,55,-31,25,-1,60,13, 
  /* [470][0][][] */ 2,72,98,36,3,127,-56,-100,-74,9,14,-10,1,7,10,75, 
  /* [471][0][][] */ -6,-41,-2,38,104,-4,-20,-127,61,19,-43,-72,-28,-44,20,-29, 
  /* [472][0][][] */ -58,87,-44,103,-38,-6,-77,-20,-112,24,16,127,30,-22,-12,-70, 
  /* [473][0][][] */ 50,-30,92,-61,97,11,13,-125,-31,-28,88,-30,76,127,-57,30, 
  /* [474][0][][] */ -52,24,9,4,72,46,47,-86,40,11,33,-44,31,9,45,-127, 
  /* [475][0][][] */ -22,-26,-92,62,-67,113,-15,54,52,-14,-1,-56,43,127,-41,15, 
  /* [476][0][][] */ 100,-36,127,-49,49,-14,-51,9,-91,-35,-12,12,40,24,50,91, 
  /* [477][0][][] */ 70,5,-36,70,-107,-52,26,-33,-127,17,12,105,50,90,-70,-81, 
  /* [478][0][][] */ 78,-13,83,-32,-43,68,22,-32,89,-116,7,-58,-127,-50,83,-31, 
  /* [479][0][][] */ 100,-23,-43,-118,127,59,11,-18,-84,42,-6,-1,90,-75,105,-60, 
  /* [480][0][][] */ -1,-79,6,-30,-2,-40,-13,96,26,42,-22,-98,-83,-48,-94,-127, 
  /* [481][0][][] */ 127,65,40,65,58,-23,-46,5,-18,-15,10,39,49,61,-21,-24, 
  /* [482][0][][] */ -26,-8,-54,70,61,25,127,-14,41,-77,10,41,37,35,8,6, 
  /* [483][0][][] */ -91,64,-64,-127,80,-56,10,-80,54,-8,-48,105,126,-80,87,26, 
  /* [484][0][][] */ -93,-91,-14,-9,127,44,-71,-43,25,-84,66,74,-51,-20,-18,62, 
  /* [485][0][][] */ 39,36,-13,-63,-80,11,73,-127,-27,-30,-60,40,-85,-19,-76,52, 
  /* [486][0][][] */ 58,-9,-31,-51,71,-5,-3,19,-8,15,15,127,-6,-41,19,-16, 
  /* [487][0][][] */ -86,26,115,31,92,107,11,85,-36,127,-70,-29,-44,58,-77,-58, 
  /* [488][0][][] */ -29,23,-35,-86,35,-18,46,127,21,30,-8,47,43,44,26,28, 
  /* [489][0][][] */ 38,-37,112,-60,-107,81,16,-58,-29,3,-45,-82,89,-127,31,47, 
  /* [490][0][][] */ -78,-73,-127,25,94,122,36,-62,-12,36,-17,-50,66,-37,11,-77, 
  /* [491][0][][] */ -1,-5,-12,-103,23,-10,49,15,-10,113,-11,49,38,-13,13,-127, 
  /* [492][0][][] */ 26,41,-47,90,22,45,52,-127,19,-38,-12,-5,44,16,122,5, 
  /* [493][0][][] */ -5,3,-8,77,15,-56,-45,-46,64,15,7,-50,47,-127,1,-74, 
  /* [494][0][][] */ 12,-23,81,50,68,127,-3,53,85,-9,-33,-3,-68,-74,-83,-89, 
  /* [495][0][][] */ -108,79,45,-1,-1,-32,82,127,-14,73,122,51,24,43,5,58, 
  /* [496][0][][] */ -8,-29,-48,70,-86,127,50,26,-23,-53,41,84,-10,-85,90,65, 
  /* [497][0][][] */ 23,37,-12,-76,-16,-33,-87,-73,127,-68,-27,10,21,-23,-57,29, 
  /* [498][0][][] */ 1,-15,-11,-2,-23,42,96,-18,58,127,-18,-2,44,36,-3,-51, 
  /* [499][0][][] */ 18,-34,-39,-42,72,-55,-8,-34,-107,-32,6,-21,-127,-121,-22,35, 
  /* [500][0][][] */ 52,73,46,-74,53,-28,29,68,-127,39,101,39,-63,56,-43,-85, 
  /* [501][0][][] */ 51,-81,-14,-66,8,-127,58,13,30,-80,-20,31,20,55,8,29, 
  /* [502][0][][] */ 8,127,5,-8,9,-22,-50,104,-55,51,38,123,-6,-78,-51,-57, 
  /* [503][0][][] */ -6,-127,64,-74,-26,-62,80,-33,-15,15,-77,16,-5,57,83,34, 
  /* [504][0][][] */ 49,-24,-15,9,39,-6,-3,-127,57,-36,-12,-19,43,-26,-21,-23, 
  /* [505][0][][] */ -18,9,29,-93,19,-36,-6,-41,-42,111,-62,6,-9,-9,-57,-127, 
  /* [506][0][][] */ -86,-89,26,-19,-93,82,5,1,-42,-42,127,38,-75,100,49,5, 
  /* [507][0][][] */ -70,-35,-2,85,57,-2,-39,46,-64,76,66,13,-11,30,44,-127, 
  /* [508][0][][] */ 24,-39,-60,-48,87,-1,-127,11,114,-39,27,-114,-29,-52,35,-10, 
  /* [509][0][][] */ -23,119,-34,61,64,24,-127,19,-109,8,34,24,-64,35,-90,13, 
  /* [510][0][][] */ 9,62,2,31,-44,47,-37,-64,104,-105,42,-127,90,-22,7,-9, 
  /* [511][0][][] */ -16,-127,74,22,10,-17,75,27,21,-30,5,-79,82,37,34,-26, 
  /* [512][0][][] */ 36,-100,68,-33,-51,57,110,-14,79,-127,-43,-63,-94,-6,-18,26, 
  /* [513][0][][] */ 29,45,26,-59,54,75,-2,-23,59,-62,21,-89,8,-3,-127,-65, 
  /* [514][0][][] */ 64,4,39,12,-58,89,44,-27,101,-84,1,-83,46,37,127,-36, 
  /* [515][0][][] */ 56,-68,-90,-60,-60,-123,-127,-38,23,-18,59,-27,65,-6,26,62, 
  /* [516][0][][] */ 60,-51,127,104,-46,-11,-35,-3,-74,29,43,-18,26,34,3,-112, 
  /* [517][0][][] */ -21,104,51,-6,127,-24,-88,14,-75,0,-11,-17,-4,-64,-93,-2, 
  /* [518][0][][] */ -15,4,-78,27,-1,96,100,7,-26,-82,34,127,5,-99,-44,26, 
  /* [519][0][][] */ -54,-86,-24,5,16,96,127,31,122,1,-15,-16,-51,62,-63,-35, 
  /* [520][0][][] */ 102,-46,-36,-95,1,33,48,-11,-81,0,-73,-84,76,127,-14,-110, 
  /* [521][0][][] */ -127,-54,64,-25,2,52,-19,-22,117,35,-20,-39,28,-27,57,6, 
  /* [522][0][][] */ -9,31,42,12,101,-39,77,127,26,4,-31,-37,69,-49,19,-58, 
  /* [523][0][][] */ 73,-19,-2,-124,68,127,-36,23,-58,-1,29,-31,-15,-55,16,1, 
  /* [524][0][][] */ 20,-21,38,-127,46,-62,-58,-36,24,-21,-20,8,121,42,-60,-14, 
  /* [525][0][][] */ -73,-6,3,-103,0,-123,-80,45,25,69,127,56,29,42,-72,116, 
  /* [526][0][][] */ -100,-4,-42,29,28,-53,0,-77,4,127,11,-9,107,-75,68,-42, 
  /* [527][0][][] */ -19,1,51,-89,-1,60,-61,-1,-26,33,127,92,-5,91,-70,12, 
  /* [528][0][][] */ -47,30,45,14,-25,-22,127,-36,66,-33,38,37,-45,-82,7,-90, 
  /* [529][0][][] */ 69,74,7,-9,93,-41,-127,11,18,11,51,16,-23,16,-23,26, 
  /* [530][0][][] */ 127,28,33,4,84,-67,-64,53,0,-9,-6,12,15,-6,7,-82, 
  /* [531][0][][] */ 29,52,-5,-33,-127,81,-37,-44,-49,-40,-5,14,55,46,-29,14, 
  /* [532][0][][] */ 66,-119,9,4,80,38,76,-79,-18,-13,40,-111,10,22,27,-127, 
  /* [533][0][][] */ -80,-52,-26,33,-84,22,-45,-117,-45,-50,-127,27,-81,-4,42,25, 
  /* [534][0][][] */ 73,-75,91,46,69,-46,127,62,2,-36,116,-49,-98,-37,56,-34, 
  /* [535][0][][] */ 9,-34,45,17,97,58,-64,-62,-8,-75,-29,40,34,127,-29,27, 
  /* [536][0][][] */ -39,-49,-45,57,102,32,127,58,-62,25,-55,-2,74,37,42,-10, 
  /* [537][0][][] */ -1,-16,-43,-94,-29,36,48,-59,7,41,78,-31,-43,-121,127,76, 
  /* [538][0][][] */ -22,10,56,-5,127,-37,-70,88,93,-24,-19,-51,25,-6,8,56, 
  /* [539][0][][] */ -48,-22,7,-40,10,127,-36,-108,0,-29,103,7,-35,96,6,84, 
  /* [540][0][][] */ -38,13,9,-43,87,52,-127,-83,13,3,-7,-34,124,125,13,13, 
  /* [541][0][][] */ -1,-20,-39,58,-100,-88,71,36,-62,49,-127,-4,105,-65,-28,-14, 
  /* [542][0][][] */ -95,23,46,-73,81,49,46,-102,10,-42,22,127,-25,-6,-20,105, 
  /* [543][0][][] */ 22,-39,47,-11,57,64,22,127,5,-54,84,-96,77,-122,12,26, 
  /* [544][0][][] */ 92,11,-3,-60,89,60,-95,-68,69,-37,8,-13,-101,-58,127,-6, 
  /* [545][0][][] */ -43,-127,7,-13,21,-47,-21,-37,-39,13,10,-24,43,-9,-69,7, 
  /* [546][0][][] */ 40,-59,-119,3,-26,-1,29,64,-127,48,-38,59,18,26,-21,9, 
  /* [547][0][][] */ -19,-7,-56,-57,66,-3,-3,5,12,-58,-6,127,-39,3,-33,15, 
  /* [548][0][][] */ 33,-89,-127,3,16,-1,1,42,58,124,-58,-16,-25,-9,53,38, 
  /* [549][0][][] */ -2,8,16,-33,127,-38,-1,29,-7,29,-79,18,-25,-8,16,-73, 
  /* [550][0][][] */ -28,-62,106,17,68,18,127,-13,54,-35,-92,69,119,-3,-42,-56, 
  /* [551][0][][] */ 42,-9,-58,69,-95,18,2,-17,127,-36,-18,-115,36,114,50,-84, 
  /* [552][0][][] */ 6,12,-3,19,14,24,127,-79,38,3,44,70,15,51,34,-69, 
  /* [553][0][][] */ 21,-115,-77,19,-24,-127,-21,-33,16,4,101,34,75,-23,52,32, 
  /* [554][0][][] */ 127,-62,5,-28,-116,6,35,-74,-23,-22,62,8,32,59,13,48, 
  /* [555][0][][] */ 78,33,-7,-47,-49,-17,-1,88,94,-127,13,89,71,-25,118,-65, 
  /* [556][0][][] */ 30,-43,43,4,-70,-14,14,31,-121,-5,16,11,-24,17,14,127, 
  /* [557][0][][] */ -69,54,-5,16,88,-7,49,127,31,-4,65,82,21,63,-6,-2, 
  /* [558][0][][] */ -24,-58,-44,-5,13,-24,-11,31,42,118,84,-61,-123,-23,127,-56, 
  /* [559][0][][] */ 8,-7,80,21,35,-25,-52,-4,29,85,127,-16,-22,-48,-16,-27, 
  /* [560][0][][] */ 27,9,-28,-70,-94,-53,26,97,35,-127,31,-30,-52,-11,67,18, 
  /* [561][0][][] */ 44,78,85,4,-64,-7,52,-90,6,93,-87,-17,5,-127,11,-13, 
  /* [562][0][][] */ 14,-97,4,-20,42,80,-127,-88,23,-36,38,-47,35,-29,-5,-28, 
  /* [563][0][][] */ -35,27,29,68,-43,-8,82,76,-62,99,6,99,-127,83,-31,23, 
  /* [564][0][][] */ 127,77,35,46,-31,-72,-5,-52,-119,103,-73,102,119,-32,37,27, 
  /* [565][0][][] */ -6,-127,-79,-69,107,-39,43,85,4,-4,-16,82,-28,-3,-92,31, 
  /* [566][0][][] */ -44,39,38,74,-8,-42,-127,62,99,-50,13,-56,82,1,25,-31, 
  /* [567][0][][] */ -62,-33,-18,62,-68,32,-58,-49,69,48,-98,-127,51,-68,72,-76, 
  /* [568][0][][] */ 11,118,1,-29,-79,-40,45,127,-18,-8,68,-13,-27,-11,-21,-28, 
  /* [569][0][][] */ -12,7,56,-12,127,13,60,28,34,18,-88,-22,24,-104,0,-43, 
  /* [570][0][][] */ 127,95,23,-47,55,89,83,14,-96,-75,-27,33,-35,37,57,107, 
  /* [571][0][][] */ 60,111,105,-1,-28,2,36,28,-87,-96,-127,-105,-68,-10,-55,80, 
  /* [572][0][][] */ -48,2,-21,-73,20,50,-47,-51,127,9,40,-80,-55,-48,-59,-16, 
  /* [573][0][][] */ 104,-11,88,17,-18,127,-4,-40,40,80,88,-72,69,-55,-17,-38, 
  /* [574][0][][] */ 33,68,6,64,121,9,-5,-42,16,-55,127,-84,74,-27,95,7, 
  /* [575][0][][] */ -92,-6,70,64,-39,-59,80,13,2,-11,24,-127,13,-6,-10,-85, 
  /* [576][0][][] */ 30,20,-65,32,38,-47,-24,-11,-64,-26,-127,36,-48,8,42,-8, 
  /* [577][0][][] */ -31,16,-41,-56,29,-35,-101,-23,-6,82,19,29,84,127,-7,-64, 
  /* [578][0][][] */ -74,-99,12,127,108,-77,-64,-46,119,-6,-2,-121,-112,16,55,-101, 
  /* [579][0][][] */ -11,52,88,-54,-9,-4,25,107,-4,-127,44,-36,-7,-45,-59,57, 
  /* [580][0][][] */ -35,29,25,34,0,-86,-82,31,-14,93,73,-43,-2,41,108,127, 
  /* [581][0][][] */ 127,-10,93,40,102,13,-100,-98,73,65,2,57,-122,34,17,-4, 
  /* [582][0][][] */ 11,-71,36,86,35,89,-14,7,19,-127,-55,-75,30,48,56,-30, 
  /* [583][0][][] */ -7,-25,-36,54,-15,-38,-52,-71,-6,16,41,-18,-127,-55,-62,-56, 
  /* [584][0][][] */ 9,-16,-32,-69,73,-31,-127,-115,65,93,38,49,-33,46,-2,45, 
  /* [585][0][][] */ 57,-17,45,-25,55,-55,9,91,-3,22,-67,6,55,-127,-36,-35, 
  /* [586][0][][] */ -58,-127,110,108,-44,8,37,13,109,61,123,1,97,48,87,118, 
  /* [587][0][][] */ 6,-28,-51,-43,-127,15,-2,5,-8,87,-4,42,24,-93,11,3, 
  /* [588][0][][] */ 38,24,-50,-27,-14,53,-118,-51,2,-8,127,-54,-67,-63,-72,-42, 
  /* [589][0][][] */ -108,-9,35,-17,-4,-22,13,-44,127,-49,115,-28,79,32,-35,31, 
  /* [590][0][][] */ -127,-4,-31,29,-52,50,44,-81,44,-63,39,6,99,64,59,50, 
  /* [591][0][][] */ 62,-22,-97,50,34,106,-127,34,3,-64,10,-47,-59,21,-67,-44, 
  /* [592][0][][] */ 14,127,-15,-32,-4,80,-16,57,-59,52,35,33,33,-14,85,-28, 
  /* [593][0][][] */ 20,-61,30,-50,-29,31,70,-32,7,-127,-27,-35,-57,-13,10,121, 
  /* [594][0][][] */ 34,-51,-22,-4,82,-38,-5,-127,66,-37,4,-19,5,48,99,-9, 
  /* [595][0][][] */ -15,-102,-38,-79,-55,34,-6,48,15,34,127,6,-103,28,-29,-1, 
  /* [596][0][][] */ 47,-72,-10,18,103,13,45,15,100,-27,25,-43,4,127,-79,-79, 
  /* [597][0][][] */ -83,-70,47,-61,44,-70,60,118,21,50,29,127,-20,-23,-36,83, 
  /* [598][0][][] */ -1,-18,-43,36,-96,61,-24,2,-51,-23,40,-105,17,-127,72,84, 
  /* [599][0][][] */ 6,-126,79,82,-14,-35,44,74,-97,127,27,60,109,-37,-50,38, 
  /* [600][0][][] */ 10,-8,-1,50,127,41,-88,-50,1,-37,-23,-125,2,-88,6,-58, 
  /* [601][0][][] */ 61,62,-35,-85,-55,73,84,90,127,80,0,-47,89,-22,38,-1, 
  /* [602][0][][] */ 18,-15,4,18,96,1,-60,106,-9,-43,-51,-75,127,-21,10,-105, 
  /* [603][0][][] */ -105,42,-72,-22,-94,25,-17,85,52,124,65,49,8,-27,-66,-127, 
  /* [604][0][][] */ 71,-23,-44,-27,-30,4,52,18,-72,13,22,0,43,-127,27,127, 
  /* [605][0][][] */ 55,58,55,-9,-71,127,48,1,-30,-39,0,-1,-26,86,37,22, 
  /* [606][0][][] */ -15,62,22,49,-51,-17,-45,-127,-6,106,-33,-66,-106,39,39,-14, 
  /* [607][0][][] */ -20,47,66,-95,54,19,127,-40,11,24,-68,71,-78,33,-35,-11, 
  /* [608][0][][] */ -63,-66,-50,49,27,92,127,85,104,39,16,-74,0,120,-33,43, 
  /* [609][0][][] */ -64,70,48,-79,22,7,-74,-9,75,71,0,18,-9,24,-127,-80, 
  /* [610][0][][] */ 15,-13,34,11,-6,56,25,55,27,-41,15,-28,82,-127,6,-25, 
  /* [611][0][][] */ -66,42,6,127,48,111,57,47,29,84,33,-4,112,-59,-20,-96, 
  /* [612][0][][] */ 70,73,127,-4,-26,-11,-26,-20,-94,20,-9,31,-30,-31,-21,-27, 
  /* [613][0][][] */ -64,38,64,37,0,49,121,127,60,-90,18,-57,-83,-12,39,54, 
  /* [614][0][][] */ -34,-70,-48,127,11,28,-29,-68,28,-22,24,-48,50,-23,-36,22, 
  /* [615][0][][] */ 42,80,-48,-23,68,-77,-20,86,127,-113,30,-2,63,5,0,-60, 
  /* [616][0][][] */ -57,53,-69,24,30,-39,50,109,127,27,-16,-66,-60,97,-17,-50, 
  /* [617][0][][] */ -13,89,-125,34,47,-56,113,28,42,122,74,127,24,5,91,17, 
  /* [618][0][][] */ -14,-16,48,21,7,37,75,40,127,-88,48,68,-50,33,11,97, 
  /* [619][0][][] */ 69,-21,-48,7,-25,4,53,46,-41,127,64,-31,77,11,52,-22, 
  /* [620][0][][] */ -61,12,32,-87,-66,127,-74,25,3,65,-62,-7,61,-88,-47,-8, 
  /* [621][0][][] */ -18,-44,20,-8,91,35,31,-50,17,-8,82,20,-39,-127,63,-54, 
  /* [622][0][][] */ -65,68,-112,112,-7,-127,-107,39,-14,99,-108,-54,-14,33,37,113, 
  /* [623][0][][] */ -24,30,28,-15,5,120,16,-60,99,-17,-31,-127,-100,43,9,62, 
  /* [624][0][][] */ -6,18,25,-38,62,-24,-43,-60,47,42,23,6,7,127,-2,-56, 
  /* [625][0][][] */ 88,31,51,20,127,-41,48,103,64,8,-90,54,-20,32,7,-113, 
  /* [626][0][][] */ 7,54,24,-21,-14,17,32,-13,-127,52,12,21,51,3,-46,-77, 
  /* [627][0][][] */ 28,-37,-100,-2,86,48,-63,-35,-127,-56,-7,98,88,0,81,-5, 
  /* [628][0][][] */ 6,127,-86,45,27,38,38,45,-107,37,33,38,35,48,-14,-42, 
  /* [629][0][][] */ 71,-75,-63,-48,-89,-25,127,112,-1,32,41,9,109,-27,72,11, 
  /* [630][0][][] */ 53,-15,-66,-26,93,-115,-10,-10,-34,76,127,7,76,-97,63,1, 
  /* [631][0][][] */ -53,23,-26,-62,27,3,127,-15,30,-13,-31,115,-22,-43,-20,-7, 
  /* [632][0][][] */ -49,-57,-7,57,-83,67,52,-127,-60,-18,88,105,99,19,44,23, 
  /* [633][0][][] */ 23,-94,-35,41,-81,-21,58,-41,-85,127,-18,-78,-32,4,13,-85, 
  /* [634][0][][] */ -23,-5,-30,-32,8,-24,-127,31,-20,-16,-26,21,10,-41,-40,34, 
  /* [635][0][][] */ 20,62,73,26,-60,-45,17,-79,12,127,-6,17,114,-79,15,-1, 
  /* [636][0][][] */ 75,40,3,26,76,127,-8,-89,2,-77,-34,9,93,14,73,-54, 
  /* [637][0][][] */ 28,-55,-16,2,-51,-53,-25,33,64,40,127,-24,-6,3,39,14, 
  /* [638][0][][] */ 33,58,62,-56,-17,77,78,-57,13,-127,71,67,105,29,7,-11, 
  /* [639][0][][] */ 30,0,127,11,67,40,-46,7,22,7,-23,-3,71,-19,-7,-98, 
  /* [640][0][][] */ -68,-1,78,64,-17,108,-54,-63,-14,60,-127,-69,54,12,-72,-64, 
  /* [641][0][][] */ -40,0,51,-89,-23,17,-75,-45,-58,84,-39,127,34,-31,-8,106, 
  /* [642][0][][] */ 34,-21,38,-39,-24,-99,106,27,44,-127,69,95,49,10,102,-26, 
  /* [643][0][][] */ -127,5,32,-127,23,-38,111,-17,-10,20,-92,41,68,5,1,-61, 
  /* [644][0][][] */ -28,5,20,-89,-27,61,127,68,52,10,37,-6,86,89,-30,3, 
  /* [645][0][][] */ 28,17,84,50,-43,27,-104,0,15,-47,60,86,-41,5,-45,-127, 
  /* [646][0][][] */ -98,-36,-35,38,13,29,-12,44,127,73,92,-61,-11,42,19,3, 
  /* [647][0][][] */ -12,-14,31,79,-63,-127,15,-68,45,27,-1,5,-48,-17,121,-4, 
  /* [648][0][][] */ 27,8,83,-121,59,22,-27,-45,68,29,94,21,-47,11,41,-127, 
  /* [649][0][][] */ -92,121,30,93,-76,39,127,106,-66,-28,29,-34,58,-35,-1,-42, 
  /* [650][0][][] */ -19,-35,-5,-33,127,20,32,-33,10,-22,26,-12,17,-57,36,98, 
  /* [651][0][][] */ 45,42,-80,24,-64,118,77,31,52,-127,49,13,46,5,-59,-52, 
  /* [652][0][][] */ -14,69,7,-22,27,-39,-42,-23,56,-24,11,5,-25,-41,-6,-127, 
  /* [653][0][][] */ 9,-71,61,-43,-5,66,-71,30,75,9,71,-127,-64,12,-20,-72, 
  /* [654][0][][] */ 94,45,22,52,-40,40,86,-127,4,-124,-44,41,-45,-113,-38,-92, 
  /* [655][0][][] */ 24,3,-19,36,17,-29,50,47,53,-15,127,35,14,-20,-6,-1, 
  /* [656][0][][] */ 127,-10,-18,10,25,2,85,56,121,-29,-13,-21,26,2,-53,-57, 
  /* [657][0][][] */ -50,-53,127,126,109,-49,43,20,-6,65,-35,44,-27,40,-50,-41, 
  /* [658][0][][] */ -68,-26,30,-86,-30,-17,-127,9,117,67,-40,-94,-63,6,-67,-52, 
  /* [659][0][][] */ 106,-84,-59,89,72,-34,-84,-25,116,127,-105,-61,-91,22,-7,5, 
  /* [660][0][][] */ 127,30,-32,-14,-6,41,-19,-51,-41,-4,-33,-2,-4,-8,-70,6, 
  /* [661][0][][] */ -50,46,12,-127,63,73,83,-73,-17,-96,13,112,22,14,-8,124, 
  /* [662][0][][] */ -25,-53,-12,45,-25,-64,34,87,-71,-31,-45,-30,50,127,-101,77, 
  /* [663][0][][] */ 16,-3,40,43,60,-27,-55,-71,17,-73,-94,-16,127,-7,2,-119, 
  /* [664][0][][] */ 3,-24,2,-55,2,28,-15,51,37,34,56,-54,86,26,-4,127, 
  /* [665][0][][] */ -14,40,63,0,-14,-110,106,124,-74,26,109,-127,-102,2,50,5, 
  /* [666][0][][] */ 48,30,127,-8,-20,-5,30,5,-82,14,0,12,71,-19,49,-122, 
  /* [667][0][][] */ 45,19,-93,-127,-59,-116,43,73,75,5,-69,59,8,10,47,54, 
  /* [668][0][][] */ -29,-54,-30,-33,-36,32,-30,-74,-33,81,28,-95,-127,30,104,16, 
  /* [669][0][][] */ 32,1,103,21,42,-58,125,-101,-69,66,4,-13,-110,-49,127,-37, 
  /* [670][0][][] */ 57,38,-49,-68,37,-23,-127,-26,8,7,-49,21,61,-2,31,4, 
  /* [671][0][][] */ -54,-3,36,67,104,14,98,68,9,38,-28,26,127,-73,77,-96, 
  /* [672][0][][] */ 0,-36,12,-127,-42,-22,2,9,-25,-16,23,-12,9,-74,39,106, 
  /* [673][0][][] */ -47,-112,13,-33,102,81,99,0,28,-26,-55,127,5,63,-95,39, 
  /* [674][0][][] */ 19,96,1,-15,30,-55,127,52,41,-84,34,13,29,5,32,16, 
  /* [675][0][][] */ -4,-19,65,-93,-8,-21,-117,-61,118,69,103,102,-114,34,-127,-90, 
  /* [676][0][][] */ -15,-42,43,24,52,35,-24,-127,11,69,-41,-66,-47,-5,-109,62, 
  /* [677][0][][] */ 42,-49,-50,-56,-8,-59,-13,45,-36,3,1,-5,1,6,-127,-11, 
  /* [678][0][][] */ 127,-4,116,-72,34,-15,122,41,-124,-77,-104,8,-45,52,30,-91, 
  /* [679][0][][] */ 40,-3,20,67,-58,-37,-73,14,-29,62,-3,17,-127,19,35,97, 
  /* [680][0][][] */ -82,-20,-127,-87,82,-44,40,23,-30,103,-78,-25,-33,9,-126,108, 
  /* [681][0][][] */ -94,20,-16,-26,85,114,-49,38,58,33,127,10,73,-67,-23,-72, 
  /* [682][0][][] */ -10,-30,13,-27,62,9,34,33,55,57,118,11,1,-127,-58,92, 
  /* [683][0][][] */ 80,37,-54,-37,127,-20,-122,-35,56,85,-16,36,-11,48,-88,-86, 
  /* [684][0][][] */ -82,-36,-73,-60,-97,-89,19,127,-27,14,-40,-39,-38,-1,0,56, 
  /* [685][0][][] */ -61,7,9,-33,-21,43,-13,-75,-93,36,-6,4,-17,-127,-6,48, 
  /* [686][0][][] */ 74,22,120,-92,-22,22,-18,62,53,127,39,-53,-38,-40,47,83, 
  /* [687][0][][] */ -3,6,29,-16,15,95,127,-16,38,-27,-67,-66,96,-83,0,-88, 
  /* [688][0][][] */ 59,9,53,122,-125,-52,-14,-55,57,-6,-31,45,127,28,-24,-79, 
  /* [689][0][][] */ -111,-127,20,61,-46,-56,63,-53,33,-31,59,13,24,22,79,-37, 
  /* [690][0][][] */ -25,-6,-39,127,50,-77,30,29,100,-9,-52,-25,93,29,77,-45, 
  /* [691][0][][] */ 69,-59,-41,-14,97,0,59,104,-46,58,28,49,127,-34,-75,-84, 
  /* [692][0][][] */ -70,-25,-26,-85,48,-120,-44,-116,99,60,10,17,95,127,-1,-60, 
  /* [693][0][][] */ -100,-75,-75,-18,3,-23,127,-9,114,67,18,59,46,-30,14,-75, 
  /* [694][0][][] */ 117,-59,-53,-102,-77,-97,-35,-78,4,-8,36,29,52,4,127,68, 
  /* [695][0][][] */ -127,-26,-31,6,-55,94,3,-60,-118,85,43,0,26,-91,21,36, 
  /* [696][0][][] */ 5,9,-6,1,26,13,-12,-69,-26,25,-27,11,63,-102,13,-127, 
  /* [697][0][][] */ -38,11,-22,8,-13,6,11,18,2,48,-79,-19,-81,12,-127,-20, 
  /* [698][0][][] */ -1,127,-37,-38,-39,8,24,53,-99,-58,-63,53,-8,-57,-96,30, 
  /* [699][0][][] */ 48,21,-86,127,37,-105,-19,76,53,57,27,-70,-72,-40,0,22, 
  /* [700][0][][] */ 89,-41,9,-48,-94,49,127,28,-45,-63,13,77,120,19,-34,13, 
  /* [701][0][][] */ 55,-95,103,56,61,70,60,-62,-5,15,127,-90,-120,107,-110,-34, 
  /* [702][0][][] */ 127,-25,-3,-78,46,-86,-13,-11,47,41,69,73,59,-25,-16,-21, 
  /* [703][0][][] */ -17,-127,10,53,9,-16,59,97,-2,21,-66,-17,35,34,-34,89, 
  /* [704][0][][] */ -32,-89,40,127,69,-2,117,123,6,71,40,-41,28,107,119,15, 
  /* [705][0][][] */ -35,14,113,-22,52,-32,122,25,-62,15,18,74,127,52,30,42, 
  /* [706][0][][] */ -2,-73,9,-9,12,48,-66,-38,-14,91,69,-95,5,-127,62,55, 
  /* [707][0][][] */ 83,-34,94,-20,-127,-51,-10,-5,67,-43,30,-98,18,-2,3,-6, 
  /* [708][0][][] */ -22,78,-96,49,-101,-39,12,-41,64,-127,-1,31,59,81,-69,69, 
  /* [709][0][][] */ 1,-9,-92,-122,65,-59,110,-39,49,30,-71,37,123,34,-23,-127, 
  /* [710][0][][] */ 43,30,12,-50,-39,127,27,-28,-63,14,40,-56,-44,53,-53,48, 
  /* [711][0][][] */ 117,-64,-110,-127,91,86,1,70,-1,37,94,18,-43,17,-47,-2, 
  /* [712][0][][] */ 66,32,-62,35,36,2,-127,-1,-2,-59,34,-40,-68,-8,-70,-70, 
  /* [713][0][][] */ -90,-44,13,-51,127,-28,37,-22,14,2,15,34,72,-33,27,43, 
  /* [714][0][][] */ 5,-37,-127,-3,75,-19,51,-7,17,32,-26,35,0,-123,16,-32, 
  /* [715][0][][] */ -78,-6,-7,-51,-55,59,-54,-33,127,26,77,-60,84,74,-20,93, 
  /* [716][0][][] */ -32,63,-127,23,93,-71,50,5,-62,17,48,92,50,-79,70,-100, 
  /* [717][0][][] */ -20,38,40,127,111,-38,68,40,8,54,90,-6,-52,37,9,-38, 
  /* [718][0][][] */ -75,19,35,24,21,33,-100,-19,49,108,-78,-124,42,127,0,-49, 
  /* [719][0][][] */ -44,70,50,-10,3,-26,-57,-12,-99,127,61,40,-33,-46,33,20, 
  /* [720][0][][] */ -17,119,-53,51,-22,-14,-11,-31,19,40,42,127,-46,11,54,34, 
  /* [721][0][][] */ 66,-72,26,-35,-87,41,51,95,72,-39,127,18,-50,12,-5,-34, 
  /* [722][0][][] */ 12,-62,-78,-23,58,127,91,32,-39,57,114,69,72,18,8,-115, 
  /* [723][0][][] */ 14,-7,49,79,50,-61,105,66,-68,-127,40,-66,-25,-76,32,-2, 
  /* [724][0][][] */ -17,66,7,41,-18,-85,40,1,17,127,-72,-22,-44,-12,84,32, 
  /* [725][0][][] */ -44,21,-15,-12,36,-46,19,-1,10,-27,11,34,-10,127,4,-50, 
  /* [726][0][][] */ 54,116,41,-50,-45,10,-56,59,-82,127,45,-63,-44,-23,-80,-67, 
  /* [727][0][][] */ 22,50,81,13,70,71,-20,-13,-16,-29,-20,-27,32,-12,40,127, 
  /* [728][0][][] */ -64,-29,64,13,-34,25,61,-20,-27,47,-13,-17,127,-28,82,12, 
  /* [729][0][][] */ 18,-113,78,50,-72,28,47,-61,42,112,44,-43,127,20,31,-125, 
  /* [730][0][][] */ -25,-87,-63,57,-71,23,-118,37,-89,69,-21,-107,127,-88,75,108, 
  /* [731][0][][] */ -127,-4,-44,-90,101,5,-66,77,46,-58,32,-65,36,53,62,-106, 
  /* [732][0][][] */ 100,-32,-90,127,93,11,-4,42,52,-31,-100,85,82,-88,-94,-34, 
  /* [733][0][][] */ -7,39,11,-21,-12,35,112,52,-9,-15,-67,75,-77,-127,14,7, 
  /* [734][0][][] */ 127,-19,40,-67,6,-7,47,-6,-5,80,6,28,-66,109,-47,57, 
  /* [735][0][][] */ -79,60,-54,-62,11,103,13,127,29,13,82,-24,-47,-46,-73,48, 
  /* [736][0][][] */ 24,127,11,38,2,64,50,114,121,-17,118,-35,114,93,75,27, 
  /* [737][0][][] */ 112,8,2,-37,-89,62,127,18,-70,70,82,-7,19,-11,-27,-76, 
  /* [738][0][][] */ -54,-43,2,64,-18,-46,-46,-17,43,33,20,42,93,111,127,-37, 
  /* [739][0][][] */ 65,-44,-26,-38,-54,-46,14,67,127,38,126,-2,-58,77,14,110, 
  /* [740][0][][] */ 46,51,-120,-54,-126,58,83,17,-40,47,-66,127,-49,-39,26,-16, 
  /* [741][0][][] */ 127,41,-9,-16,-69,114,-76,55,93,-22,7,119,72,112,-57,29, 
  /* [742][0][][] */ -76,17,50,-43,88,118,-22,-26,-73,-127,-95,64,64,-3,-70,-43, 
  /* [743][0][][] */ 0,-21,-57,-75,-53,127,76,-96,-24,-49,-124,24,20,-14,-45,-9, 
  /* [744][0][][] */ -23,-14,-26,-37,60,-42,72,13,44,0,-127,-19,-85,-55,7,0, 
  /* [745][0][][] */ -11,-38,53,-32,-65,-127,-37,61,-41,42,-72,-39,3,10,20,-18, 
  /* [746][0][][] */ 127,-104,15,22,-50,8,85,-14,22,68,1,-73,28,46,33,-109, 
  /* [747][0][][] */ -28,2,46,-72,27,50,-9,-82,-3,34,0,-11,38,-127,51,-74, 
  /* [748][0][][] */ -66,101,48,-106,122,22,123,-22,127,-16,-98,-31,106,-80,43,13, 
  /* [749][0][][] */ -54,36,-22,-127,27,41,62,43,44,13,-12,27,81,11,-41,69, 
  /* [750][0][][] */ -1,19,5,22,1,27,41,-34,-75,-127,59,-1,77,-17,-76,45, 
  /* [751][0][][] */ -32,2,47,-5,108,-53,127,-28,72,48,-16,13,-24,101,-67,-81, 
  /* [752][0][][] */ 3,56,6,50,62,70,-118,-127,-18,47,108,32,77,-5,-119,-89, 
  /* [753][0][][] */ 26,-123,-34,54,-65,-13,-86,19,-32,42,52,-123,109,-61,117,127, 
  /* [754][0][][] */ -5,-33,0,-32,9,-4,-12,39,-66,52,-71,18,-2,-14,-127,28, 
  /* [755][0][][] */ 126,-67,-6,48,5,-55,-12,-32,127,-63,108,-112,71,84,75,-63, 
  /* [756][0][][] */ 99,-15,41,12,119,-65,-59,127,-6,35,13,21,89,44,71,100, 
  /* [757][0][][] */ 29,-82,19,23,-78,79,-53,-127,87,-26,82,-46,50,-28,100,21, 
  /* [758][0][][] */ 20,64,-19,52,45,3,-31,127,-56,-61,14,20,68,-122,-39,13, 
  /* [759][0][][] */ 10,-11,-49,-78,-33,11,33,8,34,74,13,-15,39,-32,127,-26, 
  /* [760][0][][] */ 86,-20,49,16,18,-116,-127,59,-8,59,-30,-50,-26,-81,20,44, 
  /* [761][0][][] */ 21,-18,-101,-6,-108,-22,-36,-97,-127,-25,1,34,-6,-98,-6,42, 
  /* [762][0][][] */ -9,-2,-62,-2,26,-113,-15,14,-39,69,13,55,100,-25,70,-127, 
  /* [763][0][][] */ 114,-106,-53,22,60,35,-37,12,34,-49,50,-74,34,-52,-8,-127, 
  /* [764][0][][] */ -23,46,-19,-49,31,2,16,42,-15,30,-17,34,127,-3,-9,-95, 
  /* [765][0][][] */ -29,23,-6,86,-17,4,96,56,3,35,89,-30,33,-67,127,47, 
  /* [766][0][][] */ -70,-4,53,37,-51,-103,0,1,-32,113,23,-5,8,-69,72,-127, 
  /* [767][0][][] */ 57,41,3,36,27,90,-17,-72,28,95,-2,-97,15,-51,127,-82, 
  /* [768][0][][] */ -30,-126,-41,21,76,63,23,127,23,-67,-43,-9,-34,13,-85,-46, 
  /* [769][0][][] */ -69,22,10,-44,13,17,127,-71,114,8,58,96,-14,95,-31,3, 
  /* [770][0][][] */ -74,11,42,-39,-101,127,122,62,17,-118,-41,21,42,-27,38,-21, 
  /* [771][0][][] */ 9,-86,114,-62,23,-72,47,16,68,78,-92,127,-110,-2,51,27, 
  /* [772][0][][] */ -26,-61,52,-47,-60,-66,11,-127,0,-25,-23,-25,54,-11,70,32, 
  /* [773][0][][] */ 111,-65,-127,60,115,73,-60,48,-8,-105,-47,-107,66,98,9,68, 
  /* [774][0][][] */ 23,-127,-27,45,22,6,23,-23,6,32,28,15,-5,30,57,-10, 
  /* [775][0][][] */ -40,0,58,-39,-96,-27,38,127,10,-28,-17,-12,-55,-39,-39,68, 
  /* [776][0][][] */ 49,-41,47,-12,30,-116,75,40,-32,-42,-6,-27,74,11,127,-10, 
  /* [777][0][][] */ -21,74,-69,-9,65,19,-12,81,127,-23,0,-56,119,91,-10,-47, 
  /* [778][0][][] */ 92,0,-42,-20,-18,-65,55,127,25,-73,122,33,-3,36,59,-2, 
  /* [779][0][][] */ -26,-7,29,20,6,68,105,-100,-40,-79,15,90,14,70,55,127, 
  /* [780][0][][] */ -53,-111,-16,76,-20,59,16,-19,73,27,100,-118,74,24,127,34, 
  /* [781][0][][] */ 109,-39,115,29,115,89,-15,55,-127,12,94,112,-84,-47,-58,52, 
  /* [782][0][][] */ -39,41,68,-17,81,-19,127,21,-21,-30,-47,6,7,5,-3,-37, 
  /* [783][0][][] */ -127,-3,-16,-68,78,-12,0,31,-5,103,-44,-6,-94,-22,-81,64, 
  /* [784][0][][] */ -26,-1,1,-25,-14,39,127,51,-80,43,21,32,-24,-38,-43,-108, 
  /* [785][0][][] */ 127,-17,23,48,42,37,-36,10,23,43,-25,-37,52,36,-21,-17, 
  /* [786][0][][] */ -32,49,17,-34,22,70,58,-41,48,-51,21,22,-71,50,27,127, 
  /* [787][0][][] */ -21,-20,83,-17,35,-127,48,-58,-24,31,12,-22,6,23,48,-31, 
  /* [788][0][][] */ 90,127,17,6,10,57,-73,77,-1,-101,-109,-25,16,8,36,-31, 
  /* [789][0][][] */ -5,-31,18,82,40,-21,-20,30,-12,-75,4,30,127,20,-5,4, 
  /* [790][0][][] */ -56,-15,-26,12,-11,0,-60,-4,122,-13,-127,44,-50,-57,-72,35, 
  /* [791][0][][] */ 56,16,-27,35,54,127,-56,56,80,54,40,55,15,32,-57,-106, 
  /* [792][0][][] */ 9,-63,-79,13,-52,-11,76,-25,127,-55,-41,-20,37,0,71,-6, 
  /* [793][0][][] */ -22,-127,92,10,13,91,117,36,52,-28,90,-11,61,106,-68,42, 
  /* [794][0][][] */ 36,48,62,75,-49,-31,-20,108,13,-100,72,-127,27,115,23,-51, 
  /* [795][0][][] */ -18,-70,5,-8,-47,79,-55,-57,-42,-19,66,-127,87,13,15,33, 
  /* [796][0][][] */ 26,-107,-46,16,21,-127,41,10,-95,47,-10,3,-59,4,-29,-1, 
  /* [797][0][][] */ -57,-31,37,-29,-32,127,-86,6,7,71,19,-71,75,-117,36,21, 
  /* [798][0][][] */ -68,-48,117,-79,83,-69,-2,-37,111,28,-16,26,37,-33,127,26, 
  /* [799][0][][] */ 35,6,-38,3,11,-12,22,-87,53,20,48,22,26,26,127,4, 
  /* [800][0][][] */ -36,-43,-34,98,-12,18,-18,-122,30,34,-20,5,9,-8,9,-127, 
  /* [801][0][][] */ 49,-58,20,-18,-3,-77,0,-25,-42,-54,-35,87,-52,-15,-15,127, 
  /* [802][0][][] */ -53,-15,9,-57,39,-3,-23,44,-127,36,-5,-74,7,38,58,-93, 
  /* [803][0][][] */ 44,-43,16,3,-6,69,-73,-123,-26,36,11,-43,-127,29,70,122, 
  /* [804][0][][] */ 17,106,79,-74,47,15,-13,-2,-18,54,-56,-127,-26,-67,76,11, 
  /* [805][0][][] */ 1,18,38,-106,13,-24,127,6,80,-73,-16,102,-59,-15,-21,124, 
  /* [806][0][][] */ 40,-25,-9,-127,-6,119,-72,78,-25,-1,-19,-41,-8,-93,-50,63, 
  /* [807][0][][] */ -9,53,-56,32,-54,-10,127,-91,-81,83,32,62,46,99,10,30, 
  /* [808][0][][] */ -82,127,-57,-36,-27,-23,-10,26,117,-2,71,-2,-38,35,62,-19, 
  /* [809][0][][] */ -68,-59,-66,-65,23,92,-71,97,40,-68,127,-108,-31,37,-85,21, 
  /* [810][0][][] */ 3,-109,-30,15,-6,-55,127,25,-15,-43,-5,39,6,7,89,26, 
  /* [811][0][][] */ -7,-17,7,68,68,22,58,-20,-127,39,-3,7,-16,-89,-63,-26, 
  /* [812][0][][] */ 49,-73,-127,35,-18,4,35,-86,21,-34,106,89,-1,-79,61,36, 
  /* [813][0][][] */ -9,-40,-127,-45,-53,1,42,-37,72,34,10,-27,102,28,-17,-91, 
  /* [814][0][][] */ -20,15,-8,1,-12,17,20,-66,-3,-43,-7,71,127,47,-2,30, 
  /* [815][0][][] */ -127,28,-69,-70,78,12,-29,-66,-17,44,39,127,98,-11,-63,42, 
  /* [816][0][][] */ -22,39,-16,1,77,-50,-115,43,34,-43,14,58,66,-12,-127,50, 
  /* [817][0][][] */ 49,9,-127,-115,-2,-63,-14,-1,85,22,85,18,83,84,-37,-52, 
  /* [818][0][][] */ -18,14,-28,103,18,24,127,0,38,42,-97,-45,-20,-12,-5,-13, 
  /* [819][0][][] */ 23,37,99,-65,-2,9,22,-7,5,7,48,8,127,-24,-47,-95, 
  /* [820][0][][] */ -75,28,75,70,54,89,13,-127,35,10,-13,3,5,-66,21,-9, 
  /* [821][0][][] */ 15,27,82,-41,76,-22,29,1,8,93,127,97,55,-19,-19,-56, 
  /* [822][0][][] */ 50,44,-56,-1,58,91,-127,-65,-40,9,56,20,10,-29,38,-70, 
  /* [823][0][][] */ 54,-22,11,73,8,-59,59,-23,127,-9,10,-4,-29,71,19,-66, 
  /* [824][0][][] */ -91,8,-10,3,-120,42,15,-127,-22,-62,-50,-14,-10,-46,110,31, 
  /* [825][0][][] */ -40,-9,-105,-15,-99,2,-30,-14,125,19,4,-1,127,58,16,-34, 
  /* [826][0][][] */ -78,-10,-24,-9,-80,91,-39,-72,-127,46,-22,24,89,52,77,47, 
  /* [827][0][][] */ 33,99,71,1,75,127,-55,-6,-48,32,-46,-26,17,-50,-33,-20, 
  /* [828][0][][] */ 26,-4,127,-38,-73,60,73,62,10,58,5,-94,-9,16,22,19, 
  /* [829][0][][] */ -71,-39,49,-84,-18,48,64,0,-20,43,67,74,65,-61,-127,-23, 
  /* [830][0][][] */ 110,42,14,28,39,127,1,112,-5,54,22,27,-25,-96,-61,-33, 
  /* [831][0][][] */ -50,52,24,77,-104,-24,3,-47,-3,17,-18,10,127,-19,60,19, 
  /* [832][0][][] */ 89,32,-22,-3,-20,127,30,-83,44,94,-47,59,14,28,-10,-94, 
  /* [833][0][][] */ -79,-66,-51,28,127,32,-112,55,35,98,-46,-19,33,-99,8,71, 
  /* [834][0][][] */ -14,127,-13,20,-39,31,-1,58,-6,58,32,-43,59,5,18,3, 
  /* [835][0][][] */ 115,-1,84,-83,9,1,-37,22,-100,-1,91,-127,-96,-65,3,-89, 
  /* [836][0][][] */ 29,-33,59,80,39,47,1,-80,50,-45,75,-127,-86,-15,-1,-93, 
  /* [837][0][][] */ -47,127,4,-79,-26,88,112,53,-24,3,48,-113,-35,-62,46,-18, 
  /* [838][0][][] */ -25,43,18,-127,28,-11,108,-89,-4,96,-18,69,11,0,-57,-61, 
  /* [839][0][][] */ -125,35,59,47,-76,38,79,-94,95,-5,12,1,-127,100,-27,44, 
  /* [840][0][][] */ 56,-8,127,72,123,-71,72,-60,9,-88,-70,43,-26,18,70,0, 
  /* [841][0][][] */ 86,54,-22,-127,50,-101,123,-24,21,4,-85,104,-115,10,-16,-88, 
  /* [842][0][][] */ -14,-4,-35,44,15,-21,-22,-33,-48,14,-87,21,7,40,-17,127, 
  /* [843][0][][] */ -111,29,38,-120,-73,36,-3,90,127,92,14,-50,-4,-46,-5,84, 
  /* [844][0][][] */ 76,-6,-58,48,36,-55,-49,23,49,-72,10,127,-25,-21,33,70, 
  /* [845][0][][] */ -22,-53,76,79,-61,-127,36,93,-4,89,-71,8,33,74,-111,70, 
  /* [846][0][][] */ -25,5,-9,127,-41,-47,58,63,34,78,31,-52,37,8,-79,-73, 
  /* [847][0][][] */ -127,61,-42,9,101,120,109,-20,107,40,-36,-43,58,47,50,69, 
  /* [848][0][][] */ 0,-37,-60,80,-127,87,-63,-10,-64,-13,60,-39,75,-3,48,88, 
  /* [849][0][][] */ 20,2,112,-8,39,75,46,10,127,-41,-12,-35,26,46,66,-37, 
  /* [850][0][][] */ 22,-42,-12,16,122,104,-7,13,89,-56,-32,-127,84,87,120,47, 
  /* [851][0][][] */ 13,-75,14,46,59,65,-33,-47,127,-59,58,32,-5,42,-4,-19, 
  /* [852][0][][] */ 42,0,16,-127,34,-101,-109,67,-19,70,15,-88,90,-62,-26,-4, 
  /* [853][0][][] */ -101,-97,21,-21,-127,0,42,50,1,38,43,-32,-29,14,-1,-80, 
  /* [854][0][][] */ 25,-4,-7,65,-76,-43,-80,12,63,127,50,-16,26,24,34,57, 
  /* [855][0][][] */ -90,-92,-36,86,-40,-5,127,16,29,50,-74,-103,-79,101,52,103, 
  /* [856][0][][] */ -111,53,25,-75,2,26,18,-80,-59,24,56,27,127,55,-41,-7, 
  /* [857][0][][] */ 95,20,37,-127,69,-43,49,98,81,-100,16,25,-69,-35,-94,-81, 
  /* [858][0][][] */ -53,-97,-48,-96,-43,94,89,-73,-55,72,36,-4,64,-127,35,70, 
  /* [859][0][][] */ -81,-41,-56,49,-102,46,-87,-32,127,-18,104,-36,-90,4,-32,-28, 
  /* [860][0][][] */ 82,119,26,-40,12,2,66,-55,12,38,34,28,7,127,40,12, 
  /* [861][0][][] */ -17,35,5,5,18,48,-127,-5,-70,22,-5,-20,10,106,-17,59, 
  /* [862][0][][] */ 14,-54,-98,1,64,0,15,61,127,15,32,18,-9,32,-5,-84, 
  /* [863][0][][] */ 62,51,-89,-47,46,-71,-22,-46,15,127,87,45,-123,-88,-22,-53, 
  /* [864][0][][] */ 31,8,-10,42,-85,-13,78,76,127,10,71,-77,60,-18,18,19, 
  /* [865][0][][] */ -42,-59,-74,-7,-9,35,81,-69,4,-10,-35,12,127,65,99,-49, 
  /* [866][0][][] */ -16,-15,7,31,63,15,127,21,-65,-79,-70,82,22,-21,-19,16, 
  /* [867][0][][] */ 11,5,1,127,88,36,-85,51,95,-15,82,22,-1,-50,-63,-75, 
  /* [868][0][][] */ -127,67,-51,23,1,81,-37,-21,-3,10,57,69,94,37,67,-93, 
  /* [869][0][][] */ -126,-55,-9,-35,3,-20,-75,-85,-52,2,51,52,97,-127,-54,86, 
  /* [870][0][][] */ -78,-127,-20,-28,38,1,57,-2,1,66,89,63,77,-100,-48,-39, 
  /* [871][0][][] */ -26,-15,7,5,28,-16,-4,21,0,101,-26,-40,127,-63,79,30, 
  /* [872][0][][] */ -29,-53,-44,0,5,-87,-24,-127,3,-47,42,54,64,24,-12,5, 
  /* [873][0][][] */ -16,29,39,53,50,47,91,-14,-79,24,-79,33,-46,-36,41,-127, 
  /* [874][0][][] */ 113,95,-42,4,17,-83,41,127,-22,-32,-26,41,27,-31,6,3, 
  /* [875][0][][] */ -127,20,15,18,93,-12,98,27,64,-80,-59,-37,18,-9,12,11, 
  /* [876][0][][] */ -19,-65,39,58,-64,-4,-114,27,127,-71,114,-118,-98,28,94,119, 
  /* [877][0][][] */ 127,-19,51,-11,67,-47,86,40,0,106,-8,7,-18,-18,-17,-77, 
  /* [878][0][][] */ 30,94,22,-13,20,29,-18,-120,-22,81,9,-88,-8,29,109,-127, 
  /* [879][0][][] */ 127,-87,0,121,-95,46,13,-25,-28,37,5,-78,74,75,81,-63, 
  /* [880][0][][] */ 70,-17,0,103,-44,-127,-30,63,42,3,-54,13,53,107,-33,-84, 
  /* [881][0][][] */ -46,6,97,-60,-49,58,-31,68,-70,-112,50,127,-24,6,-117,81, 
  /* [882][0][][] */ -77,78,64,-45,127,79,-109,26,32,77,21,37,51,-59,-43,-40, 
  /* [883][0][][] */ 16,23,0,-54,37,-45,68,-65,-15,51,-20,-127,19,18,-72,-31, 
  /* [884][0][][] */ 40,48,-20,-27,2,-12,-8,-29,9,44,-113,118,34,24,32,-127, 
  /* [885][0][][] */ -112,64,22,32,81,-127,-108,126,-28,-14,-109,55,6,-81,64,12, 
  /* [886][0][][] */ 36,-39,52,28,44,-97,65,16,57,127,-49,-66,39,-84,67,-125, 
  /* [887][0][][] */ -11,85,33,-2,76,-30,-39,-55,41,60,-25,57,-127,101,49,-2, 
  /* [888][0][][] */ 32,46,2,-2,-96,14,-31,45,2,-7,1,-23,-127,-4,-38,14, 
  /* [889][0][][] */ 69,8,14,8,-5,-70,-127,-30,42,-52,49,-56,62,74,52,-34, 
  /* [890][0][][] */ -40,34,-68,19,-17,57,-5,-127,-35,12,-69,4,-78,-40,11,13, 
  /* [891][0][][] */ -77,-35,43,4,53,44,12,-40,127,10,19,7,-14,-8,-48,-32, 
  /* [892][0][][] */ 9,11,19,64,48,-25,30,-50,-54,-13,93,-18,36,-55,34,-127, 
  /* [893][0][][] */ 37,-62,127,106,37,-41,-65,65,123,38,-14,-62,30,7,27,-94, 
  /* [894][0][][] */ 34,-39,13,-14,86,-112,-127,-101,-122,58,-71,-77,-37,-61,-82,-106, 
  /* [895][0][][] */ -2,45,58,-15,23,60,-121,-23,-42,-7,3,-52,14,71,14,-127, 
  /* [896][0][][] */ 0,-116,110,35,52,20,-44,24,-30,88,-39,-127,-104,-23,-92,-50, 
  /* [897][0][][] */ 36,-74,-49,-64,124,101,46,-20,-82,39,2,71,127,39,-16,61, 
  /* [898][0][][] */ -99,90,-62,-127,-62,16,18,46,-4,36,56,18,-20,-25,-16,-56, 
  /* [899][0][][] */ 60,-25,-15,-7,95,22,127,34,68,-12,-16,-24,63,-14,-26,-14, 
  /* [900][0][][] */ -15,23,-87,22,-127,12,80,-15,38,-3,-14,-44,-112,61,-27,1, 
  /* [901][0][][] */ 99,127,-48,-40,-12,105,-11,-88,57,-72,36,123,28,96,-83,-66, 
  /* [902][0][][] */ -127,9,45,-6,-14,15,78,-40,38,45,-36,13,68,61,89,-10, 
  /* [903][0][][] */ -43,14,-26,1,-32,17,-46,-42,-34,20,20,-9,127,-94,47,-45, 
  /* [904][0][][] */ -8,-43,-53,90,-90,1,86,-48,33,16,77,-4,-69,26,127,-5, 
  /* [905][0][][] */ -28,-105,85,-63,-4,44,127,-85,126,123,73,-108,-94,16,89,-19, 
  /* [906][0][][] */ -127,-36,-22,-28,10,-111,-10,76,7,-16,-59,57,34,-15,-108,-4, 
  /* [907][0][][] */ 78,35,75,117,-6,-5,77,-127,-25,31,15,111,90,86,35,51, 
  /* [908][0][][] */ 57,-15,36,-8,-80,107,115,33,25,-74,-23,127,44,112,-70,-2, 
  /* [909][0][][] */ 59,5,28,-29,74,29,75,77,115,-24,17,6,111,-54,-5,-127, 
  /* [910][0][][] */ -45,48,-48,-36,20,-4,-79,-118,33,17,-38,22,15,127,6,-19, 
  /* [911][0][][] */ -37,46,17,-44,27,54,28,101,-67,-64,5,-86,-127,-70,90,-111, 
  /* [912][0][][] */ -41,-46,-56,11,2,54,7,-127,104,59,-14,-103,31,66,82,5, 
  /* [913][0][][] */ -21,2,-48,127,-41,15,-49,-80,73,-18,22,61,-23,94,60,-45, 
  /* [914][0][][] */ 95,-54,127,-43,-46,54,83,41,42,61,-57,-8,8,44,-65,-88, 
  /* [915][0][][] */ 37,71,127,56,30,65,86,19,-41,-69,18,-25,-105,17,8,40, 
  /* [916][0][][] */ 52,-11,6,-69,40,-29,65,3,127,30,51,1,-35,6,44,-74, 
  /* [917][0][][] */ 38,5,-91,46,37,65,87,62,-13,-79,30,3,-127,89,55,-25, 
  /* [918][0][][] */ -33,-33,51,57,-31,-88,69,-18,127,113,6,-74,10,-95,57,33, 
  /* [919][0][][] */ -17,48,-25,-8,-14,-19,-127,-22,-19,-29,4,-32,65,-52,-24,66, 
  /* [920][0][][] */ -127,3,105,73,-84,-8,7,-85,35,-69,43,95,109,-7,-70,36, 
  /* [921][0][][] */ -84,-101,-6,27,92,-2,119,-84,23,125,127,11,-118,52,34,-95, 
  /* [922][0][][] */ 29,-2,-11,19,12,-127,-40,-81,-42,46,-68,-50,-21,7,32,-36, 
  /* [923][0][][] */ 80,62,-71,20,120,-94,-50,34,-8,71,-127,-3,12,-27,-22,-21, 
  /* [924][0][][] */ 95,-16,-7,90,-101,29,53,-40,-127,-25,63,5,-40,103,-110,-111, 
  /* [925][0][][] */ -36,-1,-20,3,127,-61,-72,-79,-10,14,32,34,87,-89,-12,-38, 
  /* [926][0][][] */ -6,-54,34,-32,-122,-9,-57,16,27,14,14,-83,56,127,-34,-7, 
  /* [927][0][][] */ 40,-58,-58,75,-82,55,-127,16,-14,-79,82,-30,53,9,32,97, 
  /* [928][0][][] */ 127,5,20,-5,32,-42,50,92,-64,36,-27,-40,-86,-8,-22,-58, 
  /* [929][0][][] */ 1,-127,-14,-65,-26,-19,52,79,15,-21,50,-50,-50,-78,-11,-49, 
  /* [930][0][][] */ -85,-43,-75,-16,-76,-84,-21,-127,29,58,16,-21,17,41,16,9, 
  /* [931][0][][] */ 22,-74,17,66,68,-76,-89,-127,9,-84,11,26,-6,-23,60,8, 
  /* [932][0][][] */ -9,-34,-68,87,-51,10,24,-26,-92,-14,24,-4,15,127,71,-25, 
  /* [933][0][][] */ 56,71,64,-56,-27,40,36,-43,60,15,-127,-29,31,34,17,-9, 
  /* [934][0][][] */ 63,-7,38,-52,127,-48,-65,-80,10,68,38,60,-35,26,-38,-23, 
  /* [935][0][][] */ 80,70,-32,-72,-50,-90,-58,10,-127,-12,-6,50,-59,16,-25,52, 
  /* [936][0][][] */ 111,78,22,-91,-70,-108,127,-17,93,-14,32,10,44,53,101,12, 
  /* [937][0][][] */ 72,-27,42,3,16,12,-100,-31,-61,12,-17,-82,-127,3,40,69, 
  /* [938][0][][] */ 51,42,30,66,-37,110,-127,66,53,-76,77,-41,7,39,-43,-6, 
  /* [939][0][][] */ 16,80,-127,52,-70,-65,-58,35,-71,-82,-15,103,71,10,-20,65, 
  /* [940][0][][] */ 127,-8,-24,16,40,-17,-32,65,80,15,7,-57,-5,65,18,-82, 
  /* [941][0][][] */ -10,-34,-69,35,22,-100,40,80,127,101,-74,-113,30,-5,4,-107, 
  /* [942][0][][] */ -11,2,58,13,-14,-5,-93,-19,-50,-20,-60,-22,113,127,0,-47, 
  /* [943][0][][] */ -37,2,-51,-36,-87,68,72,-93,66,21,-12,6,65,31,-127,-50, 
  /* [944][0][][] */ 127,-54,-48,-32,30,18,-13,-4,21,82,-58,-64,-23,-2,58,-3, 
  /* [945][0][][] */ 36,104,-36,-29,-58,-8,-2,-42,61,-51,-64,-12,-127,-79,46,43, 
  /* [946][0][][] */ -2,44,5,-3,127,78,61,-26,7,24,-48,123,29,-80,55,-97, 
  /* [947][0][][] */ 28,-74,-43,88,48,89,-10,41,-66,-4,127,43,-29,-69,14,19, 
  /* [948][0][][] */ -14,-127,-71,68,106,-92,-27,3,91,89,9,44,22,95,-112,9, 
  /* [949][0][][] */ -69,123,-40,28,-23,-50,68,-18,-33,-77,105,-127,-37,-104,95,123, 
  /* [950][0][][] */ 3,48,-59,-14,4,8,21,-27,34,-37,-2,127,13,5,-66,-6, 
  /* [951][0][][] */ -2,-100,109,54,-66,127,80,-2,-29,-25,-34,46,-8,-28,51,92, 
  /* [952][0][][] */ -24,29,127,-23,18,47,36,-46,51,-44,29,53,7,3,50,126, 
  /* [953][0][][] */ 62,52,16,-5,44,-36,17,58,96,-55,-59,8,21,83,-113,-127, 
  /* [954][0][][] */ -18,23,44,83,82,-88,28,-19,58,19,20,48,64,-34,-28,127, 
  /* [955][0][][] */ 110,-17,51,92,-127,25,51,43,51,-53,-90,123,14,17,105,60, 
  /* [956][0][][] */ 2,6,35,-87,10,23,96,19,28,-109,-15,5,-22,127,12,-10, 
  /* [957][0][][] */ 13,83,115,34,8,57,-89,-77,-127,-2,-24,-15,21,-112,100,-29, 
  /* [958][0][][] */ -2,-4,44,-87,17,93,-18,64,56,43,110,37,126,-108,95,127, 
  /* [959][0][][] */ -25,-94,23,126,6,114,127,-72,-31,-48,5,-36,-91,-21,-31,-14, 
  /* [960][0][][] */ 57,-56,105,-28,78,-8,37,-91,90,-127,57,69,-4,93,-42,109, 
  /* [961][0][][] */ 40,-70,77,-12,49,-127,-9,-67,38,4,28,-115,6,-15,-17,17, 
  /* [962][0][][] */ 93,-10,-63,-40,-67,-23,6,-35,36,-89,47,54,101,-11,99,127, 
  /* [963][0][][] */ 29,-4,-74,-83,8,-48,-107,29,23,-127,104,-18,15,-101,17,86, 
  /* [964][0][][] */ 117,4,-10,118,15,52,-120,-57,-127,-30,-49,67,-7,99,-125,-94, 
  /* [965][0][][] */ -21,-28,-95,-123,-127,121,-91,67,46,90,-8,-102,22,117,84,-83, 
  /* [966][0][][] */ -21,-67,52,-100,58,-11,127,4,32,116,6,-83,14,-57,82,-69, 
  /* [967][0][][] */ 91,2,42,-15,-51,43,39,-33,-45,-24,-6,20,-127,82,-6,-14, 
  /* [968][0][][] */ -127,7,8,-22,61,0,10,-50,-40,-7,-14,95,56,56,-32,16, 
  /* [969][0][][] */ -124,71,-27,42,86,127,-9,-66,-100,8,67,127,81,-36,49,-21, 
  /* [970][0][][] */ 25,-33,14,-26,40,79,-15,-65,29,127,-40,-62,-57,-46,-22,-4, 
  /* [971][0][][] */ -87,-17,-63,39,30,-83,43,-37,-4,-42,-52,127,90,-86,-2,-9, 
  /* [972][0][][] */ -5,-127,-67,-123,25,11,101,-2,-1,113,-26,-41,-98,64,93,112, 
  /* [973][0][][] */ 12,-17,-13,34,18,104,59,0,-10,97,125,-19,12,-127,35,-119, 
  /* [974][0][][] */ 92,47,-126,61,-127,35,93,-50,51,34,4,-77,20,26,114,24, 
  /* [975][0][][] */ -49,18,-22,49,73,-89,-127,-88,7,10,69,45,-3,65,-34,-5, 
  /* [976][0][][] */ 21,6,-54,-44,-34,-10,-58,-57,-95,98,-23,-74,41,-65,44,127, 
  /* [977][0][][] */ 3,-12,6,127,41,38,77,0,-1,-81,-6,23,-110,7,22,30, 
  /* [978][0][][] */ -24,15,-47,-35,70,53,-25,80,10,-31,100,-1,-49,-35,-37,-127, 
  /* [979][0][][] */ -45,-111,17,43,-30,-68,36,-42,29,127,62,-74,21,24,41,82, 
  /* [980][0][][] */ -33,-61,37,-127,-4,57,98,25,-121,-11,7,7,92,-76,40,-86, 
  /* [981][0][][] */ -10,127,-54,75,-91,87,-19,124,-33,-33,102,47,50,1,51,64, 
  /* [982][0][][] */ 127,119,39,-74,-29,-82,4,34,32,33,-63,10,54,-37,5,-30, 
  /* [983][0][][] */ -16,7,-31,20,-66,4,4,10,-50,115,10,-77,127,29,-36,-4, 
  /* [984][0][][] */ -1,46,14,-50,56,19,112,-47,-69,37,-61,127,-15,34,-91,27, 
  /* [985][0][][] */ -32,60,5,-39,-14,-127,14,28,-18,113,-41,82,4,-71,-68,64, 
  /* [986][0][][] */ 29,14,-12,-127,-115,-30,84,59,-5,-26,-48,12,-95,104,-42,-32, 
  /* [987][0][][] */ 60,7,-12,-76,77,-9,-87,-37,9,-61,-17,67,43,-53,127,-30, 
  /* [988][0][][] */ -36,84,-28,-78,-75,-33,-79,39,107,127,-51,85,-32,115,-79,11, 
  /* [989][0][][] */ -62,-10,-29,-43,84,109,-20,-33,-23,-13,127,10,59,20,-99,-88, 
  /* [990][0][][] */ 25,6,29,9,-22,55,41,3,-7,33,127,74,13,36,-19,-7, 
  /* [991][0][][] */ 111,-16,9,-33,-20,-9,89,47,124,-6,46,59,127,2,39,19, 
  /* [992][0][][] */ 33,114,73,-60,5,-8,-107,-23,-61,-127,-72,-4,9,55,42,-18, 
  /* [993][0][][] */ -14,16,127,-63,-9,36,-21,-102,-62,-4,-65,22,-53,57,-64,-74, 
  /* [994][0][][] */ 76,-127,-49,-81,-62,-78,-40,-20,90,-62,15,5,-57,44,40,13, 
  /* [995][0][][] */ -12,20,-33,1,-127,73,3,34,8,-29,32,-63,-23,-7,23,-19, 
  /* [996][0][][] */ 75,32,22,-110,45,22,-30,35,11,-45,71,-30,-18,34,127,-54, 
  /* [997][0][][] */ -58,29,2,-3,42,-21,127,22,16,-46,24,78,-80,-21,-73,-11, 
  /* [998][0][][] */ -87,40,5,-1,38,-59,-127,-61,24,109,-11,-55,46,105,-52,-35, 
  /* [999][0][][] */ 87,91,-51,41,56,-50,66,-39,-27,4,14,31,37,-10,127,-55, 
  /* [1000][0][][] */ -12,-40,49,-26,-34,65,47,-57,-19,127,108,-13,43,73,25,-46, 
  /* [1001][0][][] */ -97,18,-127,-40,108,65,7,10,22,52,113,97,28,22,-55,30, 
  /* [1002][0][][] */ -47,25,-6,-98,-11,-54,93,-6,69,127,-4,60,-9,-68,-54,103, 
  /* [1003][0][][] */ 19,-9,-25,9,-39,-27,7,59,127,28,-55,-99,90,-7,27,-30, 
  /* [1004][0][][] */ -36,-122,5,-90,-49,-60,26,-5,24,127,-7,-46,59,50,-64,-47, 
  /* [1005][0][][] */ -61,49,12,24,8,63,-79,18,-36,-5,-49,-127,-30,-71,-124,-107, 
  /* [1006][0][][] */ -38,59,52,-8,31,29,80,-11,45,16,-15,6,17,127,14,-55, 
  /* [1007][0][][] */ -13,-40,57,-24,-43,-60,-23,14,-52,-127,59,-16,-52,52,71,-6, 
  /* [1008][0][][] */ -26,16,-2,-83,127,-109,74,60,-55,27,-29,48,-36,-55,-27,29, 
  /* [1009][0][][] */ 22,-16,70,43,96,-10,-1,-127,-53,-26,-36,-49,-25,-54,66,-30, 
  /* [1010][0][][] */ 11,-15,-15,3,-42,33,-59,-34,28,0,8,-127,6,-27,-13,-31, 
  /* [1011][0][][] */ 28,-127,-20,-27,0,63,20,38,120,97,-33,-94,70,-8,-76,-68, 
  /* [1012][0][][] */ -19,-42,-81,14,127,7,17,-4,-28,-48,-41,3,-1,-30,107,-39, 
  /* [1013][0][][] */ 23,2,20,-41,-5,39,55,-52,0,127,10,-10,116,14,18,-47, 
  /* [1014][0][][] */ -127,21,51,-17,90,-49,114,-64,74,21,-81,45,-48,46,-11,-48, 
  /* [1015][0][][] */ 8,39,95,-65,45,-48,-65,1,49,-4,124,-127,-59,117,-66,-88, 
  /* [1016][0][][] */ 52,0,-127,16,98,-47,-124,80,-50,-28,-4,-72,31,-29,18,-101, 
  /* [1017][0][][] */ 2,36,-37,-49,-77,21,26,19,15,-127,-11,-21,31,-10,9,-77, 
  /* [1018][0][][] */ -14,21,-50,-34,-13,32,41,49,26,10,12,36,127,2,27,9, 
  /* [1019][0][][] */ -9,-122,127,77,-15,-21,-115,4,-88,-82,-8,-16,43,46,-123,125, 
  /* [1020][0][][] */ 107,100,15,-10,10,4,-31,-46,70,-42,126,127,-59,-58,-90,-39, 
  /* [1021][0][][] */ -6,61,79,-127,102,75,-90,104,72,-89,-10,64,-85,-88,-50,77, 
  /* [1022][0][][] */ 74,-34,100,-67,-37,53,127,16,9,-13,-72,-82,-30,18,17,23, 
  /* [1023][0][][] */ 90,-55,85,4,-11,-111,50,-127,27,37,16,7,63,-83,64,3, 
  /* [1024][0][][] */ 9,-53,-22,22,-127,42,-44,-38,35,2,73,-8,-126,-93,26,24, 
  /* [1025][0][][] */ 67,41,127,1,-23,30,-73,3,-32,-60,-18,18,115,8,-47,87, 
  /* [1026][0][][] */ -119,-42,-58,43,-6,90,48,-56,-43,-42,127,84,60,77,76,-12, 
  /* [1027][0][][] */ 75,-60,-41,-40,28,-13,127,121,95,102,5,-123,43,-67,-41,-31, 
  /* [1028][0][][] */ -57,-52,18,-121,68,-41,59,30,-40,5,-24,83,127,-9,-72,31, 
  /* [1029][0][][] */ 6,93,5,-127,-108,27,118,-43,13,-44,86,6,48,58,-16,-36, 
  /* [1030][0][][] */ 5,15,-11,1,25,-23,127,-81,32,-39,-35,53,-2,39,7,-69, 
  /* [1031][0][][] */ 33,12,-62,-127,90,-56,-13,7,14,-11,-38,68,-19,-65,-82,14, 
  /* [1032][0][][] */ -64,-30,-103,65,61,-60,-33,-40,-27,62,84,127,49,20,-43,-30, 
  /* [1033][0][][] */ -16,-52,-32,11,-24,-29,127,-67,4,63,-6,118,-2,51,-12,-28, 
  /* [1034][0][][] */ 85,43,-29,-27,-48,41,-44,38,-50,6,-60,94,-9,55,-127,62, 
  /* [1035][0][][] */ 17,-57,31,-99,73,-108,18,-16,32,-67,14,76,-27,-60,6,127, 
  /* [1036][0][][] */ 21,-47,98,-117,45,82,56,-30,-74,82,104,12,12,101,-29,-127, 
  /* [1037][0][][] */ -28,-12,60,-5,-17,7,57,-16,116,27,42,31,-20,127,-7,-88, 
  /* [1038][0][][] */ 34,87,79,-127,-3,-127,-12,111,71,8,31,94,14,-14,-20,18, 
  /* [1039][0][][] */ -127,0,7,-45,9,-7,0,-61,25,23,13,17,46,18,-11,9, 
  /* [1040][0][][] */ -60,20,9,96,41,127,46,-1,-20,-10,22,-65,-87,-67,-20,-77, 
  /* [1041][0][][] */ -64,44,37,84,77,-89,4,-31,-2,24,7,17,61,-26,64,-127, 
  /* [1042][0][][] */ 110,-111,-78,-23,-50,55,15,35,-108,-100,-127,-24,16,66,-7,-37, 
  /* [1043][0][][] */ -7,-26,-20,13,-19,-24,31,52,50,66,1,6,70,64,38,127, 
  /* [1044][0][][] */ -36,-21,-27,26,83,14,3,-110,56,41,74,61,24,-6,-5,-127, 
  /* [1045][0][][] */ 41,2,-16,45,58,5,-16,34,2,-84,-25,-5,127,-69,31,-33, 
  /* [1046][0][][] */ 49,-41,-35,17,66,101,-109,68,70,-127,90,-1,-49,67,-91,48, 
  /* [1047][0][][] */ 8,96,-127,-3,-94,-25,14,47,-16,64,-8,113,-11,9,-12,-18, 
  /* [1048][0][][] */ -62,80,20,-25,29,44,96,127,-89,6,-20,-47,-52,-48,-59,-58, 
  /* [1049][0][][] */ 5,19,-12,-54,-17,7,29,29,6,-49,62,-37,-13,11,127,28, 
  /* [1050][0][][] */ -85,-41,105,43,34,88,-44,-81,16,27,-35,-127,-91,70,53,-120, 
  /* [1051][0][][] */ 22,-10,-61,-16,60,-25,-127,-91,-4,7,89,84,83,33,-21,28, 
  /* [1052][0][][] */ -4,-58,37,-5,-56,-127,95,-21,11,59,-34,97,67,-7,-35,33, 
  /* [1053][0][][] */ 109,22,35,126,-127,-84,-78,66,-11,-46,82,-34,57,116,-43,52, 
  /* [1054][0][][] */ -45,12,-97,-41,21,-28,79,-41,106,-127,-14,121,-91,117,37,-110, 
  /* [1055][0][][] */ 98,60,40,127,43,-94,-3,84,49,-113,-17,-55,93,86,-43,-93, 
  /* [1056][0][][] */ 63,-113,-63,-67,127,51,6,72,0,-40,-71,-15,15,31,-55,-34, 
  /* [1057][0][][] */ -11,17,-50,-63,-27,123,106,-94,101,59,-42,-84,75,46,127,-23, 
  /* [1058][0][][] */ -63,-60,23,3,13,48,3,-2,-13,65,53,-38,54,13,-4,127, 
  /* [1059][0][][] */ 42,-33,8,-9,-14,-2,-101,30,-43,59,-38,-12,-32,-48,-127,6, 
  /* [1060][0][][] */ 14,-22,33,38,-25,49,127,88,-33,-10,-37,-48,4,-83,23,72, 
  /* [1061][0][][] */ -43,-21,-1,-103,55,46,73,70,-39,-127,5,20,14,56,-65,72, 
  /* [1062][0][][] */ 105,39,-2,57,-65,15,-2,22,-108,-29,126,-6,1,-33,-127,46, 
  /* [1063][0][][] */ -89,-27,-55,-1,127,-58,-58,84,-83,51,23,74,101,-65,-100,-119, 
  /* [1064][0][][] */ 43,-2,19,-18,-25,-2,127,52,-29,-33,-6,-33,21,-23,-3,-9, 
  /* [1065][0][][] */ -10,-22,-14,30,-81,85,78,-44,46,-127,-5,-20,-18,70,2,34, 
  /* [1066][0][][] */ -10,-18,-30,-68,59,32,-22,-23,127,75,83,-30,-45,84,-122,1, 
  /* [1067][0][][] */ -127,8,54,1,67,20,100,30,-104,38,-12,-14,79,-53,-29,-36, 
  /* [1068][0][][] */ -91,34,-55,-39,75,-15,72,9,-14,36,-36,-33,56,-20,-41,-127, 
  /* [1069][0][][] */ -14,-127,85,54,85,-39,-47,35,-13,-72,-17,86,-16,-28,89,-99, 
  /* [1070][0][][] */ 56,-13,-78,26,28,33,-16,-38,61,2,-15,-48,108,-6,-28,-127, 
  /* [1071][0][][] */ 6,67,-3,83,79,-127,31,64,-46,84,-53,32,34,-15,-26,-12, 
  /* [1072][0][][] */ 44,-32,48,81,28,-57,65,127,-59,-38,8,11,-39,-115,-11,-65, 
  /* [1073][0][][] */ -117,-22,18,34,-13,-33,6,-17,120,-66,54,-43,-78,-41,-127,-26, 
  /* [1074][0][][] */ 72,1,-18,-62,-34,2,73,88,-6,-100,4,-123,19,127,33,56, 
  /* [1075][0][][] */ 38,52,-43,-17,1,-32,41,127,1,62,32,63,56,15,-20,-79, 
  /* [1076][0][][] */ 49,127,106,-22,-12,-34,-47,-4,39,122,-113,-26,-18,-54,-93,102, 
  /* [1077][0][][] */ -10,-31,50,124,0,27,-127,81,84,-83,7,72,-11,11,-23,52, 
  /* [1078][0][][] */ 97,8,-34,-17,57,-127,10,30,-24,39,-23,23,-41,62,21,30, 
  /* [1079][0][][] */ 92,0,-20,-41,50,55,-63,-18,-127,-62,13,88,70,6,-60,-31, 
  /* [1080][0][][] */ -28,89,127,-43,-51,34,-12,17,42,29,63,-39,-40,22,102,22, 
  /* [1081][0][][] */ 127,6,7,16,-33,-54,-1,-45,54,42,13,-33,59,17,96,26, 
  /* [1082][0][][] */ -44,-31,31,-3,57,6,17,49,-16,4,30,6,127,-35,-9,-68, 
  /* [1083][0][][] */ -8,-33,127,-95,-122,-29,117,111,116,-53,-5,-84,34,100,-46,-56, 
  /* [1084][0][][] */ 104,101,-33,31,-54,20,-13,-127,-41,21,-6,59,-106,-20,-19,31, 
  /* [1085][0][][] */ -46,-127,31,10,-34,11,19,111,99,-28,-51,-94,117,6,52,-13, 
  /* [1086][0][][] */ 58,-51,-38,-91,80,113,-12,36,-55,-3,49,15,50,21,-127,92, 
  /* [1087][0][][] */ -55,-64,-10,-20,-41,92,-37,-10,46,-108,28,-127,-56,90,-20,5, 
  /* [1088][0][][] */ 30,8,-14,-1,-7,61,40,22,99,-13,127,-87,-2,6,31,-46, 
  /* [1089][0][][] */ 75,-5,127,63,-42,-52,88,15,-88,45,-33,81,85,18,5,37, 
  /* [1090][0][][] */ 82,-5,15,19,-30,4,42,0,43,52,65,-34,14,127,-3,-24, 
  /* [1091][0][][] */ 66,11,-79,20,-49,-48,-23,27,-122,-21,-14,86,-27,3,-127,-59, 
  /* [1092][0][][] */ -44,-38,-42,-27,119,-49,127,20,117,-15,-70,-36,-116,-20,0,84, 
  /* [1093][0][][] */ 104,-51,-16,-14,-18,-34,127,103,-87,91,-9,-24,-105,23,-70,12, 
  /* [1094][0][][] */ 53,-48,43,-108,-42,-11,-9,62,-14,-40,22,-41,-47,-39,-127,-118, 
  /* [1095][0][][] */ 27,53,-20,-127,-113,-93,78,43,10,51,-100,-8,31,56,38,19, 
  /* [1096][0][][] */ -79,-79,-94,-30,-5,35,17,21,100,-11,127,-105,44,60,77,-120, 
  /* [1097][0][][] */ -14,-1,27,65,100,-7,-75,-50,31,-74,102,59,81,127,2,-46, 
  /* [1098][0][][] */ 51,-94,8,-61,75,127,15,-53,7,-123,-94,29,40,98,-15,-23, 
  /* [1099][0][][] */ -110,56,-74,-50,81,127,125,31,-20,47,-54,-41,31,13,-67,38, 
  /* [1100][0][][] */ 77,-35,83,-100,-102,-45,-91,-82,122,-62,21,103,77,-127,-64,-86, 
  /* [1101][0][][] */ 30,50,-127,-22,-23,-10,-58,37,66,-53,-36,-44,-9,-36,-68,-20, 
  /* [1102][0][][] */ -66,-11,127,22,6,21,46,-9,27,20,-18,-4,-17,-21,6,-26, 
  /* [1103][0][][] */ 56,47,53,-3,117,51,-53,-70,33,61,-41,-49,5,-61,127,17, 
  /* [1104][0][][] */ 25,70,-33,-47,7,56,127,69,-60,7,74,70,12,-92,-83,-13, 
  /* [1105][0][][] */ -5,-56,-18,-32,-24,14,-2,68,45,13,-18,-127,-61,-36,3,-61, 
  /* [1106][0][][] */ 74,-29,-24,-127,-56,10,-9,37,110,-7,-12,-36,-25,-36,-40,-31, 
  /* [1107][0][][] */ 26,-17,86,-127,72,-14,81,-70,-1,50,-45,39,81,-112,-21,-45, 
  /* [1108][0][][] */ 55,-10,-13,-103,10,-127,-31,-25,-38,82,-26,-30,-13,38,5,-48, 
  /* [1109][0][][] */ 126,-76,27,101,48,-76,109,-45,-57,13,-28,103,122,53,127,-32, 
  /* [1110][0][][] */ -9,-8,54,-57,-36,-45,-35,-107,-11,127,27,105,25,29,-27,-40, 
  /* [1111][0][][] */ -29,91,-64,113,6,60,120,10,84,-56,-61,-30,-43,110,44,-127, 
  /* [1112][0][][] */ 66,127,-15,-7,15,50,-65,60,57,111,-72,-3,106,-47,-30,-11, 
  /* [1113][0][][] */ 67,88,117,40,-107,-55,-51,18,127,65,75,-11,-38,43,26,-50, 
  /* [1114][0][][] */ 40,-29,-105,35,20,0,61,124,-18,-52,58,-48,49,50,35,127, 
  /* [1115][0][][] */ 30,-68,51,70,125,21,-30,-50,-60,64,-127,15,-26,-102,33,-25, 
  /* [1116][0][][] */ -31,-35,-30,9,34,56,30,42,-33,-44,-23,-25,127,-47,-49,-20, 
  /* [1117][0][][] */ 46,108,127,48,51,-19,-19,-107,-45,7,34,-66,47,-22,10,-22, 
  /* [1118][0][][] */ 93,-71,107,-76,3,21,127,-94,-71,-113,64,-17,36,-6,41,31, 
  /* [1119][0][][] */ 39,65,-61,-31,114,55,-121,109,-120,104,127,46,-39,50,61,91, 
  /* [1120][0][][] */ -94,66,-43,-121,110,-63,-86,-15,21,28,-60,127,-15,-82,-68,-46, 
  /* [1121][0][][] */ -77,20,-56,18,88,19,3,-32,39,87,-51,-15,60,127,8,-26, 
  /* [1122][0][][] */ -103,21,74,-102,-25,-9,25,-22,127,26,73,52,41,76,50,44, 
  /* [1123][0][][] */ 61,-2,65,55,73,127,-49,-51,-15,65,6,-41,-65,-19,-76,-111, 
  /* [1124][0][][] */ 127,44,-1,-95,-25,30,14,-8,84,4,-105,-35,97,35,30,-31, 
  /* [1125][0][][] */ -65,-32,51,73,-52,-12,-30,72,127,-55,57,-34,63,78,-49,33, 
  /* [1126][0][][] */ -42,-65,-32,43,48,22,-21,-25,126,50,65,-127,9,6,-32,-16, 
  /* [1127][0][][] */ 12,124,42,-71,-19,-127,32,70,68,53,78,-33,104,25,12,33, 
  /* [1128][0][][] */ 46,-91,-100,-58,-28,-50,-23,-127,33,19,85,73,56,18,66,-38, 
  /* [1129][0][][] */ -127,35,-100,26,33,65,-57,-6,18,64,5,-23,-49,60,-37,-61, 
  /* [1130][0][][] */ -25,-5,-31,-23,-41,-71,47,-34,63,127,98,-85,26,-14,40,-35, 
  /* [1131][0][][] */ 13,-111,56,-6,-8,-15,127,22,-38,37,80,94,0,-76,-23,15, 
  /* [1132][0][][] */ -127,-88,-21,23,17,-20,17,-20,5,-24,2,44,96,32,-44,-55, 
  /* [1133][0][][] */ 46,-17,26,-20,52,-47,-75,-50,113,127,18,3,56,-36,32,-25, 
  /* [1134][0][][] */ 19,-2,34,-48,86,22,-62,-48,-89,-13,-95,-127,-62,-90,51,-113, 
  /* [1135][0][][] */ -1,127,27,48,-2,-5,-6,5,-54,-102,-17,-14,83,27,44,5, 
  /* [1136][0][][] */ 68,50,10,27,-15,25,57,-92,7,83,78,4,-76,-74,-85,-127, 
  /* [1137][0][][] */ 45,26,45,-127,16,-9,-30,39,115,-10,83,35,41,41,-40,-1, 
  /* [1138][0][][] */ 3,127,26,35,47,53,-35,13,-22,-53,23,15,6,-86,51,-42, 
  /* [1139][0][][] */ -75,-20,21,-53,-127,-7,64,-18,-24,53,115,-35,-7,-115,44,21, 
  /* [1140][0][][] */ 21,-127,-9,-65,56,-18,-72,-15,-26,95,54,87,39,-102,-46,33, 
  /* [1141][0][][] */ 114,60,-39,127,-35,47,-24,5,37,-64,-101,-63,-101,43,-96,58, 
  /* [1142][0][][] */ 14,-2,-22,-11,-14,-104,-79,83,69,127,41,-105,-88,-126,-42,64, 
  /* [1143][0][][] */ -79,42,-18,-41,-127,34,81,-17,53,52,105,-34,-82,-6,23,11, 
  /* [1144][0][][] */ 48,-20,35,47,-31,-54,-72,-19,-127,104,-71,85,21,-27,-95,-35, 
  /* [1145][0][][] */ 96,81,-16,66,81,-2,9,42,-7,35,99,-127,71,-29,33,-26, 
  /* [1146][0][][] */ 36,49,13,127,-3,80,25,-67,30,-61,-4,74,-66,-110,86,48, 
  /* [1147][0][][] */ 66,25,-9,-12,-4,4,-127,-112,11,66,18,67,-35,25,34,39, 
  /* [1148][0][][] */ -127,41,-30,10,23,50,-51,-31,10,21,-60,5,-29,-57,-41,62, 
  /* [1149][0][][] */ 91,32,127,-37,64,-52,-54,-47,93,-47,69,42,6,17,-9,-114, 
  /* [1150][0][][] */ 46,26,-107,93,-50,-58,-40,-127,-69,52,-88,-12,121,-63,-53,-119, 
  /* [1151][0][][] */ -68,62,89,-14,-6,127,63,-23,-9,61,29,-58,-57,2,45,-81, 
  /* [1152][0][][] */ -19,127,109,-69,90,-8,120,54,94,-9,-67,104,-44,103,-79,-74, 
  /* [1153][0][][] */ -15,-91,38,-38,-18,-15,-16,-34,-6,71,38,127,95,-69,35,-29, 
  /* [1154][0][][] */ 10,58,-23,-39,15,127,-46,-69,-30,-54,-64,-20,-12,-2,93,-41, 
  /* [1155][0][][] */ -13,-34,-12,-80,127,40,5,30,30,-78,59,69,-31,28,-5,67, 
  /* [1156][0][][] */ -9,-83,-25,9,41,-62,-26,-64,56,21,-81,-127,43,-43,-5,47, 
  /* [1157][0][][] */ -78,15,-1,-124,34,-32,29,-15,80,-6,-109,127,11,6,-79,5, 
  /* [1158][0][][] */ 31,-63,60,-4,12,127,43,-12,-1,-25,-3,15,-7,87,3,-79, 
  /* [1159][0][][] */ -5,-39,21,-6,12,127,-30,-1,-111,-94,-37,-5,-45,30,24,8, 
  /* [1160][0][][] */ 111,-67,-1,-22,34,4,-36,95,127,-88,106,-14,-22,74,-78,-35, 
  /* [1161][0][][] */ 57,10,22,5,-44,-36,127,-13,-90,-33,114,54,67,-112,93,101, 
  /* [1162][0][][] */ 32,-53,-28,-40,-46,-19,7,-22,28,42,-10,-60,127,-110,43,-35, 
  /* [1163][0][][] */ -17,127,60,-17,-42,-116,-66,-78,58,63,-64,-15,-75,-96,106,-104, 
  /* [1164][0][][] */ 32,-104,-96,108,32,15,-29,-107,80,-28,127,96,26,-7,-78,-63, 
  /* [1165][0][][] */ -55,-41,32,28,-89,-111,58,-4,127,82,78,4,92,0,92,-37, 
  /* [1166][0][][] */ 43,-127,-41,51,-70,52,-125,-49,51,-35,64,-71,115,-47,41,59, 
  /* [1167][0][][] */ -67,4,-16,120,80,-17,-56,-73,125,-1,85,-7,127,24,12,-73, 
  /* [1168][0][][] */ -100,-1,-77,46,-19,-51,127,-8,27,51,-82,-75,21,73,51,66, 
  /* [1169][0][][] */ 88,-10,5,-27,-78,47,36,42,127,-84,107,-10,10,63,-5,-16, 
  /* [1170][0][][] */ 127,48,-35,-48,32,-74,-11,30,-5,46,-71,-37,-41,-65,-13,28, 
  /* [1171][0][][] */ -6,-5,-27,6,22,-16,78,-29,-32,13,-108,7,71,26,30,-127, 
  /* [1172][0][][] */ 94,66,14,-24,30,-32,-13,1,98,59,57,127,85,127,-66,-40, 
  /* [1173][0][][] */ -92,-73,-7,33,-49,12,-38,-1,60,18,-23,-112,127,-124,61,9, 
  /* [1174][0][][] */ -57,-76,-76,-12,127,32,-20,-57,28,7,72,64,13,-36,-60,-19, 
  /* [1175][0][][] */ 0,-94,-51,-127,95,14,11,78,-40,-43,40,65,86,13,-30,-37, 
  /* [1176][0][][] */ 13,61,13,27,127,46,-33,-3,-1,8,57,1,59,-17,52,-38, 
  /* [1177][0][][] */ 84,108,-81,-11,22,29,21,-127,-11,47,-42,-41,-48,24,91,14, 
  /* [1178][0][][] */ 83,-17,-1,21,-29,-58,-18,-100,32,35,-15,-1,79,-127,29,72, 
  /* [1179][0][][] */ 66,10,12,58,64,-116,29,38,127,31,-34,2,85,46,-30,28, 
  /* [1180][0][][] */ 23,6,44,14,12,-65,8,23,127,-27,-26,-31,-80,29,36,29, 
  /* [1181][0][][] */ -50,80,83,-37,-68,-39,29,-62,-72,27,4,57,127,-2,83,-101, 
  /* [1182][0][][] */ -21,-12,-87,56,38,127,-71,38,-24,33,7,-49,34,3,-96,56, 
  /* [1183][0][][] */ 41,49,-78,-18,46,6,-64,8,-18,35,40,127,-8,-122,-94,7, 
  /* [1184][0][][] */ -71,-81,2,-93,-34,127,43,44,56,23,80,-75,-51,-74,-54,-47, 
  /* [1185][0][][] */ 5,-14,53,12,32,-22,35,-16,-111,9,-33,-15,61,73,127,-23, 
  /* [1186][0][][] */ -21,15,-22,-8,-2,15,34,57,116,37,14,127,34,110,41,-90, 
  /* [1187][0][][] */ -113,70,94,-24,-114,62,99,107,-24,97,-12,127,91,-46,-7,-36, 
  /* [1188][0][][] */ -66,54,-54,-108,72,-10,-20,127,33,-18,-38,-91,49,-50,-47,-9, 
  /* [1189][0][][] */ -30,29,-12,-33,46,41,107,15,2,127,25,23,-3,7,36,-73, 
  /* [1190][0][][] */ 4,-39,-50,17,33,41,-26,-19,-69,27,16,21,14,15,127,26, 
  /* [1191][0][][] */ 62,-7,-75,-31,-95,-6,-64,51,-69,-11,-57,-45,115,-127,63,45, 
  /* [1192][0][][] */ 61,-18,38,77,23,41,-11,85,6,-95,51,-39,65,127,-31,-19, 
  /* [1193][0][][] */ -115,46,-84,39,23,57,-124,-33,-44,-46,-75,-58,127,61,-63,60, 
  /* [1194][0][][] */ 68,54,-4,-93,-71,127,-58,-43,-73,126,42,-22,24,69,-81,-99, 
  /* [1195][0][][] */ 105,-1,-54,92,-68,-1,3,-64,-4,-127,-26,40,7,48,1,-23, 
  /* [1196][0][][] */ -23,127,-51,83,-13,47,-21,12,-51,-65,-100,59,25,33,-53,-58, 
  /* [1197][0][][] */ -4,-55,24,-2,71,86,-73,10,-33,92,127,12,-6,73,-44,-35, 
  /* [1198][0][][] */ -56,-21,9,-16,63,41,127,0,27,-35,-16,-96,-44,-28,-13,-55, 
  /* [1199][0][][] */ -115,-73,-65,-52,-24,-25,60,67,127,-6,-66,90,-86,12,12,61, 
  /* [1200][0][][] */ -57,4,-87,-25,-115,50,5,-9,108,127,-28,6,-65,100,84,117, 
  /* [1201][0][][] */ -40,43,-45,-35,70,20,-7,-14,-34,-100,-127,-52,116,22,-70,-55, 
  /* [1202][0][][] */ 67,101,51,-4,-36,-59,-25,-32,-127,107,-55,106,48,-76,38,53, 
  /* [1203][0][][] */ -80,72,55,-16,58,-39,22,-45,32,35,-9,45,-53,127,-48,-73, 
  /* [1204][0][][] */ -36,-16,13,-52,6,11,127,-41,-36,19,-46,56,68,4,38,-27, 
  /* [1205][0][][] */ -34,52,-2,12,-7,7,50,-11,-3,-42,-65,4,-12,20,127,41, 
  /* [1206][0][][] */ -127,43,58,-57,-43,66,-32,-19,36,-92,-8,-36,19,107,-101,17, 
  /* [1207][0][][] */ 118,-112,-8,92,24,65,28,-122,-114,54,-18,127,95,8,114,-38, 
  /* [1208][0][][] */ -39,42,30,13,7,-13,26,51,60,127,-24,-40,28,-92,-43,49, 
  /* [1209][0][][] */ 45,-31,103,23,57,22,-2,-123,50,-31,-127,-70,-4,35,11,4, 
  /* [1210][0][][] */ 58,36,41,16,-58,1,52,-111,-127,-31,-49,64,27,13,-78,-13, 
  /* [1211][0][][] */ -26,-30,-12,-127,55,-14,-5,-34,-77,72,-49,-28,-9,-16,20,-35, 
  /* [1212][0][][] */ 6,-39,-62,97,18,35,-80,36,28,-105,-7,-127,41,72,13,-77, 
  /* [1213][0][][] */ -42,7,-54,-127,-103,-46,-54,-8,-15,65,-33,17,15,93,21,24, 
  /* [1214][0][][] */ -4,-16,-20,38,-83,69,6,8,-32,39,17,32,-11,-84,-36,-127, 
  /* [1215][0][][] */ -56,59,-74,127,-61,-2,-29,-35,5,-51,25,2,-18,18,-31,-10, 
  /* [1216][0][][] */ 95,40,42,-18,-40,-12,127,81,-114,30,2,-50,-84,-24,-12,44, 
  /* [1217][0][][] */ 28,11,-8,15,-39,3,32,-84,-127,-69,-17,-64,-62,-28,-50,24, 
  /* [1218][0][][] */ -26,-36,25,15,42,-14,33,81,59,30,-54,-11,-1,-41,45,127, 
  /* [1219][0][][] */ -7,45,-50,-36,62,-62,-52,-41,-26,111,-127,-36,12,33,-28,-103, 
  /* [1220][0][][] */ -6,-12,-18,45,-127,-65,99,9,-70,83,-74,-12,-30,34,19,-24, 
  /* [1221][0][][] */ -19,-99,42,-35,67,28,63,-78,-127,-91,14,116,9,-30,-11,2, 
  /* [1222][0][][] */ 82,44,27,-127,-20,19,12,6,3,11,67,87,-46,-66,-96,-67, 
  /* [1223][0][][] */ 47,9,23,15,62,-111,45,14,-36,83,10,111,7,-47,-46,-127, 
  /* [1224][0][][] */ -26,78,-83,-26,94,-21,25,41,-57,28,33,-95,-69,127,51,-71, 
  /* [1225][0][][] */ 13,-3,-23,-8,10,-127,-55,-61,4,65,-55,103,-64,-3,8,1, 
  /* [1226][0][][] */ -12,-110,127,35,37,-34,-63,-39,-65,14,91,43,66,-43,11,64, 
  /* [1227][0][][] */ 125,-38,29,-40,41,19,34,48,-127,77,67,-2,28,-60,-82,14, 
  /* [1228][0][][] */ -3,2,-39,-120,-91,-42,8,-53,-24,-34,-3,127,8,44,68,18, 
  /* [1229][0][][] */ -29,92,25,-22,-2,-57,58,49,-36,-13,36,-10,127,67,16,-95, 
  /* [1230][0][][] */ 52,47,68,70,21,-23,119,13,-127,-113,-37,13,72,69,62,-47, 
  /* [1231][0][][] */ 9,37,-70,-14,65,-44,-31,102,15,-66,20,72,-97,-39,-127,-16, 
  /* [1232][0][][] */ -94,-67,-9,-34,57,127,-9,-25,97,29,32,-78,-14,27,73,-8, 
  /* [1233][0][][] */ 1,-103,32,21,-101,-111,-11,6,34,127,39,53,-92,1,-9,23, 
  /* [1234][0][][] */ -18,127,78,104,50,77,2,-11,-1,68,86,39,38,24,42,-56, 
  /* [1235][0][][] */ -4,-43,-47,-3,-56,29,127,17,111,50,37,24,41,-58,36,10, 
  /* [1236][0][][] */ 56,31,-86,-2,-71,57,-36,-127,56,-33,56,59,-9,37,5,-70, 
  /* [1237][0][][] */ 4,-31,-84,41,65,31,-13,-30,-11,127,63,-21,7,-37,36,-26, 
  /* [1238][0][][] */ -70,20,-35,-127,-17,5,-82,-50,32,-87,43,31,49,-55,-50,125, 
  /* [1239][0][][] */ 28,-20,-41,-29,-67,-10,48,0,87,57,-31,-41,-43,-80,46,-127, 
  /* [1240][0][][] */ -19,-32,28,-77,64,-127,-10,-61,-7,48,-6,-19,-27,60,32,-49, 
  /* [1241][0][][] */ 0,11,36,127,-88,-53,-60,-61,-36,-68,-26,66,30,-34,-1,-18, 
  /* [1242][0][][] */ 70,-81,-10,101,-110,-42,-12,127,47,-106,6,-19,114,89,48,-44, 
  /* [1243][0][][] */ 56,85,-36,-51,-26,-77,-19,-70,18,6,42,81,26,-96,127,52, 
  /* [1244][0][][] */ 75,28,33,-62,34,-127,-66,24,32,-31,-24,91,50,-37,44,-61, 
  /* [1245][0][][] */ 18,76,-16,41,-39,51,44,22,14,-63,-52,127,36,-10,70,-21, 
  /* [1246][0][][] */ -30,117,38,-39,-60,79,2,50,-127,-24,-2,-31,65,16,24,-26, 
  /* [1247][0][][] */ 8,22,5,1,5,41,21,-19,79,-84,-38,10,90,-92,-83,-127, 
  /* [1248][0][][] */ 40,-15,0,-56,-5,50,22,-127,-32,0,42,17,84,-27,67,-114, 
  /* [1249][0][][] */ 60,63,-108,32,22,71,-63,127,83,52,29,-56,58,-7,-52,-41, 
  /* [1250][0][][] */ -51,-49,-127,98,74,17,-21,25,55,-21,107,45,19,-46,16,-54, 
  /* [1251][0][][] */ 30,-38,27,94,62,-53,-78,-71,118,30,-7,-5,-127,-22,-37,123, 
  /* [1252][0][][] */ -127,52,46,31,-14,37,-27,69,-9,83,-2,-91,39,27,4,-76, 
  /* [1253][0][][] */ -59,-6,-15,-43,127,33,46,-95,-11,-7,-110,85,-48,-60,-26,48, 
  /* [1254][0][][] */ -7,20,-46,-44,127,81,-46,17,44,11,21,-36,23,-20,27,29, 
  /* [1255][0][][] */ -127,-74,-38,15,12,-13,-17,71,82,-76,80,-34,-51,2,-6,-3, 
  /* [1256][0][][] */ -42,-42,36,127,-43,30,46,-39,-19,-43,17,-57,9,48,64,34, 
  /* [1257][0][][] */ -97,56,75,35,127,-22,-7,62,-48,-67,-67,62,-105,95,-63,-5, 
  /* [1258][0][][] */ 127,-28,-10,48,-9,-64,87,40,25,-2,-1,13,36,-24,-8,-26, 
  /* [1259][0][][] */ -87,-50,-54,-48,-31,-71,-80,24,57,-36,-38,-22,122,-127,-63,-53, 
  /* [1260][0][][] */ 42,53,21,-69,-58,-46,61,44,9,-62,-42,0,127,-18,45,39, 
  /* [1261][0][][] */ -52,-33,31,-40,11,-16,-29,-18,37,26,-50,53,37,127,-79,-74, 
  /* [1262][0][][] */ -47,100,-25,4,-28,-3,31,21,46,-19,35,127,-58,30,-71,98, 
  /* [1263][0][][] */ -58,-73,-58,-10,17,40,27,-6,-80,76,-116,-94,-14,-25,-127,-21, 
  /* [1264][0][][] */ -72,-5,23,-67,40,-48,-85,-53,-25,-57,63,127,67,-53,-55,-5, 
  /* [1265][0][][] */ 14,-87,-11,-59,99,23,-29,103,107,-56,127,6,46,54,14,-5, 
  /* [1266][0][][] */ 37,12,127,-16,81,48,72,35,-98,-62,57,26,-15,67,-42,16, 
  /* [1267][0][][] */ 27,-27,85,-42,3,127,25,-31,4,66,42,-28,-40,-48,-81,36, 
  /* [1268][0][][] */ 32,77,61,3,7,16,68,-39,82,-28,-50,-127,-38,34,56,-1, 
  /* [1269][0][][] */ 112,52,34,108,-7,85,-127,36,92,-113,-27,-82,51,63,-83,15, 
  /* [1270][0][][] */ 121,1,-35,-127,43,69,-28,79,-87,102,12,74,-98,-6,-73,-78, 
  /* [1271][0][][] */ 20,-66,-43,38,-31,-55,37,52,-50,127,-47,-18,1,-50,-38,-38, 
  /* [1272][0][][] */ -105,14,15,78,89,36,-85,-127,11,58,-15,-66,27,-83,-76,-55, 
  /* [1273][0][][] */ 31,-32,72,-28,66,9,-18,-127,-1,82,-45,84,77,17,46,-80, 
  /* [1274][0][][] */ -121,-18,39,35,51,-54,34,-10,-31,-21,-74,43,-127,-104,-24,10, 
  /* [1275][0][][] */ -83,-4,-71,-127,45,41,-42,36,-30,62,-80,-1,-25,-58,40,23, 
  /* [1276][0][][] */ -11,17,2,45,41,9,-59,21,-44,-79,31,52,127,4,6,27, 
  /* [1277][0][][] */ 127,-37,-7,-42,-45,34,84,19,-35,80,17,-23,24,-7,-71,-24, 
  /* [1278][0][][] */ -73,7,96,-62,105,-58,-11,80,-38,-24,34,-22,-6,-55,52,-127, 
  /* [1279][0][][] */ 55,-11,127,-55,46,38,-5,49,-18,93,-2,65,-13,-57,-43,26, 
};
const TfArray<4, int> tensor_dimension77 = { 4, { 1280,1,1,16 } };
const TfArray<1280, float> quant77_scale = { 1280, { 0.0054545318707823753, 0.0039630457758903503, 0.0050721485167741776, 0.0052831023931503296, 0.0046178721822798252, 0.0067197391763329506, 0.0063027180731296539, 0.0050705038011074066, 0.0063592535443603992, 0.0062466482631862164, 0.0050626522861421108, 0.0053506521508097649, 0.0061522745527327061, 0.0065171560272574425, 0.0045182774774730206, 0.0036311126314103603, 0.0056968284770846367, 0.0068035661242902279, 0.0052693611942231655, 0.0039643649943172932, 0.0051665725186467171, 0.0075956359505653381, 0.0069350004196166992, 0.0037531396374106407, 0.0041926871053874493, 0.0073473546653985977, 0.0061368593014776707, 0.0045945309102535248, 0.0047552147880196571, 0.0071060284972190857, 0.0053979698568582535, 0.0048501975834369659, 0.0044483570381999016, 0.0055233296006917953, 0.0051314504817128181, 0.0071869581006467342, 0.0057409852743148804, 0.005425705574452877, 0.0048278248868882656, 0.0058243335224688053, 0.0054430910386145115, 0.0048880241811275482, 0.0060612973757088184, 0.0058896858245134354, 0.0051568262279033661, 0.0053740069270133972, 0.0049363435246050358, 0.0060221194289624691, 0.0058078751899302006, 0.0044983630068600178, 0.0056970925070345402, 0.0043701552785933018, 0.0048158243298530579, 0.0057973903603851795, 0.0036486173048615456, 0.0051787532866001129, 0.0071243587881326675, 0.0048426338471472263, 0.0053130476735532284, 0.0042489292100071907, 0.0052229710854589939, 0.0049010571092367172, 0.0047630784101784229, 0.0056591578759253025, 0.003810968017205596, 0.0041609685868024826, 0.0062875542789697647, 0.0058658020570874214, 0.0052956086583435535, 0.0071827787905931473, 0.004090484231710434, 0.0065870983526110649, 0.005305243656039238, 0.005549571942538023, 0.0048643718473613262, 0.0055493940599262714, 0.0049627553671598434, 0.0065217902883887291, 0.0055519086308777332, 0.0044524208642542362, 0.0056483461521565914, 0.0033424242865294218, 0.0033535934053361416, 0.0052474429830908775, 0.0038017206825315952, 0.006336018443107605, 0.004470242653042078, 0.0037660896778106689, 0.0067426543682813644, 0.0055293822661042213, 0.0048527941107749939, 0.007101601455360651, 0.0061087715439498425, 0.0064291032031178474, 0.0037300470285117626, 0.0047544464468955994, 0.0057416600175201893, 0.0050127636641263962, 0.006959348451346159, 0.0051721637137234211, 0.0070337704382836819, 0.0049445568583905697, 0.004037030041217804, 0.0046145552769303322, 0.0049115577712655067, 0.0051532546058297157, 0.0047847889363765717, 0.0052285827696323395, 0.0053435019217431545, 0.0049467268399894238, 0.004929322749376297, 0.0052040019072592258, 0.0050656790845096111, 0.0062043084762990475, 0.0043889349326491356, 0.0056634941138327122, 0.0047272713854908943, 0.0066446191631257534, 0.0047574741765856743, 0.0038380157202482224, 0.0051623964682221413, 0.0052725179120898247, 0.005160982720553875, 0.0051010954193770885, 0.0046081137843430042, 0.005666694138199091, 0.0032697725109755993, 0.0052091712132096291, 0.0068192239850759506, 0.0052497759461402893, 0.0043155145831406116, 0.0057765538804233074, 0.0046926168724894524, 0.0065180128440260887, 0.0058081494644284248, 0.0062964889220893383, 0.0048168748617172241, 0.0056919590570032597, 0.0038963041733950377, 0.0042972560040652752, 0.0058311149477958679, 0.0050088227726519108, 0.0048119365237653255, 0.0040752766653895378, 0.0039937668479979038, 0.0066292891278862953, 0.0038181690033525229, 0.0036024469882249832, 0.0043962164781987667, 0.004294978454709053, 0.0040116477757692337, 0.0054705520160496235, 0.0045659281313419342, 0.0044532292522490025, 0.0053251706995069981, 0.0053578377701342106, 0.0046902652829885483, 0.006577945314347744, 0.0057163047604262829, 0.0049556391313672066, 0.0057967370375990868, 0.004618227481842041, 0.0056241508573293686, 0.0059735439717769623, 0.0047147409059107304, 0.0061007770709693432, 0.0035045782569795847, 0.0055961171165108681, 0.0040541035123169422, 0.0049140169285237789, 0.0085782790556550026, 0.0060610123910009861, 0.0049886628985404968, 0.0048903119750320911, 0.0047840499319136143, 0.0060716462321579456, 0.0055840504355728626, 0.004820551723241806, 0.005712208803743124, 0.0039789201691746712, 0.0044501759111881256, 0.0063857319764792919, 0.0048817899078130722, 0.0042303078807890415, 0.0041519980877637863, 0.0077053317800164223, 0.0046726958826184273, 0.0070369141176342964, 0.0067094597034156322, 0.0044894767925143242, 0.0042793969623744488, 0.0052304868586361408, 0.00536370649933815, 0.0059688789770007133, 0.0054710586555302143, 0.0043517914600670338, 0.0051915957592427731, 0.004929705522954464, 0.0048766806721687317, 0.0045650494284927845, 0.006739247590303421, 0.0062452862039208412, 0.0048986147157847881, 0.0051045846194028854, 0.0033804825507104397, 0.0036939666606485844, 0.0059008919633924961, 0.005595529917627573, 0.0067854137159883976, 0.0046570119448006153, 0.0047606285661458969, 0.0057968287728726864, 0.0045616556890308857, 0.0068782675080001354, 0.0039232592098414898, 0.0050945370458066463, 0.0053773890249431133, 0.0047383252531290054, 0.0046264408156275749, 0.0062061697244644165, 0.0051480378024280071, 0.0052133798599243164, 0.0062658083625137806, 0.0057414881885051727, 0.0053486577235162258, 0.0054099275730550289, 0.0046618068590760231, 0.0044749518856406212, 0.0051359264180064201, 0.0056877504102885723, 0.00502777099609375, 0.0065946872346103191, 0.006914693396538496, 0.00595841184258461, 0.0063255741260945797, 0.0046003428287804127, 0.0051198289729654789, 0.0044668903574347496, 0.0054716747254133224, 0.0051388111896812916, 0.0066773775033652782, 0.0039160405285656452, 0.0056373421102762222, 0.0048278006725013256, 0.0039447294548153877, 0.0054150447249412537, 0.0055079893209040165, 0.0051135243847966194, 0.0068128784187138081, 0.0048518064431846142, 0.004501712042838335, 0.0053686192259192467, 0.0064016426913440228, 0.0081080561503767967, 0.005015107337385416, 0.0058616106398403645, 0.0045980648137629032, 0.0045280861668288708, 0.0044580972753465176, 0.0046353372745215893, 0.0050005912780761719, 0.0052020181901752949, 0.0045912275090813637, 0.0049270954914391041, 0.0055738561786711216, 0.0054235770367085934, 0.0047181942500174046, 0.0043507758527994156, 0.0046240249648690224, 0.0039818901568651199, 0.0045283157378435135, 0.0045260987244546413, 0.0055305818095803261, 0.0045950552448630333, 0.0058230836875736713, 0.0052594463340938091, 0.004080834798514843, 0.0050570783205330372, 0.0046184388920664787, 0.0057763759978115559, 0.0049534821882843971, 0.0044694598764181137, 0.0036968877539038658, 0.0048447423614561558, 0.006391916424036026, 0.0049604075029492378, 0.0044603850692510605, 0.0057273651473224163, 0.0047033829614520073, 0.0048560425639152527, 0.0045124543830752373, 0.00430270005017519, 0.0073544164188206196, 0.0051521765999495983, 0.0071483245119452477, 0.0054577342234551907, 0.0048517361283302307, 0.0052424222230911255, 0.0051898444071412086, 0.0062459828332066536, 0.0043652625754475594, 0.0050359601154923439, 0.0054516573436558247, 0.0065241227857768536, 0.0043141092173755169, 0.0058429543860256672, 0.0045998366549611092, 0.0060476851649582386, 0.0051866290159523487, 0.0051166708581149578, 0.0048076682724058628, 0.0038683849852532148, 0.0038815841544419527, 0.0054480982944369316, 0.0065828152000904083, 0.0046721901744604111, 0.005751908291131258, 0.0056819193996489048, 0.0058458256535232067, 0.0056481519713997841, 0.0050928168930113316, 0.0042828163132071495, 0.0057899276725947857, 0.0048558851704001427, 0.005390537902712822, 0.003572933841496706, 0.0051714936271309853, 0.0069185574539005756, 0.0048063374124467373, 0.0038868258707225323, 0.006521331612020731, 0.0045218518935143948, 0.0061668632552027702, 0.0069769714027643204, 0.0045377989299595356, 0.0056004514917731285, 0.0043068286031484604, 0.0047169607132673264, 0.0070098219439387321, 0.0052884705364704132, 0.0048588183708488941, 0.0056521696969866753, 0.004027792252600193, 0.0039437804371118546, 0.0046298149973154068, 0.0060262037441134453, 0.0045052454806864262, 0.0045234537683427334, 0.007059877272695303, 0.0052129817195236683, 0.0043201739899814129, 0.0038489368744194508, 0.0042947367765009403, 0.0048828250728547573, 0.0049912575632333755, 0.003875277703627944, 0.004445456899702549, 0.0051712160930037498, 0.0040457951836287975, 0.0080491751432418823, 0.0045622317120432854, 0.0053604152053594589, 0.0050463816151022911, 0.0044059283100068569, 0.0065544154495000839, 0.0047506638802587986, 0.0068039549514651299, 0.0058058868162333965, 0.0046334555372595787, 0.0037452809046953917, 0.0067083840258419514, 0.0037023124750703573, 0.004997926764190197, 0.005488615483045578, 0.004268464632332325, 0.0047419271431863308, 0.0056188330054283142, 0.005637001246213913, 0.0045364643447101116, 0.0059941769577562809, 0.0041777514852583408, 0.0042613819241523743, 0.0036688903346657753, 0.0057894871570169926, 0.0058686975389719009, 0.0048402245156466961, 0.0053735151886940002, 0.0045400443486869335, 0.0059050875715911388, 0.0038701011799275875, 0.0049570444971323013, 0.0045782197266817093, 0.0040520611219108105, 0.0048258965834975243, 0.0045323260128498077, 0.0036651359405368567, 0.0040739732794463634, 0.0041212188079953194, 0.0044229710474610329, 0.0057023931294679642, 0.0063871662132441998, 0.0065890601836144924, 0.0051883324049413204, 0.004815918393433094, 0.0065678446553647518, 0.0064395829103887081, 0.004793146625161171, 0.0042731505818665028, 0.0052486909553408623, 0.0056711491197347641, 0.004389849491417408, 0.0065126167610287666, 0.0062677557580173016, 0.0044217710383236408, 0.0052890153601765633, 0.0037555794697254896, 0.0045409318991005421, 0.0071785501204431057, 0.0040825027972459793, 0.00563046894967556, 0.0044943112879991531, 0.0048237089067697525, 0.0053790779784321785, 0.0061312653124332428, 0.0077701103873550892, 0.0055599971674382687, 0.0052977469749748707, 0.0041059288196265697, 0.0038135969080030918, 0.0050608296878635883, 0.0057411096058785915, 0.006663633044809103, 0.0039940467104315758, 0.0053252861835062504, 0.0034592919982969761, 0.0060936161316931248, 0.0057451212778687477, 0.0044695711694657803, 0.0059293867088854313, 0.0057556112296879292, 0.0052173682488501072, 0.0052444655448198318, 0.0041648400947451591, 0.0051556583493947983, 0.0077807595953345299, 0.0040350127965211868, 0.0046833199448883533, 0.0044318344444036484, 0.0070861685089766979, 0.0042664334177970886, 0.0059251617640256882, 0.005101486574858427, 0.0049208975397050381, 0.0058679264038801193, 0.0048449477180838585, 0.0068504693917930126, 0.0051966886967420578, 0.0048606842756271362, 0.0055783814750611782, 0.00508152786642313, 0.0065925479866564274, 0.0050521711818873882, 0.0063558970578014851, 0.0052717933431267738, 0.0061022308655083179, 0.0038371644914150238, 0.0044641918502748013, 0.0059236437082290649, 0.0038953004404902458, 0.0064651216380298138, 0.0052475137636065483, 0.0063082990236580372, 0.0046656602062284946, 0.0038485364057123661, 0.0063375663012266159, 0.0049038776196539402, 0.0060801715590059757, 0.0040773302316665649, 0.0045867431908845901, 0.0043630655854940414, 0.0051136491820216179, 0.0064109242521226406, 0.0060888072475790977, 0.00432943319901824, 0.0040209623984992504, 0.0050590592436492443, 0.0068159131333231926, 0.0045260908082127571, 0.0066800862550735474, 0.0043295701034367085, 0.0052623092196881771, 0.0055888076312839985, 0.0056461361236870289, 0.0060321725904941559, 0.0050569898448884487, 0.0050130439922213554, 0.0040790890343487263, 0.0069187772460281849, 0.005565327126532793, 0.0047124582342803478, 0.0041291327215731144, 0.0070502539165318012, 0.0049174772575497627, 0.0066394614987075329, 0.0079436702653765678, 0.0049625704996287823, 0.0041570058092474937, 0.0058790836483240128, 0.0050903744995594025, 0.0052138986065983772, 0.0043626460246741772, 0.0061829178594052792, 0.005093245767056942, 0.0052690980955958366, 0.0048530683852732182, 0.0049767540767788887, 0.0045974045060575008, 0.0055208527483046055, 0.0043668304570019245, 0.0051833516918122768, 0.0036556941922754049, 0.0048525766469538212, 0.0054922844283282757, 0.0052815312519669533, 0.0052791074849665165, 0.0041452515870332718, 0.0064856121316552162, 0.0049248230643570423, 0.0051644849590957165, 0.0070610982365906239, 0.0059116804040968418, 0.006763828918337822, 0.0045310622081160545, 0.0045740990899503231, 0.0045781531371176243, 0.0054973862133920193, 0.0058209397830069065, 0.0048825982958078384, 0.0059726289473474026, 0.0040298691019415855, 0.0042206114158034325, 0.0039970548823475838, 0.0035326031502336264, 0.0043386146426200867, 0.0042672622948884964, 0.0069986339658498764, 0.0052370922639966011, 0.0060219485312700272, 0.0044960929080843925, 0.0070864553563296795, 0.005010153166949749, 0.0041130250319838524, 0.0053606303408741951, 0.0063652764074504375, 0.0061240661889314651, 0.0043936297297477722, 0.0067377248778939247, 0.0062581957317888737, 0.005568389780819416, 0.0073474226519465446, 0.0052651506848633289, 0.005161031149327755, 0.0059477463364601135, 0.0045922752469778061, 0.0046012420207262039, 0.0050609163008630276, 0.0043934728018939495, 0.0044422750361263752, 0.0062887961976230145, 0.0054709953255951405, 0.0044734273105859756, 0.0050197853706777096, 0.0054705217480659485, 0.0044369990937411785, 0.0040499987080693245, 0.0050883288495242596, 0.0072179799899458885, 0.0048445719294250011, 0.0042979288846254349, 0.005368212703615427, 0.0049819913692772388, 0.0041987234726548195, 0.0053722108714282513, 0.0064025293104350567, 0.0047398689202964306, 0.0048658554442226887, 0.0036509199999272823, 0.0060579841956496239, 0.0056929108686745167, 0.0045031094923615456, 0.0050681210123002529, 0.0048695667646825314, 0.0064042620360851288, 0.0056988196447491646, 0.006520361639559269, 0.0068071954883635044, 0.0049825282767415047, 0.0048320256173610687, 0.0044235009700059891, 0.0040893326513469219, 0.0059716878458857536, 0.0039965645410120487, 0.0041803363710641861, 0.0056159347295761108, 0.0050557181239128113, 0.0064944149926304817, 0.0055712061002850533, 0.0044870250858366489, 0.004305665846914053, 0.0051737520843744278, 0.0060398024506866932, 0.0048928768374025822, 0.0065679028630256653, 0.0047275228425860405, 0.0062996619381010532, 0.0053465450182557106, 0.0053710355423390865, 0.0040107821114361286, 0.0045171394012868404, 0.0048603750765323639, 0.0045721624046564102, 0.0056623928248882294, 0.0044019678607583046, 0.0046927342191338539, 0.0062434603460133076, 0.004345194436609745, 0.0058184992522001266, 0.0054473141208291054, 0.0054782889783382416, 0.0045516630634665489, 0.0049141859635710716, 0.0052366801537573338, 0.0045889993198215961, 0.0048541449941694736, 0.0073095019906759262, 0.0055051622912287712, 0.0057440167292952538, 0.0078682638704776764, 0.0046327258460223675, 0.0059900428168475628, 0.0050288154743611813, 0.0043792440555989742, 0.0054265544749796391, 0.0047284062020480633, 0.0053222258575260639, 0.0044900905340909958, 0.0056630424223840237, 0.0062947375699877739, 0.0051378132775425911, 0.0047831442207098007, 0.005150077398866415, 0.0053922859951853752, 0.0070358850061893463, 0.0062059313058853149, 0.0038447086699306965, 0.0071576391346752644, 0.0045807757414877415, 0.0051896045915782452, 0.004807058721780777, 0.0037122056819498539, 0.0068816347047686577, 0.0034714923240244389, 0.005288037471473217, 0.0049916780553758144, 0.0053866608068346977, 0.0040396843105554581, 0.0058026355691254139, 0.005766652524471283, 0.0058459537103772163, 0.0041438625194132328, 0.0067448178306221962, 0.0047287070192396641, 0.0061204922385513783, 0.004146612249314785, 0.0058616660535335541, 0.0037517014425247908, 0.0054252413101494312, 0.0066113322973251343, 0.0041013527661561966, 0.0063609126955270767, 0.0042126062326133251, 0.0052058030851185322, 0.0040627275593578815, 0.0046434015966951847, 0.0059052295982837677, 0.0063184476457536221, 0.004530884325504303, 0.0048230472020804882, 0.003775167278945446, 0.005599848460406065, 0.0052609997801482677, 0.0042412127368152142, 0.0040646232664585114, 0.0052907820791006088, 0.0056052319705486298, 0.0055593210272490978, 0.0068894489668309689, 0.007662053219974041, 0.0057195965200662613, 0.0045441235415637493, 0.005085404496639967, 0.003892483888193965, 0.0055596595630049706, 0.0059559685178101063, 0.0042620711028575897, 0.0046453224495053291, 0.0050586117431521416, 0.0057503506541252136, 0.0047838632017374039, 0.0037916414439678192, 0.0056344904005527496, 0.0041136802174150944, 0.0060042082332074642, 0.0055814431980252266, 0.0056365593336522579, 0.0042146383784711361, 0.0048085427843034267, 0.0050691524520516396, 0.003977388609200716, 0.0057047395966947079, 0.0051991944201290607, 0.0062909163534641266, 0.0044817458838224411, 0.0041693444363772869, 0.0063125616870820522, 0.0068349782377481461, 0.0051365639083087444, 0.0056432341225445271, 0.0062956470064818859, 0.004168141633272171, 0.003539747092872858, 0.0041791191324591637, 0.0038534058257937431, 0.004873709287494421, 0.0051326220855116844, 0.0056060049682855606, 0.0040088226087391376, 0.0048479214310646057, 0.0048131220974028111, 0.0050336737185716629, 0.0044928728602826595, 0.0039642895571887493, 0.0047550508752465248, 0.005066276527941227, 0.0062580821104347706, 0.0050058974884450436, 0.0042034178040921688, 0.006195547990500927, 0.0033818972297012806, 0.005107121542096138, 0.0048346235416829586, 0.0043264641426503658, 0.0047484631650149822, 0.0035226258914917707, 0.0066178399138152599, 0.0039658923633396626, 0.0044895983301103115, 0.0046861572191119194, 0.0054138298146426678, 0.0067781382240355015, 0.0051921033300459385, 0.005334251094609499, 0.005529564805328846, 0.0044677155092358589, 0.0066380701027810574, 0.0055763581767678261, 0.0055169225670397282, 0.0051338407211005688, 0.0051479330286383629, 0.0040999036282300949, 0.0048288814723491669, 0.0039386921562254429, 0.0060681216418743134, 0.0037793582305312157, 0.0084742875769734383, 0.0066953441128134727, 0.0056762374006211758, 0.0045752306468784809, 0.0056759780272841454, 0.0043341126292943954, 0.0042026974260807037, 0.0038294808473438025, 0.0063519440591335297, 0.0049712336622178555, 0.0054040160030126572, 0.0055239624343812466, 0.0040370626375079155, 0.006310279481112957, 0.00493280915543437, 0.0066996915265917778, 0.0053712590597569942, 0.0045042694546282291, 0.0057535474188625813, 0.004391595721244812, 0.003964434377849102, 0.0048424499109387398, 0.0053711016662418842, 0.0047536264173686504, 0.0043686111457645893, 0.0070983129553496838, 0.0069837090559303761, 0.0067423288710415363, 0.0051663331687450409, 0.0042868521995842457, 0.0058104903437197208, 0.004063023254275322, 0.0048772003501653671, 0.0042612403631210327, 0.0053301402367651463, 0.0044488552957773209, 0.0074058892205357552, 0.0053768390789628029, 0.0050889085978269577, 0.0050771608948707581, 0.0072441184893250465, 0.0043387236073613167, 0.0060329674743115902, 0.0047906171530485153, 0.0058124242350459099, 0.0056053441949188709, 0.0052135437726974487, 0.0047268467023968697, 0.0069651841185986996, 0.0057317526079714298, 0.005185465794056654, 0.0047777765430510044, 0.0044003608636558056, 0.0064143557101488113, 0.0066935154609382153, 0.004566107876598835, 0.0049694688059389591, 0.0054041324183344841, 0.0043916665017604828, 0.0044128065928816795, 0.0074913469143211842, 0.0042488332837820053, 0.0050207274034619331, 0.0050043514929711819, 0.0040186685509979725, 0.0039520463906228542, 0.0048956782557070255, 0.0038891476579010487, 0.0073130051605403423, 0.0045399176888167858, 0.0065199742093682289, 0.0044079022482037544, 0.0048340153880417347, 0.003519850317388773, 0.0045028147287666798, 0.0054169176146388054, 0.0037158532068133354, 0.0056385854259133339, 0.0041666729375720024, 0.0060534160584211349, 0.005299961194396019, 0.0046585854142904282, 0.0046219914220273495, 0.0041224528104066849, 0.0038390189874917269, 0.0045750918798148632, 0.0045280233025550842, 0.0060797980986535549, 0.0060151703655719757, 0.0046876375563442707, 0.0048791016452014446, 0.0055057480931282043, 0.0062468717806041241, 0.0054892366752028465, 0.00534392474219203, 0.0041329944506287575, 0.0053333188407123089, 0.0056535410694777966, 0.0061138318851590157, 0.0052726459689438343, 0.0056461775675415993, 0.0060492581687867641, 0.0031961505301296711, 0.004418584518134594, 0.0051881857216358185, 0.0034630047157406807, 0.0040356139652431011, 0.0041829082183539867, 0.0046067885123193264, 0.0043773707002401352, 0.0045403321273624897, 0.0035901013761758804, 0.0043226913549005985, 0.0045927152968943119, 0.0073844250291585922, 0.0053184940479695797, 0.006284395232796669, 0.0061565116047859192, 0.0057454141788184643, 0.0036993904504925013, 0.0038551888428628445, 0.00529490876942873, 0.0057480721734464169, 0.0039614583365619183, 0.005768198985606432, 0.0049578971229493618, 0.0059405569918453693, 0.0037984703667461872, 0.0061264527030289173, 0.0063135246746242046, 0.0056166546419262886, 0.0038795261643826962, 0.0054053380154073238, 0.0043513961136341095, 0.0049135354347527027, 0.0045197578147053719, 0.0047967764548957348, 0.0043675336055457592, 0.0047234832309186459, 0.005441104993224144, 0.0043707261793315411, 0.0051865600980818272, 0.0065845977514982224, 0.0049557420425117016, 0.0049651265144348145, 0.0064358646050095558, 0.0040982873179018497, 0.0041177598759531975, 0.0062015336006879807, 0.0046951966360211372, 0.0037779849953949451, 0.0064330613240599632, 0.0050499029457569122, 0.0044536273926496506, 0.0051324740052223206, 0.0057788514532148838, 0.0058025592006742954, 0.006299865897744894, 0.005677396897226572, 0.0057766679674386978, 0.0053270854987204075, 0.0056757982820272446, 0.0046667600981891155, 0.005751424003392458, 0.0053109112195670605, 0.00546667305752635, 0.0050675263628363609, 0.0039916299283504486, 0.0044277599081397057, 0.0048778699710965157, 0.0050995592027902603, 0.005400379654020071, 0.0043116360902786255, 0.0054492205381393433, 0.0047494824975728989, 0.0028134500607848167, 0.0068200826644897461, 0.0042829420417547226, 0.0045416755601763725, 0.0045021381229162216, 0.0049502192996442318, 0.003694155253469944, 0.0057529406622052193, 0.0046252128668129444, 0.0035732721444219351, 0.0048517221584916115, 0.0038105116691440344, 0.0052775354124605656, 0.0052844998426735401, 0.0045680715702474117, 0.0041560954414308071, 0.0030434008222073317, 0.0047595049254596233, 0.0065321982838213444, 0.0054870308376848698, 0.0044456594623625278, 0.0059947352856397629, 0.005651252344250679, 0.0039053137879818678, 0.0050622997805476189, 0.0037446729838848114, 0.0053732818923890591, 0.0049930443055927753, 0.005875742994248867, 0.0060143996961414814, 0.0050906841643154621, 0.0043510706163942814, 0.004692484624683857, 0.0048163835890591145, 0.004600385669618845, 0.004229844082146883, 0.0058950465172529221, 0.0057284636422991753, 0.0056824344210326672, 0.0037820311263203621, 0.004689428023993969, 0.0070209414698183537, 0.0047922255471348763, 0.0051146466284990311, 0.0049720555543899536, 0.0060174115933477879, 0.0071453382261097431, 0.0059870593249797821, 0.0047867647372186184, 0.0047899340279400349, 0.0058563593775033951, 0.005432620644569397, 0.0042560617439448833, 0.0040155509486794472, 0.0046852775849401951, 0.0051745134405791759, 0.005469747819006443, 0.0062644830904901028, 0.0048146662302315235, 0.0051156934350728989, 0.0069021349772810936, 0.0071720336563885212, 0.0040795160457491875, 0.0061603100039064884, 0.0051936274394392967, 0.0047271503135561943, 0.0041431994177401066, 0.0043042427860200405, 0.0058121387846767902, 0.0078143775463104248, 0.0042360993102192879, 0.0041525457054376602, 0.0031724900472909212, 0.0063699819147586823, 0.0052187829278409481, 0.0050680479034781456, 0.0056954794563353062, 0.0047503560781478882, 0.0034663670230656862, 0.0044575142674148083, 0.0044929422438144684, 0.0064520062878727913, 0.0054768798872828484, 0.0062960791401565075, 0.0056207906454801559, 0.0055933832190930843, 0.0046197297051548958, 0.0039713946171104908, 0.0054463199339807034, 0.0046494295820593834, 0.0066351350396871567, 0.0061630075797438622, 0.0055620456114411354, 0.0036354553885757923, 0.0056375316344201565, 0.0060538500547409058, 0.0061429888010025024, 0.0048274216242134571, 0.005547698587179184, 0.0057558021508157253, 0.0069250930100679398, 0.0052936729043722153, 0.0059466804377734661, 0.0053908252157270908, 0.0036470424383878708, 0.0037604821845889091, 0.0037862681783735752, 0.0050720786675810814, 0.0037113712169229984, 0.0056615271605551243, 0.006515825167298317, 0.0056527713313698769, 0.0053093270398676395, 0.0043861647136509418, 0.0043209320865571499, 0.0074872411787509918, 0.006029872689396143, 0.0045286240056157112, 0.0053604887798428535, 0.0052941520698368549, 0.0037216993514448404, 0.0052751451730728149, 0.0052462462335824966, 0.004477126058191061, 0.0045290538109838963, 0.0043639997020363808, 0.005459614098072052, 0.0040112254209816456, 0.0039136097766458988, 0.0058211875148117542, 0.0055267936550080776, 0.0051957191899418831, 0.0052790599875152111, 0.006998435128480196, 0.0043748160824179649, 0.004778561182320118, 0.0038121331017464399, 0.0041194986552000046, 0.0047770733945071697, 0.0057665882632136345, 0.0053694820962846279, 0.0054698372259736061, 0.0044058398343622684, 0.0038939446676522493, 0.0047401208430528641, 0.0048985788598656654, 0.0057430481538176537, 0.0043917614966630936, 0.0049144118092954159, 0.0047793942503631115, 0.0039974050596356392, 0.00352504663169384, 0.0059716110117733479, 0.0074203247204422951, 0.0054863947443664074, 0.0044520390219986439, 0.0066033340990543365, 0.006440452765673399, 0.004318412858992815, 0.0052172578871250153, 0.0040781251154839993, 0.0051077995449304581, 0.0041125407442450523, 0.004371370654553175, 0.004033123143017292, 0.004590142983943224, 0.0047327633947134018, 0.0059578255750238895, 0.0048930258490145206, 0.0040157046169042587, 0.003866617102175951, 0.0042615057900547981, 0.0054176365956664085, 0.0041775275021791458, 0.006336594931781292, 0.0047006122767925262, 0.0051597603596746922, 0.0053560133092105389, 0.0042530084028840065, 0.0055774669162929058, 0.0058217146433889866, 0.0056939865462481976, 0.0053191566839814186, 0.0061187213286757469, 0.0052257557399570942, 0.0050212452188134193, 0.0067582582123577595, 0.0040477979928255081, 0.0057535450905561447, 0.0064114434644579887, 0.0053562447428703308, 0.0050312499515712261, 0.0046850894577801228, 0.0050432099960744381, 0.005396026186645031, 0.0043046427890658379, 0.0041425437666475773, 0.0041805696673691273, 0.0058853118680417538, 0.0058635999448597431, 0.0047843889333307743, 0.0035696160048246384, 0.0058554899878799915, 0.003667821642011404, 0.0048681567423045635, 0.0057715452276170254, 0.0047558541409671307, 0.0057193958200514317, 0.0044100801460444927, 0.0063339793123304844, 0.0057406597770750523, 0.0051196524873375893, 0.0043565020896494389, 0.0052906977944076061, 0.0044965441338717937, 0.0052195573225617409, 0.0048294831067323685, 0.0040094656869769096, 0.0046373927034437656, 0.0056471037678420544, 0.0055106049403548241, 0.0054431739263236523, 0.0053548440337181091, 0.0037853820249438286, 0.004189356230199337, 0.0059184776619076729, 0.0049027213826775551, 0.0074327802285552025, 0.0043778014369308949, 0.0051073567010462284, 0.0044783963821828365, 0.0066647622734308243, 0.0051251421682536602, 0.0053358851000666618, 0.0053174961358308792, 0.0054655321873724461, 0.0066054523922502995, 0.0046077994629740715, 0.0035221346188336611, 0.005413801409304142, 0.0056763659231364727, 0.0064813075587153435, 0.0041259368881583214, 0.0060254759155213833, 0.0042372127063572407, 0.0043363389559090137, 0.0058236783370375633, 0.0054665100760757923, 0.006255412008613348, 0.0058906315825879574, 0.0043983780778944492, 0.0038404238875955343, 0.0049343602731823921, 0.0050819371826946735, 0.0045957658439874649, 0.0068890196271240711, 0.0081418305635452271, 0.0046908506192266941, 0.0038888517301529646, 0.0054337573237717152, 0.0059610488824546337, 0.0049137291498482227, 0.0065422705374658108, 0.0041568931192159653, 0.0051331198774278164, 0.0055689583532512188, 0.0052758650854229927, 0.0050339773297309875, 0.0052578463219106197, 0.0056399567984044552, 0.0048123393207788467, 0.0052486266940832138, 0.0040376419201493263, 0.0049453889951109886, 0.0044665830209851265, 0.0041218232363462448, 0.006265539675951004, 0.0047709932550787926, 0.0046176793985068798, 0.006194655317813158, 0.005073231179267168, 0.0048878868110477924, 0.0047499663196504116, 0.0049888668581843376, 0.0056857084855437279, 0.0048376657068729401, 0.0054700984619557858, 0.0056679043918848038, 0.007375841960310936, 0.0044133332557976246, 0.0058497642166912556, 0.0063974750228226185, 0.0046689794398844242, 0.0035578438546508551, 0.0055346861481666565, 0.0052640917710959911, 0.0062284148298203945, 0.0058950884267687798, 0.0050454777665436268, 0.0060311206616461277, 0.0045141400769352913, 0.0062580825760960579, 0.0043243700638413429, 0.0059118643403053284, 0.0045265397056937218, 0.00574480090290308, 0.0049093193374574184, 0.0067431656643748283, 0.0046368604525923729, 0.0052484557963907719, 0.0044206748716533184, 0.0063646691851317883, 0.0052671576850116253, 0.0047662500292062759, 0.0049882992170751095, 0.0045688813552260399, 0.0050917943008244038, 0.0051278630271553993, 0.0053043877705931664, 0.0054501262493431568, 0.0043581402860581875, 0.0038545865099877119, 0.0053388928063213825, 0.0060892272740602493, 0.0050841709598898888, 0.004775454755872488, 0.0048530134372413158, 0.00754213472828269, 0.0049302675761282444, 0.0049616312608122826, 0.0047980975359678268, } };
const TfArray<1280, int> quant77_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const ALIGN(8) int8_t tensor_data78[1*3*3*8] = { 
  /* [0][0][][] */ 1,-17,-4,7,0,-1,0,-5, -13,18,-11,127,4,3,-3,64, 0,-1,-3,5,-1,3,1,1, 
  /* [0][1][][] */ -9,-127,-7,-3,1,1,-127,-1, 127,-1,-127,1,-127,127,-5,-13, -7,4,-3,-1,1,7,0,3, 
  /* [0][2][][] */ 0,7,-8,-4,-1,1,8,2, -8,9,0,5,4,-18,3,-127, -1,-3,-1,-1,-2,1,1,-19, 
};
const TfArray<4, int> tensor_dimension78 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant78_scale = { 8, { 0.0096412086859345436, 0.0046483725309371948, 0.013894679956138134, 0.0083508361130952835, 0.014161180704832077, 0.0074575357139110565, 0.0063511882908642292, 0.0078233126550912857, } };
const TfArray<8, int> quant78_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 3 };
const ALIGN(8) int32_t tensor_data79[8] = { 5340, -9069, -9937, 4852, 7054, 282, -10187, 10997, };
const TfArray<1, int> tensor_dimension79 = { 1, { 8 } };
const TfArray<8, float> quant79_scale = { 8, { 0.00019544680253602564, 5.6065007811412215e-05, 0.00010600285895634443, 7.9611330875195563e-05, 3.7687463191105053e-05, 9.7864809504244477e-05, 4.2441068217158318e-05, 5.9059530030936003e-05, } };
const TfArray<8, int> quant79_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const ALIGN(8) int8_t tensor_data80[1*3*3*48] = { 
  /* [0][0][][] */ -49,113,35,36,-77,-78,-19,75,-89,-90,51,13,60,-127,-74,-75,93,-88,-109,-31,71,-56,34,24,113,80,-103,101,-23,26,-55,-69,-68,33,-3,81,105,77,-77,95,70,2,-113,58,-44,-46,-78,-46, 85,71,22,-127,-88,-115,-27,75,34,-127,54,-114,84,-37,-121,90,102,-95,-115,-34,106,-97,-81,98,-121,86,18,-127,-74,43,-82,-93,-87,40,-57,0,127,94,82,77,-80,-15,0,95,-97,-49,-116,-67, -20,-13,-11,88,-37,-21,12,13,48,-54,-21,84,9,-22,-38,-44,24,-10,-16,-8,74,-40,-17,41,11,31,97,26,-71,8,-43,-28,-36,-4,2,-13,43,42,-17,28,13,6,-10,52,-71,-16,-27,-13, 
  /* [0][1][][] */ -76,127,-126,-21,-127,-87,-95,96,127,24,116,18,111,-68,-83,-86,112,-127,-96,-79,86,98,-71,21,-127,113,-127,-72,-27,-86,84,-110,-93,115,-56,127,-18,119,-90,127,17,-54,-127,68,-89,-101,-97,-98, 127,53,-127,119,-107,-127,-127,127,-46,23,127,-122,127,29,-127,127,127,-112,-127,-127,127,127,127,127,119,127,-12,99,-127,-127,127,-127,-127,127,-127,82,-4,127,127,57,-47,-77,-20,127,-127,-127,-127,-127, -24,-23,-27,-98,-46,-30,-26,31,-71,7,1,127,22,24,-44,-69,29,4,-42,-45,85,54,12,51,8,48,100,-18,-95,-75,68,-50,-67,13,-9,-2,-7,27,-19,29,28,-32,0,64,-94,-46,-59,-36, 
  /* [0][2][][] */ -34,46,96,-17,-72,-3,-94,7,-34,67,91,-5,50,-47,-33,-55,42,-52,1,-71,10,-28,36,6,14,27,-45,-11,-1,85,-22,-47,-57,57,5,54,-70,24,-51,53,-86,-92,-64,16,-34,-61,-40,-40, 52,28,96,8,-61,-21,-115,14,11,78,87,-63,46,17,-45,72,29,-35,11,-90,21,-38,-43,45,2,32,-18,7,-83,122,-49,-45,-66,58,-10,56,-114,10,61,2,127,-127,4,51,-48,-70,-66,-44, -9,-5,36,10,-3,3,-64,-1,21,22,1,59,6,21,-1,-51,13,15,-1,-35,10,-20,7,-5,-17,27,32,-4,-48,71,-27,-9,-37,-2,12,18,-43,1,7,11,-39,-49,11,11,-32,-17,-19,-3, 
};
const TfArray<4, int> tensor_dimension80 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant80_scale = { 48, { 0.01043145265430212, 0.0040926956571638584, 0.01286227535456419, 0.023484289646148682, 0.0070057609118521214, 0.0036128601059317589, 0.0035440241917967796, 0.0039978446438908577, 0.018676565960049629, 0.0035850042477250099, 0.0049428059719502926, 0.0047158421948552132, 0.0020810696296393871, 0.008478640578687191, 0.005476086400449276, 0.0043857456184923649, 0.0060314950533211231, 0.0053149140439927578, 0.0028795592952519655, 0.00542454794049263, 0.0036176396533846855, 0.0090530207380652428, 0.042116411030292511, 0.0043904935009777546, 0.020627066493034363, 0.0026438841596245766, 0.0047174543142318726, 0.024031508713960648, 0.0050785061903297901, 0.009218897670507431, 0.012229002080857754, 0.0077596884220838547, 0.0054111499339342117, 0.013527576811611652, 0.0067969281226396561, 0.0050129448063671589, 0.0064019509591162205, 0.005089824553579092, 0.0050687068141996861, 0.00239384057931602, 0.028503753244876862, 0.0053194151259958744, 0.010109648108482361, 0.0028006106149405241, 0.0038213147781789303, 0.0051766303367912769, 0.0047842352651059628, 0.0025015701539814472, } };
const TfArray<48, int> quant80_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 3 };
const ALIGN(8) int32_t tensor_data81[8] = { -15552, -5436, -5269, -476, 8433, 12051, -11493, 5830, };
const TfArray<1, int> tensor_dimension81 = { 1, { 8 } };
const TfArray<8, float> quant81_scale = { 8, { 0.00016456683806609362, 0.00010972535528708249, 0.0001617249654373154, 0.00015203490329440683, 0.00014595979882869869, 0.00015164252545218915, 0.00018136364815291017, 0.00011361799988662824, } };
const TfArray<8, int> quant81_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const ALIGN(8) int8_t tensor_data82[1*3*3*48] = { 
  /* [0][0][][] */ 13,36,-89,-20,-78,11,99,9,48,67,8,9,-45,-1,-8,-8,100,-4,12,-117,-109,-9,16,76,-15,-16,15,-13,75,13,-19,-16,-26,1,-17,-111,-37,-2,-12,36,32,-55,-22,-40,48,27,0,-32, 116,127,127,-42,-103,74,-38,127,93,104,-33,-61,-9,-56,0,21,127,59,28,75,127,-30,-3,127,56,127,68,8,-61,16,7,127,-127,12,-36,-40,50,-38,-69,127,66,127,-127,26,-44,-44,-4,-37, 9,32,19,41,-29,-27,-95,-37,18,45,10,33,-5,27,-14,1,-5,-24,-2,41,-5,-2,9,67,-27,-48,12,-13,-44,10,-11,-9,-28,7,42,-116,5,33,-9,38,-84,-20,5,-47,39,-5,-9,0, 
  /* [0][1][][] */ 49,-40,-126,-96,-24,2,127,-45,-54,6,5,-75,27,-127,21,24,109,-9,27,127,87,-17,2,-36,-55,14,-41,-13,127,34,31,72,37,4,0,-127,-47,40,49,-40,20,31,25,51,29,104,99,127, 28,-2,118,4,36,-42,-16,-71,-127,121,127,-127,-127,-67,127,127,72,-127,-127,-71,-79,-127,127,-81,127,-66,-127,127,-46,-127,127,59,85,127,-104,-74,-45,-127,127,-5,72,-82,105,127,-127,-127,127,-39, 42,-28,-72,127,-18,1,-104,-38,-13,-3,-21,-28,37,-18,2,37,33,55,65,-79,9,-6,-4,-53,-73,25,-42,-5,-42,19,-16,14,39,13,127,-110,127,101,32,-52,-127,5,1,13,25,53,57,-98, 
  /* [0][2][][] */ 15,-68,-83,-24,-6,-42,-32,4,-1,59,-10,63,36,0,-25,3,-17,37,4,-19,40,-12,11,-39,-21,8,27,-9,87,-10,-30,1,-4,12,-5,71,-14,-18,-31,-23,29,24,-3,-3,26,48,-4,-95, 127,14,92,-27,-127,-127,16,48,30,-127,-37,-49,23,-56,6,2,11,30,67,-2,-61,-1,-21,-44,47,-62,66,2,-116,48,-33,79,33,37,-31,17,36,-9,-71,-44,42,-31,21,34,-34,-67,-13,32, 10,-80,15,-37,-44,-40,48,-13,-14,57,1,65,59,27,-22,5,10,8,-2,14,-8,-11,9,-26,-35,21,21,-4,-20,-9,-15,-8,-9,25,19,77,7,11,-21,-11,-88,8,-2,6,27,1,-17,-16, 
};
const TfArray<4, int> tensor_dimension82 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant82_scale = { 48, { 0.0054330197162926197, 0.0088657001033425331, 0.0059890546835958958, 0.0034333588555455208, 0.009386429563164711, 0.0058158589527010918, 0.028354715555906296, 0.014929462224245071, 0.0091205425560474396, 0.0094519834965467453, 0.025030570104718208, 0.006608723197132349, 0.020842097699642181, 0.0049478150904178619, 0.023874811828136444, 0.0099764596670866013, 0.0046020215377211571, 0.16852405667304993, 0.012168065644800663, 0.038622908294200897, 0.01032409630715847, 0.0070218048058450222, 0.0081046679988503456, 0.010060194879770279, 0.014330169185996056, 0.010166567750275135, 0.011377880349755287, 0.023970061913132668, 0.010558802634477615, 0.05373777449131012, 0.023377729579806328, 0.0026895550545305014, 0.010617928579449654, 0.012245521880686283, 0.01360455434769392, 0.005081529263406992, 0.0065609137527644634, 0.0091555928811430931, 0.022838633507490158, 0.015192383900284767, 0.005417725071310997, 0.035218782722949982, 0.013770016841590405, 0.032990731298923492, 0.017552973702549934, 0.0081687606871128082, 0.011565154418349266, 0.006404142826795578, } };
const TfArray<48, int> quant82_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 3 };
const ALIGN(8) int32_t tensor_data83[8] = { -13592, 1084, -3316, 17930, -11156, -1846, 6241, -7226, };
const TfArray<1, int> tensor_dimension83 = { 1, { 8 } };
const TfArray<8, float> quant83_scale = { 8, { 0.00016427312220912427, 0.0001471573777962476, 0.000104983635537792, 0.00015582318883389235, 0.00027362152468413115, 0.00013992053573019803, 0.00010687275789678097, 0.00016250487533397973, } };
const TfArray<8, int> quant83_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const ALIGN(8) int8_t tensor_data84[1*3*3*48] = { 
  /* [0][0][][] */ -89,78,-82,120,73,-68,12,-119,-77,80,87,-65,78,51,-112,-95,56,-58,-98,74,-89,78,81,88,-102,74,71,67,-39,-52,-65,96,72,-59,-59,-74,-78,78,-66,99,-37,51,-97,-52,-87,95,58,-62, -122,115,-99,-77,-43,-94,-63,-118,-116,105,95,-93,127,78,-127,-106,93,-68,-90,83,-87,98,107,127,-90,89,94,98,-63,-83,-86,119,92,-73,-86,-94,-71,112,-115,111,-57,86,-104,-81,-111,117,82,-91, -52,55,-63,-24,-90,-38,-71,-47,-46,41,28,-32,50,33,-45,-49,29,-46,-50,50,-34,61,37,43,-53,34,33,24,-33,-34,-45,49,34,-49,-46,-39,-35,59,-62,29,-1,29,-37,-44,-47,32,33,-24, 
  /* [0][1][][] */ -106,96,-108,127,68,-103,5,-123,-93,93,102,-94,-9,91,-112,-116,64,-102,-112,102,-124,105,108,83,-127,102,100,87,-77,-93,-104,100,101,-123,-83,-100,-127,90,-96,105,-89,86,-127,-80,-108,104,106,-92, -127,127,-127,-126,-105,-127,-112,-127,-127,127,127,-127,-4,127,-99,-127,127,-127,-127,127,-127,127,127,120,-111,127,127,127,-127,-127,-127,127,127,-127,-127,-127,-110,127,-127,127,-127,127,-121,-127,-127,127,127,-127, -74,64,-84,-95,-127,-67,-127,-44,-48,49,45,-52,2,55,-62,-57,44,-66,-74,63,-52,66,41,32,-58,46,40,41,-69,-72,-80,54,45,-100,-49,-47,-77,50,-80,32,-31,60,-45,-62,-55,34,65,-56, 
  /* [0][2][][] */ -78,37,-39,59,67,-66,3,-69,-34,22,39,-41,-82,48,-59,-73,15,-50,-40,44,-59,60,40,-12,-28,28,28,38,-50,-48,-69,22,39,-36,-38,-51,-61,16,-46,32,-54,39,-70,-30,-48,29,52,-23, -95,39,-72,-46,-76,-74,-71,-60,-32,32,60,-58,-116,67,-85,-64,44,-56,-76,50,-52,78,41,-15,-24,54,35,40,-68,-75,-79,33,49,-56,-54,-56,-61,29,-64,34,-71,62,-64,-62,-61,19,67,-49, -46,24,-14,-61,-110,-38,-84,-13,-10,24,30,-33,-65,22,-2,-20,18,-23,-50,27,-19,21,11,-14,-9,16,15,38,-57,-37,-52,12,8,-45,-7,-7,-15,3,-27,6,-28,29,-24,-26,0,14,29,-22, 
};
const TfArray<4, int> tensor_dimension84 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant84_scale = { 48, { 0.0041944142431020737, 0.0047686356119811535, 0.0041037225164473057, 0.0039555639959871769, 0.0043239975348114967, 0.0042765303514897823, 0.0041914037428796291, 0.0033856427762657404, 0.0023894980549812317, 0.0050469366833567619, 0.0049326657317578793, 0.0033821864053606987, 0.0064997770823538303, 0.0038705114275217056, 0.0038095545023679733, 0.0027809529565274715, 0.0041933157481253147, 0.0046365568414330482, 0.0037021285388618708, 0.010844261385500431, 0.0038724006153643131, 0.0060847783461213112, 0.0081725511699914932, 0.0031069607939571142, 0.0046545700170099735, 0.020734982565045357, 0.0042830947786569595, 0.021829767152667046, 0.0039420421235263348, 0.0054536070674657822, 0.0039299996569752693, 0.0015606974484398961, 0.0048887073062360287, 0.0033965101465582848, 0.0056657982058823109, 0.004293534904718399, 0.004697056021541357, 0.0047511323355138302, 0.0043546832166612148, 0.0036098277196288109, 0.002366113243624568, 0.0033262115903198719, 0.0024352155160158873, 0.0042861886322498322, 0.0030791410245001316, 0.0024737166240811348, 0.0028919996693730354, 0.0045806374400854111, } };
const TfArray<48, int> quant84_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 3 };
const ALIGN(8) int32_t tensor_data85[8] = { 8069, -12912, -23464, 3466, 425, 6440, -4446, 29120, };
const TfArray<1, int> tensor_dimension85 = { 1, { 8 } };
const TfArray<8, float> quant85_scale = { 8, { 0.00012355021317489445, 8.718181197764352e-05, 8.4184655861463398e-05, 0.00012239981151651591, 0.00010452382412040606, 0.00010155481868423522, 0.00010821595788002014, 8.9839195425156504e-05, } };
const TfArray<8, int> quant85_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const ALIGN(8) int8_t tensor_data86[1*3*3*48] = { 
  /* [0][0][][] */ 1,-22,21,-24,-103,6,-30,11,-6,66,-50,-94,-42,-127,-19,-120,-98,-24,-5,-1,7,38,-10,28,-127,2,-80,-111,-41,24,11,-37,-13,69,-30,-51,-37,-17,-13,-80,126,4,97,19,28,34,15,19, 46,-12,33,-127,-114,66,50,127,-75,-75,-116,33,26,-47,-127,41,103,-18,-12,-4,-79,2,11,-21,-31,-1,-76,-127,-127,67,88,-29,-3,127,-40,-87,-110,-67,-14,-127,-127,51,127,52,34,36,18,44, -2,32,4,-8,-41,0,-52,6,3,90,-46,-92,36,-87,-5,-95,56,-22,-15,9,3,34,0,34,-111,-3,-90,-105,-36,22,14,-41,-4,37,-7,-38,-13,-45,-15,-92,126,-8,75,-127,12,35,-16,32, 
  /* [0][1][][] */ 32,-111,-27,34,-107,2,111,-25,3,30,-108,28,-78,-9,-66,-30,82,-39,-30,-93,81,25,127,8,-76,-32,-108,-21,-50,117,2,-18,-31,51,-11,-127,12,-69,7,-110,-82,24,-88,105,8,26,127,26, 127,13,127,59,127,127,127,-60,-80,-83,-26,127,-51,1,-113,-127,18,127,127,-19,-127,127,-95,127,-74,-74,107,103,-80,76,-127,-90,-127,41,127,40,95,-1,-127,6,-100,127,-110,17,127,-127,-48,86, 40,127,-42,16,-68,2,112,-22,5,80,-127,16,127,30,-49,-37,-78,-82,-50,127,59,14,-30,8,-74,127,-127,-59,-42,91,-15,-10,-49,30,-88,-120,12,-127,5,-106,-79,1,-61,-53,1,20,-84,-38, 
  /* [0][2][][] */ -8,-37,10,-2,-71,15,-61,19,12,127,-54,13,-8,-63,11,-107,-127,0,-41,12,28,-7,6,4,-120,8,-84,-110,28,127,-12,69,-12,45,-76,-43,-29,16,50,-58,109,-52,0,1,21,28,6,-34, -3,-28,15,65,-74,-26,84,-71,127,96,-118,-27,-21,-37,-102,21,31,-56,-36,-46,-36,36,4,23,-29,0,72,-87,-18,-49,38,127,-32,1,-107,-72,-127,-46,67,-127,-104,-40,8,-70,-16,12,-14,-127, 6,47,13,-8,-40,2,-66,18,1,82,-40,4,18,-35,18,-87,25,2,-42,25,11,9,-12,6,-121,-4,-97,-91,38,83,-3,57,-7,52,-26,-4,-17,-4,49,-56,105,-45,-6,-76,9,24,0,-9, 
};
const TfArray<4, int> tensor_dimension86 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant86_scale = { 48, { 0.0053727212361991405, 0.011182785965502262, 0.013540560379624367, 0.028148137032985687, 0.0051770112477242947, 0.012525882571935654, 0.0047132731415331364, 0.019493278115987778, 0.012992230243980885, 0.003219568869099021, 0.0033811316825449467, 0.012724478729069233, 0.011623146012425423, 0.0043969559483230114, 0.0067485487088561058, 0.0055547174997627735, 0.011702786199748516, 0.013903071172535419, 0.0062344521284103394, 0.011583771556615829, 0.015200401656329632, 0.024003930389881134, 0.020050538703799248, 0.0068807546049356461, 0.0038371838163584471, 0.019393656402826309, 0.0042390041053295135, 0.0032199621200561523, 0.0035513602197170258, 0.012552449479699135, 0.01489645428955555, 0.0086498521268367767, 0.006741388700902462, 0.0032368479296565056, 0.0059243980795145035, 0.0047679799608886242, 0.0061935549601912498, 0.0052458769641816616, 0.012191725894808769, 0.0038480348885059357, 0.0049758292734622955, 0.010100732557475567, 0.00919309351593256, 0.020743111148476601, 0.060663066804409027, 0.009215756319463253, 0.014893470332026482, 0.016098121181130409, } };
const TfArray<48, int> quant86_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 3 };
const ALIGN(8) int32_t tensor_data87[8] = { -5698, 7667, -10410, 12469, -2302, -7244, 2488, -5107, };
const TfArray<1, int> tensor_dimension87 = { 1, { 8 } };
const TfArray<8, float> quant87_scale = { 8, { 8.6661588284187019e-05, 9.8252050520386547e-05, 5.1619361329358071e-05, 9.939562005456537e-05, 8.2547900092322379e-05, 0.0001003504658001475, 8.6660962551832199e-05, 8.5141487943474203e-05, } };
const TfArray<8, int> quant87_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const ALIGN(8) int8_t tensor_data88[1*3*3*48] = { 
  /* [0][0][][] */ 43,13,114,-126,-17,-11,-26,51,-94,-68,-20,-71,12,-44,110,72,-117,119,57,66,-4,-3,15,79,13,-48,-124,77,-45,88,-24,47,-35,-61,-42,54,-14,-123,32,32,-12,-51,-107,30,-22,-65,12,-14, -12,85,124,-127,22,36,-11,127,21,-71,-126,-79,67,6,-28,127,-51,91,-127,-32,-95,101,53,-24,76,-118,-25,98,-127,56,-127,79,23,4,127,110,-49,-127,-17,27,-127,127,1,75,32,-66,5,42, 25,-98,124,-121,-13,16,17,36,-84,-65,-31,-58,-4,50,-62,36,-127,108,52,43,6,-4,16,-49,15,-51,-88,67,-27,48,-19,32,-35,-45,-66,42,-5,-87,-12,22,-9,-28,65,6,-12,-52,6,-43, 
  /* [0][1][][] */ 62,43,-4,86,70,-117,-127,-10,59,-60,-95,-99,31,-24,127,48,-88,127,39,-54,-119,-2,34,68,13,-15,-120,120,38,77,-15,44,90,0,52,89,-34,-48,127,-6,-107,33,-114,85,8,-125,23,8, 127,89,51,91,127,-61,13,-104,127,11,127,61,127,-75,-55,67,-33,32,73,127,-8,127,127,-127,-127,127,27,-83,108,-127,52,127,127,16,125,-127,103,-42,-103,127,-49,113,17,-14,30,-127,113,127, 26,-127,-69,92,26,-5,-23,-6,49,-66,-117,-105,9,127,-59,13,-101,58,38,25,-127,-10,-22,25,10,-33,-37,127,20,16,-19,38,73,7,43,69,-46,2,-8,-32,-101,-38,107,78,-15,-104,16,-6, 
  /* [0][2][][] */ 46,74,100,25,21,-100,29,-25,-61,71,-32,-59,27,-23,87,114,-25,35,16,33,19,-5,21,103,9,28,-127,-42,10,65,23,6,-18,12,-61,60,-15,-72,10,-52,-45,-39,-127,-11,-127,-50,-45,-11, -82,-23,28,29,36,-127,-40,5,14,127,-79,-127,-5,-34,-73,52,-59,70,14,4,-79,-51,25,-38,-10,7,-25,18,1,20,82,77,39,127,-79,94,-127,43,-12,-96,-31,46,35,127,-75,36,-127,-21, 47,-67,127,17,-11,-9,77,-22,-40,79,-52,-51,27,72,-13,20,-31,50,17,15,-1,3,18,-24,5,15,-91,1,9,34,29,-21,-23,4,-62,39,1,-69,-20,-78,-40,4,76,-31,-83,-27,-38,-34, 
};
const TfArray<4, int> tensor_dimension88 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant88_scale = { 48, { 0.0074593476019799709, 0.0066795824095606804, 0.0037093828432261944, 0.0066528045572340488, 0.0079588759690523148, 0.0035920438822358847, 0.0093393567949533463, 0.011716779321432114, 0.015938080847263336, 0.0075343395583331585, 0.0064348159357905388, 0.0044365189969539642, 0.0094788568094372749, 0.010847746394574642, 0.007901439443230629, 0.0028227437287569046, 0.0047370134852826595, 0.0036177204456180334, 0.0094144474714994431, 0.0071242759004235268, 0.0040359259583055973, 0.010410415008664131, 0.0063355020247399807, 0.010848758742213249, 0.027708727866411209, 0.009160495363175869, 0.0028891903348267078, 0.014904782176017761, 0.014658564701676369, 0.0050182747654616833, 0.0089510073885321617, 0.005898443516343832, 0.0055421111173927784, 0.014628206379711628, 0.0088687436655163765, 0.0050735324621200562, 0.0099868280813097954, 0.0037262567784637213, 0.011729582212865353, 0.011089710518717766, 0.004879421554505825, 0.0084825912490487099, 0.005603911355137825, 0.0058081387542188168, 0.0088903298601508141, 0.0030313925817608833, 0.013414569199085236, 0.017187861725687981, } };
const TfArray<48, int> quant88_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 3 };
const ALIGN(8) int32_t tensor_data89[8] = { 4971, 20343, -999, 10176, 1564, -17739, -91, -1432, };
const TfArray<1, int> tensor_dimension89 = { 1, { 8 } };
const TfArray<8, float> quant89_scale = { 8, { 0.00010356999700888991, 0.00025148494751192629, 0.00010858960740733892, 9.7364274552091956e-05, 8.2143465988337994e-05, 0.00010829112579813227, 0.00010888520773733035, 7.4195821071043611e-05, } };
const TfArray<8, int> quant89_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const ALIGN(8) int8_t tensor_data90[1*3*3*48] = { 
  /* [0][0][][] */ -49,56,-110,-34,-84,78,73,56,92,79,76,-56,-92,119,-55,-66,-33,107,-37,-77,-90,-50,-90,-44,88,97,62,90,61,-67,-60,-97,-78,-91,79,37,70,-105,127,55,-75,75,90,-42,62,-83,76,70, -75,72,-124,-55,-92,96,95,83,111,87,79,-83,-110,114,-88,55,-88,119,-63,-99,-71,-77,-103,-62,116,104,76,104,76,-87,-80,-108,-98,-127,104,52,88,-113,-4,72,-83,83,109,-75,86,-93,92,87, -27,29,-71,-28,-32,31,36,39,47,41,43,-28,-52,39,-49,81,-20,24,-30,-14,-5,-38,-49,-33,52,38,20,33,14,-39,-10,-51,-26,-78,30,59,32,-31,-23,28,-20,28,52,-33,54,-35,42,27, 
  /* [0][1][][] */ -96,103,-127,-80,-96,100,110,86,112,102,118,-93,-105,127,-85,-58,-66,118,-82,-107,-127,-90,-115,-113,96,127,100,101,105,-110,-95,-127,-106,32,104,-83,90,-93,115,102,-111,109,112,-74,96,-108,107,96, -127,127,-127,-127,-127,127,127,127,127,127,127,-127,-127,116,-127,81,-127,127,-127,-127,-113,-127,-127,-127,127,127,127,127,127,-127,-127,-113,-127,41,127,-84,127,-127,-109,127,-127,127,127,-127,127,-127,127,127, -37,39,-51,-59,-30,32,52,62,53,40,62,-38,-56,61,-58,127,-71,34,-68,-30,8,-68,-63,-36,48,27,46,53,33,-23,-27,-79,-32,33,41,-44,58,-61,-61,45,-55,41,76,-48,82,-42,51,46, 
  /* [0][2][][] */ -42,48,-21,-40,-30,30,31,40,19,42,79,-40,-56,23,-14,12,-41,75,-50,-44,-80,-48,-47,-64,22,58,50,39,46,-58,-55,-87,-41,15,45,-127,37,-43,70,68,-48,36,43,-34,58,-68,38,40, -66,60,-33,-70,-56,39,56,63,42,58,89,-43,-75,-4,-35,87,-70,100,-78,-51,-83,-66,-62,-59,30,65,61,54,53,-82,-62,-96,-54,12,61,-105,62,-69,-73,85,-59,41,54,-58,82,-92,48,58, -26,33,-22,-24,-2,9,47,37,31,29,32,-15,-16,-3,-8,124,-48,48,-39,-23,4,-34,-2,19,11,40,32,36,28,-26,-7,-29,-2,9,27,-104,27,-34,-83,45,-43,12,45,-6,53,3,24,23, 
};
const TfArray<4, int> tensor_dimension90 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant90_scale = { 48, { 0.0023744604550302029, 0.0038841394707560539, 0.0020164377056062222, 0.0031454048585146666, 0.0058144186623394489, 0.0041428664699196815, 0.003271779278293252, 0.0029676309786736965, 0.0057068667374551296, 0.0059724114835262299, 0.00356842833571136, 0.0059388424269855022, 0.0038201815914362669, 0.01026776060461998, 0.0029869766440242529, 0.0051862890832126141, 0.0047410940751433372, 0.0065618911758065224, 0.0022679518442600965, 0.0035262764431536198, 0.0046567558310925961, 0.002083613071590662, 0.0040409485809504986, 0.0034339663106948137, 0.0030810881871730089, 0.0097609469667077065, 0.0039463667199015617, 0.0035276284907013178, 0.0034014643169939518, 0.0036161881871521473, 0.0045490092597901821, 0.0033459269907325506, 0.0032681890297681093, 0.0063573848456144333, 0.0060882894322276115, 0.0035992769990116358, 0.0050616119988262653, 0.0029764927458018064, 0.006252792663872242, 0.0076641985215246677, 0.0034063658677041531, 0.0034011676907539368, 0.0059793791733682156, 0.0029924851842224598, 0.0060153026133775711, 0.0034779452253133059, 0.004255328793078661, 0.0033515505492687225, } };
const TfArray<48, int> quant90_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 3 };
const ALIGN(8) int32_t tensor_data91[8] = { -1576, -18801, -616, -5208, -7129, -7470, -3989, -7087, };
const TfArray<1, int> tensor_dimension91 = { 1, { 8 } };
const TfArray<8, float> quant91_scale = { 8, { 8.685711509315297e-05, 9.6670220955274999e-05, 8.2595019193831831e-05, 0.00010478082549525425, 7.0865229645278305e-05, 8.9062021288555115e-05, 9.3141257821116596e-05, 0.00011823177192127332, } };
const TfArray<8, int> quant91_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const ALIGN(8) int8_t tensor_data92[1*3*3*48] = { 
  /* [0][0][][] */ -30,3,52,-30,-40,5,4,3,-101,-127,-13,22,-17,-80,26,33,-127,-56,-1,-41,44,2,28,-4,-29,-85,118,-43,33,0,-7,62,35,-15,-103,-21,32,-13,-39,34,16,32,48,-68,27,-26,-104,-85, -15,37,127,-51,56,77,-6,127,-127,-86,26,127,34,-127,122,46,-2,-68,4,36,23,-35,80,32,-125,-127,45,53,-29,41,3,-21,-78,-30,-67,-127,127,45,-14,124,-51,127,-6,-31,23,-80,96,57, -18,4,30,-14,-30,12,5,-4,-78,-120,7,14,-15,-13,24,7,-112,-46,5,-56,38,-9,21,0,105,-54,107,-31,40,-14,20,53,21,-9,-110,-18,16,-48,-14,-9,17,29,43,-86,18,-31,3,-127, 
  /* [0][1][][] */ -72,35,-23,-69,0,-22,-27,-21,51,-74,-5,-6,-66,-68,5,-46,-31,-46,9,20,45,-31,54,41,-67,-14,-47,-23,58,-2,-126,34,127,52,20,19,-19,23,-127,63,-80,23,119,-63,49,-28,-127,20, 109,-127,28,-85,124,-32,127,-119,126,-73,-21,-121,-53,-73,14,-82,-27,127,-114,127,-127,-125,-127,127,-31,71,-122,127,127,127,32,-127,-55,127,81,108,-97,127,-57,15,-127,-86,-127,127,127,-102,126,-124, -73,26,9,-64,5,-33,-43,-74,43,-39,-7,-10,-57,-49,6,-65,-40,-55,2,-17,28,-35,64,29,127,-46,-21,-38,13,-5,127,35,-86,9,2,8,-18,-48,-101,44,-78,12,-119,-67,67,2,30,39, 
  /* [0][2][][] */ 76,31,-53,41,2,29,-16,-108,28,-88,-32,-4,65,-3,-36,-127,-97,-52,-1,-9,24,29,17,2,24,-72,127,-33,19,-2,-26,40,28,-74,-127,-3,-22,-66,72,127,52,-39,38,-102,20,36,-63,-11, 127,-1,-119,-127,-127,127,-24,-41,55,-81,-127,-23,127,-81,-127,-49,-56,-5,127,-109,-10,127,-12,51,-47,-116,63,43,-3,55,-20,-27,-63,-58,-59,59,-8,-61,-56,97,-98,-5,107,-72,24,127,30,-55, -48,25,-52,48,3,37,-17,-115,-4,-113,-27,1,51,42,-39,-63,-124,-56,-8,11,31,47,14,-7,30,-52,108,-23,14,4,38,33,44,-69,-127,-6,-27,-10,61,56,49,-33,45,-77,19,16,-28,-17, 
};
const TfArray<4, int> tensor_dimension92 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant92_scale = { 48, { 0.0083295563235878944, 0.02003210037946701, 0.0077964253723621368, 0.0055223684757947922, 0.016205096617341042, 0.0085461810231208801, 0.01334474328905344, 0.0050716688856482506, 0.0066428622230887413, 0.0029822110664099455, 0.0062067587859928608, 0.016194071620702744, 0.0079328930005431175, 0.0039847991429269314, 0.0076667247340083122, 0.0056169405579566956, 0.0039827711880207062, 0.0083069708198308945, 0.01421352569013834, 0.010780039243400097, 0.011135157197713852, 0.0084151662886142731, 0.010227286256849766, 0.0064437147229909897, 0.0074546518735587597, 0.0061051240190863609, 0.0045794537290930748, 0.014585938304662704, 0.0059862793423235416, 0.017007986083626747, 0.0087653286755084991, 0.0079641910269856453, 0.010648737661540508, 0.011721847578883171, 0.0044478173367679119, 0.013217022642493248, 0.012237892486155033, 0.02606954425573349, 0.0075783506035804749, 0.0050159287638962269, 0.0073216091841459274, 0.01218466367572546, 0.009684806689620018, 0.008998427540063858, 0.0066728787496685982, 0.0072145764715969563, 0.0063048265874385834, 0.0079602394253015518, } };
const TfArray<48, int> quant92_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 3 };
const ALIGN(8) int32_t tensor_data93[8] = { 8799, 8307, -2486, 2903, -24942, 443, -2070, 7966, };
const TfArray<1, int> tensor_dimension93 = { 1, { 8 } };
const TfArray<8, float> quant93_scale = { 8, { 9.4442373665515333e-05, 6.4050684159155935e-05, 7.6138756412547082e-05, 5.2586787205655128e-05, 5.2490158850559965e-05, 8.1286751083098352e-05, 4.4952881580684334e-05, 4.7082397941267118e-05, } };
const TfArray<8, int> quant93_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const ALIGN(8) int8_t tensor_data94[1*3*3*48] = { 
  /* [0][0][][] */ -103,-26,-25,-114,13,105,89,-1,-23,3,20,84,-54,-82,-111,-117,-10,24,36,-3,16,-4,17,8,127,120,37,-16,6,17,9,-32,-21,61,-24,-101,47,-101,2,29,33,33,-86,102,-48,19,-25,99, 20,-4,86,-127,-38,45,42,29,67,21,10,-36,-17,-127,-57,-71,-13,107,-51,46,127,91,-24,127,-1,34,31,-17,-113,52,127,50,118,109,-26,-97,2,-125,-40,127,127,-127,-127,-39,101,125,53,-8, -46,-16,-15,-108,14,87,81,3,72,4,26,-66,-29,-67,-109,-120,-28,18,46,-13,-12,-5,9,4,73,127,27,-17,11,-103,4,-37,-7,70,-25,-127,-60,-56,-6,22,10,30,-88,96,-25,-1,-37,-36, 
  /* [0][1][][] */ -82,22,103,-66,95,20,3,32,0,97,-39,61,13,-48,-90,127,-112,8,127,-62,-12,68,-9,9,50,40,75,6,5,71,-10,52,-35,22,-44,-38,127,-17,-39,117,-1,-9,-104,43,-84,70,-35,91, 15,-127,-127,-92,6,-127,-127,127,-127,-127,127,8,127,-35,34,115,89,-89,23,22,-101,19,127,-55,13,-59,68,-127,127,29,-62,-127,-47,-127,-127,2,29,127,127,17,-63,-10,-36,-80,-104,127,127,-10, 91,15,86,-51,80,-19,-9,18,44,84,-47,-62,5,-42,-127,112,-125,12,70,-50,-5,65,21,5,101,31,36,12,-13,-127,-4,38,-36,-9,-7,-45,-116,-100,-28,126,-3,-8,-92,75,-120,35,-2,-127, 
  /* [0][2][][] */ -127,21,-6,-91,56,69,-28,5,-61,12,-21,-127,18,-27,-72,-28,-14,-7,-110,35,-10,-21,31,7,3,14,-39,62,-27,44,-3,6,-20,12,6,-43,22,-16,-15,29,-38,24,9,127,-32,-19,-39,95, 75,36,-92,-111,127,-59,-36,50,16,34,-2,38,12,-28,-99,-8,-127,-127,-4,127,-27,-127,59,-6,22,-31,-127,80,12,-69,-19,122,127,-68,-40,48,-7,40,6,32,14,32,2,-25,127,59,-4,-108, 26,52,-17,-86,36,47,-25,20,40,6,-34,107,29,-18,-53,-25,-9,-11,-77,23,-12,-27,35,13,-29,39,-24,37,-32,-6,-5,9,-6,-5,18,-29,-21,-25,-14,52,-30,27,45,72,-58,10,-34,-30, 
};
const TfArray<4, int> tensor_dimension94 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant94_scale = { 48, { 0.0068281264975667, 0.012349221855401993, 0.010717069730162621, 0.0052718082442879677, 0.0043543190695345402, 0.0051915384829044342, 0.0068958071060478687, 0.0071625551208853722, 0.0096420291811227798, 0.0099679548293352127, 0.013458791188895702, 0.0098699061200022697, 0.011543584056198597, 0.005333340261131525, 0.0035991065669804811, 0.0074205775745213032, 0.0067983516491949558, 0.0096967648714780807, 0.00820175651460886, 0.0086469277739524841, 0.012889156118035316, 0.0082125738263130188, 0.008060806430876255, 0.015558970160782337, 0.018383437767624855, 0.0055071436800062656, 0.0069365282543003559, 0.01124310027807951, 0.015153359621763229, 0.0081504788249731064, 0.014227149076759815, 0.011634958907961845, 0.010620907880365849, 0.007260915357619524, 0.0075394120067358017, 0.0059204711578786373, 0.0072834733873605728, 0.0065134251490235329, 0.016530312597751617, 0.0064418073743581772, 0.010125015862286091, 0.025435138493776321, 0.0030907758045941591, 0.0049673076719045639, 0.0054025524295866489, 0.0067043597809970379, 0.016016941517591476, 0.006336479913443327, } };
const TfArray<48, int> quant94_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 3 };
const ALIGN(8) int32_t tensor_data95[8] = { -7068, -1827, 10826, 7225, 1387, 14677, 4055, -6004, };
const TfArray<1, int> tensor_dimension95 = { 1, { 8 } };
const TfArray<8, float> quant95_scale = { 8, { 4.7857472964096814e-05, 5.264691571937874e-05, 6.723996193613857e-05, 8.4037623309995979e-05, 0.00010155951167689636, 4.5365562982624397e-05, 3.7927511584712192e-05, 6.4712185121607035e-05, } };
const TfArray<8, int> quant95_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const ALIGN(8) int8_t tensor_data96[1*3*3*48] = { 
  /* [0][0][][] */ -35,5,-102,-9,20,-26,100,-5,106,-27,-26,0,-35,-111,-71,66,32,2,-36,-107,127,41,-127,82,30,7,4,-70,29,28,35,85,13,-53,-98,-72,-116,96,-21,-3,55,40,127,-6,-100,0,23,5, 20,-127,-98,1,-3,42,7,-13,-46,7,-21,-127,-127,-25,-92,-38,121,43,26,122,-113,-127,17,-127,127,31,87,-97,-1,105,92,-90,127,-127,-96,-127,-30,110,-23,-5,54,-12,-52,-127,-47,-74,-89,94, -32,3,-66,-9,17,-26,120,-9,-40,-27,-29,-19,-66,-119,127,39,43,-6,20,-127,-54,44,-78,78,21,-13,-29,-82,25,30,30,57,17,-39,-60,-104,-106,99,-11,0,-127,26,-104,15,-127,49,-4,37, 
  /* [0][1][][] */ 89,12,38,26,-68,28,50,33,-127,16,-27,-115,-61,-110,-3,80,0,-127,-127,119,62,26,22,-41,30,42,101,-127,16,-1,74,-126,22,59,51,-59,15,124,3,6,73,-11,51,37,-119,30,-127,-14, 126,27,-127,127,127,124,127,115,60,127,127,40,-41,1,69,-127,-127,-94,-5,121,63,-102,-17,-63,-126,127,30,-68,-127,127,-127,-51,-63,74,127,89,-87,-127,127,127,-103,-123,81,35,1,121,-32,127, 94,10,-17,17,-64,47,-45,24,10,18,-34,-115,-78,-127,67,83,-3,-120,121,99,23,39,27,-23,13,25,127,-122,17,1,60,-127,15,47,39,-81,17,63,7,-12,44,-3,-88,18,-116,-7,-103,14, 
  /* [0][2][][] */ -40,-9,-72,-40,-37,-18,-11,-25,-116,-20,-30,-11,-29,-2,1,45,-20,-86,-14,-86,40,5,-106,-18,2,-33,15,-8,33,-94,10,101,-30,-22,-14,3,-61,106,-23,-10,62,-127,58,11,-26,83,5,14, 127,-36,97,-60,56,127,-30,-127,79,33,-38,-83,3,18,-89,61,-3,60,-9,77,-92,-62,0,32,9,-60,13,-95,43,-86,-51,-23,-59,70,106,122,-127,12,40,-37,-22,-40,-40,84,27,127,-102,3, -49,-17,-50,-32,-10,-15,29,-10,27,-24,-29,22,-38,0,62,32,-12,-94,28,-91,11,-10,-111,-43,3,-61,23,-1,35,-76,16,42,-27,-12,7,-10,-56,105,-28,-16,-57,-115,-66,-36,-96,95,-28,6, 
};
const TfArray<4, int> tensor_dimension96 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant96_scale = { 48, { 0.0041266824118793011, 0.019497176632285118, 0.002986883046105504, 0.012019375339150429, 0.015443187206983566, 0.0055901650339365005, 0.0076904152520000935, 0.017823908478021622, 0.010843323543667793, 0.010695742443203926, 0.013326223939657211, 0.0037242579273879528, 0.0037653623148798943, 0.0036608788650482893, 0.0070334482006728649, 0.0068738311529159546, 0.013055048882961273, 0.004100569523870945, 0.0095833688974380493, 0.0061575658619403839, 0.0082361437380313873, 0.0062794205732643604, 0.0055118333548307419, 0.0098827248439192772, 0.011854369193315506, 0.0075294743292033672, 0.0046958113089203835, 0.0043450319208204746, 0.012966297566890717, 0.0071594058535993099, 0.0089791677892208099, 0.0062647820450365543, 0.011210612021386623, 0.010184849612414837, 0.0065059778280556202, 0.0062518804334104061, 0.0045306896790862083, 0.0041943355463445187, 0.012300768867135048, 0.01487343292683363, 0.0075097656808793545, 0.0049548009410500526, 0.0062256273813545704, 0.010427058674395084, 0.0034070434048771858, 0.0069568650797009468, 0.0041326964274048805, 0.0061251064762473106, } };
const TfArray<48, int> quant96_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 3 };
const ALIGN(8) int32_t tensor_data97[8] = { -554, 8707, 2161, -1454, -21033, 13939, -838, 8544, };
const TfArray<1, int> tensor_dimension97 = { 1, { 8 } };
const TfArray<8, float> quant97_scale = { 8, { 4.4968353904550895e-05, 6.3701634644530714e-05, 7.4843403126578778e-05, 5.848953514941968e-05, 6.0387366829672828e-05, 8.9582237706054002e-05, 5.872984547750093e-05, 7.119419751688838e-05, } };
const TfArray<8, int> quant97_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const ALIGN(8) int8_t tensor_data98[1*3*3*48] = { 
  /* [0][0][][] */ 17,37,-19,0,37,41,10,-7,-26,-60,-96,19,-6,29,-121,28,-32,72,-46,25,-56,-42,1,35,-43,13,-19,-38,11,-24,-97,83,28,24,-28,-36,-127,-28,-28,-25,-8,-107,73,4,68,78,-13,37, 5,-10,127,-15,-127,57,127,2,127,-51,-90,127,-23,-6,-31,127,50,100,-38,127,-19,22,127,-43,-60,127,-105,127,20,20,-112,108,-33,-127,-105,106,-53,127,-116,-46,72,23,126,48,-32,127,127,83, -37,-44,-33,1,66,12,16,-11,34,-46,-127,-23,-13,27,101,30,-31,6,-44,7,-54,44,-15,52,-29,7,-33,-18,-5,-39,-71,60,23,1,4,-42,-104,-22,31,-19,-22,99,43,6,61,87,-49,17, 
  /* [0][1][][] */ 40,127,78,35,26,69,-26,-1,-57,22,-1,117,-13,-118,21,-9,40,127,106,1,-34,-127,11,-20,25,-5,-53,-38,55,-54,-71,-54,-49,-20,-109,31,-87,13,43,-54,37,-127,127,-57,28,-60,32,7, 99,-11,22,127,-46,-127,113,-127,-113,127,0,-11,127,-36,14,43,127,-44,63,36,-127,2,3,-127,127,-100,127,-17,127,7,-95,-127,127,-65,28,127,-45,39,127,40,127,-47,85,-15,-127,-32,119,-2, -127,-47,53,19,-17,33,-49,2,67,-4,17,-3,-19,-127,29,-6,49,68,103,6,-85,117,6,23,13,-29,-43,-36,-18,-33,-77,-57,-54,-29,-127,7,-95,-34,-36,-47,-25,99,67,-63,9,-85,2,16, 
  /* [0][2][][] */ -54,22,-92,-10,-19,14,7,38,-19,-6,-38,-39,7,55,-113,-35,1,58,127,3,-46,-49,3,53,13,-33,-2,23,-9,26,-127,67,-58,10,-83,-21,-77,-113,-1,75,7,-47,33,16,-45,41,-24,51, -41,-17,12,11,24,2,-107,107,-33,7,21,-81,60,-125,-52,-8,7,101,40,8,0,10,8,52,15,5,40,72,34,-127,-118,113,-67,-33,-105,-23,-109,2,21,127,-109,66,32,127,-13,85,-84,-127, 63,-60,-81,-16,-20,21,0,31,4,-4,-54,-48,-1,53,127,-19,-2,72,81,2,-41,42,7,42,14,-21,-5,32,-31,20,-118,71,-58,0,-79,-22,-73,-113,4,47,16,54,29,10,-50,49,-7,30, 
};
const TfArray<4, int> tensor_dimension98 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant98_scale = { 48, { 0.016155412420630455, 0.00928485207259655, 0.0073474887758493423, 0.0090066688135266304, 0.012941106222569942, 0.012507314793765545, 0.0069102016277611256, 0.010374994017183781, 0.0089795226231217384, 0.013756100088357925, 0.0049229557625949383, 0.0075943740084767342, 0.0098706036806106567, 0.0070143095217645168, 0.0072377785108983517, 0.008542696014046669, 0.0076690809801220894, 0.002227401128038764, 0.0039380788803100586, 0.014770424924790859, 0.0045457389205694199, 0.0063238912262022495, 0.012205620296299458, 0.011970652267336845, 0.011885780841112137, 0.0093395169824361801, 0.010966924950480461, 0.0086510805413126945, 0.012119301594793797, 0.012189073488116264, 0.0035029025748372078, 0.005225298460572958, 0.011846074834465981, 0.007878531701862812, 0.0034935616422444582, 0.0085814967751502991, 0.003715819213539362, 0.00635950593277812, 0.01398327574133873, 0.0084522515535354614, 0.010050486773252487, 0.0062063420191407204, 0.015939859673380852, 0.014719576574862003, 0.009789569303393364, 0.0094319991767406464, 0.0080299228429794312, 0.017320571467280388, } };
const TfArray<48, int> quant98_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 3 };
const ALIGN(8) int32_t tensor_data99[8] = { 15072, -8434, -7960, -11186, -4848, 11544, 7434, 1603, };
const TfArray<1, int> tensor_dimension99 = { 1, { 8 } };
const TfArray<8, float> quant99_scale = { 8, { 6.5284519223496318e-05, 8.302526839543134e-05, 9.6518175269011408e-05, 0.00011411929881433025, 8.2184022176079452e-05, 0.00021765589190181345, 7.1049478719942272e-05, 7.083688979037106e-05, } };
const TfArray<8, int> quant99_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const ALIGN(8) int8_t tensor_data100[1*3*3*48] = { 
  /* [0][0][][] */ 11,-127,41,127,-14,41,-19,6,7,20,41,-9,-63,63,4,16,-51,-80,127,-14,-2,21,61,43,-39,38,55,127,-117,62,-36,46,-127,33,-22,-47,-27,-90,24,-51,28,-6,-59,47,-3,34,57,-64, -53,103,127,-28,14,72,-125,56,104,-20,127,-16,45,95,62,-4,-91,-71,-69,-77,127,21,127,20,82,123,112,18,-60,39,-69,26,6,127,32,-127,21,60,14,-127,127,16,-21,-127,-60,-23,-4,-93, 17,19,16,75,-11,102,1,-32,10,12,56,13,27,51,-4,11,-28,-74,-69,66,4,4,4,-26,-29,11,48,118,-91,38,-44,40,14,26,-13,-21,-21,-74,25,-63,-8,-13,-8,66,2,49,59,-13, 
  /* [0][1][][] */ -58,-76,92,127,-25,31,65,26,-7,7,-31,27,127,127,40,127,27,-30,-69,54,57,8,-17,101,81,45,32,45,58,-35,-93,-24,-6,35,18,40,-19,32,1,-8,30,-40,39,-41,0,9,52,69, 67,27,77,-46,127,94,-81,127,-127,-127,33,-32,-96,-91,86,-105,120,-33,16,57,-14,127,86,-127,127,-55,-70,-2,-54,16,73,-127,1,81,79,-29,-127,125,-127,11,-40,-125,5,-30,127,-127,-36,-17, -65,34,59,73,-29,-103,60,-65,-13,9,-21,-27,-25,91,24,117,42,-20,50,-15,65,-22,0,15,73,55,47,26,-56,-57,-95,-12,23,-5,46,51,-36,43,-3,4,21,83,87,2,-2,28,63,30, 
  /* [0][2][][] */ -76,-32,-23,-55,-9,-51,94,-18,-16,32,-43,127,114,-27,-122,-12,99,-124,-96,-40,-80,-31,-47,0,-65,-28,-47,40,-63,54,-94,54,21,-39,-53,-117,-32,-127,-4,-39,-61,95,-10,10,81,10,127,3, -127,-8,102,32,-23,127,15,2,31,-46,-6,34,-42,-20,-33,-17,-127,23,73,-127,-29,-96,-15,-20,-6,-127,-127,-7,-127,127,-127,58,50,-52,127,-74,0,26,13,124,-37,127,127,-89,88,43,71,127, -33,6,-28,38,-1,3,127,-21,-25,6,-44,-122,-92,1,-127,6,92,-127,56,80,-73,-12,-40,0,-89,-33,-45,43,-61,33,-79,37,4,-11,-46,-76,-4,-115,-3,-41,-27,-50,-6,20,33,21,117,-12, 
};
const TfArray<4, int> tensor_dimension100 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant100_scale = { 48, { 0.00653097964823246, 0.0097325369715690613, 0.0049450523220002651, 0.006082264706492424, 0.017571981996297836, 0.0081879515200853348, 0.0060939015820622444, 0.017416121438145638, 0.010610696859657764, 0.0086249895393848419, 0.0090231141075491905, 0.0088960984721779823, 0.0070271980948746204, 0.00661104591563344, 0.0068680774420499802, 0.0059472406283020973, 0.0069599687121808529, 0.0040600588545203209, 0.0094944639131426811, 0.010021367110311985, 0.0084074093028903008, 0.010792547836899757, 0.0083684418350458145, 0.013036048039793968, 0.0061146710067987442, 0.0077757807448506355, 0.0069453641772270203, 0.0058149686083197594, 0.0046323877759277821, 0.0093243792653083801, 0.0052791307680308819, 0.012474187649786472, 0.012655522674322128, 0.0097464527934789658, 0.0074297874234616756, 0.0046413009986281395, 0.0065132207237184048, 0.0085568763315677643, 0.015311466529965401, 0.0059532085433602333, 0.013134604319930077, 0.010183030739426613, 0.0087910257279872894, 0.010961066000163555, 0.0059094768948853016, 0.021537002176046371, 0.0057131093926727772, 0.010200296528637409, } };
const TfArray<48, int> quant100_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 3 };
const ALIGN(8) int32_t tensor_data101[8] = { 3131, -5541, -14681, 2801, -9431, -10177, -9139, -7136, };
const TfArray<1, int> tensor_dimension101 = { 1, { 8 } };
const TfArray<8, float> quant101_scale = { 8, { 7.2026923589874059e-05, 6.5246626036241651e-05, 7.7466822403948754e-05, 6.4409621700178832e-05, 6.5582629758864641e-05, 8.5807703726459295e-05, 3.651716178865172e-05, 4.2134615796385333e-05, } };
const TfArray<8, int> quant101_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const ALIGN(8) int8_t tensor_data102[1*3*3*48] = { 
  /* [0][0][][] */ 40,111,-66,-68,34,22,33,75,-19,52,81,24,-57,10,-75,-127,-112,20,-81,74,17,-46,-88,-7,-12,62,-127,21,97,-61,-29,113,74,-10,77,-127,21,21,127,-125,-19,-6,26,-23,127,-6,-15,-51, 28,34,-29,-31,65,47,-85,58,127,-41,101,127,89,19,127,-43,-7,-14,-114,12,-127,13,-27,72,-52,101,23,31,127,-39,-44,-127,72,-63,-22,-90,49,77,-113,127,127,127,127,-101,-11,-110,-2,92, 39,91,-41,-58,38,13,33,63,-38,43,66,6,-91,7,-25,-91,127,27,-66,52,41,-50,-72,-16,4,12,101,22,28,-97,-18,121,76,-5,60,0,48,-67,64,17,-54,-10,-36,-105,123,-3,-5,-127, 
  /* [0][1][][] */ 60,50,-127,51,-26,36,27,-90,33,102,64,-23,125,127,-40,28,-65,42,25,-48,31,0,38,103,40,-45,69,22,0,-100,-1,11,-34,-21,66,-76,127,5,-24,-33,-62,9,26,-34,38,1,14,-39, -127,-127,-48,127,-127,-118,-95,127,101,27,-127,12,4,-30,80,67,-22,127,-127,127,36,127,127,98,127,127,-20,-127,-15,-17,-22,-98,-127,127,-127,-14,-5,127,-57,-42,-62,-12,119,91,-115,-3,1,83, 45,25,-125,19,-34,21,25,-67,0,60,4,-10,59,67,7,43,38,0,-12,-38,-8,15,10,78,-41,-29,-37,9,-3,-127,8,-13,-43,-76,29,-54,114,39,97,49,-51,-39,-42,-127,8,4,-12,-9, 
  /* [0][2][][] */ 43,66,-59,60,21,-127,47,28,11,-127,-16,-49,1,9,-17,59,-47,-86,-25,-70,113,-23,34,-77,-56,-38,91,30,36,-89,32,9,-26,89,63,32,-5,-6,25,-86,7,-97,22,22,124,1,-127,-26, -45,15,-70,46,-36,-24,127,44,23,-94,-12,-10,-127,54,16,-16,45,-48,-65,-74,4,34,46,127,-88,26,-12,-17,-11,-80,127,-49,31,76,-72,25,62,-3,68,62,-68,-119,-78,12,56,127,103,64, 42,68,-41,27,17,-118,36,-46,7,-91,-10,-58,8,3,-5,44,45,-57,-18,-65,95,-24,46,-78,-11,-67,-78,30,16,-99,18,29,-42,-70,75,53,8,-26,-25,-3,-6,-74,36,-39,111,11,31,-35, 
};
const TfArray<4, int> tensor_dimension102 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant102_scale = { 48, { 0.0083528179675340652, 0.0051712552085518837, 0.0048126885667443275, 0.0062085320241749287, 0.0081233540549874306, 0.003655226668342948, 0.0074840565212070942, 0.0095205912366509438, 0.007394447922706604, 0.0061653624288737774, 0.0096966689452528954, 0.0090972445905208588, 0.0065796929411590099, 0.0074400301091372967, 0.0092265158891677856, 0.0096235228702425957, 0.0085859214887022972, 0.014137577265501022, 0.003147707786411047, 0.0082494784146547318, 0.0068060625344514847, 0.010490252636373043, 0.0071953525766730309, 0.005304303951561451, 0.0089340563863515854, 0.0085697276517748833, 0.010843665339052677, 0.012509094551205635, 0.011238791048526764, 0.0035656711552292109, 0.0063729989342391491, 0.0083930725231766701, 0.0080366553738713264, 0.009077032096683979, 0.0090051442384719849, 0.0070994221605360508, 0.0071258074603974819, 0.0078184138983488083, 0.0085357651114463806, 0.0084546953439712524, 0.009615875780582428, 0.0057142283767461777, 0.0082656648010015488, 0.0060357106849551201, 0.0054246452637016773, 0.010194741189479828, 0.016726057976484299, 0.011202114634215832, } };
const TfArray<48, int> quant102_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 3 };
const ALIGN(8) int32_t tensor_data103[8] = { 9805, -3507, -11712, 12725, 5595, -1644, 19978, -14318, };
const TfArray<1, int> tensor_dimension103 = { 1, { 8 } };
const TfArray<8, float> quant103_scale = { 8, { 0.00010753050446510315, 6.3078281527850777e-05, 0.00014277601439971477, 7.3398266977164894e-05, 7.5953154009766877e-05, 0.00010866143566090614, 7.4384326580911875e-05, 6.834507075836882e-05, } };
const TfArray<8, int> quant103_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const ALIGN(8) int8_t tensor_data104[1*3*3*48] = { 
  /* [0][0][][] */ 125,127,-67,127,71,83,95,127,26,84,-110,56,-82,116,97,110,86,104,54,-76,-52,-49,-99,93,33,101,-127,-71,127,83,-127,95,127,122,99,89,82,98,80,56,-56,-73,-100,124,-68,80,-101,125, 127,112,-65,121,70,94,90,124,-13,87,-127,64,-127,112,127,114,79,127,63,-122,-76,-40,-112,121,41,118,-98,-82,119,84,-112,127,125,127,115,127,78,113,86,53,-58,-120,-104,127,-106,74,-127,119, 56,40,9,27,24,32,11,46,37,26,-48,26,-53,33,72,63,51,27,18,5,18,-13,11,40,21,45,-24,-9,16,18,-18,45,51,43,30,46,19,35,-5,-3,5,-127,-27,6,-26,36,-16,36, 
  /* [0][1][][] */ -12,99,-104,74,117,-76,126,111,127,117,-68,112,-25,127,-84,114,111,79,108,-127,-24,-66,-127,98,109,106,-87,-98,44,123,45,93,90,93,113,73,126,119,121,121,-119,-117,-102,73,-127,127,-101,117, -12,103,-127,66,127,-70,127,116,123,127,-75,127,-48,125,-120,127,104,78,127,-123,-59,-59,-104,127,127,127,-112,-127,16,127,55,108,75,93,127,92,127,127,127,127,-127,-90,-127,68,-119,116,-80,127, 37,31,-83,36,41,-71,20,25,58,31,-68,28,-9,26,-22,65,46,23,39,-45,-28,-64,-29,44,47,47,-34,-26,9,-1,44,33,71,38,17,4,57,27,12,17,-69,95,-26,1,-65,32,-53,14, 
  /* [0][2][][] */ -26,40,-48,-69,52,-127,52,45,97,66,32,61,-47,36,-7,44,123,68,65,-77,118,-127,-103,11,88,87,-38,-35,-5,51,125,-7,58,32,26,54,-90,26,19,41,-45,-44,-22,90,-83,84,-35,13, -23,17,-36,-104,51,-87,43,19,96,78,73,62,-57,35,-6,49,127,51,63,-54,127,-50,-91,3,107,126,6,-73,-8,42,126,-4,42,30,24,51,-68,32,31,46,-79,-37,-26,86,-112,73,-22,0, -13,57,-59,-2,28,12,27,16,45,22,38,31,-49,11,-1,23,56,21,38,-18,37,-56,7,6,46,32,-60,-9,-11,1,72,-24,53,17,10,-19,18,2,14,-35,-26,-94,5,79,-28,32,7,16, 
};
const TfArray<4, int> tensor_dimension104 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant104_scale = { 48, { 0.0042090108618140221, 0.0020564387086778879, 0.0025378505233675241, 0.0036065513268113136, 0.0031947577372193336, 0.0040226816199719906, 0.0062902034260332584, 0.0029565852601081133, 0.0053758220747113228, 0.0034671206958591938, 0.0030364508274942636, 0.0030214556027203798, 0.0059416634030640125, 0.0028431520331650972, 0.0053442986682057381, 0.0032077643554657698, 0.0022341129370033741, 0.004555962048470974, 0.0059150769375264645, 0.0027365440037101507, 0.0055509824305772781, 0.003655559616163373, 0.0046844566240906715, 0.004759080708026886, 0.0045568891800940037, 0.0023843937087804079, 0.0025765325408428907, 0.0027487550396472216, 0.0043952809646725655, 0.0074205971322953701, 0.0059010908007621765, 0.0061485408805310726, 0.0025042598135769367, 0.0031451995018869638, 0.0033396687358617783, 0.015578489750623703, 0.0039422758854925632, 0.0035503674298524857, 0.0029920446686446667, 0.0071656596846878529, 0.0026464185211807489, 0.0028588487766683102, 0.0033229305408895016, 0.0047919121570885181, 0.0025392752140760422, 0.0031517434399574995, 0.0032428812701255083, 0.0044585149735212326, } };
const TfArray<48, int> quant104_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 3 };
const ALIGN(8) int32_t tensor_data105[8] = { -6414, -12716, 3035, 3920, -12904, -11602, -8264, -12982, };
const TfArray<1, int> tensor_dimension105 = { 1, { 8 } };
const TfArray<8, float> quant105_scale = { 8, { 8.2602986367419362e-05, 0.00011927117157028988, 0.00011013787297997624, 9.8821132269222289e-05, 8.7938897195272148e-05, 0.00012984928616788238, 0.00013593367475550622, 7.047250255709514e-05, } };
const TfArray<8, int> quant105_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const ALIGN(8) int8_t tensor_data106[1*3*3*48] = { 
  /* [0][0][][] */ 33,-45,-52,-29,-64,28,-81,7,-32,52,127,-4,-9,6,-20,49,35,-56,6,115,-44,-15,39,-3,-59,116,-12,-40,-39,-79,-1,-29,40,-29,-90,-43,20,-66,119,-27,-41,87,-30,-9,-37,86,3,-18, 104,-127,127,8,-68,-15,-73,-99,-96,45,54,-25,-39,17,-41,86,102,-78,41,87,12,-47,-71,127,-5,9,-31,7,11,-36,-127,-113,94,-50,5,12,46,-26,19,90,-14,115,-63,-127,-56,-22,51,127, 17,-25,-15,-61,-86,-35,-61,6,-28,37,77,0,-8,9,-4,42,16,-62,8,118,21,-7,38,15,62,127,-12,32,32,-51,26,-12,12,-23,57,-47,16,-65,127,1,-34,54,-44,-2,-33,46,-9,-35, 
  /* [0][1][][] */ 21,-17,70,-44,-127,46,-65,-34,20,90,43,-127,-51,-44,-39,90,125,-127,39,-127,-71,-44,-97,-101,-127,27,-53,-127,-91,-60,39,127,-55,-58,-127,-54,16,-75,9,44,-9,28,-62,11,-71,109,70,76, -127,47,-97,127,-101,92,-13,-127,127,-105,-3,-2,127,127,127,-92,120,7,43,119,-17,127,127,7,-1,16,127,33,-28,117,91,-58,127,127,42,127,11,127,-12,127,127,-45,127,25,127,-127,-127,2, 44,-34,59,-23,-95,-127,-98,-31,-6,127,36,-112,-61,-33,-57,127,127,-112,32,-124,82,-49,-117,-96,127,11,-59,108,127,-76,25,116,-42,-65,120,-57,13,-93,14,25,-25,79,-79,10,-79,83,73,112, 
  /* [0][2][][] */ 30,-57,-75,24,-23,16,127,38,-1,76,114,1,-40,-8,-25,102,42,-15,-29,-104,-127,-34,24,1,-79,53,-40,-55,-55,-127,-12,42,-68,-27,-51,-12,7,-41,72,11,-2,54,-54,6,-15,81,21,53, 78,-116,8,-74,39,40,112,-53,70,112,47,20,-66,-25,-30,66,-9,-94,-127,-23,56,2,-25,106,45,20,-30,34,15,-43,-111,-27,-124,-39,15,-17,17,33,-69,105,-42,127,71,92,-12,-8,48,117, 2,-51,-61,6,-57,-30,123,31,-4,73,71,0,-43,-13,-12,104,44,-29,-18,-53,84,-33,17,-16,44,64,-37,31,50,-93,1,45,-46,-29,48,-14,-127,-37,70,20,8,56,-64,-9,-11,41,11,15, 
};
const TfArray<4, int> tensor_dimension106 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant106_scale = { 48, { 0.0086789978668093681, 0.0049410671927034855, 0.012120031751692295, 0.023659704253077507, 0.010600889101624489, 0.0083170495927333832, 0.0054301787167787552, 0.0053070276044309139, 0.0080026024952530861, 0.0034005311317741871, 0.0040140370838344097, 0.0082824593409895897, 0.018853370100259781, 0.014763268642127514, 0.010806085541844368, 0.0044699306599795818, 0.0030347276479005814, 0.009687383659183979, 0.0082199880853295326, 0.0061030457727611065, 0.006369628943502903, 0.013313282281160355, 0.012050953693687916, 0.006610487587749958, 0.0074696773663163185, 0.0061123962514102459, 0.015894686803221703, 0.0091568557545542717, 0.0087188864126801491, 0.0062741395086050034, 0.0094003835693001747, 0.0073700672946870327, 0.0052498565055429935, 0.012547580525279045, 0.0056959199719130993, 0.018406502902507782, 0.011302289552986622, 0.011799046769738197, 0.0063401786610484123, 0.0038541865069419146, 0.012046159245073795, 0.0038495885673910379, 0.011364199221134186, 0.013995859771966934, 0.019197419285774231, 0.0080059003084897995, 0.012501395307481289, 0.0026614621747285128, } };
const TfArray<48, int> quant106_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 3 };
const ALIGN(8) int32_t tensor_data107[8] = { -15767, -9400, 12641, -5339, -21760, 2764, 13122, 10643, };
const TfArray<1, int> tensor_dimension107 = { 1, { 8 } };
const TfArray<8, float> quant107_scale = { 8, { 5.0623264542082325e-05, 6.1108905356377363e-05, 8.9303342974744737e-05, 6.9674621045123786e-05, 4.7334015107480809e-05, 6.3437801145482808e-05, 7.8799035691190511e-05, 4.0399550925940275e-05, } };
const TfArray<8, int> quant107_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const ALIGN(8) int8_t tensor_data108[1*3*3*48] = { 
  /* [0][0][][] */ 78,11,-24,69,-18,9,-8,-21,9,12,49,-61,64,-71,20,-16,32,15,127,14,40,53,-24,-115,41,-54,-43,-52,-99,26,0,-5,41,-39,11,-7,26,122,29,52,-69,-24,92,-90,-100,-127,-47,37, 65,73,-45,-1,0,-127,-33,54,127,5,31,5,-72,-83,95,-127,127,71,-92,3,127,127,-127,95,8,-75,-127,-102,-127,14,-77,101,66,-127,-43,127,127,35,63,127,53,15,104,-127,65,-16,19,-57, 111,-14,31,83,-20,-11,-17,-27,-1,18,-52,-54,76,-59,0,-10,33,13,124,21,37,22,-18,33,6,-60,22,-52,-92,-15,-2,-1,43,-36,-1,-4,25,127,28,36,-74,-44,82,-78,-127,84,-28,-59, 
  /* [0][1][][] */ 56,-32,-127,39,-22,4,-45,113,102,49,95,43,119,-90,47,-80,76,-16,79,13,28,38,-83,-19,127,-87,-71,-15,-76,-20,25,86,61,-103,-60,11,4,73,91,-20,-62,8,-18,-60,-31,-102,65,64, 53,126,87,-32,127,-29,127,21,73,127,13,-85,-23,-45,94,-106,20,-10,-94,-127,-41,79,80,23,-6,-14,59,127,-41,127,127,87,-34,-55,111,12,-9,-107,127,-59,127,33,71,-62,85,7,127,67, 59,-90,31,59,-27,-1,-51,127,103,41,-127,57,127,-93,32,-79,57,-22,88,19,22,48,-80,111,100,-89,-76,-14,-57,-66,25,127,65,-105,-23,27,10,70,64,-49,-59,8,34,-24,-57,89,84,-127, 
  /* [0][2][][] */ 114,-20,-34,127,-11,23,-17,70,54,-15,40,-29,27,-127,-29,-44,-19,46,95,44,16,5,55,-127,55,-32,21,-4,-27,-24,-18,32,10,-49,-58,-108,9,93,-3,-45,-13,-125,-127,-77,97,-81,40,17, 11,-127,65,13,-26,51,-48,48,107,78,32,-127,-24,-96,-127,-6,-57,127,-72,-94,28,26,-41,54,75,-127,50,39,-72,-58,-71,-12,127,-44,127,6,99,120,57,-30,28,-84,-102,-79,1,25,34,77, 127,-26,-4,101,-5,26,-16,62,41,-5,-70,-29,-27,-113,-14,-13,-6,52,81,50,24,11,54,28,38,-30,-14,-3,-28,-46,-38,32,-8,-50,-7,-61,12,85,-6,-50,-6,-127,-71,-37,92,84,60,-80, 
};
const TfArray<4, int> tensor_dimension108 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant108_scale = { 48, { 0.0051245051436126232, 0.0074583739042282104, 0.0087612941861152649, 0.0085342573001980782, 0.017281444743275642, 0.0090024434030056, 0.013526532799005508, 0.0054467581212520599, 0.0040701674297451973, 0.0083010811358690262, 0.0074288086034357548, 0.00823206827044487, 0.0075537571683526039, 0.0047294232062995434, 0.0060020671226084232, 0.0054865670390427113, 0.0071740704588592052, 0.008811265230178833, 0.010997884906828403, 0.0097032971680164337, 0.0097305970266461372, 0.0080957980826497078, 0.0088488152250647545, 0.006779741495847702, 0.0049883569590747356, 0.0087582031264901161, 0.010735823772847652, 0.0104701928794384, 0.005676737055182457, 0.012868057005107403, 0.0097900871187448502, 0.0063022002577781677, 0.011008209548890591, 0.0039275661110877991, 0.010260204784572124, 0.0097481394186615944, 0.0070897229015827179, 0.0038049810100346804, 0.0057366024702787399, 0.0062931077554821968, 0.012255345471203327, 0.0058276276104152203, 0.0052428939379751682, 0.0049618477933108807, 0.0064994227141141891, 0.005223528016358614, 0.0056622042320668697, 0.0066107106395065784, } };
const TfArray<48, int> quant108_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 3 };
const ALIGN(8) int32_t tensor_data109[8] = { -2120, -2761, 23194, -2871, 21211, -6088, -985, 16816, };
const TfArray<1, int> tensor_dimension109 = { 1, { 8 } };
const TfArray<8, float> quant109_scale = { 8, { 4.7356799768749624e-05, 4.5774319005431607e-05, 3.5557455703383312e-05, 3.9554863178636879e-05, 5.4931264457991347e-05, 3.4911539842141792e-05, 3.0662406061310321e-05, 3.8548547308892012e-05, } };
const TfArray<8, int> quant109_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 0 };
const ALIGN(8) int8_t tensor_data110[1*3*3*48] = { 
  /* [0][0][][] */ 41,-8,-20,39,7,-89,21,-84,-114,0,-122,3,-35,0,-6,-3,13,10,22,-5,-13,-17,2,-111,16,13,-3,6,18,-8,15,15,9,15,9,39,-8,-13,3,-45,-16,-55,53,23,-5,19,9,6, 22,6,21,127,7,-127,39,-17,-127,2,-86,39,-51,51,-33,35,124,-8,38,-2,-41,-58,-36,-127,85,-62,-1,31,87,3,53,68,-20,-48,31,127,-7,-20,8,-8,-38,-88,108,62,-6,65,70,-3, 41,-6,-18,42,6,-82,23,-69,-107,1,-126,1,-12,0,-5,-4,12,0,27,-6,-12,-17,0,-109,11,15,1,7,22,-4,16,10,3,13,8,34,-6,-15,2,38,-15,-39,58,28,-17,22,20,6, 
  /* [0][1][][] */ 25,-12,8,12,21,-102,36,-118,-44,-2,-87,21,-79,1,-49,17,2,-23,18,-6,-15,-111,94,-77,2,127,24,9,56,3,36,-1,32,11,25,-1,-3,25,-2,-127,-1,-81,32,64,19,26,24,14, 127,-127,127,-100,127,60,127,-75,-86,127,-55,127,-89,-127,-127,127,127,-127,127,-127,-112,-127,127,-126,127,-123,127,127,127,127,127,-127,127,-127,127,42,127,127,-127,10,127,-127,127,127,127,127,127,-32, 23,-8,3,18,18,-84,39,-127,-42,-3,-87,22,-55,7,-49,18,1,-44,18,-6,-15,-105,93,-71,-4,110,30,7,52,2,24,2,29,12,22,-11,-5,22,3,117,-1,-65,39,84,-20,29,47,21, 
  /* [0][2][][] */ 8,-17,-3,-5,20,-96,25,-50,-57,0,-88,-6,-59,26,-19,-2,-3,-6,3,-3,26,-90,52,-87,-11,33,-1,10,-13,-5,16,18,12,14,0,-33,-9,4,0,-23,11,0,10,23,3,24,-10,27, -2,-22,82,-41,34,-109,104,10,-109,5,-127,-68,-127,127,-55,15,-10,-79,19,-11,127,-97,116,-81,-53,-56,55,23,54,5,10,-56,30,51,33,-106,-2,38,-13,-4,124,53,1,73,41,73,5,127, 10,-20,-3,-8,21,-80,25,-44,-51,1,-85,-4,-54,26,-19,-1,2,-5,-1,-3,28,-72,56,-82,-9,28,3,9,-6,-6,13,17,7,11,-1,-27,-10,-2,-1,18,13,13,4,19,-2,30,0,31, 
};
const TfArray<4, int> tensor_dimension110 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant110_scale = { 48, { 0.0058264839462935925, 0.007971959188580513, 0.0055093886330723763, 0.0085321515798568726, 0.010927244089543819, 0.002933732233941555, 0.0046161157079041004, 0.0027505990583449602, 0.0027731670998036861, 0.017027849331498146, 0.0026816125027835369, 0.00762568274512887, 0.0033716084435582161, 0.012595676816999912, 0.0063722296617925167, 0.0077942563220858574, 0.0058417432010173798, 0.0039794282056391239, 0.0064146053045988083, 0.020451882854104042, 0.012340093031525612, 0.00299216085113585, 0.0034170907456427813, 0.0025885454379022121, 0.0072330161929130554, 0.0084365876391530037, 0.0063713104464113712, 0.010662773624062538, 0.00439043203368783, 0.00758393295109272, 0.0051155174151062965, 0.0065423552878201008, 0.0062529528513550758, 0.0077284094877541065, 0.0063419057987630367, 0.0077057634480297565, 0.010804989375174046, 0.0098908552899956703, 0.014847858808934689, 0.0061144391074776649, 0.0066118915565311909, 0.0034266365692019463, 0.0047576092183589935, 0.0035795599687844515, 0.0072967298328876495, 0.0095805628225207329, 0.0048092254437506199, 0.0059050880372524261, } };
const TfArray<48, int> quant110_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 3 };
const ALIGN(8) int32_t tensor_data111[16] = { -11301, -9453, -6021, -37996, 23448, -19087, -14508, -30064, -2268, -39163, 6893, 17021, -37435, -123, 11560, 10799, };
const TfArray<1, int> tensor_dimension111 = { 1, { 16 } };
const TfArray<16, float> quant111_scale = { 16, { 0.00014618363638874143, 0.00013779419532511383, 0.00015512533718720078, 0.00021263507369440049, 0.00013361763558350503, 0.00013071743887849152, 9.9698168924078345e-05, 0.00013522079098038375, 0.00015130480460356921, 0.00011230403470108286, 0.00012007019540760666, 9.9309538200031966e-05, 0.00012761555262841284, 0.00014863778778817505, 0.00017614035459700972, 0.0001060453214449808, } };
const TfArray<16, int> quant111_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,97,97,1 } };
const TfArray<1, float> quant112_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.022253664210438728, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.01475147157907486, } };
const TfArray<1, int> quant114_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant115_scale = { 1, { 0.028995232656598091, } };
const TfArray<1, int> quant115_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant116_scale = { 1, { 0.043623149394989014, } };
const TfArray<1, int> quant116_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant118_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant118_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant119_scale = { 1, { 0.023233130574226379, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant120_scale = { 1, { 0.040632188320159912, } };
const TfArray<1, int> quant120_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant121_scale = { 1, { 0.02201785147190094, } };
const TfArray<1, int> quant121_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant122_scale = { 1, { 0.021237209439277649, } };
const TfArray<1, int> quant122_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant123_scale = { 1, { 0.053771667182445526, } };
const TfArray<1, int> quant123_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant124_scale = { 1, { 0.066649451851844788, } };
const TfArray<1, int> quant124_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant126_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant126_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant127_scale = { 1, { 0.019425604492425919, } };
const TfArray<1, int> quant127_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant128_scale = { 1, { 0.039590910077095032, } };
const TfArray<1, int> quant128_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant129_scale = { 1, { 0.01552011352032423, } };
const TfArray<1, int> quant129_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant130_scale = { 1, { 0.022439375519752502, } };
const TfArray<1, int> quant130_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant131_scale = { 1, { 0.030957706272602081, } };
const TfArray<1, int> quant131_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant132_scale = { 1, { 0.054749753326177597, } };
const TfArray<1, int> quant132_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant133_scale = { 1, { 0.015877922996878624, } };
const TfArray<1, int> quant133_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant134_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant134_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant135_scale = { 1, { 0.050035037100315094, } };
const TfArray<1, int> quant135_zero = { 1, { 34 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant136_scale = { 1, { 0.063096567988395691, } };
const TfArray<1, int> quant136_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.020411126315593719, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant138_scale = { 1, { 0.020411126315593719, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant139_scale = { 1, { 0.019921442493796349, } };
const TfArray<1, int> quant139_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant140_scale = { 1, { 0.04244815930724144, } };
const TfArray<1, int> quant140_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant141_scale = { 1, { 0.015524347312748432, } };
const TfArray<1, int> quant141_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant142_scale = { 1, { 0.018212815746665001, } };
const TfArray<1, int> quant142_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant143_scale = { 1, { 0.018458239734172821, } };
const TfArray<1, int> quant143_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant144_scale = { 1, { 0.044227089732885361, } };
const TfArray<1, int> quant144_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant145_scale = { 1, { 0.014251751825213432, } };
const TfArray<1, int> quant145_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant146_scale = { 1, { 0.018816588446497917, } };
const TfArray<1, int> quant146_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant147_scale = { 1, { 0.025450220331549644, } };
const TfArray<1, int> quant147_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant148_scale = { 1, { 0.049703087657690048, } };
const TfArray<1, int> quant148_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant149_scale = { 1, { 0.015459137968719006, } };
const TfArray<1, int> quant149_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant150_scale = { 1, { 0.0209849514067173, } };
const TfArray<1, int> quant150_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant151_scale = { 1, { 0.019195683300495148, } };
const TfArray<1, int> quant151_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant152_scale = { 1, { 0.055620495229959488, } };
const TfArray<1, int> quant152_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant153_scale = { 1, { 0.016598621383309364, } };
const TfArray<1, int> quant153_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant154_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant154_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant155_scale = { 1, { 0.036385845392942429, } };
const TfArray<1, int> quant155_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant156_scale = { 1, { 0.066621638834476471, } };
const TfArray<1, int> quant156_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant157_scale = { 1, { 0.015418311581015587, } };
const TfArray<1, int> quant157_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant158_scale = { 1, { 0.017115369439125061, } };
const TfArray<1, int> quant158_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant159_scale = { 1, { 0.024683203548192978, } };
const TfArray<1, int> quant159_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant160_scale = { 1, { 0.07127736508846283, } };
const TfArray<1, int> quant160_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant161_scale = { 1, { 0.015181610360741615, } };
const TfArray<1, int> quant161_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant162_scale = { 1, { 0.018098307773470879, } };
const TfArray<1, int> quant162_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant163_scale = { 1, { 0.035856679081916809, } };
const TfArray<1, int> quant163_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant164_scale = { 1, { 0.078400768339633942, } };
const TfArray<1, int> quant164_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant165_scale = { 1, { 0.016101688146591187, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,7,7,48 } };
const TfArray<1, float> quant166_scale = { 1, { 0.016101688146591187, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant167_scale = { 1, { 0.018815411254763603, } };
const TfArray<1, int> quant167_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant168_scale = { 1, { 0.037081893533468246, } };
const TfArray<1, int> quant168_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant169_scale = { 1, { 0.012910209596157074, } };
const TfArray<1, int> quant169_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant170_scale = { 1, { 0.01825203001499176, } };
const TfArray<1, int> quant170_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant171_scale = { 1, { 0.017074804753065109, } };
const TfArray<1, int> quant171_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant172_scale = { 1, { 0.041807688772678375, } };
const TfArray<1, int> quant172_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant173_scale = { 1, { 0.013197235763072968, } };
const TfArray<1, int> quant173_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant174_scale = { 1, { 0.018750967457890511, } };
const TfArray<1, int> quant174_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant175_scale = { 1, { 0.012280684895813465, } };
const TfArray<1, int> quant175_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant176_scale = { 1, { 0.038539692759513855, } };
const TfArray<1, int> quant176_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant177_scale = { 1, { 0.013591735623776913, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant178_scale = { 1, { 0.014698824845254421, } };
const TfArray<1, int> quant178_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<4, int> tensor_dimension179 = { 4, { 1,3,3,16 } };
const TfArray<1, float> quant179_scale = { 1, { 0.033520199358463287, } };
const TfArray<1, int> quant179_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<4, int> tensor_dimension180 = { 4, { 1,3,3,1280 } };
const TfArray<1, float> quant180_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 9,1280 } };
const TfArray<1, float> quant181_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant181_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 9,10 } };
const TfArray<1, float> quant182_scale = { 1, { 0.053641770035028458, } };
const TfArray<1, int> quant182_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfArray<2, int> tensor_dimension183 = { 2, { 1,90 } };
const TfArray<1, float> quant183_scale = { 1, { 0.053641770035028458, } };
const TfArray<1, int> quant183_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant183 = { (TfLiteFloatArray*)&quant183_scale, (TfLiteIntArray*)&quant183_zero, 0 };
const TfArray<2, int> tensor_dimension184 = { 2, { 1,2 } };
const TfArray<1, float> quant184_scale = { 1, { 0.067538365721702576, } };
const TfArray<1, int> quant184_zero = { 1, { 57 } };
const TfLiteAffineQuantization quant184 = { (TfLiteFloatArray*)&quant184_scale, (TfLiteIntArray*)&quant184_zero, 0 };
const TfArray<2, int> tensor_dimension185 = { 2, { 1,2 } };
const TfArray<1, float> quant185_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant185_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant185 = { (TfLiteFloatArray*)&quant185_scale, (TfLiteIntArray*)&quant185_zero, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 112 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 112,43,6 } };
const TfArray<1, int> outputs1 = { 1, { 113 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 113,78,35 } };
const TfArray<1, int> outputs2 = { 1, { 114 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 114,44,79 } };
const TfArray<1, int> outputs3 = { 1, { 115 } };
const TfLiteAddParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 113,115 } };
const TfArray<1, int> outputs4 = { 1, { 116 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 116,45,13 } };
const TfArray<1, int> outputs5 = { 1, { 117 } };
const TfArray<2, int> inputs6 = { 2, { 117,2 } };
const TfArray<1, int> outputs6 = { 1, { 118 } };
const TfLiteDepthwiseConvParams opdata7 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 118,80,21 } };
const TfArray<1, int> outputs7 = { 1, { 119 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 119,46,81 } };
const TfArray<1, int> outputs8 = { 1, { 120 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 120,47,32 } };
const TfArray<1, int> outputs9 = { 1, { 121 } };
const TfLiteDepthwiseConvParams opdata10 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 121,82,33 } };
const TfArray<1, int> outputs10 = { 1, { 122 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 122,48,83 } };
const TfArray<1, int> outputs11 = { 1, { 123 } };
const TfLiteAddParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 120,123 } };
const TfArray<1, int> outputs12 = { 1, { 124 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 124,49,34 } };
const TfArray<1, int> outputs13 = { 1, { 125 } };
const TfArray<2, int> inputs14 = { 2, { 125,2 } };
const TfArray<1, int> outputs14 = { 1, { 126 } };
const TfLiteDepthwiseConvParams opdata15 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 126,84,36 } };
const TfArray<1, int> outputs15 = { 1, { 127 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 127,50,85 } };
const TfArray<1, int> outputs16 = { 1, { 128 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 128,51,37 } };
const TfArray<1, int> outputs17 = { 1, { 129 } };
const TfLiteDepthwiseConvParams opdata18 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 129,86,38 } };
const TfArray<1, int> outputs18 = { 1, { 130 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 130,52,87 } };
const TfArray<1, int> outputs19 = { 1, { 131 } };
const TfLiteAddParams opdata20 = { kTfLiteActNone };
const TfArray<2, int> inputs20 = { 2, { 128,131 } };
const TfArray<1, int> outputs20 = { 1, { 132 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 132,53,39 } };
const TfArray<1, int> outputs21 = { 1, { 133 } };
const TfLiteDepthwiseConvParams opdata22 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 133,88,40 } };
const TfArray<1, int> outputs22 = { 1, { 134 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 134,54,89 } };
const TfArray<1, int> outputs23 = { 1, { 135 } };
const TfLiteAddParams opdata24 = { kTfLiteActNone };
const TfArray<2, int> inputs24 = { 2, { 132,135 } };
const TfArray<1, int> outputs24 = { 1, { 136 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 136,55,41 } };
const TfArray<1, int> outputs25 = { 1, { 137 } };
const TfArray<2, int> inputs26 = { 2, { 137,2 } };
const TfArray<1, int> outputs26 = { 1, { 138 } };
const TfLiteDepthwiseConvParams opdata27 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 138,90,42 } };
const TfArray<1, int> outputs27 = { 1, { 139 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 139,56,91 } };
const TfArray<1, int> outputs28 = { 1, { 140 } };
const TfLiteConvParams opdata29 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 140,57,7 } };
const TfArray<1, int> outputs29 = { 1, { 141 } };
const TfLiteDepthwiseConvParams opdata30 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 141,92,8 } };
const TfArray<1, int> outputs30 = { 1, { 142 } };
const TfLiteConvParams opdata31 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs31 = { 3, { 142,58,93 } };
const TfArray<1, int> outputs31 = { 1, { 143 } };
const TfLiteAddParams opdata32 = { kTfLiteActNone };
const TfArray<2, int> inputs32 = { 2, { 140,143 } };
const TfArray<1, int> outputs32 = { 1, { 144 } };
const TfLiteConvParams opdata33 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 144,59,9 } };
const TfArray<1, int> outputs33 = { 1, { 145 } };
const TfLiteDepthwiseConvParams opdata34 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 145,94,10 } };
const TfArray<1, int> outputs34 = { 1, { 146 } };
const TfLiteConvParams opdata35 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs35 = { 3, { 146,60,95 } };
const TfArray<1, int> outputs35 = { 1, { 147 } };
const TfLiteAddParams opdata36 = { kTfLiteActNone };
const TfArray<2, int> inputs36 = { 2, { 144,147 } };
const TfArray<1, int> outputs36 = { 1, { 148 } };
const TfLiteConvParams opdata37 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 148,61,11 } };
const TfArray<1, int> outputs37 = { 1, { 149 } };
const TfLiteDepthwiseConvParams opdata38 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 149,96,12 } };
const TfArray<1, int> outputs38 = { 1, { 150 } };
const TfLiteConvParams opdata39 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs39 = { 3, { 150,62,97 } };
const TfArray<1, int> outputs39 = { 1, { 151 } };
const TfLiteAddParams opdata40 = { kTfLiteActNone };
const TfArray<2, int> inputs40 = { 2, { 148,151 } };
const TfArray<1, int> outputs40 = { 1, { 152 } };
const TfLiteConvParams opdata41 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 152,63,14 } };
const TfArray<1, int> outputs41 = { 1, { 153 } };
const TfLiteDepthwiseConvParams opdata42 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 153,98,15 } };
const TfArray<1, int> outputs42 = { 1, { 154 } };
const TfLiteConvParams opdata43 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs43 = { 3, { 154,64,99 } };
const TfArray<1, int> outputs43 = { 1, { 155 } };
const TfLiteAddParams opdata44 = { kTfLiteActNone };
const TfArray<2, int> inputs44 = { 2, { 152,155 } };
const TfArray<1, int> outputs44 = { 1, { 156 } };
const TfLiteConvParams opdata45 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 156,65,16 } };
const TfArray<1, int> outputs45 = { 1, { 157 } };
const TfLiteDepthwiseConvParams opdata46 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 157,100,17 } };
const TfArray<1, int> outputs46 = { 1, { 158 } };
const TfLiteConvParams opdata47 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs47 = { 3, { 158,66,101 } };
const TfArray<1, int> outputs47 = { 1, { 159 } };
const TfLiteAddParams opdata48 = { kTfLiteActNone };
const TfArray<2, int> inputs48 = { 2, { 156,159 } };
const TfArray<1, int> outputs48 = { 1, { 160 } };
const TfLiteConvParams opdata49 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 160,67,18 } };
const TfArray<1, int> outputs49 = { 1, { 161 } };
const TfLiteDepthwiseConvParams opdata50 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 161,102,19 } };
const TfArray<1, int> outputs50 = { 1, { 162 } };
const TfLiteConvParams opdata51 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs51 = { 3, { 162,68,103 } };
const TfArray<1, int> outputs51 = { 1, { 163 } };
const TfLiteAddParams opdata52 = { kTfLiteActNone };
const TfArray<2, int> inputs52 = { 2, { 160,163 } };
const TfArray<1, int> outputs52 = { 1, { 164 } };
const TfLiteConvParams opdata53 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs53 = { 3, { 164,69,20 } };
const TfArray<1, int> outputs53 = { 1, { 165 } };
const TfArray<2, int> inputs54 = { 2, { 165,2 } };
const TfArray<1, int> outputs54 = { 1, { 166 } };
const TfLiteDepthwiseConvParams opdata55 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 166,104,22 } };
const TfArray<1, int> outputs55 = { 1, { 167 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 167,70,105 } };
const TfArray<1, int> outputs56 = { 1, { 168 } };
const TfLiteConvParams opdata57 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 168,71,23 } };
const TfArray<1, int> outputs57 = { 1, { 169 } };
const TfLiteDepthwiseConvParams opdata58 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 169,106,24 } };
const TfArray<1, int> outputs58 = { 1, { 170 } };
const TfLiteConvParams opdata59 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs59 = { 3, { 170,72,107 } };
const TfArray<1, int> outputs59 = { 1, { 171 } };
const TfLiteAddParams opdata60 = { kTfLiteActNone };
const TfArray<2, int> inputs60 = { 2, { 168,171 } };
const TfArray<1, int> outputs60 = { 1, { 172 } };
const TfLiteConvParams opdata61 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 172,73,25 } };
const TfArray<1, int> outputs61 = { 1, { 173 } };
const TfLiteDepthwiseConvParams opdata62 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 173,108,26 } };
const TfArray<1, int> outputs62 = { 1, { 174 } };
const TfLiteConvParams opdata63 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs63 = { 3, { 174,74,109 } };
const TfArray<1, int> outputs63 = { 1, { 175 } };
const TfLiteAddParams opdata64 = { kTfLiteActNone };
const TfArray<2, int> inputs64 = { 2, { 172,175 } };
const TfArray<1, int> outputs64 = { 1, { 176 } };
const TfLiteConvParams opdata65 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 176,75,27 } };
const TfArray<1, int> outputs65 = { 1, { 177 } };
const TfLiteDepthwiseConvParams opdata66 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 177,110,28 } };
const TfArray<1, int> outputs66 = { 1, { 178 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 178,76,111 } };
const TfArray<1, int> outputs67 = { 1, { 179 } };
const TfLiteConvParams opdata68 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs68 = { 3, { 179,77,29 } };
const TfArray<1, int> outputs68 = { 1, { 180 } };
const TfLiteReshapeParams opdata69 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs69 = { 2, { 180,5 } };
const TfArray<1, int> outputs69 = { 1, { 181 } };
const TfLiteFullyConnectedParams opdata70 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs70 = { 3, { 181,30,3 } };
const TfArray<1, int> outputs70 = { 1, { 182 } };
const TfLiteReshapeParams opdata71 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs71 = { 2, { 182,1 } };
const TfArray<1, int> outputs71 = { 1, { 183 } };
const TfLiteFullyConnectedParams opdata72 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs72 = { 3, { 183,31,4 } };
const TfArray<1, int> outputs72 = { 1, { 184 } };
const TfLiteSoftmaxParams opdata73 = { 1 };
const TfArray<1, int> inputs73 = { 1, { 184 } };
const TfArray<1, int> outputs73 = { 1, { 185 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9424, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 180, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data62, (TfLiteIntArray*)&tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data63, (TfLiteIntArray*)&tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data64, (TfLiteIntArray*)&tensor_dimension64, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data65, (TfLiteIntArray*)&tensor_dimension65, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data66, (TfLiteIntArray*)&tensor_dimension66, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data67, (TfLiteIntArray*)&tensor_dimension67, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data68, (TfLiteIntArray*)&tensor_dimension68, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data69, (TfLiteIntArray*)&tensor_dimension69, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data70, (TfLiteIntArray*)&tensor_dimension70, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data71, (TfLiteIntArray*)&tensor_dimension71, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data72, (TfLiteIntArray*)&tensor_dimension72, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data73, (TfLiteIntArray*)&tensor_dimension73, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data74, (TfLiteIntArray*)&tensor_dimension74, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data75, (TfLiteIntArray*)&tensor_dimension75, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data76, (TfLiteIntArray*)&tensor_dimension76, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data77, (TfLiteIntArray*)&tensor_dimension77, 20480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data78, (TfLiteIntArray*)&tensor_dimension78, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data79, (TfLiteIntArray*)&tensor_dimension79, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data80, (TfLiteIntArray*)&tensor_dimension80, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data81, (TfLiteIntArray*)&tensor_dimension81, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data82, (TfLiteIntArray*)&tensor_dimension82, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data83, (TfLiteIntArray*)&tensor_dimension83, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data84, (TfLiteIntArray*)&tensor_dimension84, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data85, (TfLiteIntArray*)&tensor_dimension85, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data86, (TfLiteIntArray*)&tensor_dimension86, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data87, (TfLiteIntArray*)&tensor_dimension87, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data88, (TfLiteIntArray*)&tensor_dimension88, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data89, (TfLiteIntArray*)&tensor_dimension89, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data90, (TfLiteIntArray*)&tensor_dimension90, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data91, (TfLiteIntArray*)&tensor_dimension91, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data92, (TfLiteIntArray*)&tensor_dimension92, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data93, (TfLiteIntArray*)&tensor_dimension93, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data94, (TfLiteIntArray*)&tensor_dimension94, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data95, (TfLiteIntArray*)&tensor_dimension95, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data96, (TfLiteIntArray*)&tensor_dimension96, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data97, (TfLiteIntArray*)&tensor_dimension97, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data99, (TfLiteIntArray*)&tensor_dimension99, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data101, (TfLiteIntArray*)&tensor_dimension101, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data105, (TfLiteIntArray*)&tensor_dimension105, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data106, (TfLiteIntArray*)&tensor_dimension106, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data107, (TfLiteIntArray*)&tensor_dimension107, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data110, (TfLiteIntArray*)&tensor_dimension110, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data111, (TfLiteIntArray*)&tensor_dimension111, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension112, 9409, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension113, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension114, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension115, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension116, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension117, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension118, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension119, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension120, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension121, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension122, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension123, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension124, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension125, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension126, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension127, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension128, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension129, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension130, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension131, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension132, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension133, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension134, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension135, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension136, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension137, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension138, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension139, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3744, (TfLiteIntArray*)&tensor_dimension140, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension141, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension142, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension143, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension144, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant144))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension145, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant145))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension146, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant146))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension147, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3744, (TfLiteIntArray*)&tensor_dimension148, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant148))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension149, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant149))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension150, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant150))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension151, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant151))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension152, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant152))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension153, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant153))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension154, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant154))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension155, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant155))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3744, (TfLiteIntArray*)&tensor_dimension156, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant156))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension157, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant157))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension158, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant158))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension159, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant159))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3456, (TfLiteIntArray*)&tensor_dimension160, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant160))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension161, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant161))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension162, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant162))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension163, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant163))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension164, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant164))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2352, (TfLiteIntArray*)&tensor_dimension165, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant165))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension166, 2352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant166))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2352, (TfLiteIntArray*)&tensor_dimension167, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant167))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 944, (TfLiteIntArray*)&tensor_dimension168, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant168))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension169, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant169))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension170, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant170))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension171, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant171))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 864, (TfLiteIntArray*)&tensor_dimension172, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant172))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension173, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant173))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension174, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant174))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension175, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant175))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension176, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant176))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension177, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant177))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension178, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant178))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension179, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant179))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 11520, (TfLiteIntArray*)&tensor_dimension180, 11520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant180))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension181, 11520, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant181))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 11520, (TfLiteIntArray*)&tensor_dimension182, 90, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant182))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension183, 90, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant183))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension184, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant184))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension185, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant185))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_ADD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_ADD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_ADD, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_ADD, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_ADD, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_ADD, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_ADD, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_ADD, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_ADD, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_ADD, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, const_cast<void*>(static_cast<const void*>(&opdata53)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_ADD, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_ADD, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs72, (TfLiteIntArray*)&outputs72, const_cast<void*>(static_cast<const void*>(&opdata72)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs73, (TfLiteIntArray*)&outputs73, const_cast<void*>(static_cast<const void*>(&opdata73)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 186;
  for(size_t i = 0; i < 186; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    #if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    #if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_PAD] = *tflite::ops::micro::Register_PAD();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = *tflite::ops::micro::Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 74; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 74; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  185, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 74; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
