/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 13.07.2021 05:25:34

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 52512;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[183];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[72];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[10] = { -193, -17, 404, 170, -377, 588, -3, 58, -362, 61, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 1.4843610188108869e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[3] = { -69, -33, 60, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00012728619913104922, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { 1, 1280, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data5[8] = { -805, 37805, 2077, 39074, 37852, -211, 44176, 69891, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 7.2446091508027166e-05, 7.9999037552624941e-05, 7.8677650890313089e-05, 6.0649457736872137e-05, 7.3980612796731293e-05, 7.727403863100335e-05, 4.903347507934086e-05, 3.6187571822665632e-05, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[48] = { 971, -1335, 23706, 4222, 26867, 6422, 3784, 10323, 10377, 2363, 4325, 23139, 6558, 3157, 5385, 3005, 8727, 10971, 2863, 9717, 3351, 11733, 10318, 3795, 7461, 14856, -109, 20376, 2235, -5840, 10063, 2505, 386, 15338, 3660, 16945, 15216, -7119, -2049, -464, 11916, 16043, -3102, 33498, 2867, 10219, 2238, 74, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 9.2623929958790541e-05, 0.00011057149094995111, 3.6351735616335645e-05, 9.7189782536588609e-05, 3.4147444239351898e-05, 7.1248934546019882e-05, 0.00013286207104101777, 7.2575043304823339e-05, 7.6883654401171952e-05, 0.00016824605700094253, 0.00012558173330035061, 4.1586146835470572e-05, 8.5773899627383798e-05, 0.00012106169015169144, 0.00010472888970980421, 0.00011763981456169859, 7.8159893746487796e-05, 6.1644364905077964e-05, 0.0001032783547998406, 6.9430810981430113e-05, 7.844936044421047e-05, 6.1619393818546087e-05, 6.9795154558960348e-05, 7.4971452704630792e-05, 9.9517928902059793e-05, 5.9986003179801628e-05, 7.4795811087824404e-05, 4.2437030060682446e-05, 0.00016013230197131634, 9.5548377430532128e-05, 7.8433571616187692e-05, 0.00012709271686617285, 0.00012487372441682965, 5.4994379752315581e-05, 0.00012603355571627617, 5.0374066631775349e-05, 5.724325092160143e-05, 7.4011069955304265e-05, 9.4978269771672785e-05, 0.00014298078895080835, 6.6739405156113207e-05, 5.1513186917873099e-05, 0.00010546751582296565, 2.9482520403689705e-05, 9.6349671366624534e-05, 6.6366963437758386e-05, 9.4276721938513219e-05, 9.3484319222625345e-05, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -1876, -129, 699, 10987, 19, -8618, -2240, 18598, -957, 40539, 13808, 1118, 947, 20945, -1508, 16062, 29654, 8365, -282, -4760, -125, 2865, -19, -11961, -3068, 21623, 476, -8398, -9589, -2937, -3841, 8244, -59, 1700, 20894, -1944, 5594, -1544, 9323, -11294, 19866, 147, 15, 15329, -13188, 8881, -647, 11430, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00010019145702244714, 0.00024095465778373182, 9.3778733571525663e-05, 6.6425403929315507e-05, 0.00019492181309033185, 0.00010279711568728089, 0.00016051626880653203, 6.100419705035165e-05, 7.9903184087015688e-05, 3.5871307773049921e-05, 7.4657546065282077e-05, 0.00019478920148685575, 9.5420225989073515e-05, 4.7930865548551083e-05, 9.2218637291807681e-05, 6.7562956246547401e-05, 4.7906472900649533e-05, 9.9919794593006372e-05, 0.00017096634837798774, 0.00012966690701432526, 0.00013393841800279915, 0.00010122120875166729, 0.0001230181660503149, 7.7507749665528536e-05, 8.9667737483978271e-05, 7.3435039666946977e-05, 5.5083623010432348e-05, 0.00017544589354656637, 7.2005524998530746e-05, 0.00020457932259887457, 0.00010543311509536579, 9.579669131198898e-05, 0.00012808755855076015, 0.00014099538384471089, 5.3500247304327786e-05, 0.00015897999401204288, 0.00014720259059686214, 0.00031357561238110065, 9.1155634436290711e-05, 6.0333732108119875e-05, 8.8067441538441926e-05, 0.00014656233543064445, 0.00011649298539850861, 0.00010823692718986422, 8.0264231655746698e-05, 8.6780004494357854e-05, 7.5837146141566336e-05, 9.5749157480895519e-05, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { 3757, 7044, 1704, -3636, 2221, 7453, 825, 4785, 949, 8319, 2561, 5734, -1107, 3050, 9751, 5215, 6674, 14800, 5117, 5042, -207, 1390, 5922, 6836, -6611, 1086, 7575, 2704, 10038, -34, 5936, 12449, 11066, 1067, 11646, 1494, 3247, 1699, 8509, -1545, 2408, -3887, 1952, -1546, 5576, -3220, -4150, 1056, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 8.6286832811310887e-05, 8.8695145677775145e-05, 0.00010436734009999782, 7.8665907494723797e-05, 0.00011561282008187845, 9.8013857495971024e-05, 0.00015549882664345205, 0.00011756545427488163, 0.00011874466872541234, 8.4159590187482536e-05, 0.00010875843872781843, 8.7301370513159782e-05, 0.00017780176131054759, 0.0001506929547758773, 7.5364077929407358e-05, 8.5664876678492874e-05, 0.00010269135964335874, 5.7206467317882925e-05, 9.8185708338860422e-05, 8.1780344771686941e-05, 0.00013524225505534559, 0.00013182760449126363, 9.8052994871977717e-05, 8.7128071754705161e-05, 9.8778757092077285e-05, 9.4140144938137382e-05, 9.2555674200411886e-05, 0.00011736607848433778, 7.3727765993680805e-05, 0.00015148005331866443, 8.585679461248219e-05, 6.4389285398647189e-05, 7.0143811171874404e-05, 0.0001053216474247165, 6.6486005380284041e-05, 0.00013011643022764474, 0.00010834164277184755, 0.00015250213618855923, 7.7605065598618239e-05, 0.00010383749031461775, 0.00010405760986031964, 0.00010118933278135955, 0.00010467827814863995, 9.8423588497098535e-05, 8.7602398707531393e-05, 9.5370902272406965e-05, 9.8828000773210078e-05, 0.00011275003635091707, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[48] = { -238, 3089, -324, 13260, -3950, 7457, 3990, -9139, -1723, 3494, -2259, -2074, -5975, 18522, 20523, -3728, 10195, 376, -1205, -3175, 1201, -1529, -9253, -2966, -1420, -1911, 178, 1449, 878, 247, -1642, -43, -1962, 2322, 13535, 6692, -2860, -116, -1102, -6334, -544, 275, 25195, 5246, 12635, -5036, -1903, -2737, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00012295796477701515, 0.00022237945813685656, 0.00019298837287351489, 9.4932453066576272e-05, 7.8410703281406313e-05, 9.348698949906975e-05, 0.00012417671678122133, 0.00012898020213469863, 0.00017362950893584639, 0.00017949863104149699, 0.00024236011086031795, 0.00017773301806300879, 0.00020787188259419054, 9.6040494099725038e-05, 6.4811159973032773e-05, 0.00013362655590754002, 0.00012242178490851074, 0.00017461516836192459, 0.00014769370318390429, 0.00015571014955639839, 0.00023210236395243555, 0.00014788849512115121, 0.00014515552902594209, 0.00028017922886647284, 0.00033104102476499975, 9.9170269095338881e-05, 0.00012491001689340919, 0.00020246089843567461, 0.00027287515695206821, 0.00014677031140308827, 0.00025619636289775372, 0.00020951732585672289, 0.00019125673861708492, 0.00013075143215246499, 0.00013576648780144751, 0.00010661328997230157, 0.00013115764886606485, 0.00011729095422197133, 0.00029767074738629162, 0.00011600129073485732, 0.00018232692673336715, 0.00045802502427250147, 5.565735773416236e-05, 8.9449138613417745e-05, 9.7286836535204202e-05, 0.00012072922254446894, 0.00028842617757618427, 0.0001141046013799496, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { 2121, 22258, 2815, 3613, 2993, 795, -1899, 31193, 8812, 1183, 6899, 7417, 4109, 624, 3685, -3054, 12532, 2834, 15908, 4855, 3257, 7289, 6233, 649, 8068, 3599, -606, 9933, 6323, 1526, 14517, 1363, 8875, 11314, 4054, -927, 1218, -253, 3347, -553, 3729, 4929, 6516, 1545, 3061, -3053, 6932, 2029, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00012956917635165155, 4.2903000576188788e-05, 0.00010715777170844376, 0.00010843854397535324, 9.2367547040339559e-05, 0.00013039945042692125, 0.00014094937068875879, 3.1585725082550198e-05, 9.0128123702015728e-05, 0.00015943011385388672, 7.6650474511552602e-05, 7.6557909778784961e-05, 9.6563009719830006e-05, 0.00012601781054399908, 8.7752719991840422e-05, 9.552888514008373e-05, 6.4991472754627466e-05, 0.00010873148858081549, 5.5757827794877812e-05, 9.874912939267233e-05, 0.0001348985533695668, 7.8864148235879838e-05, 8.387138950638473e-05, 0.00011132543295389041, 8.2944694440811872e-05, 9.6509298600722104e-05, 0.00013815079000778496, 7.4263109127059579e-05, 8.2990707596763968e-05, 0.00010287784971296787, 5.8299519878346473e-05, 0.00010165664571104571, 7.9606390499975532e-05, 7.2300717874895781e-05, 0.00011681306204991415, 0.00012168147804914042, 0.00011135981912957504, 0.00011529904440976679, 0.0001096454361686483, 0.00011636348790489137, 0.00011924500722670928, 0.00011254580749664456, 9.5972158305812627e-05, 0.00018633270519785583, 0.00014175535761751235, 0.00011485791037557647, 0.00010070256394101307, 9.2999587650410831e-05, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 492, 7650, 34895, -5269, -184, -10186, -3901, -1291, 1744, -3640, 4395, 32280, 28723, 23409, -4019, 2684, 1890, 23579, 288, -13621, -6188, 18284, 16672, 7403, -738, -266, -9053, 27069, 3975, -4840, -731, 11421, -396, -539, -3369, 3000, 21013, -2787, -1753, -1377, -248, 16531, -395, -2031, 29533, -2540, 28844, -6168, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 5.5541415349580348e-05, 0.00026241436717100441, 4.0200746298069134e-05, 0.00016176991630345583, 0.00020785133528988808, 7.5238567660562694e-05, 0.00010350603406550363, 0.00023989369219634682, 0.0001459413324482739, 0.00014395502512343228, 0.00017935891810338944, 5.0125145207857713e-05, 5.067837264505215e-05, 4.9272119213128462e-05, 9.4663853815291077e-05, 9.2515554570127279e-05, 0.00017570915224496275, 5.5189957492984831e-05, 0.00012898347631562501, 8.2875267253257334e-05, 0.00011085104779340327, 8.4515319031197578e-05, 7.4184295954182744e-05, 0.00013301253784447908, 0.00015954909031279385, 0.00010133991600014269, 6.3201376178767532e-05, 5.8480200095800683e-05, 0.00017451464373152703, 9.6359130111522973e-05, 0.00012085148046026006, 8.4318300650920719e-05, 0.00015088470536284149, 0.000137078866828233, 8.7564578279852867e-05, 8.4144659922458231e-05, 6.0978985857218504e-05, 5.6451965065207332e-05, 0.00016555722686462104, 0.00020018295617774129, 0.00010107465641340241, 6.6687141952570528e-05, 8.3791317592840642e-05, 0.00014033878687769175, 4.5855722419219092e-05, 9.3633112555835396e-05, 5.5622356740059331e-05, 8.2438396930228919e-05, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { 9038, -3049, 24414, -9434, 8675, -2306, 4964, -20403, 22160, -3413, 5770, 68, 14558, -5993, -2183, 6948, 5372, 5524, -2102, 6048, -4602, 20975, 19989, 8010, 20776, 1589, 9622, 11649, -8070, 12837, 25384, 9845, 8608, 12935, -2278, 9733, 5079, 8699, -4095, 7233, 17763, 5958, -1708, -3125, 4604, -13180, 1797, -11959, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00037614052416756749, 0.00025973230367526412, 0.00022734976664651185, 9.8155440355185419e-05, 0.00045894162030890584, 0.00050736183766275644, 0.00037738220999017358, 0.00033311540028080344, 0.00026365090161561966, 0.00051199231529608369, 0.00038147997111082077, 0.00029350261320360005, 0.00094861449906602502, 0.000122237135656178, 0.00043902956531383097, 0.00029768742388114333, 0.00032826393726281822, 0.00041737427818588912, 0.00041832946590147913, 0.00045650170068256557, 0.00022265057486947626, 0.00024733023019507527, 8.9400986325927079e-05, 0.00027614014106802642, 0.00016072699509095401, 0.00056272844085469842, 0.00032873786403797567, 0.00013655384827870876, 0.0003471210366114974, 0.00011800175707321614, 0.00022933621949050575, 0.00039319792995229363, 0.00044955534394830465, 0.00012388855975586921, 0.00043432234087958932, 0.00038799992762506008, 0.00044702462037093937, 0.00027130974922329187, 0.00025589668075554073, 0.0010833519045263529, 8.3923332567792386e-05, 0.0004098452627658844, 0.00026378926122561097, 0.00036793333129025996, 0.00024223675427492708, 0.00044269693898968399, 0.00044296804117038846, 0.00071158737409859896, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { -2848, -621, 5129, 2505, 2107, 20371, 4420, 3840, -634, 9375, 9203, -489, 3016, 9690, 530, 6316, -198, 2089, 2241, 20340, 1136, 6874, 3710, -1527, 14012, 2388, 7832, 1583, -2064, 7706, 8381, 7150, 382, 900, 1600, 42, 10010, 4745, -1855, -376, -3375, 20875, -11519, 19934, 6912, 28652, -999, -1231, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 9.8377531685400754e-05, 0.00011978166730841622, 0.00012976684956811368, 0.00010486670362297446, 0.00010954967001453042, 4.690513014793396e-05, 0.0001018919501802884, 0.00010380942694609985, 0.00011146284668939188, 7.7953896834515035e-05, 8.126547618303448e-05, 0.00012374452489893883, 0.00013496963947545737, 8.1187063187826425e-05, 0.00016597080684732646, 8.9196022599935532e-05, 0.00013784617476630956, 0.00013903593935538083, 0.00011184089089510962, 4.6337641833815724e-05, 0.00011984835145995021, 0.00010490912973182276, 0.00011533446377143264, 0.00011548529437277466, 6.150179251562804e-05, 0.00012726329441647977, 7.9327626735903323e-05, 0.00012539602175820619, 0.00011208365322090685, 0.00011054757487727329, 9.1145913756918162e-05, 8.7416599853895605e-05, 0.00013085508544463664, 0.00016123514797072858, 9.7217867732979357e-05, 0.0001521299418527633, 7.591681060148403e-05, 0.00011581206490518525, 0.00010428165842313319, 0.00010021861817222089, 0.00010668316099327058, 4.328367140260525e-05, 6.274139741435647e-05, 4.6273908083094284e-05, 8.9224704424850643e-05, 3.4302953281439841e-05, 0.00015034210809972137, 0.00011323655780870467, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { -87, -3845, 30, -3302, -169, 1623, 3386, 1168, 1379, -4921, 21766, -1810, -3857, 15319, -1202, -8347, -9023, 3405, -9733, -7767, 16396, -1616, -4881, -579, -5679, 1426, -5503, -2852, -3980, 8506, 34109, -2136, 2495, 10680, 21178, -6131, 26752, 761, -2525, -20, -7097, -1984, -2977, -1749, 8386, -12153, -1364, -1003, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00025143934180960059, 0.00014450743037741631, 0.00011435472697485238, 0.00014017784269526601, 0.00020141257846262306, 0.00019466114463284612, 0.00010754888353403658, 0.0001614741631783545, 0.00013975535694044083, 0.00021409697365015745, 7.6619820902124047e-05, 0.00011819719657069072, 0.00015362394333351403, 0.00010916920291492715, 0.00011264721979387105, 0.00013295667304191738, 0.00011935992370126769, 3.466679117991589e-05, 6.1291408201213926e-05, 0.0002298837061971426, 7.074890163494274e-05, 9.8423675808589906e-05, 0.0001899656344903633, 0.00018630865088198334, 0.0001849877298809588, 0.00014535822265315801, 0.0001706868497421965, 0.0001346435456071049, 0.00018862218712456524, 0.00018970810924656689, 5.4518419347004965e-05, 8.1325415521860123e-05, 0.00018436975369695574, 0.00012261976371519268, 5.4373038437915966e-05, 0.00013356056297197938, 5.7832206948660314e-05, 9.8977980087511241e-05, 0.0002176326815970242, 0.00013154902262613177, 0.00015642360085621476, 9.659416537033394e-05, 0.0002480845432728529, 0.0002290923148393631, 0.00015236274339258671, 0.00014679759624414146, 0.00012497598072513938, 0.0002695736475288868, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { 7190, 2612, 884, -159, 9996, -3535, 6877, -3644, 6630, 4953, 10792, 5120, 5540, 1307, 2019, 3628, 4114, 2073, 2449, 2720, 1808, 804, -519, 10090, 1011, 2900, 6246, 1176, 6166, -3516, 6472, 12657, 223, -1939, 3877, 3971, -653, 8371, 10215, 6609, 11336, 3565, 295, -1207, 5619, -2666, 2965, 71, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.000100008248409722, 0.00012094587145838886, 0.00010682910215109587, 0.00017054508498404175, 8.0051679105963558e-05, 0.00010222158016404137, 0.00010768701758934185, 0.00013563931861426681, 0.00011256476864218712, 0.00010849953832803294, 6.9392379373311996e-05, 0.00011656414426397532, 0.00011658819857984781, 0.00014908629236742854, 0.00013381772441789508, 0.000164478798978962, 0.00010927143739536405, 0.00014874599582981318, 0.00011543784057721496, 0.00013993182801641524, 0.00011114851804450154, 0.00011910847388207912, 0.0001533763570478186, 7.4927396781276911e-05, 0.00020846098777838051, 0.00011807394184870645, 8.6748244939371943e-05, 0.00018690295109990984, 9.8821743449661881e-05, 8.5495325038209558e-05, 0.00011714325228240341, 7.0774018240626901e-05, 0.00019193143816664815, 0.00013339734869077802, 0.00012858920672442764, 0.00012084886839147657, 0.00012408672773744911, 9.8257340141572058e-05, 7.9876073868945241e-05, 9.5749426691327244e-05, 7.6316748163662851e-05, 0.00013685144949704409, 0.00013695906091015786, 0.00012072116805939004, 0.00012639294436667114, 0.00013972827582620084, 0.00015158980386331677, 0.00013047723041381687, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[48] = { 12355, 300, -13315, -2569, -4799, -6031, -3757, -2039, 2066, 8038, -3153, -743, -1007, -2389, -2552, 3213, -3800, 15556, -484, -2304, -2997, -2820, -1672, 640, -2932, -1185, 1138, -5809, 12737, -2673, 17548, 305, -664, -3918, -3917, 15322, 9973, 1446, 5503, 11207, 1540, -3222, -1284, 3582, -8394, -415, -8339, -228, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00013637611118610948, 0.00020322916680015624, 0.00010325970652047545, 0.00012700630759354681, 0.00036692791036330163, 0.00017097603995352983, 0.00012724931002594531, 0.00036367331631481647, 0.00022156639897730201, 0.000180102011654526, 0.00018841541896108538, 0.00018576315778773278, 0.00014673786063212901, 0.00013804800983052701, 0.00014341519272420555, 0.00012418681581038982, 0.00014533402281813323, 8.4779785538557917e-05, 0.00019825786876026541, 0.00020926035358570516, 0.00017555862723384053, 0.00022536370670422912, 0.00017474492779001594, 0.00027221118216402829, 0.00012768300075549632, 0.00016236932424362749, 0.00014502905833069235, 0.00012142478954046965, 9.6730829682201147e-05, 0.00019470625557005405, 0.000110235734609887, 0.00026047872961498797, 0.00026426525437273085, 0.00020351975399535149, 0.00015514450205955654, 9.6916948677971959e-05, 0.00013600528473034501, 0.00017867970746010542, 0.00031972513534128666, 0.00012431143841240555, 0.00027426917222328484, 0.00021263612143229693, 0.00018356907821726054, 0.0002288826071890071, 0.00012339826207607985, 0.00044972315663471818, 0.00011929782340303063, 0.00021299665968399495, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int32_t tensor_data17[48] = { 5143, 4475, 2062, 5272, 3122, 676, 6260, -518, 18, 5756, -1949, 4051, 1566, 1250, 2395, 5693, 17572, 12769, 4683, 5849, 2773, 4568, -277, 52, -534, -3033, 6523, 8681, 481, 1440, 2415, 10860, 7623, 9496, 2158, -226, -291, -109, 2560, 3888, 8679, 2499, 420, 4208, 4400, 6538, 6138, 7098, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0001226070016855374, 0.0001032296713674441, 8.2583123003132641e-05, 9.9195494840387255e-05, 0.00014624831965193152, 0.0001728210918372497, 0.00011033975897589698, 0.00010130018199561164, 0.00013513719022739679, 9.1573318059090525e-05, 0.00015500122390221804, 0.00012521678581833839, 0.00012031754158670083, 0.00017631966329645365, 0.00015642860671505332, 0.00011025941057596356, 5.2454557589953765e-05, 7.189535244833678e-05, 0.0001107329735532403, 0.00010158573422813788, 0.00014651181118097156, 9.5726645668037236e-05, 0.00011308989633107558, 0.00012903095921501517, 0.00014414993347600102, 0.00011027121945517138, 9.4578732387162745e-05, 9.2875241534784436e-05, 0.00013791098899673671, 0.00019979891658294946, 0.00015018961858004332, 6.7789660533890128e-05, 0.0001091579397325404, 7.5921998359262943e-05, 0.00011105162411695346, 0.00020344574295450002, 0.00014688947703689337, 0.00014367519179359078, 9.6183517598547041e-05, 9.8679163784254342e-05, 8.4590712503995746e-05, 0.00017257535364478827, 0.00013295497046783566, 0.00012586315278895199, 9.0782232291530818e-05, 0.000118233248940669, 9.9947181297466159e-05, 9.4345377874560654e-05, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int32_t tensor_data18[48] = { 3015, 6340, 13034, -3842, 5855, 16858, -3642, -5081, -5966, 8538, -4, -885, -2982, -2444, -5889, -211, -1310, -1472, 28686, 2687, -5957, 497, -9756, -5154, -5599, -4863, -1360, 5590, -1419, 19934, 1683, 3900, 3144, -5431, -443, 7316, -8651, -7547, -1256, -184, 7338, 6463, -3462, 8098, -8515, -302, -320, -2380, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00014326658856589347, 8.8696782768238336e-05, 8.2546685007400811e-05, 0.0001064880343619734, 0.00013933084846939892, 6.2694030930288136e-05, 0.00012836568930651993, 0.00016329610662069172, 0.00012682873057201505, 0.00010574759653536603, 0.00016631616745144129, 0.00015603490464854985, 0.00011285414802841842, 0.00012761054676957428, 0.00015825215086806566, 0.00016506157408002764, 0.00014726475637871772, 0.00024248611589428037, 5.3989126172382385e-05, 0.0001414941216353327, 0.00011673681001411751, 0.00017992762150242925, 0.00012341387628111988, 9.097882139030844e-05, 0.00015323591651394963, 0.00014698700397275388, 0.00018598932365421206, 0.00021455457317642868, 0.00019276647071819752, 6.1157988966442645e-05, 0.00010930895223282278, 0.00014395703328773379, 0.00013784380280412734, 0.00015568821982014924, 0.00015445520693901926, 0.00012176848395029083, 0.00012222104123793542, 0.00013410055544227362, 0.00014640447625424713, 0.00014501398254651576, 0.00016493041766807437, 9.800979751162231e-05, 0.00014177174307405949, 0.00010352382378187031, 9.3042901426088065e-05, 0.00017485904390923679, 0.00028688344173133373, 0.00019213740597479045, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int32_t tensor_data19[48] = { 3135, 2304, 3331, 3106, 2325, 4825, -3811, -814, -2580, 2197, 1517, 550, 9024, 3003, 2081, 1641, 25, -135, -2523, 3573, 2529, 6367, 11530, 1615, 9164, -789, 859, 4590, -2208, -2983, 2466, -1383, 1133, -987, 98, -8362, 970, 8, 140, -2069, 4130, 578, 2298, -2550, 9545, 3734, 223, -2174, };
const TfArray<1, int> tensor_dimension19 = { 1, { 48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00010408154776087031, 0.00017860301886685193, 0.00015865708701312542, 0.00010051926074083894, 0.00016989292635116726, 9.3241884314920753e-05, 0.00013546241098083556, 0.00016742260777391493, 0.00010065290553029627, 0.00019397003052290529, 0.00013869802933186293, 0.00019257032545283437, 8.4705068729817867e-05, 0.00017060019308701158, 0.00014659173029940575, 0.00012488003994803876, 0.00017185874457936734, 0.00013387437502387911, 0.0001644371950533241, 0.00017332794959656894, 0.00013392741675488651, 0.00011255938443355262, 7.4450545071158558e-05, 0.00013869814574718475, 6.8895591539330781e-05, 0.00017340248450636864, 0.00015227874973788857, 0.00013810917153023183, 0.0001116390703828074, 0.00016735118697397411, 9.6344396297354251e-05, 0.0001364143390674144, 0.00021963668405078351, 0.00021458527771756053, 0.00026861982769332826, 6.3464343838859349e-05, 0.00014551838103216141, 0.0002459943643771112, 0.00018450478091835976, 0.00019304789020679891, 0.00011984531010966748, 0.00012196640454931185, 0.00016318104462698102, 0.00012956315185874701, 7.1787966589909047e-05, 0.00014418071077670902, 0.00021833956998307258, 0.00016115904145408422, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int32_t tensor_data20[48] = { -2115, -5799, 143, 36, 2516, 12354, 15664, 50, 15, 2727, -11729, -272, 1240, 8623, 3394, 186, -1014, 11044, 13427, 15376, -1875, -19, -158, -188, 29, 3853, 1003, 22, 9623, -3023, -222, 10071, 9137, -17153, 5035, -2194, -148, 345, -688, 220, -41, 9557, 11130, 423, 22199, 11658, 13211, 22069, };
const TfArray<1, int> tensor_dimension20 = { 1, { 48 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00024544596089981496, 9.6298725111410022e-05, 0.00030264176893979311, 0.00055257155327126384, 0.00016484143270645291, 8.5008476162329316e-05, 8.33888043416664e-05, 9.4066934252623469e-05, 0.00043944863136857748, 8.4353043348528445e-05, 0.00011630132212303579, 0.00011096099478891119, 4.8966343456413597e-05, 0.00019949743000324816, 0.00012884908937849104, 0.0001031940191751346, 0.00014191753871273249, 0.00012505680206231773, 6.7754335759673268e-05, 0.00012763642007485032, 8.5120933363214135e-05, 0.00021301225933711976, 0.00099097436759620905, 0.00010330573422834277, 0.00048534275265410542, 6.2209037423599511e-05, 0.00011099892435595393, 0.00056544726248830557, 0.00011949426698265597, 0.00021691524307243526, 0.00028774121892638505, 0.00018258090130984783, 0.00012732118193525821, 0.00031829593353904784, 0.00015992771659512073, 0.00011795164755312726, 0.00015063413593452424, 0.00011976058158325031, 0.0001192636918858625, 5.6325661716982722e-05, 0.0006706765852868557, 0.00012516271090134978, 0.00023787407553754747, 6.5896718297153711e-05, 8.9913293777499348e-05, 0.00012180306657683104, 0.00011257024016231298, 5.8860474382527173e-05, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int32_t tensor_data21[48] = { -1258, 3546, 31153, 2542, 837, 7318, 39, -17553, -859, -1387, 22008, 1294, 17924, -2387, 1241, -2749, 308, -11244, 2820, 33136, -587, 26901, 33656, -1955, -2834, -2485, 28811, 34297, 1838, -1076, 2646, -442, -7846, 1423, -2015, -2406, -15624, 1199, -1600, -252, 32885, 22225, 30345, -8291, 43859, 1622, 17821, -1393, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 6.6411579609848559e-05, 3.2447373087052256e-05, 4.0043294575298205e-05, 5.6905715609900653e-05, 5.0408259994583204e-05, 6.347159796860069e-05, 9.9249533377587795e-05, 4.665027154260315e-05, 8.4822029748465866e-05, 5.4705720685888082e-05, 4.7910427383612841e-05, 4.7673824155936018e-05, 9.375011723022908e-05, 4.4860473281005397e-05, 8.4324638010002673e-05, 5.0613485655048862e-05, 3.5250795917818323e-05, 7.1885930083226413e-05, 9.3330629169940948e-05, 4.3178366468055174e-05, 8.7585787696298212e-05, 5.767898983322084e-05, 7.391336839646101e-05, 7.5090822065249085e-05, 7.1900554758030921e-05, 3.7621990486513823e-05, 4.0653638279763982e-05, 4.3371037463657558e-05, 6.9350629928521812e-05, 0.00011708537203958258, 9.3109949375502765e-05, 9.7014322818722576e-05, 3.9513288356829435e-05, 4.9626309191808105e-05, 5.2694729674840346e-05, 0.00024580411263741553, 6.2202925619203597e-05, 5.6019223848124966e-05, 4.7209767217282206e-05, 0.00011306285887258127, 4.1756327846087515e-05, 4.5108143240213394e-05, 5.2430626965360716e-05, 7.5608848419506103e-05, 4.0065777284326032e-05, 4.9729562306310982e-05, 5.116757529322058e-05, 7.0348367444239557e-05, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int32_t tensor_data22[48] = { 14831, 30765, 22526, -767, -9135, 14080, 6016, 4801, 5587, 3898, 6211, 22454, 31974, -523, 5129, -3414, 5341, 49509, 7304, 14361, 27773, 5544, 7770, 8797, 32732, 9317, 5482, 31730, 28344, 3881, 5613, 10454, 6816, 4078, 16167, 13250, 2266, 11737, 2351, 587, 1912, 13263, 8948, 27254, 14346, 20888, 2906, 2161, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.1502745918696746e-05, 3.1023057090351358e-05, 4.1379422327736393e-05, 9.6252799266949296e-05, 5.256210351944901e-05, 5.5991928093135357e-05, 7.5368785473983735e-05, 0.00010518574708839878, 5.4604275646852329e-05, 0.00010160806414205581, 0.0001002753124339506, 3.9394166378770024e-05, 2.9577935492852703e-05, 0.00010585677955532447, 7.8942044638097286e-05, 9.8078744485974312e-05, 9.6487819973845035e-05, 2.0780042177648284e-05, 6.6803237132262439e-05, 4.7938210627762601e-05, 3.4673132176976651e-05, 6.8812638346571475e-05, 5.9750673244707286e-05, 6.771181506337598e-05, 2.9455131880240515e-05, 7.3037706897594035e-05, 7.409607496811077e-05, 2.9683398679480888e-05, 3.3096966944867745e-05, 7.0992944529280066e-05, 9.2318594397511333e-05, 7.2060356615111232e-05, 7.8431818110402673e-05, 9.6992545877583325e-05, 4.8049561883090064e-05, 5.6480479543097317e-05, 8.2496313552837819e-05, 5.6611821491969749e-05, 0.00012104304187232628, 9.368921018904075e-05, 0.00010229281906504184, 5.9263387811370194e-05, 6.8317036493681371e-05, 3.363403448020108e-05, 6.3408348069060594e-05, 4.5193606638349593e-05, 9.0469322458375245e-05, 8.9273496996611357e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int32_t tensor_data23[48] = { 2449, 44368, 882, -1560, 5930, 37, -303, 15286, -7260, 13027, -8439, 17492, 4619, -4363, 4613, -3886, -12088, 29966, -510, 11968, -845, -2780, -3464, -5909, -258, -5628, 929, -2250, -986, 4358, 1267, 3103, -195, -517, -3600, -3374, -2334, 6476, -3926, -11977, -4240, -9473, 1387, -1220, 6464, 3303, -651, 11697, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.00010333618411095813, 5.8830642956309021e-05, 0.00014430673036258668, 0.00028170342557132244, 0.00012621910718735307, 9.9026656243950129e-05, 6.4654232119210064e-05, 6.3187937485054135e-05, 9.5282703114207834e-05, 4.0488303056918085e-05, 4.7792989789741114e-05, 9.861480793915689e-05, 0.00022447698574978858, 0.00017577833204995841, 0.00012866227189078927, 5.3221072448650375e-05, 3.6132878449279815e-05, 0.00011534248915268108, 9.7870994068216532e-05, 7.2665701736696064e-05, 7.5839758210349828e-05, 0.00015851412899792194, 0.00014348425611387938, 7.870753324823454e-05, 8.8937449618242681e-05, 7.2777031164150685e-05, 0.00018924952019006014, 0.00010902577923843637, 0.00010381111496826634, 7.4702817073557526e-05, 0.00011192533565917984, 8.775144669925794e-05, 6.2507227994501591e-05, 0.00014939732500351965, 6.7818269599229097e-05, 0.00021915636898484081, 0.00013457030581776053, 0.00014048493176233023, 7.54891152610071e-05, 4.5889733883086592e-05, 0.0001434271689504385, 4.5834989577997476e-05, 0.00013530743308365345, 0.00016664121358189732, 0.00022857339354231954, 9.5321971457451582e-05, 0.0001488474226789549, 3.1688603485235944e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int32_t tensor_data24[48] = { 2179, 2279, 2468, -2479, 7634, 6222, 10951, 8515, 6165, -2308, 20628, 8685, -3793, 12209, 14770, 3421, 15686, 606, 59477, 16558, 7509, 25361, 16062, 5993, 4525, 29195, 614, 9144, 7829, -3321, 2694, 15545, 224, 6098, 1876, 15486, 3731, 10477, 1353, 3979, -1575, 17265, 13446, 8965, 5588, 12514, 1629, 5847, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 7.3315415647812188e-05, 9.7162264864891768e-05, 8.7022330262698233e-05, 0.00010270818165736273, 8.2292914157733321e-05, 7.4373077950440347e-05, 6.0373189626261592e-05, 6.8627829023171216e-05, 6.5638043452054262e-05, 0.00010452124115545303, 3.9716480387141928e-05, 4.2353181925136596e-05, 4.7509838623227552e-05, 5.1807441195705906e-05, 5.4680953326169401e-05, 8.425043779425323e-05, 4.2641695472411811e-05, 6.9445079134311527e-05, 1.6827923900564201e-05, 4.8590078222332522e-05, 6.3066661823540926e-05, 3.4536871680757031e-05, 5.1972609071526676e-05, 8.659880404593423e-05, 6.2908875406719744e-05, 3.2297819416271523e-05, 8.6616972112096846e-05, 7.3345574492122978e-05, 6.2523584347218275e-05, 8.5612649854738265e-05, 6.5468317188788205e-05, 3.3677257306408137e-05, 7.6596712460741401e-05, 8.8207350927405059e-05, 8.6981541244313121e-05, 4.3907719373237342e-05, 7.7138960477896035e-05, 5.9927780966972932e-05, 8.9489774836692959e-05, 6.5309228375554085e-05, 6.3713378040120006e-05, 4.1618182876845822e-05, 5.8658235502662137e-05, 8.4058330685365945e-05, 7.7264638093765825e-05, 5.380301081459038e-05, 6.5641179389785975e-05, 6.350212061079219e-05, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int32_t tensor_data25[48] = { -22642, -4714, 2856, -2053, -5481, -951, -3725, -21965, -17942, -13535, -649, 16373, 3537, 30761, -476, 28557, -14552, -5835, -2950, 14294, -9925, -20797, 11676, -7528, -10302, 32206, -1442, -154, 32180, 94, 6249, -9259, -12378, 31294, -3905, 185, -12822, 10660, -16198, -731, -3393, 21036, -993, 35552, -4276, -1417, -18158, -56, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 4.943072417518124e-05, 7.194311183411628e-05, 8.4511011664289981e-05, 8.2321028457954526e-05, 0.00016669597243890166, 8.6837128037586808e-05, 0.0001304762699874118, 5.253916242509149e-05, 3.9260634366655722e-05, 8.0071818956639618e-05, 7.1657923399470747e-05, 7.9406127042602748e-05, 7.2863171226345003e-05, 4.5619784941663966e-05, 5.7895646023098379e-05, 5.2923158364137635e-05, 6.9200730649754405e-05, 8.4993029304314405e-05, 0.00010608505544951186, 9.3597525847144425e-05, 9.3860864581074566e-05, 7.8091674367897213e-05, 8.5355241026263684e-05, 6.5397056459914893e-05, 4.8117446567630395e-05, 8.4481194789987057e-05, 0.00010355722770327702, 0.00010099497012561187, 5.4757529142079875e-05, 0.00012412465002853423, 9.443469753023237e-05, 6.0790713177993894e-05, 0.0001061846487573348, 3.7885110941715539e-05, 9.8969430837314576e-05, 9.4030074251350015e-05, 6.8387118517421186e-05, 3.6702658690046519e-05, 5.5334985518129542e-05, 6.0703008784912527e-05, 0.00011821446241810918, 5.6213011703221127e-05, 5.057269663666375e-05, 4.7861740313237533e-05, 6.2693114159628749e-05, 5.0385893700877205e-05, 5.4617343266727403e-05, 6.3766594394110143e-05, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int32_t tensor_data26[48] = { -707, 5319, 3513, 44503, 13801, 10574, 12925, 3239, 7121, 26722, 3732, 3916, 6694, 45863, 9287, 6881, 12183, 10080, 8569, 40589, 27662, 6235, 3514, 6309, 3216, 17680, 430, 16022, -1860, 2216, 2078, 13794, 6094, 18266, 4925, 23090, -1457, -4429, 24972, 15784, 9542, 4453, 11756, 4266, 8897, 44672, 10453, 1514, };
const TfArray<1, int> tensor_dimension26 = { 1, { 48 } };
const TfArray<48, float> quant26_scale = { 48, { 7.5639720307663083e-05, 8.4642306319437921e-05, 9.4074785010889173e-05, 2.309480078110937e-05, 5.1574395911302418e-05, 5.5359567340929061e-05, 5.9839443565579131e-05, 7.8681041486561298e-05, 6.2410661485046148e-05, 3.5563251003623009e-05, 5.09812161908485e-05, 5.6413817219436169e-05, 5.5895270634209737e-05, 2.1396526790340431e-05, 6.2447819800581783e-05, 5.8466623158892617e-05, 4.4263408199185506e-05, 5.500561383087188e-05, 8.7060026999097317e-05, 2.4774246412562206e-05, 3.6217905289959162e-05, 7.6136726420372725e-05, 7.5827920227311552e-05, 6.2111728766467422e-05, 6.9892506871838123e-05, 4.4589898607227951e-05, 6.7058688728138804e-05, 4.8061749112093821e-05, 9.6977550128940493e-05, 0.00013488992408383638, 9.4145420007407665e-05, 3.7396712286863476e-05, 7.4589450377970934e-05, 4.7596982767572626e-05, 6.4213018049485981e-05, 3.9355087210424244e-05, 0.00012998039892408997, 7.9532241215929389e-05, 3.9087401091819629e-05, 4.585462374961935e-05, 4.3966054363409057e-05, 6.2255225202534348e-05, 5.5553005950059742e-05, 8.9053253759630024e-05, 6.0223785112611949e-05, 2.1717974959756248e-05, 6.0132835642434657e-05, 6.6430999140720814e-05, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int32_t tensor_data27[48] = { -4640, 13804, -493, 5568, -15940, 49112, -16316, 34710, 42688, -324, 40655, -2167, 34832, -1267, 20046, -394, -4343, 31237, -12188, 23443, 508, 35142, 2155, 33131, 3830, 3415, -4924, -9909, -2550, 963, -8862, 32142, -3007, 30939, -368, -4478, -208, -341, 21679, -578, 7021, 37177, -19617, -6059, 2858, -14365, -5243, -3294, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 6.2398015870712698e-05, 8.5374726040754467e-05, 5.9002126363338903e-05, 9.1374036855995655e-05, 0.00011702398478519171, 3.1418447179021314e-05, 4.9435726396040991e-05, 2.9457205528160557e-05, 2.9698894650209695e-05, 0.00018235767493024468, 2.8718401154037565e-05, 8.1666315963957459e-05, 3.6107827327214181e-05, 0.00013489185948856175, 6.8242617999203503e-05, 8.3471633843146265e-05, 6.2561433878727257e-05, 4.2617200961103663e-05, 6.8696434027515352e-05, 0.00021902694425079972, 0.00013215471699368209, 3.2044183171819896e-05, 3.6594916309695691e-05, 2.7721711376216263e-05, 7.7461103501264006e-05, 9.0350607933942229e-05, 6.8232773628551513e-05, 0.00011419167276471853, 4.7018795157782733e-05, 8.1219201092608273e-05, 5.4784009989816695e-05, 7.0064554165583104e-05, 6.6965236328542233e-05, 8.2766455307137221e-05, 6.791786290705204e-05, 8.2523933087941259e-05, 0.00011571471259230748, 0.00010592490434646606, 0.00015901132428552955, 6.5481835918035358e-05, 7.0809248427394778e-05, 3.6697147152153775e-05, 5.0951035518664867e-05, 3.8334859709721059e-05, 7.8143435530364513e-05, 0.00010260186536470428, 5.1503811846487224e-05, 6.3239822338800877e-05, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int32_t tensor_data28[1280] = { -1886, -165, -471, -1153, 256, -628, -1083, -183, -878, -134, -1341, 80, -928, 301, 217, 16, 691, -414, -186, -613, -2765, -1386, 726, 1021, -3132, -1294, -533, -1358, -211, -832, -594, -439, -3259, -2481, -627, -870, -1150, -964, 180, -385, -1270, 123, -325, 316, -156, -1583, -778, -1166, -994, 146, -1203, 178, -1473, -602, -3107, -552, -1254, -1674, -1619, -642, 72, -2581, -973, 1749, -590, -2299, -545, -7, -1327, -243, -536, -516, -1943, -152, -1052, -239, -739, -1893, 2300, 121, -1378, 135, -1889, -1387, -1000, 600, -1935, 572, -2207, -640, 237, -1584, -1190, -1247, -1775, -1528, -478, 303, -900, -258, -108, -2203, -708, -1592, -16, -183, -1754, -1641, -1329, -1840, -1521, -1960, -491, 1077, -1084, -1734, -1393, -844, -171, -1203, 190, -558, -962, 139, -2240, -823, 545, -1361, -1555, 51, -498, 609, 142, -680, 69, -1027, -1913, -1277, -1826, 42, -169, -1606, 194, 1631, -1880, -155, -375, -709, -1992, 176, -643, -520, -1289, -1351, -1073, -1998, -1183, -1159, 81, -704, -2074, -614, -92, -417, -595, -1194, 154, -328, -1958, -1460, 2, -859, -2447, -147, -720, -1914, -275, -4471, 477, -1794, -276, -305, -272, 667, -1386, -387, -1463, -216, -803, -1209, -1136, -2756, -178, 819, 146, -1523, -1323, -1241, -1998, -424, -2024, -232, -365, -720, -1644, 1309, -1519, -207, -787, -798, -53, -654, -2629, -651, -1311, -890, -206, -543, -292, -304, -1974, 233, -234, -981, -854, -227, -2808, -1099, -1560, -409, 296, -46, 409, -758, -208, -1962, -2078, -1664, -476, 169, -989, -1644, -1131, -408, -1835, -1976, -1445, -877, -1039, -1270, -1066, -700, -1567, -1212, -206, 381, 275, -12, -1748, 1200, -1505, -2236, -1129, -422, -1313, 613, -827, -364, -2571, -1183, -129, -632, -1116, 196, -26, -1126, 461, -1100, -2214, -1098, -778, 205, -1773, -2043, -1393, -1673, -901, 189, 302, -527, -810, -1679, -827, 672, -475, -2932, -2268, -459, -331, 37, 367, -1247, -1832, -1188, -1326, 642, 257, 42, -214, -684, 967, -3025, -2223, 508, -496, -406, -427, -1664, -22, -749, -2111, -1238, -458, -161, -1318, -1870, 606, -748, -454, -663, -1838, 749, -727, -978, 403, -48, -1052, -232, -627, -1396, 408, -873, -1771, -2891, 1996, -1414, -1368, -145, 273, -1604, -1115, -2338, 537, -833, -559, -698, -2170, -659, 558, -1043, 230, -972, -1727, -583, -672, -679, -1679, -517, -2058, -253, -662, -2994, -581, -1368, 925, -389, -692, 118, -1635, -732, -291, -368, -1095, -1116, 348, -1722, -978, -1962, -314, -1747, 370, 91, -1980, -111, -942, 1473, -3436, 1021, 971, -1991, -277, -352, -1041, 640, -88, -519, 603, -932, -1301, -88, -1485, -708, 164, -1489, -1423, 332, -441, -693, -1156, 806, -578, -1344, -3861, -13, 22, -188, -207, -169, -2042, -413, -768, 1238, -259, 586, -257, -1276, -717, 15, 65, -575, -956, 69, 1365, 358, -1204, -770, -1846, 2268, -759, 373, -226, 32, -333, -709, -232, -644, -1200, -453, -2202, -1056, -959, 79, 66, -1104, -325, -1339, -1093, -1266, -994, 425, 1100, 87, 447, 491, 466, -892, -1134, -3002, 1176, -402, -75, 105, -676, 683, -98, -1230, -659, -1603, -1073, -474, -446, -1271, -244, -1267, -1301, -1238, -24, -351, -1269, -983, -589, -98, -1299, -147, -757, -692, 397, -565, -730, 88, -1019, 104, 152, -668, -15, -123, -982, -1117, -2029, -967, -1518, -44, -1836, 688, -1041, -1666, -1980, -1125, -904, -830, 394, 203, 539, 616, -377, 21, -1780, -1793, -2069, 101, 276, -458, 314, -1889, 357, -26, -1867, 327, -1372, -306, 851, 137, 508, -750, -1130, -918, 379, -660, 394, -176, -1005, -1148, -48, -1999, -958, -1348, -1810, -694, -384, -535, 604, -1230, -1026, 162, -166, -1495, -462, -861, -542, -779, -1104, -170, 130, 97, -1666, -829, -3395, -694, -440, -1415, -2800, -732, -317, -495, 617, -834, -359, -2953, 384, -1493, -792, -1972, 900, -493, -2349, 1109, -1392, -353, -2829, -1998, 96, -2445, -699, -528, -1520, -1885, -841, -4347, -612, -489, -1332, -582, -2037, -449, -1601, -1364, -1763, -1038, -1566, -3020, -1329, -1408, -882, 87, -1169, -876, 733, -906, 823, -734, -122, 1320, -835, -309, -827, 1420, -1748, 567, -364, -1298, -750, -896, -1304, 151, -997, -1519, -1191, -1391, -812, -1472, 104, -433, -1138, -1219, -2220, -1273, -94, -1756, 525, 10, -726, -165, -730, -1139, -146, -1447, -890, 14, 236, 589, -1945, -1572, -2097, -1577, -1577, -729, -1197, 52, -2432, -2370, -1663, -952, -472, -1371, 1113, -268, 14, -1672, -1859, -1656, 478, -73, 266, -889, -479, -1472, -873, -301, -1758, -2663, -624, -3056, -153, -434, -1256, -2739, -534, -2661, -2234, -491, 871, -300, -1278, 1090, -2031, -588, -1069, -648, -1002, 811, 1562, -1, -2263, -1824, 557, -1009, -2329, -1874, -204, -1678, -86, 1573, 2896, -112, -1883, -817, 143, 1036, -1091, -1443, -2706, -978, -185, 2760, -354, 301, -2464, -332, -1426, 20, 515, -1505, -1354, 112, -1563, -672, -766, 242, -1267, 574, 741, 164, -681, -1081, 155, -1494, 428, -1933, -346, -387, -1809, 594, 174, -560, -719, 79, -106, 364, -1272, -569, -1341, -903, -766, -675, -294, -444, -2405, 89, 643, 790, 16, -555, -1091, 67, 1465, -1012, -1713, -3244, -578, -1384, -2070, -2432, -1390, -1065, -108, -388, -1772, -2639, -2221, -35, -1361, -294, 271, -598, -1098, -866, 148, -292, -552, -634, -1417, -1433, 732, -1878, -827, -146, -495, -706, 778, -1391, -1097, -337, -1152, -2133, -558, -1873, -2015, -2426, -1220, 307, -356, -1178, -1166, -491, -2494, -689, -689, -2118, -1336, -715, 877, -831, -1334, -2187, -1263, -983, -328, -2163, -163, -260, -799, -1269, -1706, -14, -1228, -152, 148, -1249, -302, 228, -1471, 272, -476, -889, 177, -1671, -329, 513, -4, -870, 347, 212, -577, -1525, -721, 247, -1064, -2147, -263, -1396, -1118, 414, -1107, -616, -820, 9, -369, -1949, -688, 69, -489, 285, -148, -528, -942, -505, -1946, -134, -3873, -832, -2325, -1834, -1947, -3020, -3919, -711, 773, 154, -676, -1674, -1731, -394, 257, -2023, -1218, -1833, -1315, 875, -804, -2682, 1195, -2813, 759, -2386, -407, -9, -1858, -1368, -777, -2721, -426, 1539, -269, -564, -3449, 205, 858, 159, -1383, -1612, 49, -841, -621, -2001, -316, -1341, 173, 560, 38, 516, -1328, -1027, -2343, -356, -1289, -737, -883, -742, 873, -2953, 910, -1893, -1614, -1635, 221, -1299, -946, 554, -1785, -826, -508, -2124, 336, 934, 528, -798, 363, 84, -2404, -212, -1202, -1019, -2237, -1035, -1491, -699, 345, 60, -1187, -821, -719, -1243, -880, -850, 607, -1208, 253, 314, -1156, -766, -692, -1271, 547, -2247, 1328, -1197, -1703, -2182, -1409, -889, -575, -1350, -1534, -407, -902, -1144, -311, 336, -2592, -399, -354, -378, 297, -2065, -839, -864, 14, -1463, -1091, 304, -1228, -1151, -397, -1253, -266, -2149, -1585, -748, -2494, -1306, -2417, -1629, -1625, -1827, -964, 564, -2082, -189, -1471, 1904, -343, -3000, -1350, -834, 141, -1255, -2556, -431, -1864, -383, 295, -513, -924, -971, -135, 49, -3272, -534, -1192, -536, -430, -736, -789, -2788, -15, -992, 231, -480, 294, -3214, -344, -2616, -389, -535, -1583, 242, -862, -296, -1009, -518, -698, 454, -3323, -1671, -1973, 23, -813, 1851, -803, -1184, 1808, -2926, -1970, -978, -1581, -1987, -1916, -2438, -314, -1802, -2115, -342, -921, -1216, 241, 390, -1436, -491, 108, -895, -585, -834, -1180, -1547, -2223, 524, 179, -1049, 48, -893, -4475, 48, -2008, 682, 1090, -512, -1157, 333, 947, 1663, 149, -3472, -484, 962, -1109, -1327, 1017, -2769, -2805, -945, -1648, -858, 1214, -414, -1430, -1686, -72, 693, -1196, -3213, 517, -392, -2421, -1275, -1262, -316, 544, -784, -641, -783, 198, -52, -49, -1548, -975, -995, -852, -539, -1021, -1090, -2384, -1776, -1613, -2312, -197, -350, -1183, -934, -2808, -798, -3752, -1065, 1466, 170, 284, -1503, -2945, -2353, -1635, -2157, -1121, 1093, -733, -1548, -751, -1154, -619, -1095, 274, -435, 88, -896, 260, -544, -254, -2501, 901, -901, 173, 171, -1029, 1123, 1335, -571, -177, -1362, -515, -951, 408, -1740, -1918, -1673, -982, -650, -1331, -1566, -31, -1373, -2150, -883, -451, -748, -133, -1748, 1520, -161, 372, -981, -139, -996, -1135, -786, -1106, 420, -1680, -2477, -920, -1504, 413, 4, };
const TfArray<1, int> tensor_dimension28 = { 1, { 1280 } };
const TfArray<1280, float> quant28_scale = { 1280, { 0.00016390503151342273, 0.00011908687883988023, 0.00015241467917803675, 0.00015875369717832655, 0.00013876397861167789, 0.00020192367082927376, 0.00018939246365334839, 0.00015236524632200599, 0.00019109131244476885, 0.00018770759925246239, 0.00015212931612040848, 0.00016078351472970098, 0.00018487173656467348, 0.00019583618268370628, 0.00013577121717389673, 0.00010911250865319744, 0.00017118589312303811, 0.00020444260735530406, 0.00015834078658372164, 0.0001191265182569623, 0.0001552520552650094, 0.0002282437781104818, 0.00020839212811551988, 0.00011277933663222939, 0.00012598744069691747, 0.00022078309848438948, 0.00018440851999912411, 0.0001380625762976706, 0.00014289101818576455, 0.00021353139891289175, 0.00016220538236666471, 0.00014574520173482597, 0.00013367015344556421, 0.00016597236390225589, 0.00015419666306115687, 0.00021596328588202596, 0.00017251276585739106, 0.00016303882875945419, 0.00014507290325127542, 0.00017501732509117573, 0.00016356124251615256, 0.0001468818518333137, 0.00018213794101029634, 0.00017698112060315907, 0.00015495918341912329, 0.00016148530994541943, 0.00014833382738288492, 0.00018096066196449101, 0.00017452276370022446, 0.0001351727987639606, 0.00017119382391683757, 0.00013132023741491139, 0.00014471230679191649, 0.00017420770018361509, 0.0001096385094569996, 0.00015561807958874851, 0.00021408221800811589, 0.00014551791537087411, 0.00015965352940838784, 0.00012767748557962477, 0.00015694678586442024, 0.00014727348752785474, 0.000143127326737158, 0.00017005391418933868, 0.00011451703903730959, 0.0001250343193532899, 0.00018893679953180254, 0.00017626343469601125, 0.00015912950038909912, 0.00021583770285360515, 0.00012291631719563156, 0.00019793790124822408, 0.00015941902529448271, 0.00016676093218848109, 0.00014617112174164504, 0.00016675557708367705, 0.00014912747428752482, 0.00019597544451244175, 0.00016683114517945796, 0.00013379227311816067, 0.00016972902812995017, 0.00010043761722045019, 0.00010077324259327725, 0.00015768215234857053, 0.00011423916294006631, 0.0001903931115521118, 0.00013432779815047979, 0.00011316847667330876, 0.00020261225290596485, 0.00016615423373878002, 0.00014582321455236524, 0.00021339837985578924, 0.0001835644943639636, 0.00019319025159347802, 0.0001120854212786071, 0.00014286793884821236, 0.0001725330512272194, 0.00015063019236549735, 0.00020912376930937171, 0.0001554200571263209, 0.0002113600930897519, 0.00014858062786515802, 0.00012131005496485159, 0.00013866429799236357, 0.00014758903125766665, 0.00015485186304431409, 0.00014377970364876091, 0.00015711541345808655, 0.00016056865570135415, 0.00014864583499729633, 0.00014812285371590406, 0.00015637677279300988, 0.00015222026559058577, 0.00018643532530404627, 0.00013188456068746746, 0.00017018421203829348, 0.00014205134357325733, 0.00019966636318713427, 0.00014295891742222011, 0.00011532980715855956, 0.00015512655954807997, 0.00015843563596718013, 0.00015508408250752836, 0.00015328450535889715, 0.00013847074296791106, 0.00017028037109412253, 9.8254480690229684e-05, 0.00015653211448807269, 0.00020491312898229808, 0.0001577522634761408, 0.00012967833026777953, 0.00017358158947899938, 0.00014100999396760017, 0.00019586192502174526, 0.00017453101463615894, 0.0001892052823677659, 0.00014474386989604682, 0.00017103955906350166, 0.00011708133388310671, 0.00012912966485600919, 0.00017522111011203378, 0.0001505117688793689, 0.00014459546946454793, 0.00012245934340171516, 0.00012001002323813736, 0.00019920570775866508, 0.0001147334260167554, 0.00010825112258316949, 0.00013210336328484118, 0.00012906122719869018, 0.00012054733088007197, 0.00016438643797300756, 0.00013720308197662234, 0.00013381656026467681, 0.00016001782205421478, 0.00016099943604785949, 0.00014093932986725122, 0.00019766285549849272, 0.00017177114204969257, 0.0001489136484451592, 0.00017418806964997202, 0.00013877464516554028, 0.00016900197078939527, 0.00017950100300367922, 0.00014167481276672333, 0.00018332427134737372, 0.00010531023144721985, 0.00016815957496874034, 0.00012182309728814289, 0.00014766292588319629, 0.00025777154951356351, 0.00018212936993222684, 0.00014990598720032722, 0.00014695060963276774, 0.00014375749742612243, 0.00018244891543872654, 0.00016779698489699513, 0.00014485436258837581, 0.00017164806195069104, 0.00011956389062106609, 0.00013372481043916196, 0.00019188698206562549, 0.00014669452502857894, 0.00012711792078334838, 0.00012476475967559963, 0.00023154006339609623, 0.00014041138638276607, 0.00021145456412341446, 0.00020161477732472122, 0.00013490577111952007, 0.00012859301932621747, 0.00015717263158876449, 0.00016117579070851207, 0.00017936082440428436, 0.00016440165927633643, 0.00013076842878945172, 0.00015600398182868958, 0.00014813434972893447, 0.00014654098777100444, 0.00013717668480239809, 0.00020250988018233329, 0.00018766667926684022, 0.00014720010221935809, 0.00015338935190811753, 0.00010158123768633232, 0.00011100123083451763, 0.00017731785192154348, 0.00016814193804748356, 0.00020389714336488396, 0.00013994009350426495, 0.00014305370859801769, 0.00017419083451386541, 0.00013707470498047769, 0.00020668734214268625, 0.00011789131531259045, 0.00015308742877095938, 0.00016158694052137434, 0.00014238350559026003, 0.00013902146019972861, 0.00018649124831426889, 0.00015469509526155889, 0.00015665858518332243, 0.00018828334577847272, 0.00017252788529731333, 0.00016072358994279057, 0.00016256471280939877, 0.00014008418656885624, 0.00013446931552607566, 0.00015433115186169744, 0.00017091310292016715, 0.00015108115621842444, 0.00019816594431176782, 0.00020778190810233355, 0.00017904629930853844, 0.00019007927039638162, 0.00013823722838424146, 0.00015384743164759129, 0.00013422706979326904, 0.00016442016931250691, 0.00015441783762071282, 0.00020065072749275714, 0.0001176743971882388, 0.00016939836496021599, 0.000145072175655514, 0.00011853648175019771, 0.00016271846834570169, 0.00016551140288356692, 0.00015365799481514841, 0.00020472244068514556, 0.0001457935431972146, 0.00013527343980967999, 0.00016132341988850385, 0.00019236508524045348, 0.00024364166893064976, 0.00015070062363520265, 0.00017613748786970973, 0.00013816877617500722, 0.0001360659662168473, 0.00013396283611655235, 0.00013928879343438894, 0.00015026442997623235, 0.00015631716814823449, 0.00013796331768389791, 0.0001480559294577688, 0.00016749065252952278, 0.00016297485854011029, 0.00014177858247421682, 0.0001307378988713026, 0.00013894886069465429, 0.00011965313751716167, 0.00013607286382466555, 0.00013600624515675008, 0.00016619027883280069, 0.00013807833602186292, 0.00017497976659797132, 0.00015804285067133605, 0.00012262635573279113, 0.00015196182357612997, 0.00013878100435249507, 0.00017357623437419534, 0.00014884883421473205, 0.00013430428225547075, 0.00011108900798717514, 0.00014558127440977842, 0.00019207281002309173, 0.0001490569266024977, 0.00013403159391600639, 0.00017210349324159324, 0.00014133351214695722, 0.00014592082879971713, 0.00013559623039327562, 0.00012929325748700649, 0.00022099529451224953, 0.00015481945592910051, 0.00021480237774085253, 0.00016400126332882792, 0.00014579143316950649, 0.00015753127809148282, 0.0001559513621032238, 0.00018768760492093861, 0.0001311732194153592, 0.00015132722910493612, 0.00016381866589654237, 0.00019604552653618157, 0.00012963610060978681, 0.0001755768753355369, 0.00013822202163282782, 0.00018172890122514218, 0.00015585473738610744, 0.00015375253860838711, 0.00014446722343564034, 0.00011624237959040329, 0.00011663900659186766, 0.00016371170931961387, 0.00019780918955802917, 0.00014039619418326765, 0.0001728409988572821, 0.00017073788330890238, 0.00017566315364092588, 0.00016972319281194359, 0.00015303574036806822, 0.00012869577039964497, 0.00017398345516994596, 0.00014591609942726791, 0.00016198205412365496, 0.0001073642706614919, 0.00015539993182756007, 0.00020789803238585591, 0.00014442722022067755, 0.0001167965165222995, 0.00019596164929680526, 0.00013587862486019731, 0.00018531011301092803, 0.00020965332805644721, 0.00013635781942866743, 0.00016828982916194946, 0.00012941732711624354, 0.00014174151874613017, 0.00021064045722596347, 0.00015891500515863299, 0.00014600424037780613, 0.00016984391550067812, 0.00012103246262995526, 0.00011850796727230772, 0.00013912284339312464, 0.00018108339281752706, 0.00013537961058318615, 0.00013592676259577274, 0.00021214458683971316, 0.00015664660895708948, 0.00012981833424419165, 0.00011565798195078969, 0.00012905396579299122, 0.00014672562247142196, 0.00014998395636212081, 0.00011644950427580625, 0.00013358300202526152, 0.00015539159358013421, 0.00012157343735452741, 0.00024187233066186309, 0.00013709200720768422, 0.00016107689589262009, 0.00015164040087256581, 0.00013239520194474608, 0.00019695580704137683, 0.00014275427383836359, 0.00020445429254323244, 0.00017446301353629678, 0.0001392322446918115, 0.00011254318815190345, 0.00020158245752099901, 0.00011125201126560569, 0.00015018436533864588, 0.00016492922441102564, 0.00012826450983993709, 0.00014249174273572862, 0.00016884217620827258, 0.00016938812041189522, 0.00013631771435029805, 0.00018012101645581424, 0.00012553864507935941, 0.000128051673527807, 0.00011024770356016234, 0.00017397021292708814, 0.00017635044059716165, 0.00014544550504069775, 0.00016147053975146264, 0.00013642529665958136, 0.00017744392971508205, 0.00011629395157797262, 0.00014895587810315192, 0.00013757243868894875, 0.00012176172458566725, 0.00014501497207675129, 0.00013619336823467165, 0.00011013488256139681, 0.0001224201696459204, 0.00012383986904751509, 0.00013290732749737799, 0.00017135309462901205, 0.00019193007028661668, 0.00019799685105681419, 0.00015590591647196561, 0.00014471512986347079, 0.00019735934620257467, 0.00019350515503901988, 0.0001440308551536873, 0.00012840531417168677, 0.00015771965263411403, 0.00017041423416230828, 0.00013191204925533384, 0.00019569977303035557, 0.00018834187358152121, 0.0001328712678514421, 0.00015893137606326491, 0.0001128526491811499, 0.00013645197032019496, 0.00021571063552983105, 0.00012267648708075285, 0.00016919182962737978, 0.00013505104288924485, 0.00014494922652374953, 0.00016163769760169089, 0.00018424043082632124, 0.00023348662944044918, 0.00016707419126760215, 0.00015919376164674759, 0.00012338042142800987, 0.00011459603410912678, 0.0001520745427114889, 0.00017251650569960475, 0.00020023771503474563, 0.00012001843424513936, 0.00016002128541003913, 0.00010394940909463912, 0.00018310909217689186, 0.00017263705376535654, 0.00013430762919597328, 0.00017817410116549581, 0.0001729522628011182, 0.00015677843475714326, 0.00015759268717374653, 0.0001251506619155407, 0.00015492408419959247, 0.00023380662605632097, 0.00012124943896196783, 0.00014073062629904598, 0.00013317365664988756, 0.00021293462486937642, 0.00012820347910746932, 0.00017804715025704354, 0.00015329626330640167, 0.00014786967949476093, 0.00017632725939620286, 0.00014558744442183524, 0.00020585201855283231, 0.00015615702432114631, 0.00014606030890718102, 0.00016762664017733186, 0.00015269652067217976, 0.00019810165395028889, 0.00015181436901912093, 0.00019099045312032104, 0.0001584138663019985, 0.00018336795619688928, 0.00011530422489158809, 0.00013414598652161658, 0.00017800153000280261, 0.00011705117503879592, 0.00019427257939241827, 0.00015768427692819387, 0.00018956017447635531, 0.00014019997615832835, 0.00011564594751689583, 0.00019043963402509689, 0.00014735823788214475, 0.00018270508735440671, 0.00012252104352228343, 0.00013782856694888324, 0.0001311071973759681, 0.0001536617346573621, 0.00019264398724772036, 0.00018296459165867418, 0.00013009656686335802, 0.00012082722969353199, 0.00015202135546132922, 0.00020481363753788173, 0.0001360059977741912, 0.00020073213090654463, 0.00013010068505536765, 0.00015812886704225093, 0.00016793992836028337, 0.0001696626131888479, 0.00018126275972463191, 0.00015195916057564318, 0.00015063861792441458, 0.00012257389607839286, 0.00020790462440345436, 0.00016723436419852078, 0.00014160621503833681, 0.00012407767644617707, 0.00021185541118029505, 0.00014776689931750298, 0.00019951138528995216, 0.00023870197765063494, 0.00014912193000782281, 0.00012491524103097618, 0.00017666253552306443, 0.00015296235505957156, 0.00015667417028453201, 0.00013109459541738033, 0.00018579255265649408, 0.00015304863336496055, 0.00015833287034183741, 0.00014583146548829973, 0.00014954812650103122, 0.00013814892736263573, 0.0001658979308558628, 0.00013122033851686865, 0.00015575625002384186, 0.00010985116387018934, 0.00014581668074242771, 0.00016503946972079575, 0.0001587064762134105, 0.00015863364387769252, 0.00012456203694455326, 0.00019488831458147615, 0.00014798763731960207, 0.00015518932195845991, 0.0002121812867699191, 0.00017764203948900104, 0.00020324853539932519, 0.00013615538773592561, 0.00013744861644227058, 0.00013757044507656246, 0.0001651927741477266, 0.00017491534526925534, 0.00014671881217509508, 0.0001794734998838976, 0.00012109487579436973, 0.00012682654778473079, 0.00012010883074253798, 0.00010615236533340067, 0.00013037247117608786, 0.00012822837743442506, 0.00021030427888035774, 0.00015737111971247941, 0.0001809555251384154, 0.00013510457938537002, 0.00021294323960319161, 0.00015055175754241645, 0.00012359365064185113, 0.00016108335694298148, 0.00019127229461446404, 0.00018402410205453634, 0.00013202564150560647, 0.00020246412896085531, 0.00018805460422299802, 0.00016732639051042497, 0.00022078513575252146, 0.00015821425768081099, 0.0001550855376990512, 0.00017872580792754889, 0.0001379948080284521, 0.00013826425129082054, 0.00015207714750431478, 0.00013202092668507248, 0.00013348739594221115, 0.0001889741251943633, 0.00016439975297544152, 0.00013442350609693676, 0.00015084119513630867, 0.00016438552120234817, 0.00013332885282579809, 0.00012169975525466725, 0.00015290087321773171, 0.00021689546701963991, 0.00014557615213561803, 0.00012914989201817662, 0.00016131119627971202, 0.00014970550546422601, 0.00012616883032023907, 0.00016143135144375265, 0.00019239172979723662, 0.00014242989709600806, 0.00014621570880990475, 0.00010970770381391048, 0.00018203837680630386, 0.00017106816812884063, 0.00013531543663702905, 0.00015229365089908242, 0.00014632722013629973, 0.00019244379654992372, 0.00017124571604654193, 0.00019593250181060284, 0.00020455167395994067, 0.00014972164353821427, 0.0001451991411158815, 0.00013292324729263783, 0.00012288171274121851, 0.00017944522551260889, 0.00012009408965241164, 0.00012561630865093321, 0.0001687550829956308, 0.00015192094724625349, 0.00019515282474458218, 0.00016741102444939315, 0.00013483210932463408, 0.000129382373415865, 0.00015546778740826994, 0.00018149202514905483, 0.00014702767657581717, 0.00019736109243240207, 0.00014205889601726085, 0.00018930062651634216, 0.0001606600999366492, 0.0001613960339454934, 0.00012052131933160126, 0.00013573702017311007, 0.00014605102478526533, 0.00013739042333327234, 0.00017015112098306417, 0.00013227619638200849, 0.00014101353008300066, 0.00018761180399451405, 0.00013057018804829568, 0.0001748420181684196, 0.00016368814976885915, 0.00016461891937069595, 0.00013677442620974034, 0.00014766800450161099, 0.00015735873603262007, 0.0001378963643219322, 0.00014586381439585239, 0.00021964564803056419, 0.00016542644880246371, 0.00017260386084672064, 0.00023643606982659549, 0.00013921031495556235, 0.00017999678675550967, 0.00015111254469957203, 0.00013159336231183261, 0.00016306433826684952, 0.00014208543871063739, 0.00015992933185771108, 0.00013492422294802964, 0.00017017063510138541, 0.00018915266264230013, 0.00015438786067534238, 0.00014373028534464538, 0.00015475638792850077, 0.00016203458653762937, 0.00021142364130355418, 0.00018648408877197653, 0.0001155309219029732, 0.00021508226927835494, 0.00013764924369752407, 0.00015594414435327053, 0.00014444890257436782, 0.00011154929961776361, 0.00020678852160926908, 0.00010431602277094498, 0.00015890199574641883, 0.00014999658742453903, 0.00016186555149033666, 0.00012138981401221827, 0.00017436532652936876, 0.00017328404646832496, 0.00017566699534654617, 0.0001245203020516783, 0.00020267727086320519, 0.00014209449000190943, 0.00018391669436823577, 0.00012460292782634497, 0.00017613914678804576, 0.00011273611744400114, 0.00016302487347275019, 0.00019866612274199724, 0.0001232429058291018, 0.00019114116730634123, 0.00012658600462600589, 0.0001564309059176594, 0.00012208224507048726, 0.0001395311119267717, 0.00017744820797815919, 0.00018986512441188097, 0.0001361500471830368, 0.00014492934860754758, 0.0001134412523242645, 0.00016827169747557491, 0.00015808953321538866, 0.00012744560081046075, 0.00012213921581860632, 0.00015898446145001799, 0.00016843347111716866, 0.00016705387679394335, 0.00020702333131339401, 0.00023023957328405231, 0.00017187005141749978, 0.0001365478674415499, 0.00015281300875358284, 0.00011696654109982774, 0.00016706404858268797, 0.0001789728703442961, 0.00012807238090317696, 0.00013958883937448263, 0.00015200789493974298, 0.00017279419989790767, 0.00014375189493875951, 0.00011393629392841831, 0.00016931266873143613, 0.00012361333938315511, 0.00018042244482785463, 0.0001677186373854056, 0.00016937483451329172, 0.00012664706446230412, 0.00014449348964262754, 0.00015232464647851884, 0.00011951787018915638, 0.00017142361321020871, 0.00015623231593053788, 0.00018903783347923309, 0.00013467346434481442, 0.00012528600927907974, 0.0001896882604341954, 0.00020538653188850731, 0.00015435031673405319, 0.00016957541811279953, 0.00018917997658718377, 0.0001252498768735677, 0.00010636703518684953, 0.00012557973968796432, 0.00011579226702451706, 0.00014645171177107841, 0.00015423186414409429, 0.00016845669597387314, 0.00012046244228258729, 0.00014567679318133742, 0.0001446311071049422, 0.000151258529513143, 0.0001350078237010166, 0.00011912424815818667, 0.00014288609963841736, 0.00015223822265397757, 0.00018805118452291936, 0.00015042387531138957, 0.00012630989658646286, 0.00018617208115756512, 0.00010162375110667199, 0.00015346558939199895, 0.00014527721214108169, 0.0001300073490710929, 0.00014268814993556589, 0.00010585255222395062, 0.00019886167137883604, 0.00011917241499759257, 0.00013490942365024239, 0.00014081588597036898, 0.00016268197214230895, 0.00020367851539049298, 0.0001560192322358489, 0.00016029068501666188, 0.00016615971981082112, 0.00013425186625681818, 0.00019946956308558583, 0.00016756584227550775, 0.0001657798420637846, 0.00015426847676280886, 0.00015469195204786956, 0.00012319936649873853, 0.00014510465553030372, 0.00011835506302304566, 0.00018234299204777926, 0.0001135671918746084, 0.00025464667123742402, 0.00020119061809964478, 0.00017056714568752795, 0.00013748262426815927, 0.00017055934586096555, 0.00013023718202020973, 0.00012628824333660305, 0.00011507333692861721, 0.00019087166583631188, 0.00014938224921934307, 0.00016238706302829087, 0.00016599138325545937, 0.00012131102994317189, 0.00018961967725772411, 0.00014822761295363307, 0.00020132125064264983, 0.00016140274237841368, 0.00013535028847400099, 0.00017289025709033012, 0.0001319645089097321, 0.00011912859918083996, 0.00014551238564308733, 0.00016139801300596446, 0.00014284330245573074, 0.00013127384590916336, 0.0002132995577994734, 0.00020985578885301948, 0.00020260247401893139, 0.00015524485206697136, 0.00012881704606115818, 0.00017460134404245764, 0.00012209113629069179, 0.0001465566165279597, 0.00012804742436856031, 0.00016016715380828828, 0.0001336851273663342, 0.00022254201758187264, 0.00016157042409759015, 0.0001529183064121753, 0.00015256529150065035, 0.00021768092119600624, 0.00013037574535701424, 0.00018128663941752166, 0.00014395483594853431, 0.00017465946439187974, 0.00016843684716150165, 0.00015666350373066962, 0.00014203858154360205, 0.00020929911988787353, 0.00017223533359356225, 0.00015581978368572891, 0.00014356899191625416, 0.00013222789857536554, 0.00019274710211902857, 0.00020113567006774247, 0.0001372084952890873, 0.0001493292220402509, 0.0001623905700398609, 0.00013196664804127067, 0.00013260188279673457, 0.00022510996495839208, 0.00012767460430040956, 0.00015086949861142784, 0.00015037741104606539, 0.00012075830454705283, 0.00011875635391334072, 0.00014711185940541327, 0.0001168662856798619, 0.00021975091658532619, 0.00013642149860970676, 0.00019592086027842015, 0.0001324545155512169, 0.00014525893493555486, 0.00010576914792181924, 0.00013530657452065498, 0.00016277475515380502, 0.00011165890464326367, 0.0001694357197266072, 0.00012520574091468006, 0.00018190110858995467, 0.00015926029300317168, 0.00013998737267684191, 0.00013888775720261037, 0.00012387694732751697, 0.00011535995145095512, 0.00013747844786848873, 0.00013606407446786761, 0.00018269386782776564, 0.00018075184198096395, 0.0001408603711752221, 0.00014661374734714627, 0.00016544405661989003, 0.00018771432223729789, 0.00016494789451826364, 0.00016058135952334851, 0.00012419371341820806, 0.00016026267257984728, 0.00016988512652460486, 0.00018371656187810004, 0.00015843949222471565, 0.00016966386465355754, 0.00018177616584580392, 9.6042189397849143e-05, 0.00013277551624923944, 0.00015590150724165142, 0.00010406097862869501, 0.00012126750516472384, 0.00012569359387271106, 0.00013843091437593102, 0.00013153706095181406, 0.00013643394049722701, 0.00010788014333229512, 0.00012989398965146393, 0.00013800802116747946, 0.00022189703304320574, 0.00015981719479896128, 0.0001888418773887679, 0.00018499905127100646, 0.0001726458576740697, 0.00011116421228507534, 0.00011584584717638791, 0.00015910847287159413, 0.00017272573313675821, 0.00011903917766176164, 0.00017333052528556436, 0.00014898148947395384, 0.00017850977019406855, 0.00011414149776101112, 0.00018409581389278173, 0.00018971718964166939, 0.00016877672169357538, 0.00011657716822810471, 0.00016242678975686431, 0.00013075653987471014, 0.0001476484612794593, 0.00013581570237874985, 0.00014413992175832391, 0.00013124146789778024, 0.00014193751849234104, 0.00016350156511180103, 0.00013133739412296563, 0.00015585265646222979, 0.00019786275515798479, 0.00014891673345118761, 0.00014919873501639813, 0.00019339342543389648, 0.00012315079220570624, 0.00012373592471703887, 0.00018635194282978773, 0.00014108752657193691, 0.00011352592264302075, 0.00019330919894855469, 0.00015174620784819126, 0.00013382852193899453, 0.00015422741125803441, 0.00017365062376484275, 0.00017436302732676268, 0.00018930675287265331, 0.00017060198297258466, 0.00017358500917907804, 0.00016007536032702774, 0.00017055394710041583, 0.00014023302355781198, 0.00017282644694205374, 0.00015958932635840029, 0.00016426987713202834, 0.00015227578114718199, 0.0001199458129121922, 0.00013305123138707131, 0.00014657672727480531, 0.00015323834668379277, 0.00016227779269684106, 0.00012956178397871554, 0.00016374544065911323, 0.00014271876716520637, 8.4542291006073356e-05, 0.00020493892952799797, 0.00012869953934568912, 0.0001364743075100705, 0.00013528624549508095, 0.00014875078340992332, 0.00011100689880549908, 0.00017287202354054898, 0.00013898455654270947, 0.00010737444245023653, 0.00014579101116396487, 0.00011450333113316447, 0.00015858640836086124, 0.00015879569400567561, 0.00013726750330533832, 0.00012488788343034685, 9.1452158812899143e-05, 0.00014301994815468788, 0.00019628819427452981, 0.00016488161054439843, 0.00013358909927774221, 0.00018013779481407255, 0.0001698163541732356, 0.00011735206498997286, 0.00015211872232612222, 0.00011252491822233424, 0.00016146352572832257, 0.00015003763837739825, 0.00017656214185990393, 0.00018072868988383561, 0.00015297165373340249, 0.00013074676098767668, 0.00014100602129474282, 0.00014472911425400525, 0.00013823850895278156, 0.00012710398004855961, 0.00017714221030473709, 0.00017213649698533118, 0.00017075335199479014, 0.00011364750389475375, 0.0001409141841577366, 0.00021097459830343723, 0.00014400317741092294, 0.00015369171160273254, 0.0001494069438194856, 0.00018081920279655606, 0.0002147126360796392, 0.00017990713240578771, 0.00014383907546289265, 0.00014393431774806231, 0.00017597968690097332, 0.00016324661555700004, 0.00012789180618710816, 0.0001206646193168126, 0.00014078945969231427, 0.00015549066301900893, 0.00016436226724181324, 0.00018824353173840791, 0.00014467749861069024, 0.00015372317284345627, 0.00020740454783663154, 0.00021551481040660292, 0.00012258673086762428, 0.00018511319649405777, 0.00015606502711307257, 0.00014204770559445024, 0.00012450036592781544, 0.00012933961988892406, 0.000174650878761895, 0.00023481682001147419, 0.00012729194713756442, 0.00012478121789172292, 9.5331204647663981e-05, 0.00019141369557473809, 0.00015682094090152532, 0.00015229145355988294, 0.00017114535148721188, 0.00014274501882027835, 0.00010416201257612556, 0.00013394533016253263, 0.00013500990462489426, 0.00019387846987228841, 0.0001645765732973814, 0.00018919297144748271, 0.00016890099504962564, 0.00016807742940727621, 0.00013881978520657867, 0.00011933775385841727, 0.00016365827468689531, 0.00013971225416753441, 0.00019938137847930193, 0.00018519425066187978, 0.00016713574586901814, 0.00010924300295300782, 0.00016940405475907028, 0.00018191414710599929, 0.00018459270359016955, 0.00014506079605780542, 0.00016670463082846254, 0.0001729580108076334, 0.00020809441048186272, 0.00015907133638393134, 0.00017869376461021602, 0.00016199069796130061, 0.00010959118662867695, 0.00011299997277092189, 0.00011377482587704435, 0.00015241256915032864, 0.00011152422666782513, 0.00017012510215863585, 0.00019579619402065873, 0.00016986200353130698, 0.0001595417270436883, 0.0001318013237323612, 0.00012984112254343927, 0.00022498659382108599, 0.00018119363812729716, 0.00013608211884275079, 0.0001610791077837348, 0.00015908572822809219, 0.00011183457536390051, 0.00015851458010729402, 0.00015764619456604123, 0.0001345346390735358, 0.00013609504094347358, 0.00013113526802044362, 0.00016405775386374444, 0.00012053464160999283, 0.00011760135384975001, 0.00017492279584985226, 0.0001660764537518844, 0.00015612789138685912, 0.00015863221779000014, 0.00021029829804319888, 0.00013146029959898442, 0.00014359256601892412, 0.00011455205094534904, 0.00012378818064462394, 0.00014354786253534257, 0.00017328212561551481, 0.0001613493514014408, 0.00016436494479421526, 0.00013239253894425929, 0.00011701043695211411, 0.00014243746409192681, 0.00014719902537763119, 0.0001725747570162639, 0.00013196950021665543, 0.00014767478569410741, 0.00014361759531311691, 0.00012011935177724808, 0.00010592529724817723, 0.00017944291175808758, 0.00022297579562291503, 0.00016486248932778835, 0.00013378079165704548, 0.00019842576875817031, 0.00019353130483068526, 0.0001297654234804213, 0.00015677511692047119, 0.00012254493776708841, 0.00015348596207331866, 0.00012357909872662276, 0.00013135676272213459, 0.00012119265738874674, 0.00013793072139378637, 0.00014221637684386224, 0.00017902867693919688, 0.0001470321585657075, 0.00012066923954989761, 0.00011618925782386214, 0.00012805539881810546, 0.00016279636474791914, 0.00012553190754260868, 0.00019041044288314879, 0.00014125026063993573, 0.00015504735347349197, 0.00016094461898319423, 0.00012780005636159331, 0.00016759915160946548, 0.00017493862833362073, 0.00017110048793256283, 0.00015983710181899369, 0.00018386349256616086, 0.00015703045937698334, 0.0001508850691607222, 0.00020308114471845329, 0.00012163362407591194, 0.00017289018433075398, 0.00019265958690084517, 0.00016095157479867339, 0.00015118569717742503, 0.00014078379899729043, 0.00015154508582782, 0.00016214698553085327, 0.00012935163977090269, 0.00012448067718651146, 0.00012562332267407328, 0.00017684968770481646, 0.00017619725258555263, 0.00014376768376678228, 0.00010726457549026236, 0.0001759535662131384, 0.00011021558748325333, 0.00014628485951106995, 0.00017343107901979238, 0.00014291024126578122, 0.00017186402692459524, 0.00013251995551399887, 0.00019033184798900038, 0.0001725029869703576, 0.00015384213475044817, 0.00013090997526887804, 0.00015898192941676825, 0.00013511814177036285, 0.00015684420941397548, 0.00014512274356093258, 0.00012048175995005295, 0.00013935055176261812, 0.00016969168791547418, 0.00016558999777771533, 0.00016356373089365661, 0.00016090949065983295, 0.00011374819587217644, 0.00012588735262397677, 0.00017784629017114639, 0.00014732350246049464, 0.00022335007088258862, 0.0001315500121563673, 0.00015347266162279993, 0.00013457282329909503, 0.00020027165010105819, 0.00015400709526147693, 0.00016033978317864239, 0.00015978720330167562, 0.00016423559281975031, 0.00019848943338729441, 0.00013846129877492785, 0.00010583778930595145, 0.00016268111357931048, 0.00017057100194506347, 0.0001947589626070112, 0.00012398164835758507, 0.00018106152128893882, 0.00012732540199067444, 0.00013030409172642976, 0.00017499763634987175, 0.00016426497313659638, 0.00018797094526235014, 0.00017700954049360007, 0.00013216832303442061, 0.00011540217383299023, 0.00014827422273810953, 0.00015270881704054773, 0.00013809969823341817, 0.00020701043831650168, 0.00024465657770633698, 0.00014095692313276231, 0.00011685739445965737, 0.00016328076890204102, 0.00017912553448695689, 0.00014765428204555064, 0.00019659085955936462, 0.0001249118649866432, 0.00015424682351294905, 0.00016734347445890307, 0.0001585362188052386, 0.00015126765356399119, 0.00015799477114342153, 0.00016947693075053394, 0.00014460757665801793, 0.00015771771722938865, 0.00012132844130974263, 0.00014860562805552036, 0.00013421782932709903, 0.0001238580298377201, 0.00018827528401743621, 0.00014336516323965043, 0.00013875817239750177, 0.00018614524742588401, 0.00015244720270857215, 0.00014687773364130408, 0.00014273331908043474, 0.00014991211355663836, 0.00017085173749364913, 0.00014536862727254629, 0.00016437280282843858, 0.00017031673633027822, 0.00022163911489769816, 0.00013261771528050303, 0.00017578150436747819, 0.00019223985145799816, 0.00014029971498530358, 0.00010691083298297599, 0.00016631362086627632, 0.00015818243264220655, 0.00018715970509219915, 0.00017714346176944673, 0.00015161323244683444, 0.00018123113841284066, 0.00013564688561018556, 0.00018805119907483459, 0.00012994442658964545, 0.00017764756921678782, 0.0001360194873996079, 0.00017262742039747536, 0.00014752175775356591, 0.00020262761972844601, 0.00013933455920778215, 0.00015771259495522827, 0.00013283832231536508, 0.0001912540610646829, 0.00015827456081751734, 0.00014322262722998857, 0.00014989505871199071, 0.00013729183410760015, 0.00015300502127502114, 0.00015408886247314513, 0.00015939331206027418, 0.00016377265274059027, 0.00013095920439809561, 0.00011582774459384382, 0.00016043016512412578, 0.00018297720816917717, 0.00015277594502549618, 0.00014349923003464937, 0.00014582980656996369, 0.00022663611161988229, 0.0001481512445025146, 0.00014909369929227978, 0.00014417961938306689, } };
const TfArray<1280, int> quant28_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int8_t tensor_data29[10*1280] = { 
  20, -87, -5, -75, -50, -105, 106, -1, -93, -2, -9, 51, 94, -35, 2, -86, 12, 81, 21, 81, -21, -103, -102, -94, 94, -39, 12, -6, -3, -41, -2, -24, -109, 78, 20, 19, -91, -69, 67, 42, -49, -39, 84, 93, 1, -61, -47, -38, 55, -8, -87, -105, 19, 19, -65, 76, 70, 11, -42, -20, -55, 31, 102, 71, -33, -7, 51, -13, 50, 42, 64, 76, -91, 60, -29, -41, 31, -69, -13, -104, -94, 92, 103, 45, 13, 30, 71, -105, 19, 44, 5, 66, 77, -33, -82, -85, 66, -11, -42, 5, -4, -103, 35, -92, -76, -27, 39, 79, -46, 48, -5, 22, -60, -100, -58, 24, -108, 23, 35, -56, 80, 85, -107, -88, -81, 63, 55, -72, -91, 72, 93, -12, 21, 19, -30, 66, 73, -30, -102, 13, 37, -55, 23, 53, -19, 26, 19, 103, -26, 83, -15, -36, -57, 12, 103, -97, -88, -59, 92, -22, -84, 79, 107, -88, -23, -88, 5, -77, -34, 87, -109, -106, 73, 4, 77, -23, 47, 48, -79, -94, -3, 67, 87, -13, 86, 4, 85, -37, -14, 103, -95, 84, -17, 67, -29, -47, -19, -23, -31, 75, -3, -80, 72, 12, -17, 100, -74, 76, -109, 95, 93, 84, 2, -86, 82, 40, -38, -32, 21, -97, 58, 14, -100, 91, -8, 62, -64, 94, 49, 77, 101, 53, 71, -99, -8, -67, -99, -13, -17, -82, 103, 52, 106, 14, 82, 20, 55, 40, -47, 22, -42, 60, -27, -67, -56, -41, -99, 0, 16, 37, 91, -46, 54, -41, -12, -43, -2, 33, -43, -63, 61, 40, -67, 62, 17, -60, -19, 90, -75, 104, -98, -84, -29, 42, -77, 73, -88, 85, 29, -53, -106, 46, 61, 101, -80, -80, 44, -47, -13, -93, -65, 75, -108, 85, 48, -21, 59, -66, 18, 92, -67, -25, 63, -22, 40, 82, 64, 92, -105, -67, -88, 95, -40, -86, 37, -28, 2, -103, 88, -95, -75, 4, 80, -106, -72, -106, -2, -53, -69, 84, -29, 94, -89, -35, -16, -84, 12, -7, -68, -110, -102, 21, 33, -90, 63, -62, -37, 32, -29, -8, 30, 8, 37, -46, 25, -36, -81, 21, 40, 23, 87, -80, 83, -52, 66, -92, 80, -107, -29, -110, 87, 56, 5, 12, -97, 21, -80, -45, 96, -107, -35, -80, 61, -61, -26, 39, -72, -46, -65, 97, -96, 46, -80, -106, 7, -109, 24, -37, 54, 66, 44, -85, -37, -45, -26, -16, 76, -18, -57, 99, -27, -98, 40, 29, 100, -28, 51, -45, -16, 45, 0, 35, -13, -40, 80, 2, -74, 58, -54, 29, -28, 89, -86, -49, -87, -102, 56, -35, 20, -42, -101, 93, 44, -64, 30, 99, -14, 0, -41, -8, 96, -49, -53, 0, 16, 31, 66, -40, 0, -96, -2, 5, -18, 58, -11, 23, -67, -56, -94, 11, 59, 47, -73, -56, -47, 4, -36, -82, -10, -95, 98, 65, 98, 97, -52, -85, 41, -68, 31, -42, -68, -44, -92, -79, 15, -14, -39, -7, -83, 6, 68, 54, 69, 67, 66, -33, -3, 107, 40, 89, -100, 80, 104, 53, 29, -61, 60, 58, 55, -70, 62, 44, 100, 53, -100, 91, -23, 86, 39, 90, 78, -94, 95, 86, 73, 41, 15, -73, 90, -54, -56, -73, -94, -21, -102, -98, -80, 3, -16, -84, 71, -77, -27, -27, 78, -70, -17, 43, 82, -81, -5, -14, -89, -2, -40, -49, 75, -48, 2, -37, -69, 68, -25, -31, 23, -112, -5, -9, -65, 42, 5, 33, -5, 75, 10, -103, 54, 67, -81, -6, -58, 93, 79, 65, -90, 84, 75, -106, -61, -39, -9, 31, -104, -65, -104, 100, -28, 13, -3, -56, 14, 56, -70, 6, 75, -3, 3, -39, 18, 62, -4, -79, 102, -102, -97, -60, 14, -108, 65, 96, 89, -45, 53, -95, -29, 48, -69, -5, 18, -12, -37, 71, -40, 30, -35, 27, -57, 10, -104, 54, 21, 17, 80, 56, -2, 37, -89, -51, -73, -105, -27, 7, 94, 60, -39, 60, 68, -10, 60, 4, 95, -66, -64, 16, 89, 65, 68, 98, -48, -11, -108, -79, -11, -53, 86, -111, 23, 90, 57, 61, 38, -39, 80, -45, -74, 68, -29, 64, 78, 37, -71, 61, -88, -46, -63, 78, -3, -52, 37, 77, 47, -78, 35, 108, 47, 78, 31, -91, 82, 75, -43, 85, -29, 100, -24, -59, 57, 28, 51, -65, -93, 94, -81, -19, -16, 77, -22, -16, 61, 38, 8, 83, -44, -63, -2, -80, 57, 11, -12, 53, -92, -71, -29, -99, -87, -52, -86, -96, -61, -14, -86, -77, 51, -85, 39, 80, -86, 92, 85, 2, 14, 49, -52, 98, -98, -1, 65, -94, 6, 40, 81, 72, -59, 99, -28, 97, -76, 77, -6, -94, -101, -104, 33, 12, -53, 36, -38, 12, 42, 78, -64, -75, 7, -35, -58, 79, -83, 59, -88, 47, -81, 30, -48, -66, -88, 97, 34, -96, 0, 26, 22, 88, 21, -73, 84, -43, -1, 21, -95, 56, 21, -92, 3, 83, 67, 21, -46, 3, -15, 55, -43, -55, 39, -45, -70, 90, 56, 52, 15, 43, 90, 2, -12, -78, 59, 94, -100, 24, -38, 37, 22, 10, -103, -37, -100, -75, 98, -86, -6, 44, 59, 35, -55, 75, -18, 61, 15, 8, 43, 73, 85, -107, 36, -72, -46, -48, -11, 84, -12, -6, 54, -21, -90, 86, 97, 92, -18, -30, 43, -100, -30, -61, -75, -24, -73, 77, -34, 33, -15, 16, -68, 87, -72, -77, 21, -107, 86, -40, 68, 25, 86, 45, 98, 49, 64, 68, -86, -58, -80, -71, -39, -1, 21, 82, -20, -110, 31, -4, -50, 95, 17, -20, -75, 39, 27, 7, -53, 67, -35, -61, 108, -78, -53, 9, -112, -13, -55, 78, -77, 0, -75, -34, -16, -91, -26, 101, 48, -100, -15, -3, -53, 65, 62, 84, 34, -42, -15, 18, 8, 80, -29, 52, -24, 72, 19, -90, -75, 95, -84, 16, -62, -30, -89, 91, 15, -17, -21, 41, -102, -35, 56, -99, 30, -76, -3, 42, -76, 44, -101, 65, -89, 103, 4, -15, -78, -81, -62, 93, -34, -97, -39, -108, 54, 77, -43, -62, 62, -6, -74, 5, 27, -104, 1, -63, -17, 107, -33, 48, -96, 48, 30, 74, -53, -2, -105, 88, 0, -20, 9, -66, 94, -62, 52, 88, 10, 19, 104, -8, 78, -19, -55, -20, -44, 99, 98, -52, 12, -58, 7, -25, -16, 53, -20, 43, -38, -26, -72, 12, 87, 40, 55, 52, -95, -85, -87, -23, -47, -48, -75, 68, -20, 2, 79, -112, -58, 3, 70, 39, -31, 63, 69, 51, -58, -74, -30, 7, -21, -9, 30, 16, -34, -60, -108, 103, 88, -3, 41, -18, -89, 48, 29, -100, -33, -5, 76, 10, 70, -106, -98, 79, -58, 5, 66, -107, 41, -54, -79, -100, 14, 87, 10, 23, 40, -63, 80, -31, 39, 74, 102, -101, -16, -28, 52, -11, -43, 46, 0, 66, -61, 81, 73, 90, -16, -68, 50, 57, -66, -29, 37, 36, -96, 71, 103, 56, 19, -15, 108, -56, -76, 25, 16, -30, -37, 34, 58, 40, 59, 73, 10, -31, 31, 102, -77, 15, 19, -68, -29, -76, -91, -22, -27, 28, 25, 90, -43, 22, 99, -68, 93, -110, -38, -55, -10, 13, 9, -85, 85, -24, -104, 10, 23, -73, -50, 83, 82, 12, -71, -91, 8, 91, 77, -9, -11, 36, -6, 21, 63, -96, 47, -88, -34, 16, 54, 37, -15, -71, 36, -95, 10, -16, 59, 30, 81, -2, -77, 11, -102, 76, -36, -98, -50, 9, 81, 10, 71, 36, 61, 62, 84, 57, 
  69, 69, 62, 49, -24, 56, -19, -39, -109, -86, -44, -63, 59, 88, 80, -91, -87, -20, -38, 4, 76, -38, 29, -62, 82, -13, -21, -105, -27, 32, -95, -84, -60, 30, 21, 47, 49, -50, -86, -44, -39, -94, 23, -46, 73, 108, 24, 69, -85, -83, -72, 14, 4, 21, 82, 10, 56, -113, 96, -110, -87, 92, 91, 7, 84, -52, -26, -15, 85, -88, -54, 3, -45, 87, 98, -26, 79, 99, 79, 57, -11, 93, 23, 75, -28, 34, -99, 107, -63, 39, -16, -28, 61, 32, -82, 77, -21, -9, 104, 43, 49, -111, 36, -117, 43, 108, 54, 106, -58, 43, 12, 83, -78, -73, 89, 85, -29, -86, -24, 8, -59, 52, -55, -39, -99, -59, 27, -63, -6, 52, 1, -12, 77, 26, -35, -39, -13, -19, -45, -66, 20, -71, 38, -95, 13, 12, 85, 104, 41, -84, -116, -56, -97, -71, 13, 17, -33, 97, 83, 70, -2, -48, -5, -56, -67, -15, 32, -29, -77, 107, -40, -10, -14, 86, 5, 66, -86, -97, -41, -13, -7, 41, 47, -110, 64, -41, -74, 83, 98, -87, -72, -9, 60, -37, 4, -5, -54, 56, 94, -45, 53, -106, 68, -45, 39, 3, -77, 109, -25, -30, 54, -86, 54, -71, -96, -85, 73, -84, 79, -5, -2, -24, -69, 88, 55, -34, 6, 112, 6, 8, -50, -85, -28, 14, 84, 58, 69, -52, 100, 10, 40, -86, 27, 63, 99, 4, -57, -45, -59, 7, 35, -83, 31, -59, -42, -21, -84, -83, -35, 7, -25, -37, -45, 18, 74, 78, -55, -45, 30, 65, 87, -48, 4, -65, -57, 69, -89, 74, -63, -77, 98, -42, 74, 48, -87, -101, -60, -79, 54, -18, -55, 48, 19, 5, -66, 32, -78, 76, 90, -55, 65, 46, -35, -80, 15, -1, -26, 56, 14, -31, -30, -63, 113, 86, -47, 16, 18, -115, -14, -12, -37, 47, 60, -93, -71, -85, -66, 94, -77, 41, 26, 74, 19, 88, 36, -92, -88, 94, 43, 78, 12, 92, -102, 42, 96, -26, 114, 97, 35, 11, 54, -89, 29, -84, -14, -76, 72, 35, -87, 1, -104, -34, 48, 49, -111, -104, 84, 60, 118, -64, -47, 62, -83, -116, 27, 102, 47, 16, -32, 87, 114, -9, 18, -62, -102, -16, 76, 74, -68, 97, -41, -11, 66, -41, 86, -64, -68, -93, -111, 86, -35, 10, -28, 15, 86, 21, -105, 78, -17, 103, 21, 99, -85, -75, 40, 14, 94, -50, -100, -5, -110, -89, 108, 18, -58, -63, -90, 67, -41, -73, 90, -37, -60, 20, 86, -27, 64, -98, 14, 47, 11, 46, -87, 25, -82, 84, -75, 63, 8, 88, 27, 52, -31, -94, 31, -26, -29, -114, 101, 0, -52, -7, -41, 17, 82, 27, -54, -75, 9, 58, 76, 74, -100, -60, 8, -6, 31, -73, -11, -12, -63, 83, -32, 32, -37, -4, 52, -108, -58, -59, 23, 66, -43, 44, 107, -11, -77, 57, -80, 71, 100, -76, -47, 23, 100, -47, 22, 33, 18, 48, 107, 71, 23, -47, 47, 54, 11, -51, 93, -40, 63, 57, 72, 66, 61, 92, 4, -6, -94, 55, 59, 50, -92, 92, -84, 32, 71, -60, -57, 25, 53, 98, 93, 41, -41, 77, -8, 57, 48, 73, -5, -92, -109, -5, -74, 82, -101, 3, -90, 16, -25, -93, 92, -43, -32, 76, 7, 16, 78, -34, 19, 23, -49, -96, 97, 11, 24, -111, -25, -79, -61, -50, -13, 43, -93, 29, 12, -61, 4, -78, 52, -16, -83, -35, 45, 21, -98, -103, 28, -37, 90, -68, -11, -92, -89, 82, 47, -115, -67, 84, -11, -31, 9, 67, -72, -48, 97, 85, 3, 46, 21, -78, -11, -79, -8, 29, -85, 73, -28, -42, 28, -8, 97, 50, -66, 62, -94, 80, 72, -93, 49, 79, -94, -77, 63, -59, -8, -107, 19, 21, 27, 53, 71, -16, 38, -43, 2, 89, 71, -92, -61, -41, -63, 93, -77, -91, 18, -72, -111, 90, -101, -28, 93, -49, 17, 63, -71, -25, 100, -97, 66, 70, -47, -34, 119, 98, 32, -76, 66, -53, 49, -28, 19, -106, -32, -62, 80, 61, -53, 25, 100, -60, 54, 2, 61, -89, -118, -27, -57, -12, -24, -96, 106, 41, 86, -52, -12, 40, 58, 27, -98, -32, -44, -95, -25, 46, -43, -49, 38, 67, 67, 36, 2, 103, 8, -77, -105, -59, -27, 71, -28, -47, 2, -76, -25, -82, 89, -112, -51, 39, 10, 86, 46, -94, -46, -33, -78, -100, -62, 14, -94, -16, -76, -56, 75, 75, -32, -25, 87, -90, -92, -50, -45, -19, -59, -25, -13, -63, -57, -103, 74, 65, -1, -15, 71, 68, 19, -78, 64, 42, 11, -38, 111, -18, 95, 13, -22, -110, 79, 15, 39, -32, -2, 8, 50, -48, 74, 3, -69, -44, 105, -16, -60, 65, 13, 14, 77, 42, -68, 115, 74, -78, 81, 46, -27, 54, -45, -59, 29, -98, 0, 63, -47, -7, -63, -91, -94, -16, -38, 46, -98, 56, 56, 27, 74, 82, -62, 79, -11, 49, -11, 86, 27, 69, -2, 96, 1, -68, 79, -41, -86, -24, -14, -77, -26, 4, 101, -10, -70, -57, 72, -15, 4, 99, -56, 38, -42, -58, -62, 115, 51, -113, -102, -41, 44, 70, -17, -39, -69, -41, 30, -32, -83, 67, -85, -53, -34, 99, -62, 27, 84, 91, 82, 47, 42, -86, -97, -93, -41, 38, -105, -27, 64, 56, 43, -15, -75, -18, 18, -84, 31, 42, 87, 46, -13, 8, 83, -65, 4, -2, -45, 1, -19, -17, -71, -6, 28, 65, -48, 89, 97, 13, -113, -94, 39, 54, -100, -106, -32, -38, -38, 33, -66, -100, -92, 44, 92, -29, -5, -87, 44, 31, -93, 44, 16, 35, 30, 75, -52, 58, 79, 19, -39, 18, 37, 14, -7, 4, -61, -81, 73, -25, 5, 93, 18, 28, -67, -63, 28, 95, 12, 72, -87, 10, -117, -62, -78, -33, 99, -54, 78, 46, 11, 89, -44, 84, -12, 49, 3, 30, -51, 36, -45, 62, -107, -58, -53, 68, 13, -33, 44, -5, -72, 21, -89, 30, 46, 68, -103, -67, 12, 69, -112, -113, 77, -113, -76, 25, 27, -100, 68, -87, 30, -84, -24, -36, -63, 65, 52, 24, 36, -66, 74, -46, -40, 50, -66, 63, -99, -74, 38, 9, 84, -22, 113, -77, 53, 98, -91, -45, 1, 59, 89, -62, 41, 89, 100, -99, -45, 42, -117, -99, 65, -71, -54, -45, -41, -84, 86, -6, 33, 28, 28, 0, 19, -87, 63, -92, -78, -88, -7, -43, 78, -8, 82, 48, 4, 24, -59, 85, 85, -76, -36, 90, 27, -84, -16, 37, 44, 93, -114, 13, 10, 1, -74, -49, 33, -50, -58, 85, -85, -31, -24, 81, -57, -90, -5, -103, -44, -114, 30, 39, -111, -33, 34, 110, 38, 92, 40, -4, -57, -7, -9, -64, -51, 66, 73, 46, 87, -27, -36, -11, 5, -64, 78, -17, 46, -31, 75, 68, 10, -5, -11, 12, 57, -55, -45, -95, 71, 60, 3, 17, 47, 69, -93, -65, -112, 50, 18, 21, -86, -35, 68, 4, -44, 3, -72, -64, -37, 20, -47, -53, 9, -49, 35, 66, -99, -33, -74, 53, 37, 25, 71, 73, -40, 49, 22, 100, 64, 100, -52, 18, -70, -12, -22, 95, -97, -63, -99, 11, 8, 26, 16, 76, -54, 85, 57, -40, -83, 68, -59, -63, -61, 61, 102, 33, -91, 14, -70, 94, 36, -91, 69, 7, 88, -31, 46, 49, -70, -77, 98, 86, -108, 26, 77, 5, -95, 63, 31, 102, -45, -83, 86, -9, -30, 29, 66, 44, 8, -76, 
  6, -64, -25, 65, 50, -74, -79, -94, -93, -37, -96, 111, 1, 60, 57, 60, 22, -36, -90, 3, -106, 75, 55, -80, -78, -2, 28, -33, 43, 56, 68, -80, -52, -47, -27, -73, 68, -2, 63, -25, 3, 67, -63, 89, -53, 22, -24, 3, -93, 70, -96, 44, 107, -7, 83, 81, 91, 75, 37, -47, -72, -65, -79, 87, -72, -89, 51, -78, -44, -93, -61, 92, 31, 18, 23, 25, 92, -21, -29, -14, 71, 97, 35, 10, -20, -63, -21, -79, -90, 109, -37, -41, 31, -93, -71, 115, -71, 72, -64, 7, -89, 7, 46, -30, -16, -12, 18, -30, 54, -46, 106, -4, 13, -74, 48, -18, 113, 108, -81, -82, -27, 89, 10, -93, -99, -84, -76, -72, 53, 87, -23, -35, 26, -95, -80, 38, 109, 4, 5, -40, -79, -19, 79, -34, -6, -4, -43, -71, 7, -28, -34, 93, -46, 11, 56, -18, 30, -19, 16, -39, 14, -42, -88, 28, 103, -70, -36, 111, -40, 62, -93, -98, 90, -10, 87, 109, -58, 47, 46, -60, 29, -46, 91, 4, 28, 42, -1, -31, -45, -53, -81, -21, 98, 53, -65, 90, 66, 83, -90, -90, 68, 12, 13, 70, -97, -40, 0, -97, 89, -7, -96, -90, 10, 29, 31, -55, -97, -34, -6, 1, 7, 96, -5, -67, 68, 42, -86, 118, 28, 35, -72, 34, -83, -99, -48, 7, -47, 22, 53, -12, -51, -19, -30, -35, 67, -9, 57, -8, 80, -30, -41, -79, -12, 33, 14, 73, -71, 23, 93, 58, 37, 104, 56, 3, -80, 54, -83, -88, -21, 42, -63, -68, 41, -57, 78, -39, -64, -65, 64, 71, 19, -51, -9, 106, 27, -13, -1, 82, 85, 7, 112, 59, 90, -66, -99, -88, -75, 52, 8, 33, 49, -99, -64, 75, 74, 86, 78, 93, 109, 107, 71, 16, 94, -55, 106, 7, -88, 102, 89, -78, -102, 16, -63, 48, 91, 38, 4, -47, 93, -26, -88, -83, 75, -7, -64, 29, 82, 68, -27, -7, 51, -29, 10, 99, -59, 19, 83, -93, -88, -94, 116, -64, 46, 20, -60, 78, 29, -13, 91, -37, -46, -76, -51, 82, -98, 66, -72, 112, 16, -57, 19, 21, -12, -42, 37, -50, 110, -53, 6, 1, -54, -1, -28, 23, 109, 52, -40, -83, 50, 66, -12, -55, 54, -97, -60, 35, 6, 110, 115, -40, -93, -69, -53, -6, 40, 52, -17, -51, -20, -66, 43, -23, -95, -82, -31, -7, -1, -35, -76, -70, 27, 25, 101, 39, 83, -80, -97, 6, 106, -24, -95, -35, -94, -101, -42, -14, 49, 23, 46, 91, -85, 58, 17, -34, 42, -34, 62, -20, -49, -82, -60, 61, 116, -16, -64, 23, 2, -83, 58, 85, 16, 73, 30, 4, 6, 95, -69, 74, 61, 75, -41, -56, -17, -45, 39, 47, -33, -57, 38, -8, 61, 112, 58, -6, 21, -89, 11, -84, -26, -65, 97, 66, -95, -65, -106, 45, 8, 67, -73, 81, -67, 111, 60, 89, -63, -11, 15, 44, 88, 65, -103, 36, -40, 4, 61, 30, -76, 89, 80, 27, 77, -91, -25, 111, -54, 90, -73, 74, -34, 51, 91, 108, 13, 114, -54, -73, 41, -28, 33, 101, -53, -70, 15, -73, -4, -82, -85, 35, 114, 31, 64, -90, -44, 112, 107, -52, 16, 55, 65, 103, 111, 8, 63, -24, 4, 23, 71, -5, -58, 55, -23, 57, 94, -56, -77, 105, 21, -98, -47, 115, 102, -75, 115, -87, 4, -21, 107, -72, 26, -76, -102, -31, -27, -13, 75, 23, 41, 100, -38, 104, 62, -56, -12, 49, -3, 11, 50, -95, -35, -47, -74, 54, 40, 48, -71, -45, 94, 35, -109, -16, 82, -15, 102, 47, -63, -41, 20, 107, -84, 104, 28, -37, 92, 15, -57, -48, 47, 41, -35, 104, 66, 75, -84, 89, 75, -41, 78, -71, 17, 49, -91, 0, 45, 39, -5, -81, -45, 37, 109, 22, -6, 65, -41, -21, -19, -82, 114, -11, 0, -70, 96, -79, -4, -90, 92, 40, -64, -77, 107, 82, -38, -1, -5, 99, 116, -13, -49, -72, -49, 89, -21, 9, -26, -75, 5, -31, 5, 81, 48, -77, 5, 19, -78, -8, 5, 44, -41, 67, 52, -1, 63, -87, -11, -103, -81, -80, 51, 1, -66, 74, 47, -36, 82, 87, -68, -9, 98, 92, -89, 76, -41, 90, 108, -23, -35, -70, 26, -79, 36, -10, -19, -24, 51, 100, -71, -18, 57, 72, 74, -17, -49, -27, -87, -73, -60, -79, 16, -55, 86, 89, -78, 13, -96, -67, -74, 36, 72, -72, -91, -86, -32, -10, 46, 34, -53, -35, -81, 37, -96, 110, -25, 107, 14, -99, 45, 10, 52, -65, -22, 17, 7, -99, -107, -7, -35, 12, -25, 41, 6, 61, 106, -3, -55, -12, 32, -30, -37, -51, 15, 38, -28, -6, 7, 33, -62, 61, 29, 38, -64, 19, -26, 106, 69, -79, 15, 25, 46, 41, -61, 33, 24, -49, 69, -4, -64, -85, 0, 72, -62, 4, -27, -47, 60, 61, -61, -65, 78, -38, 66, 96, 0, 51, -45, 112, 47, -81, -68, -104, -92, 62, 21, -30, -25, -28, -8, -10, 106, -65, 51, 67, -9, 95, 103, -50, -49, 19, -69, 69, -96, -63, -31, -50, -110, 39, 41, -25, -23, -81, 76, 36, -76, 0, 57, 87, 119, -54, 18, 37, -28, 73, 27, -66, -84, 110, 112, -26, -23, -50, 66, -83, 46, 36, 18, -78, 53, -41, 46, 94, -52, -78, 47, 23, 83, 61, 81, -90, 114, 97, 94, -81, -23, 72, 78, -19, 97, 85, -35, 92, 114, 91, 84, 40, -12, 3, -53, 6, 78, 60, -98, 34, -81, -43, 61, -100, -5, 8, 91, 99, 75, -87, -69, -52, -37, -56, -19, -88, 10, 60, -86, -51, 56, 76, 26, -56, -96, 96, -34, -65, 110, -15, 55, 7, 109, 17, -61, -68, 16, -21, 112, -68, -78, -73, 72, 111, -42, 69, -43, 57, -1, 54, -5, -106, -40, -86, -52, 98, -79, -4, -33, 30, -41, 46, -36, -35, -38, -61, 49, -70, 53, 7, 74, 17, 35, -93, -26, -92, 109, 32, -36, 84, -79, -56, -5, 33, 87, -67, -27, -9, 106, -24, 108, 63, -43, 101, -91, -92, -28, 97, 53, -42, -62, 32, 107, -9, 1, -5, 83, -76, 32, -47, -33, -92, -31, 6, -3, 81, 75, -17, 7, 43, 41, 41, -74, -46, -82, 68, -69, -42, -38, 11, 95, -57, -3, -103, 20, 98, -39, 26, 99, 45, -72, -5, 65, -59, -83, -48, 65, 53, 97, -55, 58, 59, -29, 61, 93, 21, -17, -69, -15, 76, 45, -87, 80, 76, -92, 41, -56, -26, -88, -29, 77, 75, -65, 109, 11, -82, 11, -72, 94, -24, -28, -73, 47, -9, -62, -48, 16, 27, 4, -21, -46, 67, -30, -13, 71, 1, 77, 77, -44, -76, 70, 61, 78, -48, -23, -48, -54, -38, -50, -2, -1, 30, 111, -3, -97, 49, 20, -34, 88, -109, -6, -87, -9, 11, 78, -28, 81, -24, 99, -40, 48, 111, 79, -61, 54, 40, 22, 12, 105, 6, 5, -15, 23, 66, -80, 30, 77, 74, 45, 47, -50, -35, -99, 63, -68, -36, -50, -25, 111, 46, -68, 86, 97, -94, 17, 7, -34, -75, 22, -55, -80, -37, -59, 72, -34, 92, -82, 81, -20, -43, 118, -81, -38, 40, -47, 75, 25, -74, -66, -63, 17, 1, -65, -85, -75, 25, -37, 93, 69, 83, 4, -18, 63, 41, -20, -80, -45, 16, -98, 33, 76, -3, -59, 60, 51, 17, 0, -35, 3, -21, -21, -39, 9, -62, 105, 103, 93, -7, 104, 63, 
  -68, 55, -42, 3, 53, 97, 108, 17, -88, 37, -101, -43, 101, 25, -91, -3, 102, 21, 20, -3, -39, -78, 100, 33, 6, -97, 34, 22, -90, -85, -32, 69, 37, 28, 54, 59, -7, -83, -42, 87, 61, 61, 104, 94, 63, 93, -50, 85, 117, 74, -31, -56, -99, -26, -4, -41, -80, 86, -33, -32, -17, -15, 26, 9, -60, 97, 46, 76, -32, 63, -21, 21, 21, -71, -49, -13, -70, -107, -4, 42, 82, -61, -55, -32, 56, 85, -38, 48, -27, -44, -79, -39, 93, 32, -79, 78, -39, -59, -11, -58, 39, 1, 59, -73, 65, -79, -34, -33, -75, 57, -45, 84, -76, -5, -23, 25, 16, -88, 45, 1, -10, -91, 9, -13, -63, -42, -84, 117, -83, -5, 108, 93, -104, 49, 105, 4, 36, -5, 81, -81, 63, 88, 84, -11, -89, -14, -9, -44, -88, -98, 47, -11, 93, 2, 61, 27, -10, 96, -27, 29, -27, -46, -34, -48, 75, -59, 52, -96, 55, -70, 30, 8, 46, 33, 34, -111, -55, 79, 10, 32, -17, -20, 2, -67, 0, -25, 5, -58, -31, 58, -34, 10, -71, -98, -53, -83, 2, -43, -109, 31, 92, -54, -44, 83, -84, 60, -35, -67, 86, 27, -91, -11, 80, -63, 71, 55, 70, 47, 47, -74, 37, -61, -67, 2, 85, -89, -69, 113, 13, 24, -31, 37, 7, -33, 71, -26, -63, 19, -2, -16, -63, -22, -51, 61, -16, -79, -7, -62, 70, 30, -63, 104, 67, -7, -22, -87, 54, 71, -100, 108, -21, 107, -2, 82, 94, 17, 68, -52, 0, 37, -45, 84, -102, -43, -112, -93, -29, 33, 113, 28, -80, 85, 46, 9, 97, 93, -84, 103, 88, 34, -20, -26, -39, 86, -14, -73, -20, -87, -71, -56, 23, -5, 100, 95, -33, -82, 113, 51, 102, 15, 23, -26, 65, -24, 0, -75, 28, -7, 54, -70, -71, -96, -96, 8, -38, 25, -27, -83, -64, 89, -54, 79, -63, -24, 59, 94, -52, 28, 17, -82, 34, 38, 45, 44, -85, -25, -40, -92, 55, 16, -51, -36, 75, 85, 87, -41, -16, 105, -3, -108, -112, 34, 83, 118, -62, -73, 82, -4, 78, 12, -58, 102, 21, 39, 41, 102, -15, 104, -25, 30, 66, -53, 29, -25, 95, 103, 117, -18, 15, 81, -4, 7, 100, -69, -103, -94, 8, 119, 15, 58, -61, -15, 88, -114, -5, -4, 27, 85, -69, -70, 19, -105, 10, -112, -68, -43, 60, 40, 53, 92, -99, -107, -104, -42, 82, -72, 18, 57, 40, -95, -28, -43, 105, 43, 119, -100, 11, 45, 5, 19, -75, 73, -59, -2, 36, -102, -62, -35, 13, -69, -73, 52, 105, -90, 44, -77, 25, -32, -64, 35, -6, 4, -52, -83, 13, 97, -94, 28, -1, -6, -42, 87, -5, -23, 34, -34, -56, -47, -18, -85, 23, 107, -83, -107, -36, -57, 26, 105, 38, 40, 33, -9, 4, -3, -94, -74, -79, 38, 76, -70, -1, -4, -5, -53, -77, 1, 100, 12, 35, 19, 64, 34, 42, -20, 56, 1, 13, -10, -14, -56, -60, 92, -4, -86, -53, 15, -48, -7, -35, 20, -61, 84, -63, 23, -23, 6, 84, 1, 24, 31, -74, -17, 4, 108, 50, 83, -46, -25, 52, 78, 49, -101, -19, -83, -90, 70, 30, 87, -82, -96, 52, -87, 68, -66, -101, -60, -29, -36, -19, 16, -55, 20, 3, -30, 10, -71, 18, 63, 89, -83, 46, 75, 36, -49, -22, 50, 40, -86, -38, -28, -47, 58, -10, 76, 45, -33, 71, -17, 86, -82, -40, -90, 94, 63, -10, 36, 88, 15, 80, 100, 55, 79, 5, 41, -8, -68, -73, 37, -47, 78, -62, -50, 103, -36, 17, -35, 64, -15, -15, 69, -37, 85, -69, -38, -61, 86, 85, -47, 71, -65, 22, 84, 46, 60, 33, -8, -89, -88, -6, -77, 105, 44, -44, -31, -53, -51, -67, -39, -66, -80, -75, 10, 63, 84, -76, 40, 11, -16, 44, 14, -25, -35, 64, 41, -27, 36, -106, 13, -65, -43, -2, -55, -21, -31, 47, -41, 21, -27, 90, 57, 67, -68, 6, 31, -34, -51, 42, -56, -67, -27, -5, 50, 16, -83, 86, -34, -93, 21, -111, 11, 52, 73, 9, -52, 10, 81, -14, 5, 24, -52, 81, -42, 46, 100, 75, -24, 88, -78, -97, -46, -26, 71, -84, -28, -82, -110, 94, 83, -23, -18, 82, 57, 50, -41, -34, 44, 68, -64, -72, -6, 6, -16, 52, -40, -64, 40, 96, -89, -57, 93, 2, 102, -81, -78, 58, -69, 59, -84, 108, 8, -16, 21, 84, -5, -68, -66, 5, 32, 67, 25, -43, 50, 89, -1, 38, 46, 75, -28, 7, 16, 92, 7, -26, 21, 108, -82, 5, -76, 55, -36, -42, -18, -34, 20, 92, -98, -93, -78, 27, -8, 91, 5, 42, 13, -1, 90, -36, -41, 54, 80, -84, 31, -63, -115, 96, 6, -5, -49, -48, 54, 41, -5, -110, 0, -61, -87, 70, -81, -80, -107, -87, -43, -86, -69, -33, -9, -53, -64, -7, -5, 23, 55, -59, 14, 109, -54, 46, 41, -23, 64, 19, -55, -2, 97, -38, -94, -33, 24, -33, -90, -41, 71, 64, -1, 45, 35, 107, 38, -67, 34, -15, -64, -80, 102, 25, -3, -39, -110, 57, -57, -43, -100, -68, 51, -62, 28, 38, 91, -36, -90, 13, 84, 41, 56, -20, -17, -48, -67, -45, 55, -102, -19, 5, -74, 10, 94, 27, -7, 27, -66, -3, 83, 80, -82, 88, 94, 26, 91, -69, 94, 53, -30, 49, -13, 55, 69, -85, 65, 27, -90, -33, 86, 44, 88, -76, 81, 39, 40, 33, -59, -45, 46, 103, 86, 44, 32, 37, 70, 94, 3, -47, 64, 28, 86, 6, -91, 39, -94, -6, -39, 39, -95, -3, -80, -2, -106, 44, -57, 70, -77, 105, 57, -8, 38, 81, 33, -93, 30, -55, -11, -62, -71, 117, -91, -20, 39, -48, 27, -19, -41, 12, 97, -39, 107, -43, -78, -71, 84, -20, 106, 17, 105, -5, -77, -21, -108, 4, 97, 74, 61, -42, -91, 61, -39, -81, -33, 46, 36, 37, 68, -113, -37, 44, 71, 26, -26, -78, 50, -53, 32, 69, -77, -90, -28, 69, -51, -49, 66, -58, 106, -50, 39, 30, 107, -7, -48, 104, -91, -96, 4, -32, 67, -49, 44, 27, -81, 72, -7, -16, 55, 67, -28, -61, 35, 46, -62, 106, 88, 9, -26, 73, -32, -74, -55, 99, -54, -24, 24, 40, -71, 52, -42, 45, -39, 94, -46, -44, -77, -39, -26, -69, -88, 66, -22, 34, -92, -5, -66, 25, -21, -107, 81, 9, -48, 41, -23, 70, 74, -89, -59, -85, -9, -45, -20, 36, -97, 70, 57, -13, 6, -104, 85, 56, 78, 97, 36, 74, -98, -9, 106, 12, 113, 88, -6, 61, -67, 99, 42, -39, 33, -91, -16, -112, -20, -88, -48, 80, -45, 21, 0, 84, -48, -76, 36, -52, 2, -43, -12, -10, -14, -52, -61, 88, 61, -45, 64, 22, 105, 14, 49, 38, -50, -92, 32, 63, 89, -35, -59, 66, -73, 3, -44, -82, 15, -30, -31, -65, 59, 17, -108, -104, 30, 22, 101, 10, 30, -34, 74, -107, -28, -74, -88, -90, 101, 74, -85, 104, 108, -63, 35, -14, -16, -66, 14, 62, -52, 22, -73, -34, -17, 42, 62, -79, -76, -70, 70, 18, -46, -103, 52, 54, 20, -76, -44, -68, -10, 95, 95, -85, 33, -66, 53, -53, -95, -46, -38, 108, -23, 71, 72, 62, 47, 73, 27, 12, -17, -69, 96, -61, 88, -17, -31, 93, -16, 43, -75, -24, -76, -31, 0, 
  -82, -52, -15, -48, -41, -67, 21, -72, -28, -77, -1, -26, 62, -113, 68, 70, -4, -89, -20, 75, -54, 100, 63, -100, 35, -2, 71, -49, 43, 73, 41, -31, -81, -39, -80, -53, 27, 7, -103, -14, -33, 82, -97, 80, -82, -22, -114, 33, -101, 20, -54, -96, 31, -110, 84, 15, -60, 87, 73, -89, 27, 70, -18, -78, -95, -18, 99, -45, -35, 91, -36, -26, 86, 101, -51, 33, -89, -71, 89, 6, -118, -20, 49, -46, -80, -77, 90, -15, 11, 1, -72, -30, -56, -99, 98, 2, 97, 59, 88, 24, 67, -90, -76, 49, 28, 0, -13, 79, 7, 71, 8, 33, -55, 9, -32, -78, 6, 27, 12, -63, 10, -41, -53, -58, -37, 36, 50, 108, 85, 95, -5, -38, 75, -21, 98, 41, -65, -73, -11, -67, 54, -110, -96, -14, 77, -77, 62, 53, -62, 114, 84, -14, -52, -44, 49, 69, 110, 77, 48, 39, 90, -24, 15, 73, 42, 78, -31, 83, -5, -110, 13, -9, -48, -72, 48, 60, 34, -109, -29, -50, -9, 89, -70, -21, -116, 36, -26, -110, 40, 64, -66, -5, 67, -93, 88, 69, -34, -37, 25, 79, 56, 32, 81, 96, -95, 96, -3, 48, 17, 46, -5, -74, -9, -103, 46, 47, -71, 51, -83, 98, -89, -83, -54, -57, 29, 24, -6, -11, -33, -52, -59, -94, -88, 16, 86, 98, 50, 75, 42, -88, -66, -18, -24, 88, -112, -113, -55, 77, -89, -29, 0, -9, -20, -86, -49, 48, 17, 106, 62, 96, 62, -80, 53, 3, 72, 82, 45, 88, -35, 56, 77, -21, 93, -67, -68, 35, -29, -44, -53, 18, -91, 19, 43, 57, -80, -102, -94, 6, 74, -54, -50, 112, 1, 7, -96, 38, 71, -2, 92, -19, 42, 94, 60, 34, -101, -61, 99, -19, -103, -25, 6, 47, -65, 105, -66, 97, -87, -24, 26, -24, -46, -105, -13, 8, 16, -58, -71, -20, 41, 26, -96, -26, -20, -43, -104, 12, 54, -64, 64, 49, -3, 85, -52, -84, 91, 21, 82, -80, -106, -56, -102, 35, -17, -57, 80, 88, -38, -48, -28, 88, 50, -10, -28, -83, 46, 64, -83, -96, 94, -31, -48, 34, 72, -25, 26, -37, 57, 3, 86, 90, 24, -40, -47, -105, -23, -109, -45, -19, 57, 91, -49, 7, 102, 21, -92, 58, 98, 57, -38, -67, -35, -49, 45, -59, 79, -120, -34, -66, -65, -37, -8, -100, -110, 32, -54, 60, 99, 19, -109, -35, -9, -69, 48, 38, -13, -25, 46, -90, 52, -107, -16, -10, 40, -7, -43, 27, 63, -115, -88, -106, -52, 64, -104, -63, 77, 71, -65, -43, 62, -101, 74, 50, 79, -48, -5, 15, 72, -90, -45, -5, -51, -37, -70, 4, -105, -44, -6, -25, 32, -91, -22, 30, 83, -95, -5, -78, -103, -79, 27, -58, 22, -92, -95, 93, 48, 71, 89, -60, -88, -77, 83, 55, 22, -96, 72, 68, -106, -38, -76, 14, 86, 53, -59, -51, -101, 52, -42, -23, -73, -12, -81, 36, -47, 25, -36, 4, 65, 109, -34, -28, 106, 85, -52, -54, 41, -5, -91, 63, -111, 13, 77, -43, -39, 86, -18, 78, -28, 85, -30, 70, -98, -63, -2, 55, -14, 68, 17, -60, 32, 46, 47, -111, 4, -23, 29, 73, -36, -54, -68, -113, 44, -58, -82, 4, 54, -115, -7, 49, -89, 21, 7, -15, -20, 34, -61, 52, -80, -23, 12, 57, 89, -49, -20, -58, -38, -68, -101, 82, -46, -79, -57, 54, 93, -19, 87, -37, 70, -115, -12, 2, -29, -27, 16, 5, -51, 4, 53, -4, -18, -77, -83, -85, -61, -23, -66, 107, -3, -29, -34, -102, -87, -42, -81, -22, 56, 62, -41, -22, 5, 70, -41, 58, 9, -75, -98, 24, 14, -112, -95, -48, 49, -91, -35, -19, -23, -55, 50, 2, 36, 60, -3, 84, -16, 15, -89, 18, 41, -105, -28, -73, 73, 89, 91, 80, 61, 29, -22, -5, -39, 85, 23, -90, 45, 45, -83, -6, -61, 106, -53, -78, -77, -4, 59, 0, -18, 72, 19, -45, 79, 92, 70, 119, 26, 78, -62, -50, -60, 93, 73, -69, 63, 18, 34, 50, -90, -52, 40, 13, 30, 94, -100, -108, -6, -93, 83, -26, -25, -109, -98, -25, -79, -92, -79, -20, 47, -40, 61, 64, -102, 17, -85, 26, 3, 53, 74, 68, 38, -74, 36, 11, -106, 6, -85, 8, 44, 63, -42, 9, 22, 29, 9, -102, -115, -5, 36, -60, -26, -49, -81, -47, -37, 36, 79, -95, 77, 77, -14, -114, -49, -115, -108, -31, -20, 59, -24, -67, -66, -57, -82, 79, -101, 44, 29, -105, -4, -9, 95, -113, 69, -3, 91, -36, -106, 25, 51, 81, -79, 16, -21, -16, -117, -41, -18, -40, -45, 64, -31, -65, -88, 70, 45, 19, 19, 88, -86, 11, 0, 93, -31, 38, -59, 67, -31, -59, -35, -8, -84, -9, -65, 46, -87, -76, -55, -33, -40, 89, -43, 80, -87, 38, 74, 95, 71, 10, -43, 108, -50, 0, 22, -7, 84, -12, -47, -47, 28, -70, 8, -8, 74, 60, -75, 84, 46, 69, -86, 16, 108, 63, -33, 6, -97, -38, 26, -31, 65, -89, 4, 99, 49, -60, 22, 24, 56, -58, 52, 37, 74, -50, 29, -74, -46, -75, -15, 99, 47, 1, 1, -111, -34, -96, -106, -27, 57, 54, 89, -37, 83, -30, 80, -85, 90, 76, 67, 67, 63, 58, -35, -27, -1, 38, 39, 28, 91, -12, -95, 36, 98, 54, -62, -69, 3, 23, -105, 103, 9, 35, 16, 18, 7, 9, -101, -91, 73, 80, -10, -95, 101, 31, 71, 73, -79, 21, -12, 6, 67, -100, -22, 34, -63, 23, 48, 97, 91, 66, 36, -53, -32, 81, 28, 53, 2, 61, 45, -29, 0, 60, -39, 92, 66, -100, -5, -104, 93, 43, -24, -80, 23, -27, 94, -64, 8, 50, -69, -44, -80, -77, -48, -18, -82, -25, -80, -63, 45, 46, -5, 8, 97, 70, 13, 27, -87, -53, 72, -64, -49, -32, 37, -75, 19, 64, -26, 53, -48, 91, 67, -29, 66, 24, 90, 35, -44, -41, 18, 29, 94, 89, 32, 51, -94, 32, -49, 100, -92, -28, 43, 36, -74, 85, 50, 17, 40, -98, -37, -99, -56, 2, -44, -7, 84, -63, 62, -86, 95, -30, -56, -26, 19, -86, 0, -102, 55, 76, 85, 26, 98, -72, 40, -59, -99, -99, 37, -73, -32, 88, 76, -19, 64, -107, 71, 40, 84, 26, 70, 45, 104, 92, 34, -2, -7, -71, -92, 116, -56, -91, 89, -60, 67, 35, 8, 93, 71, -31, 39, -39, 93, 50, -68, 68, -72, -2, 90, -66, 29, -10, 20, -47, 31, 103, 73, 26, 62, -21, -70, -65, -37, -55, 81, -48, -57, -19, -78, -33, -4, -59, -85, -61, -110, -99, 72, -97, 53, -73, 56, -103, -86, 26, 99, -25, -41, -112, -33, 79, -58, -99, -8, 69, -10, 108, 95, -92, 34, -63, -5, -103, -63, 43, -1, 32, 104, 25, -18, -11, -100, 84, -1, 8, 21, 25, -68, 45, 42, 30, 70, -33, -26, 83, -87, -41, 53, 76, 11, 41, -14, -108, -18, -35, -81, 34, -27, -54, -53, 40, 5, 10, -46, 76, -31, 22, -106, 61, 43, 83, -111, 99, -16, -106, 75, 104, -92, -5, -5, 49, 100, 26, -41, -37, -89, -89, -102, -35, -8, 82, -58, 80, -55, -78, -89, 67, -85, 0, -63, -24, -74, 10, -16, 73, 70, 45, -29, -113, -91, -40, -2, 108, 86, 88, -31, 5, -4, 13, -11, 72, -59, 81, 37, -73, -8, -72, -106, -47, 
  -99, 38, -7, 80, 46, 4, 75, -67, 117, 54, 56, 71, 27, 109, -13, -26, -8, 98, 28, 65, 32, 38, 112, -65, -22, -57, 29, 78, -56, -75, -31, 88, 31, 99, 71, -43, 38, -93, -88, 23, -31, -67, 59, 77, -18, 84, 31, 79, 113, -18, -88, -94, 70, 31, -35, 68, 1, 60, -47, -24, -63, 61, 54, -84, 112, -17, 73, 78, -11, 106, -77, 46, 99, 97, -22, 110, -65, 105, -86, -112, 58, -5, -66, -76, -4, -61, -56, 68, -10, -38, 67, 84, -35, -12, 22, -60, 63, -105, -78, 117, -13, 105, -82, 62, -64, 74, -41, -27, 114, 47, -23, 47, 65, -13, 119, -72, 76, 3, -63, 96, -59, 97, -50, -45, 34, -73, 50, -48, 76, -56, -75, -22, -60, 45, -7, 80, -48, -65, 0, 52, 39, 16, 111, 68, 108, 64, -68, -35, 62, -98, 44, -5, 79, 10, -12, 116, -29, -31, -96, -42, 94, -33, -65, -80, 6, -28, -7, 61, 70, 36, 34, -62, -9, 61, 45, -112, -37, 25, -99, -67, 43, 39, 27, 84, -52, 40, 29, -81, -54, -93, -44, -5, 59, -88, -56, 37, -5, 43, -34, 115, 11, 121, 76, -34, 20, 11, -60, 29, -43, 23, -76, -44, -24, 10, 85, 0, -11, -40, 97, 80, 77, -96, -55, 7, 26, -77, 21, 9, 88, 113, -2, -89, -33, 70, 12, 74, -103, -16, 1, 11, -85, 76, -21, -108, -28, -104, -63, 65, 106, 76, 9, -81, 13, 1, -84, 31, 75, -21, -78, 108, 29, 6, -50, -98, 19, -96, -53, -86, -22, -55, 82, -91, -19, -28, 4, 102, -89, 112, 38, -14, 17, -72, -52, -58, -23, 106, 121, 32, -19, -79, -44, 79, -30, -58, -22, 85, -37, -29, 35, -24, -5, 68, 69, 76, 95, -56, 66, -1, 51, 8, 64, -49, -91, -42, 117, 89, -37, -43, -10, 65, 7, 14, -83, -5, -13, -3, -62, -58, 47, 70, 113, -112, -61, 47, -46, -69, 11, 51, 28, 11, -57, -87, -72, 72, 40, 56, -84, -27, -55, -65, -10, 54, 74, -41, 82, -12, -56, 34, -72, -54, -59, -68, 88, -63, 75, 0, 122, 33, 22, 34, -4, 69, -30, 8, 75, 6, 9, 54, -92, 104, 84, -90, -100, -77, 16, -52, 52, 71, 17, 12, -70, 23, -101, 83, -40, 86, -71, -23, 52, -51, -104, -87, -43, 52, -65, -47, -61, -13, -34, 17, 12, 86, -49, -80, 83, 33, 115, -60, 41, 12, -43, 17, -48, 3, 115, -8, -2, 17, 29, -84, -44, -39, -36, -74, 105, -32, 65, 41, -35, -51, 2, -87, 76, 46, -53, 16, -91, 62, 60, 31, -5, 98, 116, 92, -12, 36, 40, -90, 36, 22, -92, 4, 88, 51, -54, -66, -87, -3, 69, -19, -41, -30, 8, 6, 16, -14, 12, 24, 99, -57, 16, -87, 70, -71, -62, -39, 108, 93, -63, -84, -86, 54, 101, 14, -6, -69, -75, -63, -9, 118, -41, 72, -40, 29, -106, -92, -14, -48, -22, -18, -42, 16, -19, 20, 45, 36, 116, 18, 80, -8, -105, -102, 100, -40, 64, -67, -57, -48, 94, -79, -40, 89, 73, -37, -93, 103, -78, 110, 102, 34, 72, -1, 3, -26, -28, 5, -9, -88, 39, 23, -44, -52, 84, 9, 3, -107, -38, -79, -27, -17, 106, 24, -52, -58, 22, -30, 119, -29, -82, -78, 54, 23, -3, -55, -67, -56, -99, 75, 50, -6, 23, 10, 65, -44, 47, -82, -64, -78, 27, -36, -2, 44, 29, 103, -24, 61, 31, 98, 35, -2, 87, 69, -38, 7, 17, -46, -55, -46, -21, -91, 1, 64, 108, 6, 118, -37, 47, 2, -80, -61, -1, 17, 2, -57, 33, 81, -61, -39, 80, -111, -57, -41, -9, -99, 45, 77, 108, 117, -102, -75, -94, 81, -57, 66, 17, 97, 45, -68, 15, 15, 18, 64, -62, 37, -74, -109, -63, 30, -37, 26, -20, 94, -57, -34, 90, -17, -12, 51, -41, 72, -73, 29, -39, 11, -72, 57, 37, -46, -30, -85, -5, -14, 102, 30, -54, 59, -43, -112, 83, 100, 78, -60, 106, -45, 15, -77, -82, -97, 100, -89, -96, 18, 92, -81, -61, -103, 92, 73, 50, 93, 60, 43, -56, 28, -121, -46, 21, 14, -9, 69, 74, 104, 32, 100, -74, 66, 66, -11, 106, -32, 32, -71, -30, -36, 16, -70, 68, -92, -26, -51, -36, 73, 61, 33, -101, 103, 15, -100, 37, -83, 26, -61, -43, -41, 8, 76, -49, -21, -78, 103, 105, -49, 66, -83, -12, 97, -1, -55, 21, 80, -45, -40, -47, 91, 34, -21, -21, 65, -22, -11, 82, -64, 96, -102, -61, 79, 80, 36, 103, -82, 80, -29, -119, -39, -52, 85, 77, 107, 99, 0, -2, -62, -37, 47, -73, 75, 97, 21, -18, -62, 104, 27, -66, -24, -43, 14, 56, -63, -53, -115, 110, -98, 86, -96, 53, -97, 108, 38, -58, 91, -19, 38, 38, -60, -82, 30, -2, 66, 54, -39, 100, 39, 29, 102, 32, 89, -20, -74, 99, 87, 92, 58, -42, 16, 81, 84, -57, 83, 107, -95, 41, 117, -42, 57, -9, -76, 39, -1, 21, 1, 88, 2, -53, 88, -29, 102, 87, 86, -14, 0, 26, 63, 69, -107, 65, 38, -71, 100, 85, -25, -65, 95, -97, 116, 45, 58, -43, -16, 81, 12, -61, 7, -102, 59, -18, -85, 40, -9, 74, 2, 103, 38, 90, 65, 68, 103, -27, 82, 4, 41, 26, 77, 14, -22, 106, 11, 16, 17, 31, 107, -91, 70, 11, 4, 15, 59, -56, -60, -13, 14, -26, -45, 71, 21, 96, -3, 51, 110, -52, -59, 36, -46, 47, 101, 77, -19, 54, -40, -77, 36, 20, -52, -94, 10, 105, -14, 36, 0, -42, -74, 79, -39, -96, 2, -31, 2, 94, 61, -52, -43, -7, 47, -90, 59, -18, 4, -100, 71, 3, 7, -16, 90, 62, 24, 17, -88, -24, -95, 58, -108, 76, 32, 48, 25, 38, -8, 109, -7, -51, 83, 112, 49, 74, -74, -94, -74, -39, -94, -55, 26, -57, 98, -79, 15, -69, 70, 92, -31, 45, 96, -55, -65, 6, 0, 23, 101, -7, -60, -100, -46, -58, 98, -77, -23, 94, 24, 15, -15, -21, 44, -27, -83, -62, 97, -35, -22, 80, 88, -42, -15, -11, 8, -32, 15, -30, 61, 52, 44, 73, -56, 74, -104, -22, 77, 51, -66, -78, 80, 58, -50, -21, -33, 123, 64, 95, 76, 14, 35, 18, 102, 79, 18, 72, -12, -92, -16, -105, -17, 13, 28, 32, 71, 70, 69, 74, 123, -18, -55, -59, -59, 114, -109, -87, -56, 4, 11, -49, 96, -19, -40, 46, 47, -53, -32, -4, -17, 56, 95, -4, -65, -84, -57, 111, -81, -40, 76, 36, -82, 22, -75, 108, -17, 9, 69, 61, -9, 117, -36, 16, -6, -95, -79, -24, 122, -44, -42, 82, -82, 8, 89, 65, 10, -113, 44, 24, 18, 42, -89, 58, -93, -7, 33, -20, -77, -34, 108, 55, 78, 100, 23, -1, 0, -12, 108, -21, 118, 81, -18, 36, 79, 121, -28, 29, -60, -4, -86, -102, -63, -73, 92, 28, 54, 29, 109, -28, -31, 110, -70, -23, -94, 64, -24, 30, 1, -74, 105, -97, -42, 35, 87, 27, -21, 63, -39, 37, 77, -53, -63, 35, 17, 92, -57, 90, -6, 47, -97, -92, 106, -26, -95, 76, -80, 44, 30, 92, 25, 113, -105, -30, -3, -68, 64, 15, 15, 84, 2, 110, -9, 68, 102, -39, 12, 114, 56, 42, -16, 7, -79, 20, 40, -11, 81, -71, -93, 77, -27, 42, 41, 121, 68, 
  101, -11, 71, 31, -52, 86, -67, -56, 54, -64, -69, 69, -55, 41, 44, 11, -41, -61, -90, -17, 14, -80, 5, -88, 45, -26, 64, -48, -66, -97, 48, -63, 38, 77, -87, -57, -72, 78, 39, -73, -71, 118, 30, -74, 59, -93, 18, 23, 84, -32, -13, 63, -76, -12, 34, -36, -24, 10, -61, 95, 64, -71, -29, 78, -112, -108, 43, 76, 38, -31, 26, 76, -13, 24, 76, -19, -78, -50, 17, 76, 25, -55, -35, 72, 79, -57, -50, 12, 56, 49, -91, -6, 69, -75, -89, 25, -8, 100, -43, 13, -34, -25, 58, 16, -101, 82, 23, 101, -27, -67, 96, -44, 57, 5, 100, 74, 15, 26, 21, -74, -102, -80, 40, -105, 60, -74, -82, 116, -94, 49, 77, 69, 99, 96, 106, 62, -62, -66, 67, -26, -78, -11, -31, 92, 77, -22, 45, -22, 3, 58, 23, 75, -76, -100, -82, 72, -51, 80, 17, -6, -7, 95, 74, 90, -64, -2, -76, -61, -92, 74, -77, 77, -27, -15, -25, 36, -76, 0, 41, -104, 22, 51, 38, -88, 98, -1, 61, 69, 8, 16, 45, 95, 43, 36, 15, -17, -78, 52, -47, 95, -12, -111, 56, 72, 87, -17, 1, -67, 67, 45, -19, -107, -6, -60, -52, -51, -12, 43, 1, 52, 66, 38, -42, 46, -38, 79, 45, 3, -61, 25, 36, -91, 12, 31, -82, -83, -97, 97, 13, 103, 99, -59, -48, -11, -82, 27, 113, -14, -102, -10, 84, 47, -10, -24, -13, 62, 23, -24, 99, -99, -17, -32, 69, 88, -106, 41, 15, -36, 29, 65, -4, 45, -18, -57, -31, 7, -72, -22, 26, -76, 120, 10, -9, 97, 104, 53, 16, 6, -92, 100, 82, 66, -25, -29, -56, -86, -91, -82, 59, -69, 68, 122, -4, -18, -94, -92, -43, -19, -26, 45, -49, -112, 55, -76, 68, -80, -7, 95, -13, 19, -14, -99, -69, 43, 40, 94, 0, 104, -39, -57, 42, 60, -61, 112, 37, -60, 78, -83, 72, -112, 4, 72, -17, -10, -64, -36, -14, 16, 10, -99, 93, -9, 79, -31, -28, -19, -79, 68, 58, 58, 65, 60, 81, -24, -24, 13, 89, 59, 45, -20, 20, 32, 90, -59, 26, 2, -94, 78, -60, 44, -84, -88, -84, -31, -70, -48, 11, -69, 63, -102, -93, -2, 30, 46, 44, -53, 73, 64, -40, 75, -75, 85, 54, 9, 63, -36, 71, 97, -36, 109, -35, 66, 94, -85, 39, 91, -108, 82, 20, 2, -70, -69, 123, -85, 20, -16, -2, -4, -102, -111, -25, 13, -54, 47, -25, 58, -78, 36, 42, -98, 97, 38, -93, -88, 47, -96, -4, 35, -113, 38, 62, -69, -70, 17, -107, -108, -78, 72, -114, 101, -80, 92, 75, -95, -24, -116, -34, 61, 37, 8, 37, 82, 2, -12, -20, -22, -108, 50, -23, 82, -59, -89, 34, 77, 45, 91, 55, 2, 98, 84, -18, 103, 108, 30, 69, 31, -54, -30, 74, 53, 52, 37, -12, -102, 17, -67, 49, -117, -50, -6, -28, 72, -15, 50, -31, 25, 63, 105, -70, -16, 69, -99, 41, -56, -107, 55, -38, -43, 11, -114, 22, -38, -84, -91, 36, -99, 42, -94, -9, 32, 51, 3, 22, 19, -49, 43, -3, 4, 33, -53, 2, 102, 51, 28, -24, 41, 41, 48, 103, 8, -15, -13, 69, -92, -37, -46, -65, 1, 123, 24, 8, 39, 20, 75, 81, -12, 64, -104, -12, 36, -98, -50, 38, -14, 23, -69, 24, -47, 100, -6, 4, -72, -59, -100, 50, 20, 43, -50, -76, -68, 27, 26, 87, -106, 64, -20, -83, 72, 46, 24, 64, 38, 81, -8, 27, 32, 2, 21, 70, -11, -22, -52, -22, -43, -23, -92, 15, 2, 100, -59, 90, 99, 53, 82, 83, 60, -100, 28, 48, -25, 103, 33, 89, -85, -96, -97, 6, -55, 93, -67, 84, -75, 99, -89, 48, 67, 99, 16, -86, 59, 58, 55, -69, 5, 58, 49, -44, -43, 54, -38, -42, 62, 75, 95, 15, -77, 69, 35, 11, 60, 9, -62, 74, -49, -71, -93, -3, -4, 23, 27, -23, 4, -3, -99, 74, -86, 14, -48, 34, -75, -90, -5, 26, 9, 26, 28, -105, -59, 98, 27, -108, 14, 43, -24, 104, -78, -81, 10, 60, 65, 34, 16, -89, 85, 39, 24, -35, 20, -4, 4, 35, -17, -84, 65, 11, 31, -47, 86, 20, 8, -72, -90, -74, 63, -89, -27, -3, -16, -72, 39, -59, -67, 19, -65, -38, 75, -44, -116, 88, -4, 90, -48, -26, -57, 51, 75, 86, 13, 88, -95, -19, 5, 100, -58, -74, 62, -53, -96, 65, -9, 71, -92, 76, -17, -84, -94, -84, 40, -9, 69, -25, -74, 24, 4, -21, 96, -58, 14, -100, -31, -38, 95, -87, -9, -30, -3, 69, 11, -4, -38, 118, -94, -106, -14, -24, 3, 59, 36, 55, -53, -94, -97, -65, 6, 86, 2, -48, 87, -67, -1, -9, -98, 93, -110, -41, 76, -100, -89, -99, -15, 16, -21, -27, -87, 41, 77, 5, -88, -96, -54, -112, 57, 93, -25, -32, -95, 39, 51, 10, 66, 35, -108, -97, -47, -81, -52, -88, -11, 41, 50, -40, 36, -41, 75, 25, 12, 7, 47, -26, 103, 34, -105, -44, 54, 4, -98, 23, 59, -101, 62, -87, -50, -70, -64, 113, -94, -103, 93, -11, 62, -91, 7, -106, -47, -3, -3, -28, -95, 45, 88, 56, -115, 18, -47, 56, 45, 88, 107, -23, 22, 60, -47, -57, -42, -81, 50, -75, -4, 84, -110, 42, -1, 73, -47, -100, 63, -60, 76, 87, -10, -62, -91, 76, -32, 0, -14, 28, 79, -44, 44, 49, -72, 95, 68, 89, -45, -93, 67, 8, 47, -55, 50, 74, 66, 65, -83, 23, 108, -57, -59, 93, -65, 106, -20, -50, -53, -5, 22, -20, -79, -37, -95, -48, -76, 44, 6, 110, 88, 9, -13, -77, 101, 83, -90, -82, 6, -47, -93, 27, -27, -84, 14, 93, -70, -82, -48, -97, 4, -78, -72, -23, -5, 75, -84, 83, 13, -17, 91, -73, -74, 17, -103, 24, 76, -112, -49, 76, 102, -10, -5, -83, 95, 42, 21, -39, -88, -76, -21, -80, -15, 93, 91, -7, 89, -11, 64, -105, 17, 28, -68, -90, -101, -69, -6, -49, 94, -10, 22, -46, 54, 36, -112, 59, 51, -31, 10, -92, -88, -24, 63, 74, 120, 21, 12, 5, -36, 83, -101, -51, -4, -77, -45, 1, 55, -80, -20, 59, 79, 7, 19, -31, 16, 31, 59, 111, 19, -103, -89, 3, 88, -33, -23, 18, -71, 87, -16, 124, 16, 71, -93, 75, 55, 115, -54, 26, 41, -78, -31, 30, -88, 100, -28, -6, -13, 28, 77, -31, 4, -20, -57, 92, -5, -20, 2, -3, -56, 4, -3, -84, 9, 25, 109, 25, 7, 50, 41, 2, 75, -26, 66, -30, 95, 112, -46, 55, -3, 43, -96, -118, -19, 26, 75, -64, 42, 88, -9, -86, 102, -40, 49, 100, 0, -2, 84, 40, -24, -15, 59, 50, -14, 0, -56, 28, 111, 21, -70, -21, 66, -57, -37, 60, 77, 50, 77, -92, -81, 103, 59, 28, -23, 2, 23, 103, -72, 56, -78, -93, 65, -21, 30, -7, -38, -107, -62, 27, -89, -34, 109, -39, -91, -43, -72, 101, -6, 85, 3, 41, 60, -56, 25, 63, -40, -92, 57, -46, 65, -80, -75, 3, 65, -56, 3, -89, -64, -17, -56, 43, -82, -11, 42, -36, -20, -64, -80, -75, -14, -56, 75, 20, 61, 99, 83, 100, 8, 45, 51, -41, 41, 40, 5, -80, 74, -65, 72, 59, -39, -46, 65, 80, -44, 
  66, -22, 59, 110, 52, -7, 68, 75, 6, 28, -75, -70, -37, 30, 99, -33, -11, 33, -18, -40, 10, -90, 74, -50, 11, 26, -78, -21, -73, 43, -34, -35, -9, 80, -25, 27, -37, 41, 104, -13, -101, -96, -63, -61, -75, -20, 93, -65, 52, -55, -43, -113, -31, -50, 71, 54, 46, 9, -10, -69, -22, -69, 107, 94, 61, 12, -27, 17, -80, 91, -64, -3, 51, -68, -71, -38, 5, -65, 54, 88, -68, 10, 59, -35, 86, -54, 13, -59, -66, 82, 9, -44, -22, -102, 36, 86, -17, 49, 53, 1, 23, 52, -96, -15, 74, -79, 79, 34, 31, 97, -81, 96, -20, 29, 92, 96, -25, -94, -33, -97, 97, -52, -56, -95, -9, -62, 11, -28, -94, -33, 36, -7, 108, 92, -57, 65, 80, 35, -87, 10, 32, 31, -36, -76, -54, 13, -82, 9, -66, -91, -29, 63, 91, 7, 43, 68, -84, -37, 28, 60, -32, -10, 61, 38, -89, -48, 9, -36, -77, -101, -68, -40, -76, 16, 72, 83, 36, 23, -77, 95, 52, 29, -90, -61, -7, 84, -90, 89, 39, 0, -39, 6, 14, 94, 33, 62, -87, 88, -78, 72, 65, -24, -49, 55, -81, -103, 81, 67, -47, 26, 107, 33, -17, -89, -31, -100, -22, 63, 73, -3, -99, -52, -6, -16, -110, 6, 36, 15, 6, 50, 77, -49, 94, 20, -41, -92, -54, 63, 8, -30, 62, 37, -83, -47, -29, 13, -35, 79, 9, 112, -56, 105, 51, -47, 104, 59, -98, -58, -55, 98, -68, -8, -66, -14, -92, 66, 84, -6, -75, 47, 38, 17, -76, 23, -91, -85, 101, -27, -80, 65, -106, -44, -80, -34, -55, 76, -8, 33, 111, -30, 50, 101, 95, -18, -79, 62, 15, 9, 20, -62, -39, 20, 67, -59, -99, -35, -92, 6, 12, -46, 92, 51, -72, 39, -15, -20, -103, -68, 0, 10, -52, -64, -79, -53, 21, -86, -59, 54, 105, -42, -32, 92, -5, -7, 12, -15, 95, 17, -92, -69, 6, -36, 23, -70, -1, 28, 26, 59, 5, -87, 16, -22, 88, 74, -37, -11, -33, -9, -62, -81, 56, 64, -94, 8, -80, 36, -89, -59, -81, 15, -24, -4, 64, 48, -56, -39, -90, 53, 47, -102, -64, 103, -100, -81, -4, 91, 83, 63, 63, -50, -49, -20, -106, 8, 73, 5, 42, 2, 85, 57, -87, -47, -48, 39, -66, 15, 75, 17, 82, -83, -23, -101, -49, 14, 72, -9, -5, -103, -42, 64, 38, -53, -37, 44, 76, 108, 6, 99, -60, -74, 17, -99, 62, 80, -88, -5, -42, 36, -44, 88, -22, -63, 79, 27, 77, 99, 19, 63, -4, -77, 11, -70, -48, 31, -37, 7, -100, -75, -46, -102, 105, -59, -22, -38, -89, 46, 39, 60, 42, -22, -63, -22, -74, 5, -27, -73, -89, 68, 85, 63, 11, -15, 77, 85, -27, -12, -78, 48, -41, -67, 89, 85, -104, 10, 70, -79, -111, 81, 3, 67, 87, -82, 71, -100, -64, -101, -14, 12, 58, 102, -8, -90, 81, 38, -100, 29, -30, -14, -68, 23, -62, -97, -54, -69, 36, -35, -53, 85, 91, -8, 81, 18, -75, 95, -44, -83, -51, -91, 23, 43, -60, -32, 5, 3, -93, -105, 68, 34, -20, 94, -43, -91, -60, -19, -93, -61, -97, 30, 63, -84, -87, 78, -47, -23, 66, -29, 96, 57, 31, -23, -80, -54, -104, 22, 79, 51, 16, 32, 44, -55, -41, 93, -36, 77, 11, -32, -78, -36, -81, -94, 69, -102, -29, -102, -28, -32, -105, -8, 88, 7, -88, -96, -67, 48, -91, 97, 89, -36, 83, 57, 63, 104, 84, -48, 80, -12, -68, 73, -105, 105, -22, 42, -21, -81, -85, 91, 32, 96, -36, -96, 56, 66, -6, 86, 51, 71, -71, 86, 95, -34, 9, -39, 107, 2, -26, 26, -74, 18, 84, 0, 16, -106, 36, 86, -26, -44, -25, 94, -92, -77, 16, -14, 78, -56, 32, -75, -44, -10, -41, 37, 23, -7, -106, 91, -64, -104, -60, 95, -48, -64, 83, 40, -48, 86, -45, 9, 9, -10, 38, -66, 40, 47, -65, 50, -103, 62, 19, 51, 30, -51, 52, -104, -8, -3, 37, -102, -54, 91, -70, -70, -56, 69, -6, -90, -67, -55, -36, 47, 93, -35, 73, -20, 49, 106, 109, 11, 31, -53, 88, 40, -104, 50, 40, -13, -19, -11, 46, 96, -90, 90, -106, 81, -94, -21, -54, 47, -19, 55, -91, 32, 102, 53, 5, -58, 60, -102, -40, 39, 25, -110, 71, -63, 42, 37, 33, -40, 42, -86, -73, 24, 68, 103, -100, 94, 33, 87, 35, 16, 76, 4, -76, -18, -45, 94, -86, -28, 88, -8, -91, 67, -17, 79, 64, -20, 14, 83, 90, -90, -80, -55, 88, -72, 30, 67, -46, -46, 45, -53, -83, -32, -80, -94, -20, -9, -4, 97, -22, -8, -54, 31, -81, 106, 74, -99, 46, -86, -39, -9, 45, -27, 95, -60, 68, 108, 86, -21, 96, -50, -8, 98, 106, 37, 76, 42, 18, -27, 11, -11, 83, -97, 97, 80, -91, 56, -104, -10, 93, -110, -35, 10, 91, -13, 106, -7, -80, 37, 36, -56, 105, -56, -44, -2, -69, -70, 81, 39, 55, -105, -56, 39, 51, -6, 26, -59, -79, 37, 97, 79, 8, -25, -85, -26, 1, 31, 45, 16, -86, 22, 31, -25, 15, 59, -76, 94, -42, -43, -22, 78, -71, -50, 23, 89, 86, -103, -25, -54, 99, -30, -26, 73, 66, -95, 25, -83, 72, 13, 108, -65, 18, 62, -53, 67, 41, -18, -30, -25, 78, 57, -86, 21, 45, 104, 85, -54, 90, 40, -24, -92, -105, 3, -41, -22, -68, 83, -108, -19, 2, -100, -12, 82, 69, 8, 88, -107, -36, 87, 7, 89, -93, -3, -24, -8, -79, 85, 41, -37, -21, -19, -17, -45, -91, -23, 7, -71, 35, -86, -7, 26, -9, 36, -33, 20, -74, 64, -46, 30, 76, 69, 31, 67, -14, 10, -47, 73, 101, 83, -46, 51, 88, 90, -101, -5, -78, 7, -77, -70, -49, 97, -102, -100, 48, -9, -24, 75, -55, -92, -90, -23, 14, 103, 3, -30, -104, -66, 12, 92, -4, 56, 105, -22, -65, 12, 37, 49, -73, 97, 86, -30, 54, -38, -72, 87, -97, -34, 102, 12, 38, -31, 33, -15, -17, -56, -61, -59, -93, -80, -56, 7, 40, -53, -66, -7, 53, -17, 81, 34, -71, 26, 51, -43, 76, 74, 21, 94, -46, -38, 98, -47, -69, -6, -40, -47, 47, 32, -19, 43, -17, 62, 10, 75, 96, 66, -107, 103, -26, -10, 52, 66, 18, 84, -35, 35, -73, 81, 21, 41, -72, 52, -66, -43, -86, -38, -4, -56, 52, -53, -100, 87, 0, 77, -15, -39, -11, 37, 49, 16, -111, -52, -91, -98, -11, -86, 33, -58, -14, 90, 54, -32, -40, 81, -13, 50, -52, -27, 96, -48, 76, -13, 15, -27, -10, -98, 98, 13, 30, -49, -106, 63, 79, -115, 73, 1, -34, -47, 40, -31, 98, -68, 28, 99, 99, -38, 36, -80, -1, -10, -62, 17, 66, 45, -83, 64, 64, 16, -43, 81, 10, 88, 26, -62, -17, -51, -65, -95, -100, -22, -68, 24, -102, 76, -58, -84, 73, 52, 29, -9, -101, -91, -70, 79, 68, -29, 68, 14, 96, 38, -27, 65, 48, -74, -75, 7, 1, -83, 24, 62, -5, 101, -9, -105, 28, 18, 18, -2, -24, 12, -92, -108, 90, -105, 26, 45, -57, -114, 40, 92, -17, -13, -78, 12, 29, 59, -89, -25, 92, 73, 17, 78, 7, -82, 27, 11, -38, 113, -85, -14, 93, 85, 46, 57, 
  -55, 62, -112, -30, 16, -80, 64, 69, 95, -114, 96, -41, -75, -38, 81, 49, -11, 14, 80, 41, 92, 84, -47, -19, 89, 25, -25, 41, -37, -89, -69, 23, 101, -83, -92, 90, -60, -4, -70, -7, 13, 62, -93, 21, -56, 56, -6, -105, -5, 24, -101, -78, 24, 86, 36, -34, 33, -39, 17, -95, -2, 34, 31, -5, 80, -83, 81, 89, -26, -55, -111, -57, -29, 16, 44, 71, 90, 21, -102, 6, -99, -23, -70, -110, -77, 36, 27, 12, -59, -20, 84, -46, -84, -74, -76, -50, -92, 21, -26, 40, 26, -44, -107, -42, 99, -63, -33, 97, 19, 88, 69, 12, 103, -61, -60, -114, -10, -3, -19, 56, -48, -72, 59, -76, -17, 94, 14, -22, -24, -98, -87, 26, 31, 0, -100, 93, -82, 64, -85, -12, 54, -20, 35, 62, -61, 31, 98, -103, -98, 99, -47, -53, -66, -20, -93, -81, 83, 97, -12, 88, -41, -53, -114, -32, 56, -27, 67, -23, -52, -74, -109, 104, -4, 77, 18, 73, -95, 23, 57, -78, 32, 72, -32, -91, -48, 65, -82, -112, 24, -16, 11, -14, -96, -95, 32, -58, -27, 98, -28, 11, 40, 86, -27, 10, 57, -41, 25, 92, -41, 14, -14, -35, 57, -105, -81, -18, 94, -2, -116, 53, -81, -21, 70, 64, -105, -76, 55, -31, 9, 35, -67, -104, -11, 2, -75, 73, -48, 24, -39, -89, 71, 96, 19, -52, 69, -25, 66, -21, -58, -97, 69, 41, -20, -5, -71, -38, 27, -54, -66, -32, 25, 7, 38, 92, 44, 25, -22, -61, -49, 7, 52, 61, -57, -66, 7, -21, -2, -8, -68, 66, -64, 67, -81, 17, 28, 25, 11, 23, -64, -40, 70, -45, -102, 92, 80, -25, -71, -35, -92, 83, -53, 11, 20, -75, -43, -109, 91, -69, -35, 73, 54, -23, -95, -24, 59, -14, 0, 26, -41, -10, 0, 10, -1, -66, 81, 9, -108, 57, -46, 90, -71, -33, -45, 94, 42, 49, -52, -49, -83, -69, -42, -76, -47, -96, 1, 13, -92, -78, 37, 88, -33, 48, 76, -43, -87, 8, -92, -94, -105, -21, -89, -63, 98, -30, 80, 63, -38, 73, -13, 6, -14, 13, 41, -71, -51, -87, -23, 56, 33, 100, -31, 71, -78, -84, 97, -42, -15, -82, -19, 75, 82, 32, 38, 42, -31, 23, -48, -46, 48, -74, -32, -32, -47, -116, -106, -73, -102, 70, -87, 70, -5, 95, 89, 93, -47, 17, 1, 92, -36, 60, -20, 68, 88, 104, 54, 105, 41, 47, 78, -92, -73, 4, 13, -64, 82, 66, -57, -49, -80, 17, -14, -102, 47, -60, 18, -58, 31, 43, -13, 89, -73, -88, 14, 25, -90, 73, -36, 20, 82, -1, 41, 35, -26, 63, 15, -90, -61, -67, 20, -22, 81, 75, 43, -26, -104, 5, 91, 66, -112, -60, -31, 91, 72, 53, -96, 98, 55, -64, -72, -115, -72, -22, -66, 26, 51, 41, 70, -35, 14, 6, 53, 13, -58, 42, -52, 66, 88, 12, -82, 89, 86, 85, 63, 73, 30, -12, -39, -72, 60, -24, 40, -49, -12, 86, 32, -41, 26, 90, -73, -84, 42, 84, 63, -32, -13, 19, 41, -91, 71, -65, -1, -96, 39, -61, 10, 97, -30, 31, 77, -111, -36, -52, -68, -25, -80, 20, 93, -66, 15, 44, 35, -112, 5, -31, 1, -85, 24, 96, 8, -12, 68, -99, 12, 90, 52, 83, -25, 35, -104, -58, 11, -11, -35, 77, 93, -24, 85, -13, 37, -61, -22, 27, 40, -99, 88, -69, -15, -9, 98, -106, -43, -50, 31, 75, 3, 41, -72, 8, 82, -88, -75, 8, 80, 97, 78, -94, 71, 54, 15, -84, -90, -34, 26, -36, 11, -39, -116, -10, -109, 43, -111, 91, 88, -87, -11, -49, 2, -100, -4, 91, -53, 35, 70, 45, -27, 2, 39, 89, -23, 44, 8, -59, -104, -63, -73, 25, -78, 60, -86, 38, 60, -9, -37, -81, -55, -32, 22, 93, -77, 45, -3, 7, -77, 63, -114, -23, -38, -48, 10, -59, 33, 97, -106, -76, 69, -17, -66, 28, 47, -8, -92, 35, 30, 48, 36, -94, -50, 16, -50, -32, 53, -35, 47, 101, -70, -106, -65, 90, 88, -92, -97, -96, 5, -44, -68, -58, 89, -43, 17, 59, -93, -74, -2, -60, 88, -103, 26, -64, -38, -87, -44, -21, -51, -30, -40, -21, -49, 24, 49, 94, -6, -8, -56, -63, -4, 30, -101, 67, 36, 104, -74, -92, -82, -39, -88, -92, -101, 83, 98, -45, -42, 3, -22, -60, 22, 26, 3, 14, -6, -66, 85, -3, -83, -55, -65, 27, -42, 38, -26, -20, -59, -20, -73, -35, 92, 12, -24, -59, -58, -73, -67, 90, 18, 59, 31, 105, -29, -14, -57, 52, -96, -111, -92, -84, 36, -29, -6, -24, -47, 32, 59, -29, -44, -57, 89, 56, 45, 62, -63, 76, -108, -110, 83, -47, 9, -43, -78, 19, -7, -49, 46, -34, -63, 16, 23, 51, 25, -60, 54, 90, 63, 89, -13, -62, 81, -76, -36, -1, -75, -90, -79, 87, -26, -73, 49, 91, 98, -82, -70, 25, -108, -3, 37, -10, 45, 23, 96, -63, 19, -83, 11, -84, 74, 79, 85, -81, -58, 0, -76, 77, -35, 83, 6, -32, -8, -21, 86, -113, -98, 64, 55, 85, -104, 77, -86, 32, 68, 11, 67, -108, 16, 27, 40, -65, -4, -98, -32, 15, -62, 16, 81, -9, -17, 55, 49, -18, -64, 97, -109, -81, 22, -38, 42, -6, 4, -53, 15, 7, -98, 34, -18, -77, 1, 27, -20, -29, -16, -55, 70, -109, -2, 51, -11, 39, -58, -29, 97, -27, 37, -58, 58, 41, 86, -53, 55, -41, 27, -40, 90, -88, -1, 27, -17, 46, -31, -33, 72, 71, 67, -88, -84, 20, 73, -79, 51, -37, -89, -89, 14, -18, 96, -49, 32, 35, 27, -81, 65, 78, -8, 28, -37, 9, -99, 40, 38, 64, -61, 72, -4, -59, 90, -82, 98, 36, -43, -35, 8, 12, 57, -13, -54, -48, 27, 29, -21, 59, -33, -17, 107, -54, 57, -36, -70, -23, 0, -67, -26, -71, -73, 60, -28, 32, -57, 93, 28, 14, -8, 73, 9, -3, -72, 99, 83, 56, -85, -93, 42, -34, 48, 17, -86, -39, 79, 6, 30, -51, -55, 61, -70, 30, 71, -101, -71, -28, -61, 75, 37, -87, -28, -77, -3, -73, -113, -109, 86, -5, -99, 82, -79, -48, 56, 71, 38, 19, -105, 28, -74, 63, 94, 6, 40, -63, -100, -76, -105, -61, -62, 63, 24, -64, -11, -60, -52, 50, 61, 58, 83, -64, 83, -110, 33, 74, -40, -27, 61, -69, -76, -47, 54, -66, 19, 78, -3, -47, -46, -49, 11, 81, -91, 12, 15, 73, -99, 89, -7, -77, -78, -69, 33, -81, -78, -74, -51, -6, -62, -26, 36, -22, 97, 72, 21, -67, 43, 8, 12, -32, -4, -72, 45, -10, -53, 25, 98, -72, 1, -112, 104, -97, 82, -75, 56, -101, -83, -55, -13, -21, 72, -77, -43, -100, 10, 31, 4, 52, 78, 93, 79, 15, -57, 45, 7, 95, -5, -84, 94, -2, -38, -75, -61, -24, -107, 48, -28, -29, 18, 21, -61, 74, 47, -20, -53, -34, -54, 17, 74, 4, -107, -41, -103, -9, 48, 20, -87, 35, -60, 76, 40, -15, -54, 41, -81, 6, -44, 47, 64, -11, -52, -70, 7, 92, -61, -56, -89, -24, -10, -80, 79, -42, 51, 92, -95, -105, -24, -95, -62, 11, -106, -98, -90, 89, 48, 51, 83, 0, 23, -99, -73, -27, 57, 20, -30, 59, -87, 88, 33, 13, -47, 94, -97, -19, 
  -32, 69, 31, 32, 80, 56, -33, 12, 8, -74, -62, -25, 40, 80, -16, -37, 56, 63, -4, -30, -44, 13, 45, 45, 50, 94, 11, 19, 66, 35, 92, -46, 63, 19, -46, -7, -20, 9, -86, 5, -87, 40, 78, 78, 35, 44, -63, 80, -23, -40, -34, 87, 19, 57, 108, 76, -16, -45, -7, 64, -15, -36, -100, 31, -65, -62, 33, -92, -18, 66, -58, -55, -22, 7, -68, -12, 38, -83, 99, 53, -57, -20, -39, 52, -27, -45, -40, 94, -35, 53, 19, -92, 45, 40, -81, 67, -26, 114, -60, 14, -95, -87, -58, 48, -75, 21, -101, -62, -85, -105, 112, 68, -28, 92, 11, 119, 22, 88, -57, 89, 49, -58, 63, 61, 11, -54, 27, -78, 111, 48, 97, 52, 112, 68, -21, 98, 70, 13, 75, -75, 35, 95, -54, 45, 53, 58, 66, -76, -83, 89, 6, -81, -94, -34, -74, 26, -114, 90, -110, -7, -69, 64, 30, 116, -85, 87, -62, -64, -12, 40, -93, 99, -35, -21, -96, -7, 62, 108, 76, 69, -59, 101, -48, 2, -13, 81, 73, 43, 2, 82, 93, 109, 10, -42, 123, -56, 85, -53, 3, -83, -79, -36, -49, -115, 103, 70, -43, 22, 84, 4, -85, -76, -73, 39, 41, -77, 103, -39, -71, 86, 98, 85, -35, 43, -97, -76, -39, 0, -4, -106, -77, 79, 15, 101, -22, 36, 41, 17, -49, -13, -89, 88, -77, -62, -95, -59, 56, 108, 6, 71, -22, -86, -7, 9, 75, -69, -79, -96, -5, 38, -1, -77, -100, -41, -50, -59, 117, -75, 42, 19, -109, -4, -43, 27, -92, -15, -48, 65, -3, -32, 42, -27, -39, -19, -63, 56, 39, 83, 32, -27, -76, -76, 46, 106, -14, 3, -23, -37, 117, -50, 55, 110, 117, -95, 50, -78, -63, -99, -43, -53, -41, 54, -61, 43, -45, -31, -17, 40, 26, -93, 35, -78, -6, 75, 38, -52, 17, -80, -93, -26, 54, -46, -55, -5, -61, -9, -87, 91, 29, -75, -38, 30, -9, 82, 36, -92, -42, 97, -1, -31, 47, -31, -3, -42, -63, 16, -22, -97, 2, -51, 7, -67, 75, 47, -32, 84, -9, 34, 77, 9, 73, 45, 43, -19, 44, 97, 9, 105, 112, -38, -35, -19, 26, 23, 73, 37, -20, 49, -67, 36, -10, 52, 46, 124, 102, 76, -75, -5, 109, -53, -20, -31, -63, 98, -58, -33, 28, -80, 60, -93, 115, 15, 14, -91, 1, -89, 67, 98, -37, -67, -61, 47, 23, 63, 54, -35, 30, 39, 3, -19, -45, 56, -38, 76, -39, -31, -65, -65, -85, 90, -57, -63, 62, -2, -18, -98, -27, 8, -75, -86, -89, -11, -4, 82, 107, 90, -52, -57, -34, -39, -17, 34, 55, -86, 52, -4, -22, 41, -26, 76, -24, -29, 64, 124, -59, 101, 4, 48, 35, -72, 34, 42, 23, -29, 61, -35, 42, 91, -11, -37, 70, -27, -13, 10, -62, 81, 16, -81, 98, 110, 31, -71, 0, -58, -36, 4, -100, -77, 65, -83, 95, -44, -19, -82, -74, 27, -77, 71, -5, -55, -52, -18, -75, 37, -40, 5, 125, 90, -42, -8, 38, 86, 28, -57, -64, 61, -13, 93, -94, -48, 41, -51, 27, -14, 29, 72, -57, 80, -63, 34, 65, -110, -45, 6, -22, 62, 54, 38, 44, 54, 34, 56, -84, 63, -10, -71, -61, 60, 79, -104, 64, -33, 50, 41, 41, 68, -30, -4, -79, -77, 114, -63, 94, 48, 54, 47, 111, -42, -73, -100, 104, -29, 9, 21, 75, 6, -74, 102, 49, 13, 62, -89, 10, 105, 50, 57, 33, 57, 35, -89, 36, 29, -85, 15, -60, 76, 84, 0, -23, 89, -66, -44, 74, 73, -74, 43, 22, 24, -57, 13, 4, 25, 93, -95, -9, 15, -107, 46, 86, 67, 90, 94, 7, 80, 10, -106, -56, 1, -38, 3, -86, -42, 104, -38, -23, -37, -30, 99, 3, 24, -71, 43, -113, -43, -57, 2, -53, -6, -19, -55, 54, 24, -34, -50, -62, 115, 66, -92, -86, -80, -82, 79, 51, 63, -56, -15, -19, 78, -54, 34, -21, -89, 55, -10, -13, 59, -87, -66, 95, 39, 87, -48, -70, 73, -53, -94, 40, 70, 28, -47, 23, -20, 29, 16, 4, -79, 25, 78, -94, -10, 101, -58, -51, 29, 13, 30, 42, -36, 13, 0, -14, -54, -43, 10, -55, -97, 60, 30, -9, 29, 97, 91, -70, -52, -22, -55, 74, 103, -67, 47, 15, -36, -31, -19, 60, 45, -23, 17, 23, 7, -72, 9, -110, 79, 3, 36, -53, -69, 31, 99, -79, 27, 119, -96, 22, 58, -116, 47, 69, 73, -102, -83, 67, 50, 93, -15, 116, -25, 36, -59, -85, 89, -44, 73, 17, 33, 84, -68, 24, -20, 78, -36, -46, -86, 3, -31, -110, -34, 48, -11, -110, 61, 90, 0, 82, -3, -83, 99, -59, 46, 83, -15, -52, -17, -31, 53, -22, 63, -35, 85, -84, -30, 98, -40, 7, 12, 26, 11, 125, 109, 37, 64, 83, -35, 46, 96, -74, 16, 65, 6, -14, 97, 16, 22, 26, 9, -83, 23, 3, -100, 85, -42, -92, -37, -12, -9, 5, 0, 81, 97, -80, 34, 62, -27, -45, 104, -46, 20, -16, -1, 11, -92, -87, 30, 9, 81, -91, -44, 35, 43, -6, 13, 1, 41, 75, -103, -40, -30, -27, 75, -75, 58, 17, -97, -27, 38, -98, 116, 97, -15, 41, 87, -98, 42, 95, -78, -29, -90, 106, -102, 9, -91, 77, 4, -97, -3, -48, -105, 99, -9, -61, -79, -67, 19, 14, -92, 54, 75, 66, -1, 23, 54, -69, -24, -26, -49, -65, -20, -96, 30, 38, 90, -42, 89, 101, 23, -11, -37, 121, -54, 41, -84, 63, -81, -113, -90, 18, 95, -49, 124, 98, -39, 6, 116, -28, 86, 35, 92, -29, -75, -64, 95, -43, 68, -70, -41, -93, -72, -13, -75, 36, 67, -66, -7, 102, 73, -108, 127, 73, 78, -11, 107, -72, -67, -39, -102, 48, -112, 89, 113, -13, -53, 96, 60, 116, 112, -60, -24, 64, 87, 109, 100, -67, -76, 30, 69, 107, 37, -43, 118, -57, 52, 25, 65, 20, -59, 41, 49, 57, 25, -39, -106, -40, 82, 76, -44, -3, 91, -85, -73, 102, 25, -7, 20, 17, -22, 88, 6, 17, 96, 50, -41, 61, 59, -105, -76, 84, 90, -108, -5, 67, -52, -75, -85, -53, 92, -33, -109, -51, 65, -67, -21, 92, -58, 7, -83, -83, -64, -93, 93, -58, -88, 17, -111, -45, -15, -35, 92, 85, -62, -37, -88, 4, -9, 11, -89, 52, 66, -42, -114, 102, -89, 87, 9, -60, -106, 76, -55, 2, -13, 39, -61, 97, -71, 5, 23, 1, -67, -79, -84, 51, 75, 11, 28, 31, 14, 117, 77, 89, -46, 2, 32, -91, -86, 80, 66, 24, -83, 122, -30, 64, -41, -101, 109, -103, -2, 18, 65, 76, 97, 14, 107, 18, 24, 63, 109, 60, 74, 32, -28, 103, 54, 107, -54, -38, 98, 93, -18, -58, -42, 114, 58, -87, 48, 79, -81, 103, 4, 47, 12, 45, 80, 70, 62, 31, -107, -62, 19, -22, -26, -90, -19, -22, 65, 77, 54, 37, -104, 118, 15, 58, 32, -38, -99, 19, -49, -14, -39, 97, 89, -36, 114, 41, 73, 35, -76, -43, -101, -86, -65, 11, 73, -92, -3, 31, 60, 37, 89, 80, 62, 118, 15, 41, -73, 54, -14, 68, -94, -20, -73, 64, -21, 94, -42, -37, 68, -13, -91, -32, 47, -65, -75, 74, 59, -82, 19, -99, 15, -33, 11, 43, -46, 96, -78, 21, 103, -90, 33, -14, 94, 
};
const TfArray<2, int> tensor_dimension29 = { 2, { 10,1280 } };
const TfArray<1, float> quant29_scale = { 1, { 0.00063085340661928058, } };
const TfArray<1, int> quant29_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[3*10] = { 
  -53, 127, -62, 15, 111, -57, -98, -95, 73, 1, 
  95, -60, -80, 4, 16, 46, -104, -59, -64, 122, 
  -10, -93, 110, 104, 2, 72, -108, 58, -31, 31, 
};
const TfArray<2, int> tensor_dimension30 = { 2, { 3,10 } };
const TfArray<1, float> quant30_scale = { 1, { 0.0054106186144053936, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int32_t tensor_data31[48] = { 11466, 13665, -7, 2137, 78400, 5484, -4988, 20273, 7451, -2246, 17734, -82, 710, 2831, 568, 4004, -3291, -9982, 14714, 37986, 11252, -982, 2292, 17375, 12582, 6196, 1399, 9805, -1690, -5279, 16410, 4708, 4422, 5461, 12661, 8359, 3234, 3280, 19550, 16955, 3160, 25121, 8506, -5070, 2316, 3417, 11200, -1479, };
const TfArray<1, int> tensor_dimension31 = { 1, { 48 } };
const TfArray<48, float> quant31_scale = { 48, { 6.7553599365055561e-05, 5.6431392295053229e-05, 8.6103449575603008e-05, 0.00012885119940619916, 1.6483905710629188e-05, 9.7916090453509241e-05, 0.00010740563448052853, 4.2340223444625735e-05, 6.7228851548861712e-05, 0.00013505302194971591, 4.9805723392637447e-05, 8.5429164755623788e-05, 6.6532185883261263e-05, 0.00013845611829310656, 9.670451981946826e-05, 0.00013390318781603128, 0.00013883911015000194, 7.0562477048952132e-05, 5.7565477618481964e-05, 2.5659957827883773e-05, 7.1175731136463583e-05, 0.00011929940956179053, 0.0001832933776313439, 5.1649280067067593e-05, 6.2549115682486445e-05, 9.6177805971819907e-05, 0.00013797466817777604, 7.2132679633796215e-05, 0.00011368127161404118, 6.7115390265826136e-05, 5.7575241953600198e-05, 9.3231719802133739e-05, 0.00014331009879242629, 9.2504284111782908e-05, 5.7810702855931595e-05, 8.4965824498794973e-05, 0.00014816487964708358, 0.00014895873027853668, 4.6723482228117064e-05, 5.4540098062716424e-05, 8.8097840489353985e-05, 3.7587302358588204e-05, 9.1444875579327345e-05, 0.00012956665887031704, 7.5576579547487199e-05, 0.00010607192234601825, 7.9597826697863638e-05, 7.7944860095158219e-05, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(8) int32_t tensor_data32[48] = { -21057, -1199, -5239, 34618, 32769, 11488, -31, 4090, 802, -6229, -4738, 13040, -87, 12009, -4909, -7845, -2708, 5, 6653, 1260, -227, 13432, -2659, 277, 43, -45, -312, -7018, -10, 385, -3027, 68, -3, -18469, -694, 14317, -1205, 771, 43, -1779, 262, -696, -183, -1031, -52, -98, -15300, 8230, };
const TfArray<1, int> tensor_dimension32 = { 1, { 48 } };
const TfArray<48, float> quant32_scale = { 48, { 7.9746379924472421e-05, 0.00013013157877139747, 8.790790889179334e-05, 5.0395166908856481e-05, 0.00013777489948552102, 8.5365725681185722e-05, 0.00041619318653829396, 0.00021913605451118201, 0.00013387219223659486, 0.00013873710122425109, 0.00036740108043886721, 9.7003467089962214e-05, 0.00030592229450121522, 7.2624497988726944e-05, 0.0003504367487039417, 0.00014643541362602264, 6.7548906372394413e-05, 0.0024736120831221342, 0.00017860402294900268, 0.00056691071949899197, 0.0001515380572527647, 0.00010306671174475923, 0.00011896108480868861, 0.00014766449749004096, 0.00021033958182670176, 0.00014922584523446858, 0.00016700560809113085, 0.00035183483851142228, 0.00015498310676775873, 0.00078876811312511563, 0.00034314053482376039, 3.9477541577070951e-05, 0.00015585095388814807, 0.00017974093498196453, 0.00019968893320765346, 7.458716572728008e-05, 9.6301715529989451e-05, 0.00013438666064757854, 0.00033522761077620089, 0.00022299525153357536, 7.9521880252286792e-05, 0.0005169446230866015, 0.00020211760420352221, 0.00048424108535982668, 0.0002576442202553153, 0.00011990184430032969, 0.00016975443577393889, 9.4000613898970187e-05, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int32_t tensor_data33[48] = { 458, -1384, 2178, 5121, 9601, 1584, 6836, 6956, 7697, -1567, -133, 3799, 5984, -514, 3896, 2515, -790, 5191, 7937, -4296, 8013, -1741, -3145, 4528, 10473, -7013, -425, -8650, -18, 470, 2328, 1519, 2330, 1552, 10416, 2890, 8496, -3021, 761, 1541, 2862, 1402, 5234, 8258, -176, 1155, 1382, 2671, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.0001611123007023707, 0.0001406376832164824, 0.00015042666927911341, 0.00010843664495041594, 7.4476491136010736e-05, 0.00013816886348649859, 9.6508745627943426e-05, 8.782259828876704e-05, 9.2199101345613599e-05, 0.0002042721607722342, 0.00020030068117193878, 0.000113330090243835, 0.00011948303290409967, 0.00011796462786151096, 0.00015028774214442819, 0.00018514847033657134, 0.00019737851107493043, 0.00014013025793246925, 0.00010587625001790002, 0.00010789137741085142, 9.6070943982340395e-05, 0.000137910115881823, 8.6704632849432528e-05, 0.00013449504331219941, 7.1484966611023992e-05, 7.9800200182944536e-05, 0.00011179827561136335, 7.8483535617124289e-05, 0.00013666783343069255, 0.00013010381371714175, 0.00013092982408124954, 0.00030405071447603405, 0.00014926733274478465, 0.00012072944082319736, 8.119931590044871e-05, 0.00013778921857010573, 9.4480652478523552e-05, 0.0001075177569873631, 0.00015028308553155512, 0.00010280335845891386, 9.3073445896152407e-05, 0.00011566169996513054, 0.00011104529403382912, 9.2712798505090177e-05, 0.00014061515685170889, 0.00025907531380653381, 0.00011097138485638425, 0.00010599018423818052, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int32_t tensor_data34[8] = { 3031, 31795, 1832, -11817, 14930, 2082, 24543, 10240, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 0.00021428534819278866, 0.00010331464727642015, 0.00030882292776368558, 0.00018560554599389434, 0.00031474616844207048, 0.00016575105837546289, 0.00014116140664555132, 0.00017388082051184028, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int32_t tensor_data35[48] = { 12248, -4444, 8107, 443, 7338, 10382, 14605, 12542, 34963, -525, -8626, 22464, 1, -2140, 12704, 24786, -263, 23602, 27052, -1007, 22944, -10524, -677, 3193, 23489, 169, 211, -336, 16152, 13216, 20303, -7709, -9719, 10285, 22343, 14643, 18947, -1884, 15263, -289, 41682, -6402, 26446, 25090, 22678, -23346, -7050, 12347, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 9.869210043689236e-05, 0.00011220318992855027, 9.6558178483974189e-05, 9.3072092568036169e-05, 0.00010174111957894638, 0.000100624245533254, 9.8621268989518285e-05, 7.9662182542961091e-05, 5.6223485444206744e-05, 0.00011875145719386637, 0.00011606272892095149, 7.9580859164707363e-05, 0.00015293592878151685, 9.107086225412786e-05, 8.9636581833474338e-05, 6.5434185671620071e-05, 9.8666256235446781e-05, 0.00010909545380854979, 8.7108906882349402e-05, 0.00025515910238027573, 9.1115311079192907e-05, 0.00014317125896923244, 0.00019229532335884869, 7.3104958573821932e-05, 0.00010951930016744882, 0.00048788194544613361, 0.00010077869956148788, 0.00051364157116040587, 9.275393676944077e-05, 0.00012832017091568559, 9.2470581876114011e-05, 3.6722292861668393e-05, 0.00011502840789034963, 7.9917888797353953e-05, 0.0001333129039267078, 0.00010102435044245794, 0.00011051896581193432, 0.00011179134889971465, 0.00010246313468087465, 8.4937120846007019e-05, 5.5673252063570544e-05, 7.826380169717595e-05, 5.7299188483739272e-05, 0.0001008515027933754, 7.245037704706192e-05, 5.8205099776387215e-05, 6.8047054810449481e-05, 0.00010777970601338893, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(8) int32_t tensor_data36[48] = { 12, 14619, -1469, -6349, 8502, -3403, 3311, 15104, 12668, -373, 2821, 9568, 9600, 2759, 11199, -595, -576, 22229, 1897, 9117, -940, -6479, 15521, 3462, -1368, 10078, 10950, 431, 7258, -5948, 1073, 6540, 13905, 5540, 804, 2236, 2614, 11259, 7443, 2505, 5442, 503, 10939, -7356, 1530, 3398, 8695, -3487, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00014272418047767133, 6.1335180362220854e-05, 0.00015954194532241672, 7.0740665250923485e-05, 0.00011329275002935901, 0.00010562263923930004, 0.00012517275172285736, 6.1461170844268054e-05, 6.8794397520832717e-05, 0.00015887137851677835, 0.00015378514945041388, 8.4846957179252058e-05, 7.5932781328447163e-05, 0.00012533218250609934, 7.0649039116688073e-05, 9.3877250037621707e-05, 0.0001309986982960254, 4.3477448343764991e-05, 0.00012972549302503467, 7.8544660937041044e-05, 0.00012851740757469088, 8.4435334429144859e-05, 5.537387914955616e-05, 0.000153634391608648, 9.5490511739626527e-05, 7.7593394962605089e-05, 6.5388201619498432e-05, 0.00015633540169801563, 8.6700812971685082e-05, 4.4793679990107194e-05, 0.00010268284677295014, 7.3296752816531807e-05, 6.2924336816649884e-05, 8.7638283730484545e-05, 0.00010254808148602024, 0.00015343494305852801, 0.00010432705312268808, 7.094506872817874e-05, 0.00010428654786664993, 0.00012088924268027768, 0.00010359765292378142, 0.00019037957827094942, 6.4774125348776579e-05, 7.7619151852559298e-05, 1.6866550140548497e-05, 0.00011594437091844156, 8.5057421529199928e-05, 0.00010297936387360096, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int32_t tensor_data37[48] = { -2179, -2090, -2421, -501, 44077, -7215, -16296, -385, 0, 6934, 24428, -1054, -773, 22169, 24366, 14773, -3809, 13662, 19377, -2341, -90, -1675, -260, -10908, 23369, -2781, 18064, 28943, 33470, -1724, -461, -3125, 29453, -28490, 15906, 21844, 18697, 24034, 23, 22850, 16353, -5587, -3435, -66, -983, 2801, -142, -52, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 6.574147118953988e-05, 0.00013683433644473553, 0.00016568443970754743, 0.00034442506148479879, 6.3346727984026074e-05, 0.00015326868742704391, 5.7672357797855511e-05, 0.00023852284357417375, 0.00015897498815320432, 3.9395155909005553e-05, 4.1372062696609646e-05, 0.00015569874085485935, 0.00014222264871932566, 5.3801850299350917e-05, 8.2576312706805766e-05, 6.7968401708640158e-05, 0.0001431971468264237, 0.00017012018361128867, 7.6285745308268815e-05, 0.00014174086390994489, 0.00018599451868794858, 0.00029371588607318699, 0.00024534156545996666, 8.4194005466997623e-05, 4.6952387492638081e-05, 0.00023730384418740869, 5.1869126764358953e-05, 3.9399965316988528e-05, 4.3455005652504042e-05, 0.0001535937626613304, 0.00018227536929771304, 0.00010584096162347123, 8.2488702901173383e-05, 3.9606584323337302e-05, 7.2491871833335608e-05, 5.8341756812296808e-05, 7.5785319495480508e-05, 6.41893784631975e-05, 0.0001491798902861774, 4.7085162805160508e-05, 6.088503505452536e-05, 0.00012359415995888412, 0.00011248814553255215, 0.00025381598970852792, 0.00074228289304301143, 0.00011276545410510153, 0.00018223885854240507, 0.00019697916286531836, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int32_t tensor_data38[48] = { 1701, -309, 1017, 5022, 1737, 6877, 9503, 9676, 35170, 1831, 13868, -764, 852, 7027, 2151, 5100, -102, -46, -690, 3580, 5487, -1814, -360, 14346, 22466, 5359, -1187, -7860, 13278, 6179, 6537, 195, 4292, 17691, 6727, 1162, 11538, 3748, 7602, 19122, 5057, 1770, 4788, -322, 19696, 1698, 11875, -2919, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 0.00010030158591689542, 0.00013754924293607473, 0.00016775900439824909, 8.7711494415998459e-05, 0.00012118075392208993, 9.3441631179302931e-05, 8.6545354861300439e-05, 7.9541860031895339e-05, 2.7352070901542902e-05, 0.00014502933481708169, 6.0458663938334212e-05, 0.00012577565212268382, 0.00021396898955572397, 9.1686204541474581e-05, 0.00010702634608605877, 0.00011642908793874085, 0.00010145612759515643, 0.00015477940905839205, 0.00020437939383555204, 0.00011660285963444039, 0.00011100891424575821, 0.00015498744323849678, 0.00019575312035158277, 5.3777828725287691e-05, 4.1986560972873122e-05, 0.00012799650721717626, 0.00019720483396667987, 7.0673580921720713e-05, 6.7471235524863005e-05, 0.00011110840569017455, 8.3712104242295027e-05, 0.00011568921036086977, 0.00010390281386207789, 5.0914066378027201e-05, 0.00011099522089352831, 0.00013714008673559874, 6.6599815909285098e-05, 0.0001616661756997928, 9.7848358564078808e-05, 4.7850677219685167e-05, 0.00010614819620968774, 0.00012966639769729227, 0.00011138184345327318, 0.00016230515029747039, 4.7309436922660097e-05, 0.00019266769231762737, 7.677635585423559e-05, 8.7057269411161542e-05, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int32_t tensor_data39[48] = { -8221, -74, -6296, 890, -4467, 29697, 11279, -6074, -6450, -3806, 26504, 13024, -12329, -3789, -4313, -9010, 15845, -26256, -7407, -10850, 28531, -3984, -3005, -1543, 634, 4805, 29807, -727, 1441, 1446, -303, -13407, -10056, -825, -6204, -9607, 12553, 23549, 53, 3815, 24721, -6389, 476, -6717, 15020, 30865, 1437, -1971, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00010629900498315692, 9.5187002443708479e-05, 5.2860345022054389e-05, 9.4805407570675015e-05, 0.0001134175035986118, 5.1188213546993211e-05, 0.00013308996858540922, 0.00016696928651072085, 0.00022712470672558993, 0.00010736766853369772, 9.1698973847087473e-05, 6.3222360040526837e-05, 0.00013507790572475642, 0.00015458518464583904, 0.00011259900929871947, 4.0225346310762689e-05, 6.7504537582863122e-05, 5.1554117817431688e-05, 0.00013416004367172718, 0.0001015240850392729, 5.7513731007929891e-05, 0.00014835302135907114, 9.0283705503679812e-05, 0.00015459960559383035, 0.00039486162131652236, 0.0001305411133216694, 4.117223943467252e-05, 0.00021239974012132734, 0.00020889102597720921, 7.1512637077830732e-05, 0.0001275558170164004, 8.4055427578277886e-05, 7.8977536759339273e-05, 0.00020845841208938509, 0.00012638351472560316, 7.2300084866583347e-05, 0.00014231671229936182, 5.3100808145245537e-05, 0.00016715173842385411, 0.00015803327551111579, 6.9533918576780707e-05, 0.00012088067887816578, 7.9858218668960035e-05, 8.2768543506972492e-05, 0.00012669112766161561, 4.3198684579692781e-05, 0.00019116354815196246, 0.00024493463570252061, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(8) int32_t tensor_data40[48] = { 2138, 773, 6683, 4767, 10912, 475, 2944, 1202, -2878, -2808, 1860, 11748, 4782, -7175, 821, 8309, 8399, -5518, -355, 5500, 9591, 956, -79, 1421, 891, -5506, 1118, 73, 3138, 8220, 12045, 74, 5552, 3518, -3372, 3913, -1659, 4062, 9946, -3516, 1955, 350, -2228, 3602, -3127, 4301, 700, 2423, };
const TfArray<1, int> tensor_dimension40 = { 1, { 48 } };
const TfArray<48, float> quant40_scale = { 48, { 0.00013346846390049905, 0.00015827509923838079, 0.00010015317093348131, 0.00013682918506674469, 7.9907542385626584e-05, 0.00013161743117962033, 0.00012579165922943503, 0.00015598579193465412, 0.000126759143313393, 0.00017283213674090803, 0.00014755451411474496, 7.8723991464357823e-05, 0.0001420464541297406, 9.9917560874018818e-05, 0.00013854926510248333, 8.7337750301230699e-05, 9.0345136413816363e-05, 0.00010594244668027386, 0.00014096022641751915, 0.00011316681775497273, 8.8199150923173875e-05, 0.00012811312626581639, 0.00013840977044310421, 0.0001385111827403307, 0.00016135338228195906, 0.00011511598131619394, 0.00011579878628253937, 0.00014276952424552292, 0.00013559563376475126, 9.6109710284508765e-05, 7.2001894295681268e-05, 0.00020105441217310727, 0.00012771748879458755, 0.00014410937728825957, 0.00014207571803126484, 0.00013766666234005243, 0.00018044040189124644, 0.00011171479127369821, 8.149856876116246e-05, 0.00013541591761168092, 0.00013743674207944423, 0.00016116196638904512, 0.0001552495377836749, 0.00016758660785853863, 0.00016372374375350773, 0.00012550623796414584, 0.00017400260549038649, 0.00016822005272842944, } };
const TfArray<48, int> quant40_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int32_t tensor_data41[48] = { 48216, -12708, 57536, 32511, 31183, -11708, -20434, 1840, -1570, -10, -30739, 34493, 34223, -1473, 34065, -16485, 28096, -7192, 38796, 26951, 35346, 54270, 18356, 31522, 1666, -2201, -9235, 51, 532, 33675, 33351, 24069, 38436, 1427, -239, 10679, 27, 35663, -573, -3387, 26933, 1651, -7129, 40163, -88, 26891, -8318, -3236, };
const TfArray<1, int> tensor_dimension41 = { 1, { 48 } };
const TfArray<48, float> quant41_scale = { 48, { 3.9779439248377457e-05, 6.5071159042418003e-05, 3.3781470847316086e-05, 5.2695104386657476e-05, 9.7409210866317153e-05, 6.940562161616981e-05, 5.481226253323257e-05, 4.9716851208359003e-05, 9.5607392722740769e-05, 0.00010005607327912003, 5.9782036260003224e-05, 9.9493685411289334e-05, 6.3999672420322895e-05, 0.00017201623995788395, 5.004095146432519e-05, 8.6886131612118334e-05, 7.9427758464589715e-05, 0.00010993165051331744, 3.7995097954990342e-05, 5.9075864555779845e-05, 7.8014832979533821e-05, 3.4906861401395872e-05, 6.7698187194764614e-05, 5.7529388868715614e-05, 5.1617604185594246e-05, 0.00016352557577192783, 6.6113658249378204e-05, 5.9098514611832798e-05, 5.6984881666721776e-05, 6.0582158766919747e-05, 7.6209755206946284e-05, 5.6054461310850456e-05, 5.4752115829614922e-05, 0.00010650554759195074, 0.00010199737880611792, 6.0298847529338673e-05, 8.4797407907899469e-05, 4.9865313485497609e-05, 0.00010475330782355741, 0.00012839864939451218, 5.706699812435545e-05, 5.6979912187671289e-05, 0.00010017280146712437, 5.0133236072724685e-05, 0.00010077463230118155, 5.8266170526621863e-05, 7.1289709012489766e-05, 5.614867404801771e-05, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(8) int8_t tensor_data42[8*3*3*1] = { 
  /* [0][0][][] */ 97, -118, 10, 
  /* [0][1][][] */ -113, 127, -4, 
  /* [0][2][][] */ 14, -15, 0, 
  /* [1][0][][] */ 20, 27, 54, 
  /* [1][1][][] */ -25, -127, 32, 
  /* [1][2][][] */ 3, 6, 20, 
  /* [2][0][][] */ -127, 102, 18, 
  /* [2][1][][] */ -31, -20, 61, 
  /* [2][2][][] */ -3, -4, 5, 
  /* [3][0][][] */ 54, 51, 9, 
  /* [3][1][][] */ 47, 66, 9, 
  /* [3][2][][] */ -85, -127, -19, 
  /* [4][0][][] */ -38, 60, -18, 
  /* [4][1][][] */ -82, 127, -45, 
  /* [4][2][][] */ -13, 17, -4, 
  /* [5][0][][] */ -77, -66, -4, 
  /* [5][1][][] */ 127, 105, 7, 
  /* [5][2][][] */ -47, -43, -3, 
  /* [6][0][][] */ 57, 119, -71, 
  /* [6][1][][] */ 48, -44, -127, 
  /* [6][2][][] */ 27, 27, -22, 
  /* [7][0][][] */ -45, -127, 36, 
  /* [7][1][][] */ 93, 61, 11, 
  /* [7][2][][] */ 14, -11, 3, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant42_scale = { 8, { 0.018473751842975616, 0.020399753004312515, 0.020062800496816635, 0.015465610660612583, 0.018865054473280907, 0.019704878330230713, 0.012503535486757755, 0.0092278299853205681, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int8_t tensor_data43[8*1*1*8] = { 
  /* [0][0][][] */ -61,110,5,-3,7,7,-127,-4, 
  /* [1][0][][] */ 91,-18,23,46,13,127,-2,-14, 
  /* [2][0][][] */ 127,-58,52,18,104,-56,75,3, 
  /* [3][0][][] */ -14,38,1,-22,-1,-83,-50,127, 
  /* [4][0][][] */ -127,-98,-107,-56,-35,49,111,9, 
  /* [5][0][][] */ 57,4,-2,-127,-9,64,-4,-15, 
  /* [6][0][][] */ 102,57,127,71,109,28,-77,2, 
  /* [7][0][][] */ -43,-58,24,-127,35,-125,53,34, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant43_scale = { 8, { 0.013249308802187443, 0.0038006382528692484, 0.0071859173476696014, 0.0053968396969139576, 0.0025548273697495461, 0.0066342405043542385, 0.0028770735953003168, 0.0040036365389823914, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(8) int8_t tensor_data44[48*1*1*8] = { 
  /* [0][0][][] */ -43,-22,-47,13,-127,-6,9,31, 
  /* [1][0][][] */ -52,19,26,-74,127,3,-62,28, 
  /* [2][0][][] */ -7,-127,26,-59,-67,9,-33,-42, 
  /* [3][0][][] */ 40,127,-10,119,43,-27,54,-34, 
  /* [4][0][][] */ 5,-3,-36,-127,-5,-118,-9,-15, 
  /* [5][0][][] */ -23,104,-13,-20,10,127,53,-109, 
  /* [6][0][][] */ 27,-8,-12,-91,32,17,-127,74, 
  /* [7][0][][] */ -10,127,36,-26,90,71,118,18, 
  /* [8][0][][] */ -4,-127,16,-48,-72,16,-33,-21, 
  /* [9][0][][] */ -33,80,3,71,15,-95,41,-127, 
  /* [10][0][][] */ 39,-78,15,-95,-1,11,-32,127, 
  /* [11][0][][] */ -127,4,-4,-11,57,-48,-43,3, 
  /* [12][0][][] */ -6,-22,23,-46,-46,12,-10,-127, 
  /* [13][0][][] */ -50,120,111,61,-46,127,29,-16, 
  /* [14][0][][] */ -126,-77,-28,-6,27,14,127,1, 
  /* [15][0][][] */ 127,-24,-44,5,-74,1,13,-15, 
  /* [16][0][][] */ -76,-77,-127,31,-19,-8,-36,30, 
  /* [17][0][][] */ -45,-23,-107,7,-127,5,57,20, 
  /* [18][0][][] */ -6,-62,127,7,41,29,106,-38, 
  /* [19][0][][] */ 54,-77,4,-68,-9,-35,-56,127, 
  /* [20][0][][] */ -77,71,45,-3,116,-17,-127,-15, 
  /* [21][0][][] */ -22,-127,9,8,-61,-71,-37,-46, 
  /* [22][0][][] */ -36,-77,-20,5,-127,15,78,0, 
  /* [23][0][][] */ 127,-37,-21,7,-75,-14,3,-19, 
  /* [24][0][][] */ -18,-127,18,5,-14,27,-78,-34, 
  /* [25][0][][] */ -47,107,-106,-59,5,29,32,-127, 
  /* [26][0][][] */ 68,-34,-49,16,-127,11,31,-8, 
  /* [27][0][][] */ 40,-20,1,-127,18,0,-24,55, 
  /* [28][0][][] */ -105,44,-6,2,127,-28,-69,4, 
  /* [29][0][][] */ 35,-100,-48,83,-70,27,-100,127, 
  /* [30][0][][] */ 18,-127,3,-30,-97,51,-76,-18, 
  /* [31][0][][] */ -30,-61,-127,23,-61,-85,-82,40, 
  /* [32][0][][] */ 34,-33,-78,2,-127,-1,27,13, 
  /* [33][0][][] */ -17,-13,-7,30,-24,-127,-9,-58, 
  /* [34][0][][] */ 36,-3,127,10,20,9,-9,20, 
  /* [35][0][][] */ 37,-127,-9,-67,-89,4,44,108, 
  /* [36][0][][] */ 21,-5,-4,-127,8,1,3,31, 
  /* [37][0][][] */ 9,-127,4,8,-102,23,98,-2, 
  /* [38][0][][] */ -97,30,10,-22,127,-44,-56,1, 
  /* [39][0][][] */ -36,24,-35,3,-127,0,-39,19, 
  /* [40][0][][] */ -22,-56,-6,26,-127,14,70,6, 
  /* [41][0][][] */ 27,-74,-17,-109,-14,73,-36,127, 
  /* [42][0][][] */ 47,-42,62,-14,127,-18,7,-12, 
  /* [43][0][][] */ 127,-22,18,3,126,-30,-55,-22, 
  /* [44][0][][] */ -93,42,41,-22,92,-29,-127,-56, 
  /* [45][0][][] */ -20,-1,-30,96,23,-25,8,127, 
  /* [46][0][][] */ -3,29,-27,37,3,-127,-12,-73, 
  /* [47][0][][] */ 37,127,109,-35,56,90,71,-36, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant44_scale = { 48, { 0.0087279202416539192, 0.0060267974622547626, 0.0052753970958292484, 0.0022775873076170683, 0.010649227537214756, 0.011772763915359974, 0.0087567325681447983, 0.0077295703813433647, 0.006117724347859621, 0.011880208738148212, 0.0088518159464001656, 0.006810399703681469, 0.022011538967490196, 0.0028363761957734823, 0.010187190026044846, 0.0069075040519237518, 0.0076169976964592934, 0.0096847033128142357, 0.0097068678587675095, 0.010592611506581306, 0.0051663578487932682, 0.0057390215806663036, 0.002074450021609664, 0.0064075230620801449, 0.0037294900976121426, 0.013057484291493893, 0.0076279947534203529, 0.0031685794238001108, 0.0080545553937554359, 0.0027380988467484713, 0.005321490578353405, 0.0091237183660268784, 0.010431429371237755, 0.0028746956959366798, 0.010077964514493942, 0.009003104642033577, 0.010372706688940525, 0.0062954393215477467, 0.0059377965517342091, 0.025137970224022865, 0.0019473471911624074, 0.0095100011676549911, 0.0061209346167743206, 0.0085374815389513969, 0.0056208330206573009, 0.010272287763655186, 0.010278577916324139, 0.016511589288711548, } };
const TfArray<48, int> quant44_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(8) int8_t tensor_data45[8*1*1*48] = { 
  /* [0][0][][] */ 36,69,35,-33,18,6,-40,5,-18,53,-74,31,-6,38,9,31,33,89,3,20,-127,48,-32,-46,-26,71,32,-35,103,39,43,-19,-3,-31,31,34,19,25,19,41,-30,100,44,56,43,-11,79,-32, 
  /* [1][0][][] */ -60,-18,-45,-32,36,-70,60,53,-31,14,68,-77,21,9,122,-57,18,77,27,70,52,-16,-23,15,-23,39,-38,-26,60,-68,-49,-88,63,25,40,-47,-7,42,-105,-22,-38,57,-32,-80,18,-40,127,-99, 
  /* [2][0][][] */ 34,87,-29,-41,127,87,-17,-49,-57,-2,-10,39,-57,34,-12,23,10,16,-2,9,30,-31,-47,12,-47,-43,56,-50,-8,-17,-18,-23,-15,58,14,40,-19,65,60,17,-24,36,25,33,68,-31,18,-28, 
  /* [3][0][][] */ 14,-10,-44,-24,6,-13,21,16,-45,-82,23,23,-16,30,-53,2,-43,27,-48,-45,-44,-5,-25,-9,-27,9,-12,-26,39,-65,-58,68,32,-29,-27,1,-63,-74,-8,124,-15,3,3,127,-62,107,-13,68, 
  /* [4][0][][] */ -41,-67,-24,-16,-38,-12,-11,-42,-16,-38,72,-57,-34,-7,74,-58,-31,-45,73,10,24,-17,-14,88,-16,15,-49,-16,45,-22,-28,69,-51,28,2,-20,-14,-21,-71,-92,-27,-31,-1,-127,-21,29,-14,66, 
  /* [5][0][][] */ -38,-24,-49,67,20,-36,73,23,41,-29,-14,-42,29,-83,-111,-70,26,-12,-34,5,2,-67,70,79,52,-127,-34,66,-48,-64,-61,-44,-75,-3,-64,-65,-27,44,-59,59,63,-39,-107,3,69,-38,2,-46, 
  /* [6][0][][] */ 21,60,13,-12,6,-20,-52,-27,-18,36,-49,17,-6,-4,-69,10,-26,26,52,108,-61,-3,-13,11,-11,-43,46,-13,-14,31,25,127,74,12,-72,51,18,-90,27,31,-16,39,8,48,60,-17,75,121, 
  /* [7][0][][] */ -6,-18,-2,32,51,93,53,-95,26,-16,-83,-5,-127,-11,-29,16,101,10,-8,-56,-67,-9,33,-118,27,-4,-45,26,-28,5,0,-23,42,-47,36,-56,-17,25,-19,20,35,42,-5,16,-23,-65,15,-28, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant45_scale = { 8, { 0.0070832832716405392, 0.0047227968461811543, 0.0069609633646905422, 0.0065438835881650448, 0.006282399408519268, 0.0065269949845969677, 0.0078062508255243301, 0.0048903441056609154, } };
const TfArray<8, int> quant45_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(8) int8_t tensor_data46[48*1*1*8] = { 
  /* [0][0][][] */ 25,91,-127,-94,50,-23,3,-12, 
  /* [1][0][][] */ 16,49,-106,28,-127,37,-58,-85, 
  /* [2][0][][] */ -95,78,127,-40,-127,85,-30,-85, 
  /* [3][0][][] */ 73,-45,-36,14,82,52,-66,-127, 
  /* [4][0][][] */ 91,0,-7,-61,-75,-27,-34,127, 
  /* [5][0][][] */ -17,7,-102,-127,61,-63,7,-7, 
  /* [6][0][][] */ 127,13,2,49,110,51,-15,12, 
  /* [7][0][][] */ -9,82,-127,-100,82,-62,-37,79, 
  /* [8][0][][] */ -109,-123,108,127,25,17,-109,-100, 
  /* [9][0][][] */ 55,27,-7,-36,-37,36,45,127, 
  /* [10][0][][] */ 47,12,123,53,-39,-14,-127,122, 
  /* [11][0][][] */ -54,43,31,69,102,92,6,127, 
  /* [12][0][][] */ -38,73,127,-90,124,-86,-96,32, 
  /* [13][0][][] */ -34,-97,127,-15,-61,-11,-38,-8, 
  /* [14][0][][] */ -20,98,-65,-49,127,-21,-1,41, 
  /* [15][0][][] */ -127,68,-31,12,-110,-83,43,62, 
  /* [16][0][][] */ -51,-36,-19,-26,27,33,127,-64, 
  /* [17][0][][] */ -10,-18,43,29,127,-41,48,100, 
  /* [18][0][][] */ 5,22,-51,-6,-126,39,-9,-127, 
  /* [19][0][][] */ 44,25,-41,12,-127,43,-5,-92, 
  /* [20][0][][] */ 126,-47,58,-59,127,122,54,-34, 
  /* [21][0][][] */ -92,90,87,-19,127,6,66,-50, 
  /* [22][0][][] */ -45,-127,-51,-57,33,20,5,25, 
  /* [23][0][][] */ -21,-1,127,-101,-19,13,99,48, 
  /* [24][0][][] */ 39,19,-127,-12,-39,-35,25,-101, 
  /* [25][0][][] */ -21,-127,7,51,81,18,-109,-70, 
  /* [26][0][][] */ 20,-58,127,14,-63,-9,-18,-21, 
  /* [27][0][][] */ -62,-25,127,54,40,40,25,74, 
  /* [28][0][][] */ -127,57,-69,20,-10,-108,51,99, 
  /* [29][0][][] */ 9,40,127,76,94,-67,-7,93, 
  /* [30][0][][] */ -82,-58,37,-127,119,-31,24,-48, 
  /* [31][0][][] */ 72,81,88,51,-67,-127,-19,41, 
  /* [32][0][][] */ -127,40,1,-10,-94,-74,35,38, 
  /* [33][0][][] */ -37,-69,-25,127,66,-42,-104,11, 
  /* [34][0][][] */ 18,-3,-127,65,-58,67,29,-84, 
  /* [35][0][][] */ -95,6,127,29,-22,86,8,-46, 
  /* [36][0][][] */ -127,82,-15,-36,-84,-86,18,1, 
  /* [37][0][][] */ 88,-62,-8,-16,127,53,-51,-64, 
  /* [38][0][][] */ 18,-26,-10,89,-127,61,39,-92, 
  /* [39][0][][] */ -46,-20,127,-9,-2,44,53,30, 
  /* [40][0][][] */ -35,-127,74,113,-67,47,-91,2, 
  /* [41][0][][] */ 42,25,53,-23,39,-46,-97,127, 
  /* [42][0][][] */ 127,-115,34,-29,115,91,-25,-66, 
  /* [43][0][][] */ 127,-82,-21,3,108,64,-44,4, 
  /* [44][0][][] */ 58,127,-95,-63,74,-70,-25,88, 
  /* [45][0][][] */ 19,-24,-53,-127,45,-121,17,-77, 
  /* [46][0][][] */ 127,-83,13,-12,89,74,-24,-43, 
  /* [47][0][][] */ -123,-27,-127,51,-79,-107,-104,-62, 
};
const TfArray<4, int> tensor_dimension46 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant46_scale = { 48, { 0.0024387016892433167, 0.0020371873397380114, 0.0031083559151738882, 0.0046515604481101036, 0.00059507309924811125, 0.0035347952507436275, 0.0038773701526224613, 0.0015284925466403365, 0.002426978200674057, 0.0048754476010799408, 0.0017979990225285292, 0.0030840141698718071, 0.002401828533038497, 0.0049983002245426178, 0.0034910570830106735, 0.0048339385539293289, 0.0050121266394853592, 0.0025473230052739382, 0.0020781280472874641, 0.00092633086023852229, 0.0025694617070257664, 0.0043067382648587227, 0.0066169365309178829, 0.0018645517993718386, 0.0022580386139452457, 0.0034720427356660366, 0.0049809198826551437, 0.0026040077209472656, 0.0041039222851395607, 0.0024228822439908981, 0.0020784805528819561, 0.0033656882587820292, 0.005173529963940382, 0.0033394277561455965, 0.0020869807340204716, 0.0030672873836010695, 0.0053487890399992466, 0.0053774472326040268, 0.0016867293743416667, 0.001968911150470376, 0.0031803539022803307, 0.001356910914182663, 0.0033011827617883682, 0.0046773883514106274, 0.002728333231061697, 0.003829222870990634, 0.0028735012747347355, 0.0028138288762420416, } };
const TfArray<48, int> quant46_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(8) int8_t tensor_data47[8*1*1*48] = { 
  /* [0][0][][] */ -91,25,23,3,24,-51,-15,73,-15,21,81,56,32,-26,49,68,-9,10,127,-29,-67,43,-79,-33,55,-73,1,83,-19,0,-49,48,-68,-8,-6,18,-30,13,50,20,43,-23,-93,16,46,-3,0,-29, 
  /* [1][0][][] */ -49,31,-33,89,51,0,2,28,-26,41,79,-54,-39,96,-68,22,-4,-18,-13,-28,-31,-46,47,-37,-127,43,-73,-51,-13,-27,-5,-30,25,-28,-44,13,-69,-54,-109,71,19,18,34,-25,-12,-38,50,24, 
  /* [2][0][][] */ 33,-31,40,35,29,27,56,-88,-2,-11,-22,25,-51,-65,-13,43,27,-38,27,-12,56,-109,59,23,-21,21,13,127,54,-69,9,16,-4,-98,48,-62,31,55,-76,-9,34,-11,9,42,65,18,-9,32, 
  /* [3][0][][] */ -43,21,-13,-111,64,-36,10,-26,-56,-37,36,-57,17,-5,-40,-17,13,-13,-59,-18,-18,28,26,-24,-28,-10,-18,33,11,-29,-6,10,-14,127,44,-52,50,12,-15,40,21,-29,-16,-18,50,-7,26,-45, 
  /* [4][0][][] */ -23,3,52,-37,22,24,-5,10,-12,-48,-12,14,9,31,5,72,24,13,127,53,-9,-62,-51,19,30,-24,-4,7,23,-16,29,-12,-1,9,23,-2,15,-3,32,8,26,-25,-21,1,-8,-8,74,8, 
  /* [5][0][][] */ 73,-48,46,25,28,2,7,-21,-56,18,6,-59,52,-3,-53,96,18,39,31,35,34,-4,-101,-82,35,45,-69,56,-11,24,-64,-63,15,-47,17,-127,-25,-3,5,21,22,51,22,-13,-10,-56,27,24, 
  /* [6][0][][] */ 71,-65,-21,127,6,-47,-16,25,40,48,-79,-60,6,24,-109,2,104,-52,2,-76,-31,-18,-50,-20,-6,-26,-34,-97,-29,-49,-88,-7,-60,-75,-76,18,-40,-25,21,-75,-65,-105,-52,81,-50,-32,0,-6, 
  /* [7][0][][] */ -10,-4,-19,56,48,-45,-26,35,-22,3,-16,-43,-1,-36,56,-63,-26,-29,127,13,-3,35,23,-15,-8,-7,15,31,-48,-11,-30,-71,-14,-119,-24,9,-21,-33,-15,-27,-12,16,-1,-24,-28,14,-46,15, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant47_scale = { 8, { 0.0077351555228233337, 0.0069292238913476467, 0.0049433819949626923, 0.0073372721672058105, 0.012884062714874744, 0.0065884613431990147, 0.0050323354080319405, 0.007651893887668848, } };
const TfArray<8, int> quant47_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(8) int8_t tensor_data48[48*1*1*8] = { 
  /* [0][0][][] */ -89,-6,0,-9,127,-15,88,67, 
  /* [1][0][][] */ -93,59,-127,-41,38,-29,12,0, 
  /* [2][0][][] */ -24,-23,-105,0,-17,127,-45,-49, 
  /* [3][0][][] */ 51,33,-6,-100,74,81,-93,-127, 
  /* [4][0][][] */ 25,-88,-120,-127,55,-103,51,-25, 
  /* [5][0][][] */ 33,12,-113,127,-47,-22,-66,-107, 
  /* [6][0][][] */ -30,-81,-62,127,-110,21,-5,-26, 
  /* [7][0][][] */ -35,-28,-110,-127,-7,-83,-38,-55, 
  /* [8][0][][] */ 127,-39,-89,-102,50,44,-78,-77, 
  /* [9][0][][] */ 11,127,-51,19,41,20,30,-38, 
  /* [10][0][][] */ -25,-46,69,-65,6,34,47,127, 
  /* [11][0][][] */ 51,-77,-27,65,-46,96,127,83, 
  /* [12][0][][] */ -33,-12,-127,-22,68,54,78,0, 
  /* [13][0][][] */ -3,97,-34,-127,88,-97,-124,1, 
  /* [14][0][][] */ 49,23,-32,-55,-13,15,-127,-85, 
  /* [15][0][][] */ 1,127,57,-23,-13,-18,-32,-111, 
  /* [16][0][][] */ 6,6,12,-28,-27,-16,-11,-127, 
  /* [17][0][][] */ -36,38,-1,96,2,-57,22,-127, 
  /* [18][0][][] */ -4,-127,-60,-5,77,3,94,82, 
  /* [19][0][][] */ 0,13,-71,77,23,-54,109,127, 
  /* [20][0][][] */ -127,10,7,-80,21,-84,-6,-18, 
  /* [21][0][][] */ -26,59,127,9,22,-97,-46,33, 
  /* [22][0][][] */ 34,39,127,112,86,41,121,30, 
  /* [23][0][][] */ 71,-127,66,-44,-62,-39,-62,-2, 
  /* [24][0][][] */ -93,-49,73,94,116,127,62,82, 
  /* [25][0][][] */ -26,53,107,-46,45,-55,10,127, 
  /* [26][0][][] */ -22,-42,70,127,36,90,-98,97, 
  /* [27][0][][] */ -6,101,127,96,34,-38,50,78, 
  /* [28][0][][] */ -32,21,84,41,11,-89,28,127, 
  /* [29][0][][] */ 59,62,68,-127,35,16,-2,95, 
  /* [30][0][][] */ -44,7,52,-32,-127,-12,112,-111, 
  /* [31][0][][] */ 121,-13,127,103,-73,-52,-35,2, 
  /* [32][0][][] */ 127,0,-5,58,-16,-115,56,-13, 
  /* [33][0][][] */ 36,-28,49,5,-77,127,-82,-91, 
  /* [34][0][][] */ -18,5,127,-42,-89,-10,124,-82, 
  /* [35][0][][] */ -9,-75,42,64,-127,41,-30,-18, 
  /* [36][0][][] */ -16,24,127,-74,34,-7,14,-112, 
  /* [37][0][][] */ -70,-11,78,126,-98,127,81,-17, 
  /* [38][0][][] */ 13,-54,-15,46,103,-35,-48,127, 
  /* [39][0][][] */ 127,100,-81,-49,29,-115,-126,107, 
  /* [40][0][][] */ -104,-111,-24,127,17,-44,-104,-46, 
  /* [41][0][][] */ 13,60,-96,-88,-119,127,-34,-65, 
  /* [42][0][][] */ 65,32,-105,127,-94,107,-51,-63, 
  /* [43][0][][] */ 46,-8,65,37,101,-119,127,-5, 
  /* [44][0][][] */ -127,50,33,-22,-30,96,-105,-9, 
  /* [45][0][][] */ -83,127,-2,25,-27,106,-94,-17, 
  /* [46][0][][] */ -32,-127,-125,103,-15,-24,53,-71, 
  /* [47][0][][] */ 0,36,-85,-62,-100,-126,-13,-127, 
};
const TfArray<4, int> tensor_dimension48 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant48_scale = { 48, { 0.003355975728482008, 0.0029294886626303196, 0.0031333935912698507, 0.0022587396670132875, 0.0015513483667746186, 0.0028780628927052021, 0.0020102809648960829, 0.0018293482717126608, 0.0019205110147595406, 0.0042549972422420979, 0.0041722711175680161, 0.0023606703616678715, 0.0024888364132493734, 0.0024572080001235008, 0.0031304997391998768, 0.0038566500879824162, 0.0041114022023975849, 0.0029189188499003649, 0.0022054065484553576, 0.0022473817225545645, 0.0020011616870760918, 0.0028726730961352587, 0.0018060610163956881, 0.0028015370480716228, 0.0014890347374603152, 0.0016622412949800491, 0.0023287625517696142, 0.0016348152421414852, 0.0028467965312302113, 0.0027100676670670509, 0.0027272733859717846, 0.0063333888538181782, 0.0031092443969100714, 0.0025147991254925728, 0.0016913849394768476, 0.0028701550327241421, 0.0019680357072502375, 0.0022395991254597902, 0.0031304026488214731, 0.0021413981448858976, 0.0019387236097827554, 0.0024092379026114941, 0.0023130779154598713, 0.0019312113290652633, 0.0029290192760527134, 0.0053965491242706776, 0.0023115384392440319, 0.0022077797912061214, } };
const TfArray<48, int> quant48_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(8) int8_t tensor_data49[8*1*1*48] = { 
  /* [0][0][][] */ -17,-42,127,7,-19,25,2,29,48,-6,-34,17,-30,13,60,66,40,-40,13,-71,-11,32,8,-39,-25,-46,18,-11,-90,55,-49,49,25,14,-2,40,17,-43,1,-35,-95,-56,48,-67,68,-31,-83,38, 
  /* [1][0][][] */ -16,32,17,36,-58,-24,73,78,26,-74,22,39,1,-127,27,75,103,-25,45,46,46,-47,-77,-45,32,-9,-33,-44,-26,52,-88,102,-13,41,-22,52,63,123,58,41,-25,84,76,-9,-42,43,35,91, 
  /* [2][0][][] */ 29,-8,-1,-31,22,24,-28,36,119,-11,47,-5,-12,71,52,-22,-97,110,97,47,4,73,17,127,14,87,15,21,0,-101,28,28,-21,-16,-28,-86,-25,17,2,-23,106,16,-30,25,-45,21,-72,-68, 
  /* [3][0][][] */ -49,47,77,15,1,35,7,71,-63,47,-1,32,-2,-11,-89,-14,17,-18,37,45,10,9,-24,-127,-18,2,23,18,-44,-20,-24,-17,2,-8,4,74,-61,-16,-28,76,26,-2,-21,29,-21,52,-48,65, 
  /* [4][0][][] */ -43,50,-24,-19,-15,-51,16,-74,50,-14,-26,87,16,67,-27,27,3,17,33,-12,-97,49,-34,86,62,-9,13,0,13,9,-44,-79,-43,53,86,9,60,35,8,23,-127,-37,13,32,-37,35,21,-68, 
  /* [5][0][][] */ 30,35,35,-42,34,-29,-26,46,81,72,-4,-81,26,16,115,-16,-61,-4,7,-11,-4,13,24,-6,-28,-37,66,-35,-16,44,2,-127,-41,72,31,-69,95,26,50,-75,-88,-28,62,41,-50,14,50,14, 
  /* [6][0][][] */ 41,-11,22,7,29,52,24,48,-20,-4,-84,-10,-18,24,-28,3,-21,-63,3,26,18,42,5,39,-46,-40,127,14,26,8,-32,53,4,-54,81,-16,33,3,-65,15,-34,8,-37,51,-19,23,16,-1, 
  /* [7][0][][] */ -43,-9,-86,0,51,-75,-17,30,-7,0,43,46,22,-2,-51,14,29,12,37,-80,-51,-61,11,10,-63,37,-20,-34,21,-27,10,-10,-127,-47,-6,-4,-67,18,7,-76,-93,-68,-28,-28,-104,59,-26,29, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant49_scale = { 8, { 0.0063601736910641193, 0.0044879843480885029, 0.0043336953967809677, 0.006300952285528183, 0.0053807245567440987, 0.0052278847433626652, 0.0055707897990942001, 0.0046247825957834721, } };
const TfArray<8, int> quant49_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const ALIGN(8) int8_t tensor_data50[48*1*1*8] = { 
  /* [0][0][][] */ -23,22,27,61,44,-127,55,-27, 
  /* [1][0][][] */ -1,82,127,75,14,34,76,-112, 
  /* [2][0][][] */ 47,24,39,31,127,77,-37,-9, 
  /* [3][0][][] */ -71,-123,-83,127,69,118,-115,-108, 
  /* [4][0][][] */ 9,-127,45,-40,24,82,37,-38, 
  /* [5][0][][] */ -9,51,-31,83,-111,64,127,81, 
  /* [6][0][][] */ -93,4,-127,89,0,58,7,-59, 
  /* [7][0][][] */ 49,6,127,41,31,-38,3,9, 
  /* [8][0][][] */ 66,19,19,-65,-31,127,-67,10, 
  /* [9][0][][] */ 127,-25,-12,-91,83,56,-15,-7, 
  /* [10][0][][] */ -53,-127,-89,67,-106,42,2,31, 
  /* [11][0][][] */ -119,-2,-127,36,-56,-62,72,66, 
  /* [12][0][][] */ -80,-2,-127,-96,-45,71,-25,-13, 
  /* [13][0][][] */ -119,-127,76,59,-97,28,-13,45, 
  /* [14][0][][] */ -93,108,12,127,24,118,12,99, 
  /* [15][0][][] */ -15,-90,-109,-37,103,-49,-127,-104, 
  /* [16][0][][] */ -53,-127,-22,81,68,45,-46,-23, 
  /* [17][0][][] */ 107,23,65,24,-8,95,-127,-101, 
  /* [18][0][][] */ -23,115,66,9,35,-2,-97,127, 
  /* [19][0][][] */ 14,29,-26,-82,127,-102,-23,47, 
  /* [20][0][][] */ -72,-33,-127,-25,25,35,-54,-27, 
  /* [21][0][][] */ -29,109,38,127,-68,50,64,24, 
  /* [22][0][][] */ 101,-43,50,37,122,2,-100,-127, 
  /* [23][0][][] */ -127,59,55,46,-32,42,31,-25, 
  /* [24][0][][] */ -125,-9,-9,125,89,127,-51,-35, 
  /* [25][0][][] */ 23,-54,-22,42,72,26,-89,-127, 
  /* [26][0][][] */ -127,24,-126,-105,-105,84,-15,-18, 
  /* [27][0][][] */ 72,-127,13,-82,-4,-64,-34,-38, 
  /* [28][0][][] */ -96,10,-127,92,-98,72,-119,21, 
  /* [29][0][][] */ 90,29,-127,11,-97,-19,-64,-82, 
  /* [30][0][][] */ -8,28,103,23,-127,88,101,-25, 
  /* [31][0][][] */ -88,105,-93,-127,-19,-27,28,106, 
  /* [32][0][][] */ -63,-25,127,-122,100,120,63,-123, 
  /* [33][0][][] */ -100,79,-4,115,127,-24,37,35, 
  /* [34][0][][] */ 5,113,127,89,101,-45,-89,-77, 
  /* [35][0][][] */ 33,-15,-127,-38,-24,-32,-48,110, 
  /* [36][0][][] */ 51,81,22,-41,-89,-17,91,127, 
  /* [37][0][][] */ 17,-127,98,-109,120,16,-25,87, 
  /* [38][0][][] */ -47,-65,-40,6,-52,-66,127,23, 
  /* [39][0][][] */ -105,-106,52,-46,-83,-22,-127,24, 
  /* [40][0][][] */ 103,-42,33,10,2,-127,61,27, 
  /* [41][0][][] */ -1,15,-33,49,-19,-127,-17,104, 
  /* [42][0][][] */ 10,54,-110,-127,-63,23,85,76, 
  /* [43][0][][] */ -51,-57,-62,-59,91,-15,-59,127, 
  /* [44][0][][] */ -81,6,38,127,27,121,-5,19, 
  /* [45][0][][] */ -8,-127,23,-37,-111,27,90,81, 
  /* [46][0][][] */ -117,32,-127,-39,-93,31,15,-26, 
  /* [47][0][][] */ 18,22,57,-127,-78,-42,55,8, 
};
const TfArray<4, int> tensor_dimension50 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant50_scale = { 48, { 0.0041092578321695328, 0.0017659382428973913, 0.0045934682711958885, 0.0020367370452731848, 0.0032618797849863768, 0.0030410450417548418, 0.0036039240658283234, 0.0017695656279101968, 0.001980700995773077, 0.0045741614885628223, 0.0044277207925915718, 0.0024428798351436853, 0.0021862264256924391, 0.0036085145547986031, 0.0020340990740805864, 0.0027028764598071575, 0.0037716624792665243, 0.0012517854338511825, 0.0037350049242377281, 0.0022614267654716969, 0.0037002221215516329, 0.0024310285225510597, 0.0015943027101457119, 0.0044233803637325764, 0.0027493247762322426, 0.0022340381983667612, 0.0018826310988515615, 0.0045011467300355434, 0.0024962553288787603, 0.0012896818807348609, 0.0029564036522060633, 0.0021103310864418745, 0.001811692607589066, 0.0025232466869056225, 0.0029525235295295715, 0.0044176378287374973, 0.0030037430115044117, 0.0020426223054528236, 0.0030025767628103495, 0.0034805950708687305, 0.0029827423859387636, 0.0054813330061733723, 0.0018649508710950613, 0.0022347797639667988, 0.00048561498988419771, 0.0033382242545485497, 0.002448939485475421, 0.0029649408534169197, } };
const TfArray<48, int> quant50_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(8) int8_t tensor_data51[8*1*1*48] = { 
  /* [0][0][][] */ 45,-33,-20,-51,69,-9,42,-74,-4,-94,55,-23,-37,35,32,23,-36,113,36,-31,49,-46,-70,100,20,-51,-6,61,50,-13,-8,57,-127,7,-37,-39,25,27,70,-16,44,-3,10,-21,-53,-15,-59,-36, 
  /* [1][0][][] */ 52,-41,23,-39,78,12,-45,26,-24,-20,-7,54,-34,54,-106,-127,-42,-22,51,-15,17,-52,67,-3,-93,58,29,-1,75,-32,7,1,-29,-44,-74,-70,-17,19,-23,-36,3,-53,-54,-2,35,-97,-19,15, 
  /* [2][0][][] */ 108,-116,81,-45,81,27,-13,-45,-40,-59,-25,-100,-34,-76,61,-23,40,75,25,-98,2,123,-52,78,-29,6,-32,-57,-55,87,-13,-45,110,-34,127,94,55,-94,-7,118,8,-42,-61,-55,52,53,-83,-1, 
  /* [3][0][][] */ 70,13,43,1,-27,20,21,16,46,-34,-22,-65,59,-51,-71,-77,35,-58,24,58,-46,66,41,-16,-27,-6,-53,-48,-11,51,-1,68,-60,-64,19,-56,-127,10,25,-52,-5,-1,12,24,117,-10,36,-2, 
  /* [4][0][][] */ -95,-80,27,-1,94,65,29,-41,-12,18,32,-23,-127,-18,-60,-2,31,10,99,-71,-23,37,-59,71,9,-20,-86,17,47,24,29,-26,14,-38,-3,34,67,-64,30,71,-5,-93,-37,-65,2,-65,-127,-9, 
  /* [5][0][][] */ 53,-6,51,-14,59,54,67,-99,-107,57,-36,-53,-57,-2,-112,-38,53,127,-20,37,-58,27,-73,-29,4,-62,-92,-25,-37,33,-87,-49,88,-16,-12,48,56,-25,2,79,102,-78,-52,-6,11,-21,-37,31, 
  /* [6][0][][] */ -26,3,15,3,-30,110,-11,-71,-3,52,32,1,2,-6,53,55,40,-127,58,24,-18,76,43,-24,51,57,-14,-32,-27,62,11,-35,-1,-16,-22,-33,-7,-24,-4,-30,-33,-63,-80,-34,103,43,16,-19, 
  /* [7][0][][] */ -26,42,8,8,-37,48,-57,40,-13,-13,-53,14,29,-9,-118,-38,28,-30,127,37,21,0,80,-19,-50,108,57,26,57,-34,-8,-14,-35,54,2,25,18,35,-12,37,-55,1,-8,41,-40,3,28,62, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant51_scale = { 8, { 0.003862032201141119, 0.0043785553425550461, 0.0023003921378403902, 0.0044295182451605797, 0.0036787074059247971, 0.0044720703735947609, 0.0038620042614638805, 0.0037942896597087383, } };
const TfArray<8, int> quant51_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(8) int8_t tensor_data52[48*1*1*8] = { 
  /* [0][0][][] */ -42,-37,-127,120,126,-93,-54,-45, 
  /* [1][0][][] */ -16,-11,127,33,-71,-38,27,32, 
  /* [2][0][][] */ 22,127,42,1,-50,64,-22,98, 
  /* [3][0][][] */ 50,46,79,-86,-99,-67,83,127, 
  /* [4][0][][] */ -19,47,-19,51,-5,-127,119,0, 
  /* [5][0][][] */ -127,-8,119,35,-39,-87,-37,-20, 
  /* [6][0][][] */ -40,5,-36,6,8,-25,-73,-127, 
  /* [7][0][][] */ -22,97,127,1,-93,-54,33,52, 
  /* [8][0][][] */ -5,88,125,113,-5,-18,-95,-127, 
  /* [9][0][][] */ -6,11,6,-90,16,-8,6,127, 
  /* [10][0][][] */ 127,-31,112,-19,43,67,42,-113, 
  /* [11][0][][] */ 127,-77,-53,89,77,-96,113,-6, 
  /* [12][0][][] */ -127,70,-6,19,-35,19,52,-46, 
  /* [13][0][][] */ -7,15,-83,13,127,-44,-95,-66, 
  /* [14][0][][] */ 4,-77,-89,-24,120,-92,-127,-44, 
  /* [15][0][][] */ 33,-33,90,-8,127,-17,-58,-63, 
  /* [16][0][][] */ -49,-15,-94,106,127,-8,-101,-39, 
  /* [17][0][][] */ 120,37,-99,30,-71,30,-90,127, 
  /* [18][0][][] */ 71,127,65,-33,54,6,4,8, 
  /* [19][0][][] */ -58,36,-32,-46,25,-105,69,-127, 
  /* [20][0][][] */ -72,97,53,-15,-127,102,71,-62, 
  /* [21][0][][] */ 28,-49,24,-45,-1,-26,53,127, 
  /* [22][0][][] */ 127,-38,22,-5,79,-70,-53,81, 
  /* [23][0][][] */ -120,60,-98,32,127,57,-110,-75, 
  /* [24][0][][] */ -102,34,-21,-65,26,-26,-127,92, 
  /* [25][0][][] */ -46,-16,47,-13,-13,127,-17,-12, 
  /* [26][0][][] */ 127,-25,-20,13,60,26,21,-10, 
  /* [27][0][][] */ -36,-95,-7,127,122,63,-63,-86, 
  /* [28][0][][] */ -58,71,-49,127,49,0,-70,-36, 
  /* [29][0][][] */ 28,58,-17,-32,-99,47,-127,0, 
  /* [30][0][][] */ 85,11,64,-102,-127,-47,79,20, 
  /* [31][0][][] */ 76,17,-20,-127,54,77,-53,-62, 
  /* [32][0][][] */ 28,-54,-33,-35,-41,-93,80,-127, 
  /* [33][0][][] */ -127,46,-101,79,59,25,-77,-66, 
  /* [34][0][][] */ -4,53,-41,-16,37,7,-127,-9, 
  /* [35][0][][] */ 127,54,15,98,-78,-26,-79,18, 
  /* [36][0][][] */ 83,55,105,-106,-64,-25,127,63, 
  /* [37][0][][] */ -37,-46,31,-127,28,-11,31,18, 
  /* [38][0][][] */ 40,-40,28,-10,-42,-5,75,127, 
  /* [39][0][][] */ 113,21,57,127,48,-78,-28,-99, 
  /* [40][0][][] */ -93,39,-66,8,-11,-127,38,28, 
  /* [41][0][][] */ -39,-127,-34,-116,120,-73,-28,-14, 
  /* [42][0][][] */ -48,-127,-28,57,25,83,-80,24, 
  /* [43][0][][] */ -54,-127,-64,99,-7,-39,5,16, 
  /* [44][0][][] */ 11,117,-93,92,62,-127,-63,-118, 
  /* [45][0][][] */ 29,127,17,-28,-13,44,-55,68, 
  /* [46][0][][] */ -30,-13,22,-39,-127,30,11,-33, 
  /* [47][0][][] */ -75,-3,-84,72,97,50,-127,81, 
};
const TfArray<4, int> tensor_dimension52 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant52_scale = { 48, { 0.0023602743167430162, 0.0032367778476327658, 0.0039476673118770123, 0.0020640071015805006, 0.002851598197594285, 0.0021988474763929844, 0.0020365659147500992, 0.001871761167421937, 0.00064364279387518764, 0.0034127975814044476, 0.0014226996572688222, 0.0029597242828458548, 0.0050350702367722988, 0.0021575391292572021, 0.0025185199920088053, 0.0027397831436246634, 0.002387442858889699, 0.0036422342527657747, 0.0048094098456203938, 0.0027438723482191563, 0.002612236887216568, 0.003647129749879241, 0.0046064183115959167, 0.0012654877500608563, 0.00098801834974437952, 0.0030119852162897587, 0.0046405796892940998, 0.00166307482868433, 0.0015877180267125368, 0.0026145779993385077, 0.0019698943942785263, 0.0027223725337535143, 0.0024450176861137152, 0.0011980984127148986, 0.002611914649605751, 0.0032271496020257473, 0.0015672119334340096, 0.0038042920641601086, 0.0023025455884635448, 0.0011260113678872585, 0.0024978555738925934, 0.0030512805096805096, 0.002621012507006526, 0.0038193282671272755, 0.0011132750660181046, 0.0045338128693401814, 0.001806683954782784, 0.0020486121065914631, } };
const TfArray<48, int> quant52_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(8) int8_t tensor_data53[8*1*1*48] = { 
  /* [0][0][][] */ -102,1,-54,3,71,39,63,110,56,-97,-68,8,-127,-13,-10,-42,-11,2,20,-105,65,-72,120,-29,-76,-79,-77,7,-49,48,-125,70,-44,113,-38,17,50,25,-88,89,-53,-53,-60,56,-57,-8,-31,-71, 
  /* [1][0][][] */ 1,-29,-11,-56,57,-59,21,34,-2,-44,-36,-8,10,-68,-64,-30,-19,-71,50,11,5,-32,-11,-30,0,-36,-48,-1,-127,31,-114,59,-63,52,9,-63,-100,-29,-32,-25,-55,-81,-32,17,46,-50,-98,-38, 
  /* [2][0][][] */ -49,10,35,12,-32,-28,15,-81,127,-97,-89,76,-30,35,1,25,-11,-69,76,-20,-49,37,65,61,-31,-26,12,21,-21,31,-84,36,26,96,-51,34,-45,-40,5,74,-52,-16,-24,62,4,28,-59,31, 
  /* [3][0][][] */ 127,64,-11,-56,37,49,-69,-70,33,0,-35,-34,-15,0,-23,36,32,0,-41,63,-82,55,-33,19,-60,-58,-40,-25,-6,7,21,-11,-60,-5,-14,-55,-27,32,38,-73,-87,-18,-1,-42,74,-8,-71,39, 
  /* [4][0][][] */ -17,-45,-8,52,40,13,17,-30,-21,-50,52,77,-6,-92,-53,-106,109,-15,71,98,-60,-12,83,-62,-56,-22,17,10,22,-127,63,-21,-47,-59,-94,30,30,-81,-53,3,78,19,-49,94,69,57,-25,38, 
  /* [5][0][][] */ 44,-29,109,-11,44,47,88,-66,127,9,41,13,8,12,11,81,63,-6,55,35,13,-1,32,16,-92,-1,-66,-67,-5,44,14,-26,68,-65,-34,67,-39,29,-19,69,103,5,-19,16,-41,80,17,70, 
  /* [6][0][][] */ 77,0,73,15,8,36,-58,-40,-127,40,15,20,17,59,19,5,-77,-7,25,7,-36,-58,-12,97,-70,-5,10,35,65,-109,38,-69,36,25,-94,-44,-9,-8,82,-19,9,42,35,-34,-7,22,3,42, 
  /* [7][0][][] */ 11,-24,93,-46,39,-45,0,-61,-97,48,127,-10,41,20,26,-90,73,91,-41,116,39,-72,-13,-37,67,17,-45,-115,-38,6,64,-56,25,-123,-30,-53,80,95,62,7,34,-13,5,-127,-104,8,31,59, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant53_scale = { 8, { 0.00440172478556633, 0.010688110254704952, 0.0046150581911206245, 0.0041379816830158234, 0.0034910973627120256, 0.0046023726463317871, 0.0046276212669909, 0.0031533222645521164, } };
const TfArray<8, int> quant53_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(8) int8_t tensor_data54[48*1*1*8] = { 
  /* [0][0][][] */ -26,-127,37,-30,66,-49,2,-73, 
  /* [1][0][][] */ -45,-58,42,-45,-78,91,-127,92, 
  /* [2][0][][] */ -118,1,-36,-99,-2,-127,20,-99, 
  /* [3][0][][] */ -54,-21,36,-44,122,-84,-127,35, 
  /* [4][0][][] */ 70,-12,-98,-65,18,-57,-127,123, 
  /* [5][0][][] */ 49,-49,-113,-8,106,-94,-18,-127, 
  /* [6][0][][] */ 54,-30,127,81,-35,20,-68,23, 
  /* [7][0][][] */ -47,-27,-127,45,16,116,-34,39, 
  /* [8][0][][] */ 55,-1,-83,-31,-60,127,-72,-83, 
  /* [9][0][][] */ -75,-43,23,-13,57,-36,-127,23, 
  /* [10][0][][] */ 65,21,85,-117,127,13,-19,-53, 
  /* [11][0][][] */ 38,-8,54,-127,1,37,61,25, 
  /* [12][0][][] */ 16,-37,-42,127,-87,-12,9,87, 
  /* [13][0][][] */ 53,-127,33,-46,-83,35,72,-4, 
  /* [14][0][][] */ -39,110,1,44,45,102,-127,-18, 
  /* [15][0][][] */ -23,-22,-17,-102,127,-32,-122,-108, 
  /* [16][0][][] */ 62,-8,-13,64,121,71,-127,-31, 
  /* [17][0][][] */ 127,-55,76,81,47,39,-16,-33, 
  /* [18][0][][] */ 67,9,113,108,127,-108,11,54, 
  /* [19][0][][] */ 47,-52,-94,-14,122,-127,-20,-64, 
  /* [20][0][][] */ -49,4,-81,76,127,-47,-86,24, 
  /* [21][0][][] */ -32,47,-60,-85,127,-8,85,8, 
  /* [22][0][][] */ 48,3,40,-89,-127,-40,118,92, 
  /* [23][0][][] */ -76,-35,-32,-78,24,82,-127,-79, 
  /* [24][0][][] */ -27,-26,55,-65,7,-40,87,127, 
  /* [25][0][][] */ 127,-45,-6,74,72,82,-3,25, 
  /* [26][0][][] */ 40,-33,-48,-95,-103,-127,-8,-105, 
  /* [27][0][][] */ -66,-20,-107,-127,-67,81,-43,-29, 
  /* [28][0][][] */ -3,-127,-51,80,71,-50,27,82, 
  /* [29][0][][] */ -127,-51,45,-34,-38,-71,-115,102, 
  /* [30][0][][] */ 0,-123,21,-54,110,-35,4,127, 
  /* [31][0][][] */ -3,20,1,42,-32,51,-11,127, 
  /* [32][0][][] */ -95,11,-18,-127,42,37,-24,-43, 
  /* [33][0][][] */ 30,50,14,-4,-97,-11,24,127, 
  /* [34][0][][] */ -32,2,-36,-31,127,17,-77,86, 
  /* [35][0][][] */ -59,8,48,-127,-64,-44,37,82, 
  /* [36][0][][] */ -7,-1,-57,16,28,-127,6,69, 
  /* [37][0][][] */ 94,7,-90,-9,-70,80,-63,-127, 
  /* [38][0][][] */ 25,46,13,127,72,72,-111,-46, 
  /* [39][0][][] */ 99,-11,-127,-43,-7,56,64,52, 
  /* [40][0][][] */ 53,-27,-127,-69,-32,48,99,69, 
  /* [41][0][][] */ 59,10,-120,-38,-12,14,-127,102, 
  /* [42][0][][] */ 78,12,7,-10,34,44,-127,-22, 
  /* [43][0][][] */ 44,-56,-25,11,-69,-7,46,127, 
  /* [44][0][][] */ 72,-58,-2,-19,-2,20,-91,127, 
  /* [45][0][][] */ -58,29,53,-10,127,-71,78,49, 
  /* [46][0][][] */ -61,25,54,-113,-1,127,-22,-82, 
  /* [47][0][][] */ 17,-30,59,-127,17,67,-12,83, 
};
const TfArray<4, int> tensor_dimension54 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant54_scale = { 48, { 0.002347797155380249, 0.0027841620612889528, 0.0017617595149204135, 0.0024069144856184721, 0.0014056257205083966, 0.0023152364883571863, 0.0022127572447061539, 0.0027438916731625795, 0.0022297760006040335, 0.0030402299016714096, 0.0025955801829695702, 0.0013848063535988331, 0.0024986898060888052, 0.0017576150130480528, 0.0024371717590838671, 0.0015363279962912202, 0.0015892297960817814, 0.0018635967280715704, 0.0024795823264867067, 0.001990678021684289, 0.0015514804981648922, 0.0022535934112966061, 0.0024347179569303989, 0.0024365019053220749, 0.0028383112512528896, 0.0020249651279300451, 0.0020369761623442173, 0.0025114088784903288, 0.0023852156009525061, 0.0016906324308365583, 0.0012665602844208479, 0.0035366781521588564, 0.0022466338705271482, 0.0025349778588861227, 0.0024992045946419239, 0.0024216463789343834, 0.003174064215272665, 0.0019651360344141722, 0.0014336128951981664, 0.0023820542264729738, 0.002417601877823472, 0.0028349440544843674, 0.002730940468609333, 0.0029479577206075191, 0.0028800072614103556, 0.0022077364847064018, 0.003060819348320365, 0.0029591002967208624, } };
const TfArray<48, int> quant54_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(8) int8_t tensor_data55[8*1*1*48] = { 
  /* [0][0][][] */ -12,-43,37,70,-34,117,-101,70,-56,-69,50,-81,31,16,17,4,-29,-20,105,-80,-11,-61,8,25,-63,6,24,72,3,121,35,59,-75,3,0,34,-28,49,-1,107,-127,24,-5,-37,-89,44,2,16, 
  /* [1][0][][] */ 62,93,21,64,3,-47,-30,23,3,-57,7,-44,-35,-5,8,28,60,-5,93,64,14,121,-23,-80,36,-34,48,127,-30,-48,29,-30,-40,-29,-74,30,-62,12,-26,-6,2,-20,-65,-65,-10,18,87,104, 
  /* [2][0][][] */ 71,17,-44,-24,13,36,-48,67,-32,9,-5,58,-61,-53,88,42,49,-74,32,33,-115,-35,88,-94,71,5,-93,112,127,-21,-51,-35,-107,-22,74,13,-64,-24,-28,-31,16,-81,-63,25,-2,-83,5,4, 
  /* [3][0][][] */ 30,22,23,-20,-53,13,-21,55,6,26,-38,42,22,-38,-20,-2,-59,33,-4,-5,-73,58,42,-6,-127,-2,-10,52,-35,-6,62,5,-53,41,11,8,20,-37,-9,-30,4,79,43,43,-9,39,29,-52, 
  /* [4][0][][] */ -97,43,99,-20,-103,71,12,-120,-63,35,-85,14,-20,19,120,43,0,-86,95,-62,-15,127,15,-74,-33,-72,95,59,46,-19,-36,-8,38,-82,-102,14,98,65,-23,47,-12,66,-69,-118,9,113,-69,-20, 
  /* [5][0][][] */ -127,16,58,-52,41,49,46,-10,-16,8,75,-32,-23,20,25,35,-15,-23,-20,-17,26,54,94,-6,-17,59,19,-40,60,31,-15,87,13,23,-22,48,-111,49,-17,-30,69,-31,-6,-3,-50,27,67,36, 
  /* [6][0][][] */ 82,40,77,-2,-127,-18,-3,-15,-87,-43,-31,-65,58,-18,48,-7,-37,34,31,21,-52,38,59,-22,-72,43,-67,-41,14,15,-51,-19,-5,-12,22,-15,-25,-5,-31,43,-38,110,-27,-69,82,18,-26,121, 
  /* [7][0][][] */ 4,-17,78,59,43,-54,29,54,72,-46,-62,78,-98,4,55,23,4,28,-41,67,-13,58,16,-86,33,11,-23,-31,127,23,-45,-39,78,-5,-45,29,-20,-101,-13,31,-21,-53,-41,-64,11,-17,9,-43, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant55_scale = { 8, { 0.004359981045126915, 0.0048525715246796608, 0.0041460362263023853, 0.0052597005851566792, 0.0035572338383644819, 0.0044706612825393677, 0.0046754274517297745, 0.0059349001385271549, } };
const TfArray<8, int> quant55_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const ALIGN(8) int8_t tensor_data56[48*1*1*8] = { 
  /* [0][0][][] */ 70,10,80,32,27,-127,-8,-23, 
  /* [1][0][][] */ 24,27,-55,127,2,47,-77,-16, 
  /* [2][0][][] */ -127,-76,-3,49,5,100,-80,72, 
  /* [3][0][][] */ -54,-10,113,-127,-91,-31,-5,55, 
  /* [4][0][][] */ -98,-52,102,-127,98,15,65,-91, 
  /* [5][0][][] */ -34,97,-94,-103,-25,-53,59,127, 
  /* [6][0][][] */ -22,-1,51,-76,-127,-24,58,22, 
  /* [7][0][][] */ -101,-22,94,36,54,34,127,-7, 
  /* [8][0][][] */ 5,-76,-33,-91,-35,-127,-38,47, 
  /* [9][0][][] */ -11,64,85,-5,4,127,-10,62, 
  /* [10][0][][] */ 29,-7,87,-34,93,127,-13,6, 
  /* [11][0][][] */ -19,74,53,26,54,-11,-127,68, 
  /* [12][0][][] */ 12,55,-10,-127,94,-37,-38,-58, 
  /* [13][0][][] */ 47,66,19,-72,127,83,-56,12, 
  /* [14][0][][] */ 127,-39,17,-5,-10,-81,15,28, 
  /* [15][0][][] */ -127,-54,-15,-22,87,-8,40,-21, 
  /* [16][0][][] */ -127,24,9,-10,20,123,-57,-65, 
  /* [17][0][][] */ 90,52,14,127,-21,-95,18,-21, 
  /* [18][0][][] */ -77,-26,39,-33,-123,-76,127,35, 
  /* [19][0][][] */ 42,120,13,127,-46,-89,-103,89, 
  /* [20][0][][] */ 90,-80,-123,-6,-114,127,15,-124, 
  /* [21][0][][] */ -34,-66,92,127,-22,95,-33,101, 
  /* [22][0][][] */ -46,-127,59,-14,64,-78,13,-95, 
  /* [23][0][][] */ 101,114,-23,22,-125,40,127,-9, 
  /* [24][0][][] */ 34,-28,15,58,69,127,-16,-49, 
  /* [25][0][][] */ -45,-127,-76,-16,27,11,71,-69, 
  /* [26][0][][] */ -101,-12,26,14,-127,94,-120,53, 
  /* [27][0][][] */ 40,-95,61,127,-94,57,-76,-68, 
  /* [28][0][][] */ 39,20,9,19,52,127,-49,-20, 
  /* [29][0][][] */ -127,1,-47,109,38,-7,-38,-13, 
  /* [30][0][][] */ 56,59,-16,82,-21,127,12,15, 
  /* [31][0][][] */ 127,-73,-64,19,-90,-90,-36,48, 
  /* [32][0][][] */ 69,-9,17,72,72,28,-127,-8, 
  /* [33][0][][] */ 82,-27,16,-127,17,-82,33,66, 
  /* [34][0][][] */ -127,0,59,-11,-49,-34,36,33, 
  /* [35][0][][] */ -93,-11,127,8,123,-68,51,4, 
  /* [36][0][][] */ -16,88,127,1,21,-90,-69,23, 
  /* [37][0][][] */ -126,74,107,-12,-16,117,-93,-127, 
  /* [38][0][][] */ 42,110,-50,-127,44,-45,19,-46, 
  /* [39][0][][] */ 32,-19,-117,59,127,-32,-18,15, 
  /* [40][0][][] */ 27,67,116,-41,0,-79,-127,83, 
  /* [41][0][][] */ -53,29,127,-58,87,-105,7,-36, 
  /* [42][0][][] */ 34,-127,10,-70,20,-127,0,-19, 
  /* [43][0][][] */ -127,6,-118,36,1,37,12,42, 
  /* [44][0][][] */ -38,-89,45,127,-61,75,66,12, 
  /* [45][0][][] */ 73,85,127,0,-58,-40,-118,-41, 
  /* [46][0][][] */ -84,127,81,-99,-22,39,-41,111, 
  /* [47][0][][] */ 43,-40,-32,127,31,115,65,-106, 
};
const TfArray<4, int> tensor_dimension56 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant56_scale = { 48, { 0.0026049457956105471, 0.0031097012106329203, 0.0010223524877801538, 0.002733355388045311, 0.00096035923343151808, 0.0020037977956235409, 0.0037365993484854698, 0.002041093073785305, 0.0021622679196298122, 0.004731734748929739, 0.0035318478476256132, 0.0011695645516738296, 0.0024122963659465313, 0.0034047265071421862, 0.0029453844763338566, 0.0033084901515394449, 0.0021981608588248491, 0.0017336797900497913, 0.0029045897535979748, 0.00195266492664814, 0.0022063017822802067, 0.0017329775728285313, 0.0019629118032753468, 0.0021084893960505724, 0.0027988320216536522, 0.0016870402032509446, 0.0021035496611148119, 0.0011934946523979306, 0.004503544420003891, 0.0026871927548199892, 0.0022058577742427588, 0.0035743424668908119, 0.003511935705319047, 0.001546656247228384, 0.0035445548128336668, 0.001416715094819665, 0.0016099032945930958, 0.0020814796444028616, 0.0026711591053754091, 0.0040211770683526993, 0.0018769721500575542, 0.001448751543648541, 0.0029661576263606548, 0.00082916335668414831, 0.0027097281999886036, 0.0018664976814761758, 0.0026514288038015366, 0.0026291434187442064, } };
const TfArray<48, int> quant56_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(8) int8_t tensor_data57[8*1*1*48] = { 
  /* [0][0][][] */ -29,-17,7,53,-22,-13,-29,-35,-8,-7,0,-42,25,-17,21,11,-63,23,-12,24,-43,6,19,33,-5,-34,53,11,40,21,-50,-56,-19,9,-44,-38,28,-28,14,43,2,-32,-13,-127,-8,-34,5,-10, 
  /* [1][0][][] */ -36,-9,53,14,-45,34,-29,4,-41,-27,0,8,57,-5,-58,-53,-13,-17,-14,57,9,2,-111,127,50,-60,-16,-88,-64,-45,-67,20,40,-4,-8,-78,94,22,-6,11,56,6,-24,42,-91,11,23,-22, 
  /* [2][0][][] */ -15,42,-55,-21,27,10,48,-4,-33,-45,14,55,-31,-31,-18,-11,19,34,13,9,27,66,11,32,40,-33,-27,-26,-43,2,-25,-42,15,33,43,-38,46,53,27,-19,29,66,-19,-127,28,2,24,-30, 
  /* [3][0][][] */ 32,-103,-55,31,-88,-1,-69,29,54,35,51,-11,-34,78,-16,-52,-61,-7,28,90,14,-32,24,8,-68,-61,14,127,93,77,-20,20,-34,-75,-28,65,28,-44,-44,34,-44,-81,29,46,13,-15,-31,-12, 
  /* [4][0][][] */ -52,42,64,118,92,-109,-58,80,54,-7,19,78,15,-34,127,0,-10,81,-82,-12,-15,54,60,-25,34,-18,69,-60,-62,60,24,39,17,70,4,58,10,0,50,-5,36,44,-4,114,-3,96,40,-50, 
  /* [5][0][][] */ 5,-28,-32,57,15,-17,-3,-5,-66,-22,-10,-46,8,-16,-44,-18,14,-50,-28,-40,-41,59,-55,26,15,22,-6,35,22,-6,-55,63,-23,-2,-24,-95,-16,32,53,17,77,127,-35,67,57,-39,24,-15, 
  /* [6][0][][] */ -24,4,87,15,-41,-14,-8,42,62,83,98,2,-75,47,-26,-24,-94,40,15,-116,-12,11,-36,53,-76,127,-10,-49,21,-28,-58,-60,-33,-30,65,-43,-99,-28,20,2,90,-15,-2,88,27,67,-47,62, 
  /* [7][0][][] */ -69,40,-69,24,27,96,23,-37,-84,-38,-34,-44,59,-66,1,5,-46,-100,33,64,87,89,-103,-7,123,-8,-55,-120,46,5,-24,-127,77,65,20,-30,122,-45,-2,9,-16,21,-29,-84,41,40,39,-44, 
};
const TfArray<4, int> tensor_dimension57 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant57_scale = { 8, { 0.005185490008443594, 0.0035167920868843794, 0.0041805044747889042, 0.0028873507399111986, 0.0028820452280342579, 0.0044631622731685638, 0.002468200633302331, 0.0025851246900856495, } };
const TfArray<8, int> quant57_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(8) int8_t tensor_data58[48*1*1*8] = { 
  /* [0][0][][] */ -50,-127,-35,63,-124,118,25,40, 
  /* [1][0][][] */ 57,-17,-122,-8,-14,127,48,57, 
  /* [2][0][][] */ -70,-121,-127,-19,-93,-12,18,28, 
  /* [3][0][][] */ -98,69,109,-31,56,-121,51,127, 
  /* [4][0][][] */ -39,-90,99,-31,-1,0,127,33, 
  /* [5][0][][] */ 23,-8,127,-8,-34,-53,-8,86, 
  /* [6][0][][] */ -38,-31,31,16,-51,-127,-70,-49, 
  /* [7][0][][] */ 26,42,-99,-13,127,78,-9,-28, 
  /* [8][0][][] */ 8,14,-127,7,-25,-16,-100,64, 
  /* [9][0][][] */ -33,29,23,-73,91,-127,-48,2, 
  /* [10][0][][] */ -66,-127,-95,7,-113,-18,-1,21, 
  /* [11][0][][] */ -11,-122,123,127,11,-7,-10,-10, 
  /* [12][0][][] */ -127,55,-13,14,36,-30,-23,-20, 
  /* [13][0][][] */ -29,-11,-8,2,127,-51,20,28, 
  /* [14][0][][] */ 33,70,-127,73,46,-26,-71,-93, 
  /* [15][0][][] */ -67,111,-45,-127,-51,-97,21,46, 
  /* [16][0][][] */ 127,-19,91,-3,22,-7,-20,9, 
  /* [17][0][][] */ -35,19,-127,-60,-45,96,81,55, 
  /* [18][0][][] */ -17,83,-28,-42,-24,78,127,91, 
  /* [19][0][][] */ -22,43,-21,48,-113,66,127,-126, 
  /* [20][0][][] */ 62,3,-27,-25,127,0,-85,-74, 
  /* [21][0][][] */ -39,-11,-15,-105,-16,127,59,21, 
  /* [22][0][][] */ 0,113,74,-38,127,-45,-21,36, 
  /* [23][0][][] */ -49,99,-80,-86,-45,-127,35,-25, 
  /* [24][0][][] */ 19,43,-42,61,31,32,41,127, 
  /* [25][0][][] */ 19,-127,-123,83,-104,36,-6,-62, 
  /* [26][0][][] */ 12,-28,42,51,25,33,-127,-75, 
  /* [27][0][][] */ 87,-92,-25,-73,-40,-127,62,-13, 
  /* [28][0][][] */ -40,89,-50,-127,-34,-73,-95,-36, 
  /* [29][0][][] */ 127,-80,-24,-17,47,33,34,68, 
  /* [30][0][][] */ -30,-11,127,-78,31,-110,36,-17, 
  /* [31][0][][] */ -37,-29,110,-29,127,12,-4,105, 
  /* [32][0][][] */ 71,61,-72,-127,-82,49,11,61, 
  /* [33][0][][] */ 3,-54,127,-29,102,116,42,94, 
  /* [34][0][][] */ -29,-22,72,-117,34,42,-127,-44, 
  /* [35][0][][] */ -18,-14,-36,-127,-30,-88,29,8, 
  /* [36][0][][] */ 37,-42,-52,102,26,127,20,0, 
  /* [37][0][][] */ -46,-44,-23,-10,12,81,127,-45, 
  /* [38][0][][] */ 33,103,-77,-51,-127,94,33,26, 
  /* [39][0][][] */ 75,22,-69,102,127,35,64,-77, 
  /* [40][0][][] */ -66,25,-127,26,-2,92,-57,-10, 
  /* [41][0][][] */ -11,43,-18,89,-27,93,127,72, 
  /* [42][0][][] */ -117,-27,-86,69,-84,-127,49,61, 
  /* [43][0][][] */ -55,-112,115,127,-64,7,56,49, 
  /* [44][0][][] */ 40,-75,-117,83,-81,-63,-2,-127, 
  /* [45][0][][] */ -89,8,-122,94,-4,8,-59,-127, 
  /* [46][0][][] */ -59,-12,107,9,62,-27,18,-127, 
  /* [47][0][][] */ -18,-22,-127,-13,-37,-41,-77,83, 
};
const TfArray<4, int> tensor_dimension58 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant58_scale = { 48, { 0.0019083534134551883, 0.0019616165664047003, 0.0023082289844751358, 0.0017398061463609338, 0.0025569384451955557, 0.0021677128970623016, 0.0034390729852020741, 0.0026001236401498318, 0.0026262036990374327, 0.0018613064894452691, 0.0024053442757576704, 0.0019307913025841117, 0.0039323335513472557, 0.0033327843993902206, 0.0016667814925312996, 0.0018945980118587613, 0.0022711623460054398, 0.0012652006698772311, 0.0021715136244893074, 0.0018086861819028854, 0.0029910707380622625, 0.0029155509546399117, 0.0021685785613954067, 0.0019269585609436035, 0.0021846296731382608, 0.0020820403005927801, 0.0020469976589083672, 0.0025957142934203148, 0.0016305921599268913, 0.0033501924481242895, 0.0018988425144925714, 0.0014240586897358298, 0.0015513279940932989, 0.0023293348494917154, 0.0014704305212944746, 0.0028777059633284807, 0.0023961262777447701, 0.0033727970439940691, 0.0017163441516458988, 0.0022965106181800365, 0.0023013788741081953, 0.0022379430010914803, 0.0023151058703660965, 0.0021767746657133102, 0.0019374489784240723, 0.0021092602983117104, 0.0021857188548892736, 0.002493624109774828, } };
const TfArray<48, int> quant58_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(8) int8_t tensor_data59[8*1*1*48] = { 
  /* [0][0][][] */ 16,31,24,47,31,98,-41,-35,-22,18,-53,-28,-127,-39,-5,-25,-65,-15,-59,-30,20,-78,57,9,-39,35,42,95,6,0,-53,-14,63,0,45,19,-35,-49,76,5,25,5,-15,-5,-4,-12,-41,4, 
  /* [1][0][][] */ 44,-32,63,-52,-46,6,15,1,-3,120,-122,-53,8,-8,48,31,-56,-62,-20,-12,-25,-5,-95,-127,-36,88,-46,-16,4,-12,-4,40,-8,-34,51,-36,37,-55,72,-15,-26,-42,0,93,-25,8,51,30, 
  /* [2][0][][] */ -29,6,52,17,-15,30,-5,7,33,10,-60,-31,-3,69,11,15,59,73,-81,-34,-72,21,-11,15,-34,21,-79,4,-76,-27,-38,108,-62,18,-72,-88,31,70,17,-38,-3,-4,-34,-127,-56,-47,20,34, 
  /* [3][0][][] */ -7,21,36,-7,-3,-62,-38,10,4,-127,-32,38,17,-32,-31,-69,-12,65,15,48,29,39,1,102,-2,-29,54,-21,2,23,3,17,-8,15,33,11,-59,-7,-38,-6,20,-27,-1,19,-5,19,-4,18, 
  /* [4][0][][] */ 14,-58,40,3,-1,-74,20,60,-24,127,-29,-33,50,-43,43,3,11,23,-12,-28,24,12,-22,-33,-33,18,-18,6,15,13,7,40,-31,19,-14,10,27,31,59,-39,-58,-10,-42,-35,-29,-62,52,-4, 
  /* [5][0][][] */ -63,-55,8,44,-7,-83,-85,-71,122,-84,6,-78,1,102,-39,-35,-14,-42,-43,65,-59,28,40,-55,4,93,68,-24,-127,-32,-101,51,40,81,-5,-90,10,0,12,84,-40,-18,71,-97,-91,21,-14,127, 
  /* [6][0][][] */ -53,43,4,-66,-127,-7,62,-48,23,-88,-4,-23,-58,-39,-24,-17,-11,-68,-9,30,-62,-6,-71,-1,46,12,16,10,0,12,105,-48,-13,-31,120,76,10,122,53,-16,20,-58,95,-14,33,26,1,50, 
  /* [7][0][][] */ -40,-5,-17,-73,-41,127,10,-82,-10,70,-8,9,-94,-20,-73,-5,-70,-68,-7,-35,-39,-69,22,-9,1,37,-14,67,-46,36,-67,99,7,20,74,-75,28,-21,-37,-59,75,-47,50,-3,10,-45,4,-22, 
};
const TfArray<4, int> tensor_dimension59 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant59_scale = { 8, { 0.0025433660484850407, 0.0027978990692645311, 0.0035734407138079405, 0.0044661457650363445, 0.0053973393514752388, 0.0024109345395117998, 0.0020156423561275005, 0.0034391027875244617, } };
const TfArray<8, int> quant59_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(8) int8_t tensor_data60[48*1*1*8] = { 
  /* [0][0][][] */ 66,-32,17,-67,-43,51,18,-127, 
  /* [1][0][][] */ 81,-69,58,12,3,-35,-127,20, 
  /* [2][0][][] */ -70,38,-108,-127,-46,-9,-73,-66, 
  /* [3][0][][] */ 34,39,104,-26,37,-37,-127,-49, 
  /* [4][0][][] */ -15,30,40,-115,77,-127,24,-30, 
  /* [5][0][][] */ 30,-9,-69,-127,-28,-42,-86,-50, 
  /* [6][0][][] */ -14,16,28,-27,9,-127,-79,1, 
  /* [7][0][][] */ -118,114,45,127,46,60,-7,93, 
  /* [8][0][][] */ -57,-12,14,-64,-29,-127,-2,-46, 
  /* [9][0][][] */ -11,15,-4,33,127,-66,25,-9, 
  /* [10][0][][] */ 106,-45,-127,79,-19,90,-109,26, 
  /* [11][0][][] */ 127,41,42,62,4,-14,-64,-125, 
  /* [12][0][][] */ -104,20,127,3,-72,-77,59,105, 
  /* [13][0][][] */ 62,78,82,-52,-15,17,-127,-13, 
  /* [14][0][][] */ 89,-54,48,-98,68,-127,9,-33, 
  /* [15][0][][] */ 84,76,29,-8,-127,24,44,-65, 
  /* [16][0][][] */ 26,57,127,65,81,-77,27,-1, 
  /* [17][0][][] */ 127,62,-60,108,96,-29,-65,7, 
  /* [18][0][][] */ 36,-26,17,-105,-33,-127,62,-48, 
  /* [19][0][][] */ -37,-4,127,0,50,-101,55,-4, 
  /* [20][0][][] */ 47,-35,-1,-33,33,-127,7,0, 
  /* [21][0][][] */ 35,-123,62,127,-67,77,-52,2, 
  /* [22][0][][] */ -31,61,-85,23,-127,10,-16,124, 
  /* [23][0][][] */ 68,-37,-54,-26,31,127,-117,-20, 
  /* [24][0][][] */ -116,44,111,-20,127,52,-56,-44, 
  /* [25][0][][] */ -71,5,-127,-9,-45,76,-39,63, 
  /* [26][0][][] */ 127,-58,-3,11,79,68,-54,24, 
  /* [27][0][][] */ -29,-127,-21,105,-45,32,-55,-44, 
  /* [28][0][][] */ -37,62,28,-18,80,-127,92,91, 
  /* [29][0][][] */ -43,-103,-72,-72,15,-127,120,30, 
  /* [30][0][][] */ -29,-39,-127,6,6,125,72,16, 
  /* [31][0][][] */ 11,-35,-20,47,-92,81,127,-68, 
  /* [32][0][][] */ 27,43,-25,-123,11,-43,-127,-85, 
  /* [33][0][][] */ -90,127,28,76,-45,51,19,38, 
  /* [34][0][][] */ 26,-8,30,14,-99,-39,127,14, 
  /* [35][0][][] */ 98,-64,1,10,32,47,-127,-40, 
  /* [36][0][][] */ -43,-6,127,-24,76,58,50,-109, 
  /* [37][0][][] */ -43,-43,124,-25,39,9,127,68, 
  /* [38][0][][] */ -8,45,-16,127,-79,-6,22,61, 
  /* [39][0][][] */ 78,-45,-67,37,-88,-82,-38,-127, 
  /* [40][0][][] */ -7,11,-43,-95,-15,-127,-68,-45, 
  /* [41][0][][] */ -59,12,-29,-32,-45,-119,-127,-82, 
  /* [42][0][][] */ 101,-127,59,17,36,26,-51,-18, 
  /* [43][0][][] */ -51,-32,-43,17,-23,-127,-50,-13, 
  /* [44][0][][] */ 55,-127,24,0,16,36,-27,4, 
  /* [45][0][][] */ -51,-10,127,96,-48,-33,26,98, 
  /* [46][0][][] */ -9,67,127,-27,-110,16,8,6, 
  /* [47][0][][] */ -62,25,-59,-127,-111,2,-51,100, 
};
const TfArray<4, int> tensor_dimension60 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant60_scale = { 48, { 0.0027069512289017439, 0.00089632684830576181, 0.0022387334611266851, 0.0022654912900179625, 0.001929737045429647, 0.0027242971118539572, 0.0029447055421769619, 0.00065988703863695264, 0.0018829511245712638, 0.0033308041747659445, 0.0016013770364224911, 0.001599443145096302, 0.0020173883531242609, 0.0026327562518417835, 0.0018333244370296597, 0.001995783532038331, 0.0013577977661043406, 0.0022716114763170481, 0.0011648890795186162, 0.0020630606450140476, 0.0028182922396808863, 0.0016476248856633902, 0.0017522358102723956, 0.0023258039727807045, 0.001732875476591289, 0.0020162663422524929, 0.0028862378094345331, 0.0015515002887696028, 0.001733836717903614, 0.0021493176463991404, 0.0012179899495095015, 0.002123804297298193, 0.0016631317557767034, 0.0015105021884664893, 0.0024404511786997318, 0.0025421618483960629, 0.0023265224881470203, 0.0024088204372674227, 0.0022907056845724583, 0.0024310587905347347, 0.0024912592489272356, 0.0023513000924140215, 0.0020050443708896637, 0.0038928512949496508, 0.0029615440871566534, 0.0023996043018996716, 0.0021038716658949852, 0.0019429416861385107, } };
const TfArray<48, int> quant60_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(8) int8_t tensor_data61[8*1*1*48] = { 
  /* [0][0][][] */ -76,107,-55,8,-17,-2,31,-127,-29,57,16,92,-7,-32,23,-54,24,-1,37,0,4,55,-29,-93,-91,51,-76,-86,43,27,53,5,70,55,-78,1,-3,-42,-27,63,-1,26,61,-53,84,-14,-11,-39, 
  /* [1][0][][] */ 14,-26,-2,42,-11,-42,10,51,-46,61,-19,-13,-50,-41,-39,-127,117,21,-46,37,-41,-94,-1,-19,55,-40,31,-21,101,7,-12,30,48,-46,23,-10,-31,-58,-70,45,-48,2,-17,-37,-34,48,-31,-25, 
  /* [2][0][][] */ 1,-59,20,60,30,-16,-29,26,-53,41,43,82,-118,-21,-44,-71,46,-96,-43,114,-61,-37,-59,1,30,36,-40,127,55,-65,-37,27,-47,-37,-26,-2,-64,41,15,41,-66,74,39,-90,48,31,49,-46, 
  /* [3][0][][] */ 8,-20,-72,-65,-27,84,45,-3,61,77,-6,-23,8,3,43,-27,70,34,-19,-3,18,95,16,25,-13,-2,54,98,68,-53,-126,-53,-127,34,21,81,34,-22,-112,-24,-34,-82,-49,36,-74,8,61,50, 
  /* [4][0][][] */ 74,-11,91,-27,29,-80,-58,-98,-46,114,54,54,21,11,-86,74,66,0,35,56,-105,-77,-84,-45,108,96,-33,56,127,-18,4,21,14,21,31,38,-78,-3,103,49,-68,72,28,-90,93,-116,21,42, 
  /* [5][0][][] */ -24,-5,-54,-33,-93,42,19,127,-33,-11,76,-23,19,-60,-28,-45,-85,-23,-46,6,14,7,38,-62,43,-17,-37,-5,-29,-38,-50,-12,-2,-70,23,39,22,10,8,-6,4,-6,49,-6,-20,9,-24,-31, 
  /* [6][0][][] */ -44,-25,-80,-85,18,27,-71,50,-34,35,65,-20,-4,29,30,-27,69,-35,-98,88,40,-10,38,75,-56,73,55,-24,95,43,-43,-57,-120,-23,-90,-13,15,114,17,1,-40,-26,-39,-4,-34,-12,23,127, 
  /* [7][0][][] */ 127,-90,-30,-43,-20,-52,43,16,-28,34,13,-47,4,-52,6,68,-14,-19,57,17,-24,-36,26,-62,-42,-1,-47,-11,47,18,-84,62,12,-52,-27,-53,-49,17,13,-20,0,17,58,-58,38,-14,-56,-63, 
};
const TfArray<4, int> tensor_dimension61 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant61_scale = { 8, { 0.0021428856998682022, 0.0030355865601450205, 0.0035665272735059261, 0.0027872133068740368, 0.0028776510152965784, 0.0042688800022006035, 0.0027986648492515087, 0.0033926309552043676, } };
const TfArray<8, int> quant61_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const ALIGN(8) int8_t tensor_data62[48*1*1*8] = { 
  /* [0][0][][] */ -4,-127,-7,119,-40,109,-51,90, 
  /* [1][0][][] */ 55,99,23,2,-15,-127,-7,-51, 
  /* [2][0][][] */ 34,-31,9,-28,74,-19,14,-127, 
  /* [3][0][][] */ 127,-59,-38,-32,32,-122,69,94, 
  /* [4][0][][] */ -127,9,-107,41,-2,49,44,-52, 
  /* [5][0][][] */ 25,-21,-59,127,-82,-106,-66,27, 
  /* [6][0][][] */ -42,-5,127,27,33,-109,-64,24, 
  /* [7][0][][] */ 1,-40,80,-127,20,-52,-23,80, 
  /* [8][0][][] */ 26,98,35,26,127,-59,90,71, 
  /* [9][0][][] */ 48,-21,82,-127,44,-63,1,60, 
  /* [10][0][][] */ 54,22,53,27,99,-18,-127,-95, 
  /* [11][0][][] */ -11,122,23,27,82,-37,53,127, 
  /* [12][0][][] */ -46,53,37,105,65,-81,-127,60, 
  /* [13][0][][] */ -44,-127,-26,20,35,27,-82,-56, 
  /* [14][0][][] */ -20,58,-17,10,21,-127,-24,37, 
  /* [15][0][][] */ -73,-43,-127,8,-85,30,39,94, 
  /* [16][0][][] */ 16,-127,-80,-46,-9,22,25,-86, 
  /* [17][0][][] */ -18,-9,41,-78,11,-16,-127,-89, 
  /* [18][0][][] */ -2,-121,49,42,-45,84,-127,11, 
  /* [19][0][][] */ -104,66,-13,127,49,36,-15,-97, 
  /* [20][0][][] */ -45,120,-57,95,99,-7,78,127, 
  /* [21][0][][] */ 25,97,-47,82,4,-42,-127,55, 
  /* [22][0][][] */ -17,123,-36,-127,40,-87,-3,0, 
  /* [23][0][][] */ 64,-69,127,1,-60,-43,-74,-112, 
  /* [24][0][][] */ 112,-65,-127,-60,-97,-49,43,0, 
  /* [25][0][][] */ 31,13,-52,-51,83,-112,4,-127, 
  /* [26][0][][] */ -53,-45,-121,-97,-9,103,127,-44, 
  /* [27][0][][] */ -114,-18,-27,58,-23,-19,60,-127, 
  /* [28][0][][] */ 89,111,34,-127,-40,62,-79,-38, 
  /* [29][0][][] */ -21,22,10,25,127,-35,-22,13, 
  /* [30][0][][] */ -109,127,-43,-54,68,55,25,-34, 
  /* [31][0][][] */ -73,127,123,-7,84,87,-4,-23, 
  /* [32][0][][] */ 23,-31,-38,15,-55,127,92,-39, 
  /* [33][0][][] */ -12,127,-52,-73,17,-38,37,-28, 
  /* [34][0][][] */ -17,127,34,109,-18,125,54,-72, 
  /* [35][0][][] */ -41,127,21,-34,45,-69,3,-10, 
  /* [36][0][][] */ -17,-105,-89,-127,19,51,16,57, 
  /* [37][0][][] */ 52,-127,103,37,-3,9,-81,4, 
  /* [38][0][][] */ 62,-71,104,-101,-15,27,-124,-127, 
  /* [39][0][][] */ 24,78,55,-41,-45,-102,127,-94, 
  /* [40][0][][] */ 19,-124,127,23,-101,-74,-27,-90, 
  /* [41][0][][] */ -2,-15,-62,-35,-127,127,-100,-61, 
  /* [42][0][][] */ 105,43,124,-18,56,-8,12,-127, 
  /* [43][0][][] */ -20,126,42,98,43,-127,-75,-31, 
  /* [44][0][][] */ -7,95,127,-75,93,74,-52,-4, 
  /* [45][0][][] */ -44,-61,83,127,-5,25,94,73, 
  /* [46][0][][] */ -86,114,-8,-13,127,-23,-24,64, 
  /* [47][0][][] */ -39,97,127,53,8,58,-125,-39, 
};
const TfArray<4, int> tensor_dimension62 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant62_scale = { 48, { 0.0019094839226454496, 0.0023249329533427954, 0.002518742810934782, 0.0020354371517896652, 0.0021263323724269867, 0.00091041717678308487, 0.0019776979461312294, 0.0020149156916886568, 0.002163466764613986, 0.0015130661195144057, 0.0015773430932313204, 0.0024018511176109314, 0.0026197277475148439, 0.001575821079313755, 0.0032214529346674681, 0.0017312730196863413, 0.0026755607686936855, 0.0026986536104232073, 0.0021708044223487377, 0.00089940236648544669, 0.0023262272588908672, 0.002036260673776269, 0.0022386137861758471, 0.0022415413986891508, 0.0011937348172068596, 0.0024701496586203575, 0.0015397298848256469, 0.0024339063093066216, 0.0021755164489150047, 0.0021457015536725521, 0.0017691199900582433, 0.0016967349220067263, 0.0025398654397577047, 0.0031295348890125751, 0.0018869751365855336, 0.0029528050217777491, 0.0014735268196091056, 0.0022478839382529259, 0.0020240815356373787, 0.0019452190026640892, 0.0020706942304968834, 0.0008401254890486598, 0.001217795186676085, 0.00089816527906805277, 0.0017318297177553177, 0.00066581193823367357, 0.0029181037098169327, 0.0021978940349072218, } };
const TfArray<48, int> quant62_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(8) int8_t tensor_data63[8*1*1*48] = { 
  /* [0][0][][] */ 0,63,32,-35,103,-127,-78,41,16,93,-14,8,26,-72,-16,96,0,-1,-9,-34,-23,11,-25,-24,-109,19,-110,11,38,-36,-53,-6,23,37,-29,8,-40,55,8,29,-36,-24,9,-55,-10,-17,-67,-15, 
  /* [1][0][][] */ -29,16,1,38,-19,-31,-46,20,11,-48,-71,23,7,-81,-35,107,68,24,22,105,0,10,71,68,61,39,-123,15,27,-18,52,118,-65,29,30,127,-97,-30,-35,-38,-108,-29,-13,126,47,-76,19,30, 
  /* [2][0][][] */ 2,13,57,56,42,-17,-48,24,4,98,-93,-11,-58,23,-33,59,72,-2,-44,127,16,-8,-54,-35,124,-68,-110,-27,34,-46,1,63,20,-61,49,25,-5,57,23,25,79,-14,14,57,76,43,-23,26, 
  /* [3][0][][] */ 5,2,17,-30,-38,114,88,-109,23,-112,-42,23,41,40,33,-21,-9,23,-11,9,-3,-5,-32,14,58,23,-36,22,-31,-15,5,9,-16,-4,39,-47,-68,-38,-23,7,4,76,-16,60,-31,127,-19,6, 
  /* [4][0][][] */ 17,-53,87,-71,-22,28,-127,11,-5,75,-91,-28,-56,-6,-50,45,107,33,27,71,87,-41,-14,22,71,33,-79,-31,-10,-81,57,22,84,-19,-36,-31,90,-7,14,12,-96,15,-5,-44,75,39,61,-8, 
  /* [5][0][][] */ -3,-14,-27,14,-14,-127,-15,-2,-24,-10,-6,-29,-1,7,6,4,-8,-74,1,2,-18,-25,-61,3,19,-19,109,-20,4,32,-15,28,13,4,-8,-9,1,11,-6,23,-24,-56,31,-30,12,26,24,-10, 
  /* [6][0][][] */ -19,-10,-10,-76,-24,-10,-81,-22,53,-18,5,37,20,-63,8,-58,28,83,71,-57,30,10,-3,20,-75,7,127,-51,-29,36,20,-19,89,20,8,-12,-6,-46,-58,-60,17,59,37,-69,-57,37,-40,-49, 
  /* [7][0][][] */ -70,-3,-68,-31,115,-9,-32,53,51,127,74,89,-6,-67,-69,-44,-35,-61,-50,126,73,53,-37,107,41,-108,-36,-25,47,-95,-39,28,-41,-74,-49,-33,-43,16,30,56,-76,36,-76,8,14,-6,70,5, 
};
const TfArray<4, int> tensor_dimension63 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant63_scale = { 8, { 0.0027745920233428478, 0.0035285737831145525, 0.0041020223870873451, 0.0048500699922442436, 0.0034928207751363516, 0.0092503754422068596, 0.0030196027364581823, 0.0030105677433311939, } };
const TfArray<8, int> quant63_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(8) int8_t tensor_data64[48*1*1*8] = { 
  /* [0][0][][] */ -63,127,-58,41,-19,75,95,10, 
  /* [1][0][][] */ -73,2,-73,-49,59,65,127,24, 
  /* [2][0][][] */ -84,-81,-127,-2,105,15,115,76, 
  /* [3][0][][] */ 127,-93,5,54,-61,-68,-13,-16, 
  /* [4][0][][] */ 2,59,-60,71,-40,127,-55,-30, 
  /* [5][0][][] */ 8,9,79,-12,16,-127,-99,-96, 
  /* [6][0][][] */ 28,68,45,55,26,127,-49,105, 
  /* [7][0][][] */ -127,-29,40,-7,104,-73,22,17, 
  /* [8][0][][] */ 63,-79,70,-13,-34,-35,2,-127, 
  /* [9][0][][] */ -119,127,8,11,56,-76,95,89, 
  /* [10][0][][] */ 12,-126,-97,-116,-86,26,61,127, 
  /* [11][0][][] */ 12,81,49,88,-18,-14,-48,127, 
  /* [12][0][][] */ 63,-79,-127,-68,-44,-38,2,69, 
  /* [13][0][][] */ -127,-98,28,-55,-5,-16,-95,48, 
  /* [14][0][][] */ 69,38,66,-114,-115,85,-70,-127, 
  /* [15][0][][] */ 0,127,48,8,2,32,40,-52, 
  /* [16][0][][] */ -116,13,70,-42,52,127,64,-87, 
  /* [17][0][][] */ -127,-53,58,28,36,27,33,113, 
  /* [18][0][][] */ 1,13,71,-16,-53,-95,-9,127, 
  /* [19][0][][] */ -16,-9,-72,-107,41,-68,-127,-33, 
  /* [20][0][][] */ 64,79,-127,78,-104,78,85,-11, 
  /* [21][0][][] */ 79,73,43,121,-28,89,127,-66, 
  /* [22][0][][] */ 127,2,33,-102,37,-54,3,62, 
  /* [23][0][][] */ 114,-34,90,23,64,-127,75,31, 
  /* [24][0][][] */ -5,-44,-37,-2,68,-8,-127,37, 
  /* [25][0][][] */ 12,3,11,-46,-87,-127,9,80, 
  /* [26][0][][] */ -10,-24,127,22,56,-122,-109,35, 
  /* [27][0][][] */ -127,80,-18,20,3,-47,-31,33, 
  /* [28][0][][] */ -95,-109,-22,-1,-50,31,127,-79, 
  /* [29][0][][] */ -117,-68,-113,124,-16,127,-115,91, 
  /* [30][0][][] */ 33,-68,127,-55,2,9,-49,-24, 
  /* [31][0][][] */ -13,-60,63,-127,110,3,-27,67, 
  /* [32][0][][] */ 56,-18,-127,35,31,-11,-62,6, 
  /* [33][0][][] */ 49,-8,52,106,-61,-37,-127,-69, 
  /* [34][0][][] */ -2,67,127,-3,-105,15,92,47, 
  /* [35][0][][] */ 23,-127,42,-107,-40,-96,-25,-26, 
  /* [36][0][][] */ -92,-127,38,39,-87,103,-75,92, 
  /* [37][0][][] */ -38,60,58,-74,-8,-39,127,35, 
  /* [38][0][][] */ 43,100,127,34,43,-16,32,-18, 
  /* [39][0][][] */ 104,87,-27,-127,-28,-72,-87,-33, 
  /* [40][0][][] */ -73,121,127,23,81,7,-28,15, 
  /* [41][0][][] */ -58,-79,-16,-42,-60,-28,-24,127, 
  /* [42][0][][] */ 45,-63,4,86,2,76,-65,-127, 
  /* [43][0][][] */ 24,-23,-127,34,-52,94,-24,-55, 
  /* [44][0][][] */ -36,41,41,127,-51,-5,55,-40, 
  /* [45][0][][] */ -7,-45,-46,127,-22,82,-5,33, 
  /* [46][0][][] */ 51,-67,127,-73,6,12,-45,-34, 
  /* [47][0][][] */ -50,-18,63,-37,2,-127,0,53, 
};
const TfArray<4, int> tensor_dimension64 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant64_scale = { 48, { 0.0015667403349652886, 0.0018947514472529292, 0.0016735965618863702, 0.0026717782020568848, 0.0012540984898805618, 0.0016014146385714412, 0.0016870367107912898, 0.0021249405108392239, 0.0017634521936997771, 0.0016997657949104905, 0.0010871087433770299, 0.0018261068034917116, 0.0018264836398884654, 0.0023356024175882339, 0.0020964033901691437, 0.0025767430197447538, 0.0017118584364652634, 0.0023302712943404913, 0.0018084619659930468, 0.0021921875886619091, 0.0017412649467587471, 0.0018659665947780013, 0.0024028110783547163, 0.0011738209286704659, 0.0032657729461789131, 0.0018497594865038991, 0.0013590076705440879, 0.0029280423186719418, 0.0015481524169445038, 0.0013393792323768139, 0.0018351791659370065, 0.0011087536113336682, 0.0030068191699683666, 0.0020898175425827503, 0.0020144928712397814, 0.0018932317616418004, 0.0019439563620835543, 0.0015393103240057826, 0.0012513474794104695, 0.0015000210842117667, 0.0011955866357311606, 0.0021439299453049898, 0.0021456158719956875, 0.0018912311643362045, 0.0019800858572125435, 0.0021889987401664257, 0.0023748227395117283, 0.0020440707448869944, } };
const TfArray<48, int> quant64_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(8) int8_t tensor_data65[8*1*1*48] = { 
  /* [0][0][][] */ -33,-28,12,20,-127,-6,11,-60,23,-90,-50,-27,18,-53,34,15,5,6,-20,-8,-45,13,23,71,-5,37,47,-64,-18,-17,-81,28,-36,42,65,50,-1,-5,102,-8,-104,-30,-2,2,6,18,85,-30, 
  /* [1][0][][] */ 83,14,25,-23,-4,-19,-48,-40,-74,56,45,-3,-29,-70,14,90,-14,18,-12,-13,-37,8,-28,-40,37,-24,-53,92,-65,36,95,-49,-1,-7,-26,-38,-16,14,84,-62,127,-4,10,-4,-57,66,-112,6, 
  /* [2][0][][] */ 41,-21,-53,-5,-127,71,-38,-18,43,9,32,-28,-42,31,-23,-49,-82,64,3,-63,59,-6,-53,3,-29,-120,27,8,-10,19,-44,60,56,-3,-63,32,29,24,83,17,69,43,-3,50,31,0,58,49, 
  /* [3][0][][] */ -16,-13,10,-14,95,5,-15,11,61,35,127,64,7,-19,-12,59,25,-7,82,-26,-15,89,58,0,7,-54,-68,-16,-38,-18,-20,-114,-19,-4,-27,-98,-4,-31,-6,-31,35,51,-69,-15,19,-74,6,84, 
  /* [4][0][][] */ 77,49,123,-42,-111,40,-68,43,-8,73,-11,-46,-37,-72,-17,-29,-63,17,-28,-24,43,9,-25,43,67,-28,116,13,6,-111,29,87,-50,-18,29,3,-32,-28,80,-118,127,-39,-18,26,18,20,-39,-3, 
  /* [5][0][][] */ 63,-60,-21,37,0,-15,-3,-55,-37,-43,-15,-27,-47,9,70,19,32,-34,20,-22,-39,35,-53,-75,7,-60,2,34,4,-22,-26,3,40,63,-47,27,42,-2,28,75,127,56,-60,64,-64,9,16,23, 
  /* [6][0][][] */ 9,-36,8,76,9,-78,80,8,-14,58,-56,-33,-19,-31,74,15,57,-24,-12,-40,-51,127,13,65,37,30,-13,-27,99,47,105,-81,43,16,2,68,-97,107,8,27,-10,-68,26,18,-74,-66,-21,11, 
  /* [7][0][][] */ -53,-24,-24,-26,-7,-57,26,9,-100,12,-78,37,27,92,-41,10,30,27,-35,-86,108,-55,-75,14,8,-32,-97,-11,-29,46,32,123,-45,-31,67,3,127,-55,-93,80,-57,49,79,77,74,-71,-32,15, 
};
const TfArray<4, int> tensor_dimension65 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant65_scale = { 8, { 0.0042083184234797955, 0.0038121656980365515, 0.0045261555351316929, 0.0037632621824741364, 0.0038317975122481585, 0.005013488233089447, 0.0021335887722671032, 0.0024617998860776424, } };
const TfArray<8, int> quant65_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(8) int8_t tensor_data66[48*1*1*8] = { 
  /* [0][0][][] */ 36,3,48,-82,-30,-13,-96,-127, 
  /* [1][0][][] */ -87,4,119,-127,-42,-103,83,7, 
  /* [2][0][][] */ -56,6,-116,-48,5,106,127,-76, 
  /* [3][0][][] */ 121,-55,-127,-95,-51,56,13,105, 
  /* [4][0][][] */ 57,-71,38,67,63,37,-127,-18, 
  /* [5][0][][] */ -127,-36,-31,99,11,-62,16,26, 
  /* [6][0][][] */ 57,35,127,21,38,71,23,126, 
  /* [7][0][][] */ 9,-46,-111,92,127,76,-46,-113, 
  /* [8][0][][] */ -65,-37,-127,83,-3,17,13,-73, 
  /* [9][0][][] */ 56,48,37,110,-23,-50,-96,127, 
  /* [10][0][][] */ -77,-51,-40,-22,20,-96,127,12, 
  /* [11][0][][] */ 119,46,-59,-27,-32,-16,127,107, 
  /* [12][0][][] */ -65,127,116,21,48,107,10,-8, 
  /* [13][0][][] */ -2,48,12,-96,74,-21,127,15, 
  /* [14][0][][] */ -1,-60,51,-9,127,-35,21,100, 
  /* [15][0][][] */ -37,56,127,41,42,-43,-60,8, 
  /* [16][0][][] */ 1,81,-108,84,-127,-44,38,-103, 
  /* [17][0][][] */ -50,11,127,-7,31,-24,-18,65, 
  /* [18][0][][] */ 42,-36,-127,32,25,77,-81,-90, 
  /* [19][0][][] */ 23,91,85,-127,48,-78,45,69, 
  /* [20][0][][] */ 37,-7,10,20,-4,-31,-127,54, 
  /* [21][0][][] */ 43,-109,-34,89,-127,-55,-65,77, 
  /* [22][0][][] */ 62,55,90,-127,-101,-83,41,-12, 
  /* [23][0][][] */ -65,-9,71,21,-98,86,127,-45, 
  /* [24][0][][] */ -103,-127,-79,57,12,20,-91,34, 
  /* [25][0][][] */ -93,77,39,-109,-24,-127,121,-121, 
  /* [26][0][][] */ 85,-110,127,26,-18,-33,-31,-67, 
  /* [27][0][][] */ -127,-80,-63,-41,37,-1,-105,32, 
  /* [28][0][][] */ -127,-7,74,46,4,30,67,-86, 
  /* [29][0][][] */ 10,19,52,-127,-27,-15,37,34, 
  /* [30][0][][] */ -127,85,66,5,81,-17,14,-19, 
  /* [31][0][][] */ -100,-52,-127,-71,-28,98,5,102, 
  /* [32][0][][] */ 7,-28,-56,-71,1,-38,-9,-127, 
  /* [33][0][][] */ 58,81,127,64,-2,-69,-67,-69, 
  /* [34][0][][] */ 74,79,-75,-34,2,-91,-56,127, 
  /* [35][0][][] */ 0,12,-57,127,-15,-1,40,-21, 
  /* [36][0][][] */ -127,-27,-21,-64,21,22,-3,-80, 
  /* [37][0][][] */ -26,-16,-86,120,-127,-11,-17,26, 
  /* [38][0][][] */ 98,-127,-118,-113,-1,90,75,115, 
  /* [39][0][][] */ -69,-80,-127,-52,-18,64,54,118, 
  /* [40][0][][] */ -114,127,127,-5,81,36,52,38, 
  /* [41][0][][] */ -93,-8,-9,26,-11,-41,-58,-127, 
  /* [42][0][][] */ -114,-56,33,-85,52,-43,-127,-87, 
  /* [43][0][][] */ 63,-44,-17,42,-24,127,-39,-64, 
  /* [44][0][][] */ 29,-77,62,17,99,-127,-70,94, 
  /* [45][0][][] */ 42,75,-38,-37,-36,12,8,-127, 
  /* [46][0][][] */ 40,42,127,46,-13,-45,-76,-73, 
  /* [47][0][][] */ 39,-84,74,-127,122,-20,-47,-42, 
};
const TfArray<4, int> tensor_dimension66 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant66_scale = { 48, { 0.0019380977610126138, 0.0016317925183102489, 0.0013054243754595518, 0.0015680227661505342, 0.0023118054959923029, 0.0027318517677485943, 0.0017441845266148448, 0.0016012924024835229, 0.0021361673716455698, 0.0014475359348580241, 0.0024501660373061895, 0.0019793517421931028, 0.0019019073806703091, 0.0027871550992131233, 0.0024727294221520424, 0.0017429144354537129, 0.00082917010877281427, 0.0011364785023033619, 0.0017504002898931503, 0.0016058061737567186, 0.002315970603376627, 0.0015131892869248986, 0.0017876570345833898, 0.0020396437030285597, 0.002278635511174798, 0.0017431011656299233, 0.0014950437471270561, 0.0014681159518659115, 0.0021800140384584665, 0.0031583011150360107, 0.0023741072509437799, 0.001071578124538064, 0.0017255030106753111, 0.0012001292780041695, 0.0017554372316226363, 0.003215947886928916, 0.0023219406139105558, 0.0022711309138685465, 0.0015204112278297544, 0.0015598608879372478, 0.0013371590757742524, 0.0027279674541205168, 0.0021016721148043871, 0.0019895690493285656, 0.0014350309502333403, 0.0018689600983634591, 0.0015799049288034439, 0.0014913550112396479, } };
const TfArray<48, int> quant66_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(8) int8_t tensor_data67[8*1*1*48] = { 
  /* [0][0][][] */ 51,-124,-21,53,15,-38,-4,-20,19,-9,-22,-35,-71,-6,16,61,2,-77,38,-37,22,10,-26,16,-93,-41,15,-127,-18,37,13,3,-16,81,44,21,-29,4,21,50,-32,-35,-27,32,28,0,58,40, 
  /* [1][0][][] */ 10,10,44,24,-6,11,12,14,-18,127,-45,-11,56,41,-56,-81,-38,87,0,106,29,72,74,22,61,25,-67,-85,-39,-59,-53,6,17,-48,46,-18,-8,-42,-4,-45,57,51,-40,45,-73,-30,-70,-61, 
  /* [2][0][][] */ 0,127,17,49,7,31,43,-40,3,43,-39,-11,51,-2,-3,-43,19,84,-33,37,2,-26,95,39,-70,4,-33,-42,-5,-8,-29,-53,-44,-49,-13,18,20,15,-1,-18,38,26,11,13,48,33,-58,-2, 
  /* [3][0][][] */ -100,-81,8,-54,63,91,68,104,46,57,32,39,3,-67,-29,-56,-80,125,-49,78,18,-47,-127,-7,90,8,-4,-39,8,-42,-36,-3,38,-64,-64,-58,-114,-62,-23,-24,47,5,-46,-49,30,68,-73,-68, 
  /* [4][0][][] */ -127,-79,37,47,40,11,14,41,-33,-65,-30,-47,57,92,51,-104,103,50,63,75,-87,70,-42,-65,-7,7,-52,14,-6,-49,-88,-41,16,-90,-11,37,12,83,-44,-83,69,20,23,8,78,5,-91,62, 
  /* [5][0][][] */ 9,-127,-5,69,18,-26,20,-2,-93,40,-16,26,60,-33,6,-46,62,39,110,50,16,68,8,38,44,-52,5,-48,15,26,-72,87,-46,13,1,-6,-16,12,-22,16,-3,-9,-39,41,-34,33,28,-9, 
  /* [6][0][][] */ -68,8,-53,40,-68,-53,15,-6,-37,-76,45,-5,-19,64,28,74,-15,-115,-14,-32,-122,26,-26,-19,-48,29,57,-127,42,13,2,42,-19,32,-16,-28,-2,-2,-7,48,-63,-27,-42,13,-5,2,64,8, 
  /* [7][0][][] */ -115,-14,-59,87,25,37,98,-109,70,59,13,-95,10,-3,107,37,88,18,-3,65,20,-57,54,-45,75,-62,-2,1,-45,6,58,35,-127,36,72,40,-65,17,37,-9,40,-19,-11,63,121,107,51,1, 
};
const TfArray<4, int> tensor_dimension67 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant67_scale = { 8, { 0.005941467359662056, 0.0034853138495236635, 0.0078889150172472, 0.0040555321611464024, 0.0041966992430388927, 0.0060039553791284561, 0.0041100154630839825, 0.0037763239815831184, } };
const TfArray<8, int> quant67_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const ALIGN(8) int8_t tensor_data68[48*1*1*8] = { 
  /* [0][0][][] */ -127,26,101,8,59,-113,32,121, 
  /* [1][0][][] */ 61,53,62,127,3,-8,108,23, 
  /* [2][0][][] */ 36,-29,32,-120,-53,51,-51,-127, 
  /* [3][0][][] */ 73,14,127,7,-95,-97,-11,81, 
  /* [4][0][][] */ 127,62,101,27,-43,-8,11,-95, 
  /* [5][0][][] */ 92,85,127,79,-83,-127,-21,20, 
  /* [6][0][][] */ -8,127,-43,98,-16,13,80,-9, 
  /* [7][0][][] */ 3,21,112,-9,44,-84,127,-9, 
  /* [8][0][][] */ 127,-38,11,7,-40,-114,0,45, 
  /* [9][0][][] */ 5,18,30,9,-48,-10,-20,127, 
  /* [10][0][][] */ -15,75,-86,-127,117,26,-53,-73, 
  /* [11][0][][] */ -60,-57,42,16,-15,-56,127,57, 
  /* [12][0][][] */ 61,54,94,91,56,20,-26,-127, 
  /* [13][0][][] */ -8,127,-34,-98,23,-60,18,-22, 
  /* [14][0][][] */ 127,10,91,-5,22,-84,27,-15, 
  /* [15][0][][] */ -127,19,-17,24,47,81,-3,-11, 
  /* [16][0][][] */ 2,31,-30,-127,33,-30,9,115, 
  /* [17][0][][] */ -57,93,-127,56,122,-53,-33,-56, 
  /* [18][0][][] */ -127,-71,-96,-25,44,2,-12,91, 
  /* [19][0][][] */ -28,127,-14,-90,-6,-37,42,7, 
  /* [20][0][][] */ 127,24,85,54,-94,-53,-2,1, 
  /* [21][0][][] */ 29,100,111,65,-96,-50,127,-76, 
  /* [22][0][][] */ -68,-33,-4,-11,127,18,-125,-20, 
  /* [23][0][][] */ -13,-22,-49,83,-44,-127,-33,-2, 
  /* [24][0][][] */ -127,96,108,88,42,21,-64,-17, 
  /* [25][0][][] */ -81,-100,-44,-20,103,-17,-127,72, 
  /* [26][0][][] */ 31,84,3,-127,-62,106,26,-75, 
  /* [27][0][][] */ -50,6,-48,-70,39,22,127,55, 
  /* [28][0][][] */ -112,54,-43,-99,-86,98,127,127, 
  /* [29][0][][] */ 16,-127,24,108,-11,52,-26,9, 
  /* [30][0][][] */ 61,89,-109,9,-45,124,73,-127, 
  /* [31][0][][] */ 8,18,57,-77,49,127,38,3, 
  /* [32][0][][] */ 14,20,-3,53,36,4,-127,27, 
  /* [33][0][][] */ 97,127,38,17,39,-27,76,-11, 
  /* [34][0][][] */ -63,11,22,-19,-127,24,19,-46, 
  /* [35][0][][] */ 121,-127,-126,-71,-75,-14,60,13, 
  /* [36][0][][] */ -44,60,20,34,49,1,22,-127, 
  /* [37][0][][] */ 68,-5,-16,28,127,-29,-8,48, 
  /* [38][0][][] */ 74,64,-37,-27,13,66,-127,-55, 
  /* [39][0][][] */ 1,-17,-30,-16,49,12,23,-127, 
  /* [40][0][][] */ 77,-54,-25,96,36,93,-97,-127, 
  /* [41][0][][] */ -33,-5,-9,118,-99,127,47,-21, 
  /* [42][0][][] */ -2,22,104,-7,43,-89,127,-7, 
  /* [43][0][][] */ 40,-6,-53,98,-8,53,127,-41, 
  /* [44][0][][] */ -53,97,127,-69,87,54,67,-34, 
  /* [45][0][][] */ -6,-127,39,-83,13,-28,-70,9, 
  /* [46][0][][] */ -3,-76,-34,-28,43,62,-127,-44, 
  /* [47][0][][] */ -7,-31,-97,9,-36,99,-127,10, 
};
const TfArray<4, int> tensor_dimension68 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant68_scale = { 48, { 0.0013336049159988761, 0.0022884542122483253, 0.0020328855607658625, 0.0012879610294476151, 0.0021768512669950724, 0.0011947154998779297, 0.0017356902826577425, 0.0021451988723129034, 0.0012896734988316894, 0.0024853530339896679, 0.0017771485727280378, 0.0024674185551702976, 0.0010853325948119164, 0.0021859135013073683, 0.0018782911356538534, 0.0016000976320356131, 0.0022020393516868353, 0.0017153427470475435, 0.0021069464273750782, 0.0022208644077181816, 0.0017160223796963692, 0.001442232052795589, 0.00095394061645492911, 0.0017771500861272216, 0.00088276452152058482, 0.0022218194790184498, 0.001951159443706274, 0.0017696035793051124, 0.0014304399956017733, 0.0021442836150527, 0.0012344681890681386, 0.0017478874651715159, 0.0028142218943685293, 0.0027494977694004774, 0.0034418466966599226, 0.00081317353760823607, 0.0018645381787791848, 0.0031519448384642601, 0.0023640741128474474, 0.002473537577316165, 0.0015355872455984354, 0.0015627649845555425, 0.0020908513106405735, 0.0016601027455180883, 0.00091982475714758039, 0.0018473985837772489, 0.0027976017445325851, 0.0020649433135986328, } };
const TfArray<48, int> quant68_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(8) int8_t tensor_data69[8*1*1*48] = { 
  /* [0][0][][] */ -43,29,-31,-29,30,-10,19,-85,-20,40,-4,-127,-8,-65,-25,51,-5,-14,-20,1,22,-34,-38,-79,108,33,-4,7,-27,42,2,74,95,9,-32,-70,-17,16,89,-21,-28,4,99,39,-6,-25,-14,78, 
  /* [1][0][][] */ 33,-1,-21,53,-38,1,-8,-53,20,37,-16,-28,6,-7,7,-36,-27,-11,24,9,9,4,14,127,12,13,14,38,6,9,13,-114,17,-28,25,26,4,-10,26,-22,7,-25,56,-13,59,8,9,35, 
  /* [2][0][][] */ 16,-41,3,-40,-127,27,10,-28,-63,-30,0,45,-6,-6,-28,96,-8,6,68,-17,-29,-18,8,-18,81,28,-10,-8,-6,8,19,15,-27,-52,34,-63,21,-42,-32,17,-27,-8,26,1,8,8,13,22, 
  /* [3][0][][] */ -29,-94,-27,18,-1,-8,-52,-32,12,-7,-26,-36,-20,66,5,-36,53,0,16,3,5,22,-8,-69,-89,3,-5,-57,15,-28,4,53,11,-9,44,24,-50,-66,32,4,38,4,46,-22,20,127,-11,39, 
  /* [4][0][][] */ -7,-30,-1,21,94,-4,14,18,-39,61,-4,2,-10,64,-4,18,13,-10,-67,-13,34,5,5,-2,127,-49,-7,19,-6,-41,7,14,4,25,81,-50,19,-118,3,-41,2,1,-21,-5,-20,-38,54,-27, 
  /* [5][0][][] */ 18,-1,19,15,-20,-46,2,9,-8,127,-10,22,7,17,14,30,40,-6,25,22,5,-7,-27,-16,21,19,-1,-2,27,-1,18,21,11,-13,-15,-1,-53,23,-30,-75,-3,-9,-2,-11,1,8,3,-5, 
  /* [6][0][][] */ 2,-22,-14,7,43,6,-70,34,-4,-31,9,12,12,-55,15,-2,-25,-25,-21,33,8,16,-14,-15,59,16,15,23,6,59,5,21,11,-41,21,-24,19,-29,-7,4,-5,0,-26,-8,-32,127,3,-17, 
  /* [7][0][][] */ 49,-61,32,-45,-18,21,-34,16,6,-75,-9,-61,53,127,-11,23,37,39,-29,-30,-46,-38,-52,83,124,44,36,6,-62,-74,5,-66,32,-18,-56,-41,109,86,65,24,50,-10,-45,-59,-21,49,-10,-29, 
};
const TfArray<4, int> tensor_dimension69 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant69_scale = { 8, { 0.0043901768513023853, 0.0063390149734914303, 0.0058535989373922348, 0.0052521377801895142, 0.0046737696975469589, 0.0069012199528515339, 0.0072245919145643711, 0.0037454671692103148, } };
const TfArray<8, int> quant69_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(8) int8_t tensor_data70[48*1*1*8] = { 
  /* [0][0][][] */ -95,-87,-127,58,-8,80,35,2, 
  /* [1][0][][] */ 35,64,-101,-85,70,22,-127,-52, 
  /* [2][0][][] */ 10,10,-127,-11,49,-31,-26,-68, 
  /* [3][0][][] */ -127,-43,62,-1,33,41,-3,-126, 
  /* [4][0][][] */ -99,-54,38,57,3,-104,-36,-127, 
  /* [5][0][][] */ 46,-19,114,10,-32,-30,-9,-127, 
  /* [6][0][][] */ 45,62,127,40,-77,51,-18,-101, 
  /* [7][0][][] */ 49,-11,-51,17,-79,13,-60,127, 
  /* [8][0][][] */ -127,61,-30,99,-92,-84,-43,-124, 
  /* [9][0][][] */ -83,12,46,-127,-4,27,26,-56, 
  /* [10][0][][] */ -27,21,52,31,-14,-127,37,53, 
  /* [11][0][][] */ -30,-85,57,127,-117,-72,36,27, 
  /* [12][0][][] */ -94,-40,-80,8,-50,27,81,127, 
  /* [13][0][][] */ 36,46,28,127,-13,-55,8,71, 
  /* [14][0][][] */ 75,48,-55,-24,118,-72,-77,-127, 
  /* [15][0][][] */ 89,-9,-57,127,8,-6,-25,62, 
  /* [16][0][][] */ -127,31,-31,-21,-36,-37,17,54, 
  /* [17][0][][] */ 70,127,34,41,-40,-2,-86,-51, 
  /* [18][0][][] */ -84,-99,92,-16,74,15,-127,9, 
  /* [19][0][][] */ -19,-86,127,-43,48,11,107,106, 
  /* [20][0][][] */ 8,-127,-62,-50,5,6,42,-61, 
  /* [21][0][][] */ 80,60,-124,4,101,-127,81,70, 
  /* [22][0][][] */ 94,118,43,64,-97,53,-127,-86, 
  /* [23][0][][] */ 108,-24,34,-47,-35,-52,-71,-127, 
  /* [24][0][][] */ -33,40,127,79,-68,-10,-7,-44, 
  /* [25][0][][] */ -69,-56,3,46,127,-51,-66,92, 
  /* [26][0][][] */ -1,-39,-127,75,19,58,119,32, 
  /* [27][0][][] */ 74,-71,127,37,-28,14,-67,-102, 
  /* [28][0][][] */ -65,25,111,9,-9,-41,-127,6, 
  /* [29][0][][] */ -100,-115,84,58,-57,-80,-51,-127, 
  /* [30][0][][] */ -36,-32,42,97,53,29,-127,2, 
  /* [31][0][][] */ 21,-64,-127,-16,-34,1,79,16, 
  /* [32][0][][] */ -57,-91,-38,125,66,17,-83,127, 
  /* [33][0][][] */ -24,-49,-127,-42,65,-19,43,18, 
  /* [34][0][][] */ 78,-10,-72,-72,3,-127,90,95, 
  /* [35][0][][] */ 127,43,-37,59,-19,32,64,125, 
  /* [36][0][][] */ 50,-37,-78,-1,121,-127,-11,-119, 
  /* [37][0][][] */ -32,-59,-53,-102,91,10,127,64, 
  /* [38][0][][] */ 15,-7,-48,-22,34,127,-41,8, 
  /* [39][0][][] */ 78,35,-20,-16,-118,54,127,-7, 
  /* [40][0][][] */ -16,16,127,-14,-57,54,-69,-49, 
  /* [41][0][][] */ -45,-52,-53,-127,-51,-28,-12,-108, 
  /* [42][0][][] */ -33,127,-41,-1,-8,71,58,-42, 
  /* [43][0][][] */ 30,-41,120,20,-55,-61,-127,-69, 
  /* [44][0][][] */ 2,13,-21,-17,-9,127,12,36, 
  /* [45][0][][] */ -25,37,127,55,5,-38,-56,-9, 
  /* [46][0][][] */ 38,26,-127,-3,94,-76,70,31, 
  /* [47][0][][] */ -127,-26,60,-48,50,107,-20,36, 
};
const TfArray<4, int> tensor_dimension70 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant70_scale = { 48, { 0.0016611885512247682, 0.0010006291558966041, 0.0013346672058105469, 0.0031045733485370874, 0.00169535749591887, 0.0018059842986986041, 0.0024309726431965828, 0.0033926998730748892, 0.001761226449161768, 0.0032773041166365147, 0.003234317060559988, 0.0012706340057775378, 0.00095401762519031763, 0.0034143435768783092, 0.0025462259072810411, 0.0031634680926799774, 0.0031121538486331701, 0.00067024712916463614, 0.0021546962670981884, 0.0015462167793884873, 0.0011183599708601832, 0.0022195081692188978, 0.0019272202625870705, 0.00218400196172297, 0.000950056710280478, 0.002355785109102726, 0.002389922272413969, 0.00095741928089410067, 0.0010675217490643263, 0.0022898325696587563, 0.0029776780866086483, 0.002324261236935854, 0.0025297687388956547, 0.0031284333672374487, 0.0015498083084821701, 0.001821742276661098, 0.0026608665939420462, 0.0018259786302223802, 0.0039041668642312288, 0.0030218863394111395, 0.0032993904314935207, 0.0019115031464025378, 0.0022035229485481977, 0.0010848445817828178, 0.0020451962482184172, 0.001457691309042275, 0.002918030833825469, 0.0028794603422284126, } };
const TfArray<48, int> quant70_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(8) int8_t tensor_data71[8*1*1*48] = { 
  /* [0][0][][] */ 127,46,18,-32,37,-56,21,-38,-41,113,19,-61,-48,-20,15,-96,43,82,17,-26,56,28,29,56,21,-26,-5,-96,46,-65,-7,18,29,-30,33,86,-8,-7,-21,-34,-1,7,-64,-41,7,7,7,64, 
  /* [1][0][][] */ -14,85,16,-1,-55,47,-80,-5,69,-13,-56,-35,34,17,-1,-8,-21,127,40,14,-8,35,63,-12,-98,-14,-12,103,7,-43,-2,2,-22,-58,-47,14,19,5,-6,-22,28,47,74,60,10,-9,7,0, 
  /* [2][0][][] */ 45,-85,76,-7,11,-14,-18,14,-106,-32,13,25,-36,13,-31,28,44,13,-32,44,43,-40,9,20,-54,19,-20,-25,-51,11,-8,26,25,-46,-8,-20,33,-14,17,-6,44,19,-38,-47,-19,-127,35,-35, 
  /* [3][0][][] */ -28,-76,-19,3,-1,11,-29,25,-2,127,50,73,-4,45,-5,-91,22,28,30,0,21,15,16,-4,-42,4,17,7,19,54,21,-2,12,-16,19,44,-14,-20,12,25,-12,37,9,9,-15,-56,0,8, 
  /* [4][0][][] */ 21,101,-15,4,-6,-24,21,16,-81,53,12,-67,32,-36,64,-6,49,14,-33,40,-72,24,-64,7,56,127,16,-20,-2,-47,-2,-38,29,53,11,24,-26,27,13,47,15,69,-32,-28,28,56,-7,-5, 
  /* [5][0][][] */ -58,22,-21,18,-3,-45,-13,-24,27,-43,-1,-40,38,-16,6,24,4,-3,-10,-37,15,-44,21,-35,23,40,36,-75,36,-17,13,-72,33,-17,25,56,8,45,-67,12,46,60,12,-18,127,53,63,-97, 
  /* [6][0][][] */ -41,-127,-3,-2,31,-29,-17,-39,-18,-48,-7,19,52,-8,10,26,-3,-75,24,8,8,20,-25,-21,-80,-15,41,18,91,-14,-42,-52,-41,31,-29,10,-14,27,8,-12,-31,22,-4,37,19,48,-19,45, 
  /* [7][0][][] */ -25,-55,85,-22,71,-4,37,-64,104,0,-34,24,55,56,-47,-18,-14,-85,-107,37,27,-4,-44,-93,-54,70,-9,22,-89,-71,6,32,43,-36,-97,104,44,37,-31,-18,-13,57,-127,-76,38,-96,-19,53, 
};
const TfArray<4, int> tensor_dimension71 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant71_scale = { 8, { 0.0027735689654946327, 0.0033480608835816383, 0.0048927897587418556, 0.0038173629436641932, 0.0025933561846613884, 0.0034756571985781193, 0.0043172752484679222, 0.002213427796959877, } };
const TfArray<8, int> quant71_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(8) int8_t tensor_data72[48*1*1*8] = { 
  /* [0][0][][] */ -92,-113,47,47,1,-127,-40,-86, 
  /* [1][0][][] */ 34,-50,-110,37,58,-127,7,-30, 
  /* [2][0][][] */ -5,29,-17,26,-109,1,127,30, 
  /* [3][0][][] */ 49,127,-47,-58,58,-2,25,65, 
  /* [4][0][][] */ 26,59,16,-18,-15,26,90,-127, 
  /* [5][0][][] */ -34,-53,33,-127,31,32,-94,28, 
  /* [6][0][][] */ 2,98,120,63,-39,127,76,-2, 
  /* [7][0][][] */ 65,-19,-45,70,-69,-127,119,3, 
  /* [8][0][][] */ -25,44,127,40,-123,105,76,123, 
  /* [9][0][][] */ 20,-3,-22,12,43,127,23,-45, 
  /* [10][0][][] */ -127,85,63,-79,90,1,-79,-111, 
  /* [11][0][][] */ 127,-29,115,-100,17,-35,4,83, 
  /* [12][0][][] */ 121,-78,41,-127,122,66,36,-40, 
  /* [13][0][][] */ -22,80,-104,-87,44,-53,119,127, 
  /* [14][0][][] */ -3,-84,-19,3,12,-29,1,127, 
  /* [15][0][][] */ -35,-23,-16,-3,-1,127,65,58, 
  /* [16][0][][] */ 118,6,-80,-127,85,-23,50,85, 
  /* [17][0][][] */ 64,114,127,69,-67,58,-57,-56, 
  /* [18][0][][] */ -53,127,-4,35,55,55,-64,-40, 
  /* [19][0][][] */ 50,11,-70,12,52,127,34,-91, 
  /* [20][0][][] */ -23,29,-127,-9,3,11,108,15, 
  /* [21][0][][] */ -112,-50,107,-31,-24,-78,32,127, 
  /* [22][0][][] */ 122,13,-127,-26,60,-29,-45,-30, 
  /* [23][0][][] */ 43,127,39,13,-12,4,-53,-61, 
  /* [24][0][][] */ -127,-122,-45,-112,61,111,-118,51, 
  /* [25][0][][] */ 16,-61,21,-105,-127,-53,-41,-92, 
  /* [26][0][][] */ 27,94,127,-8,-57,-21,-20,-22, 
  /* [27][0][][] */ -56,-47,-20,64,71,-5,-37,127, 
  /* [28][0][][] */ -36,30,-127,30,-70,-73,-27,8, 
  /* [29][0][][] */ -127,-70,-19,-67,-35,85,57,36, 
  /* [30][0][][] */ -59,76,-73,-52,-19,127,9,-4, 
  /* [31][0][][] */ 96,-86,124,-59,105,58,53,127, 
  /* [32][0][][] */ -3,33,-68,-40,49,127,-45,-107, 
  /* [33][0][][] */ 27,-31,-17,47,-91,-31,0,127, 
  /* [34][0][][] */ -47,9,-127,12,-7,-13,-33,59, 
  /* [35][0][][] */ -89,89,127,-8,64,-126,-64,-100, 
  /* [36][0][][] */ 92,-74,-106,26,-116,-45,-42,127, 
  /* [37][0][][] */ -63,-48,19,14,127,-55,-92,78, 
  /* [38][0][][] */ -7,-9,48,109,80,-127,60,-52, 
  /* [39][0][][] */ 126,37,-26,80,-127,-12,54,-97, 
  /* [40][0][][] */ -6,-127,-9,-50,109,44,-61,65, 
  /* [41][0][][] */ 14,-4,48,-89,76,-127,24,69, 
  /* [42][0][][] */ -86,-36,68,-57,61,-2,13,-127, 
  /* [43][0][][] */ 23,22,1,127,6,27,-21,2, 
  /* [44][0][][] */ -45,7,-53,13,15,127,-56,23, 
  /* [45][0][][] */ -61,23,78,115,59,127,-109,-24, 
  /* [46][0][][] */ -127,-83,37,-126,6,-115,-30,-113, 
  /* [47][0][][] */ -14,-62,-93,46,-127,73,38,97, 
};
const TfArray<4, int> tensor_dimension72 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant72_scale = { 48, { 0.0025967222172766924, 0.003441341919824481, 0.0030822006519883871, 0.0036377701908349991, 0.0029146918095648289, 0.0026341830380260944, 0.0021383280400186777, 0.0024306951090693474, 0.0023248011711984873, 0.0037019858136773109, 0.0014066982548683882, 0.0015000862767919898, 0.0016827273648232222, 0.001834942027926445, 0.0019367175409570336, 0.0029840243514627218, 0.0015103050973266363, 0.0024596408475190401, 0.00059601990506052971, 0.0017209878424182534, 0.0022337266709655523, 0.0012232443550601602, 0.0018407920142635703, 0.0030672000721096992, 0.0022281382698565722, 0.0011439403751865029, 0.0030678436160087585, 0.0025977904442697763, 0.0022144918330013752, 0.003032271983101964, 0.002318789716809988, 0.0011927980231121182, 0.0027129407972097397, 0.0031241723336279392, 0.0030807559378445148, 0.0015551457181572914, 0.0027321465313434601, 0.0021225523669272661, 0.0031695938669145107, 0.0023131552152335644, 0.00225663254968822, 0.0014740537153556943, 0.0020775869488716125, 0.0029772203415632248, 0.0027365977875888348, 0.0019056220771744847, 0.0023249124642461538, 0.0022491500712931156, } };
const TfArray<48, int> quant72_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(8) int8_t tensor_data73[8*1*1*48] = { 
  /* [0][0][][] */ 24,38,-29,-9,6,-6,-14,-45,28,12,61,-47,1,-18,36,31,-80,21,18,4,21,-6,45,-9,43,16,-1,8,3,-53,10,-127,-29,-36,-53,23,-5,93,4,-19,9,-54,36,8,21,73,31,-34, 
  /* [1][0][][] */ 51,-62,39,-57,34,-9,24,3,-59,11,-27,24,-3,14,47,1,106,7,-127,-18,-16,54,-23,-39,47,-58,53,-45,-10,19,3,103,-8,-34,44,0,3,51,3,-62,-32,69,28,8,-35,-36,18,33, 
  /* [2][0][][] */ -26,-64,-21,7,14,38,53,-7,-74,56,-49,-65,-52,-48,-62,-70,26,73,81,-99,127,29,-45,-6,47,-24,54,-39,-49,23,-67,-102,-10,0,-64,-87,57,-41,11,2,9,-3,-63,3,-22,7,18,-82, 
  /* [3][0][][] */ -22,33,9,39,30,-36,27,-40,-13,16,30,40,19,-27,75,50,-44,29,127,-16,-51,-8,-16,14,-4,-123,-5,62,-22,-44,-42,58,-36,-90,39,26,25,-16,-44,1,-16,-90,8,15,71,-45,19,22, 
  /* [4][0][][] */ 9,21,-22,3,4,24,10,-8,65,-21,-36,-38,-61,0,-63,-5,-17,-16,-54,20,19,-18,46,-2,-13,-70,-39,9,-42,-4,-2,-55,-10,-11,-22,-32,44,-127,-28,24,31,31,-57,44,-28,-29,-19,-37, 
  /* [5][0][][] */ 40,-42,-8,-32,33,58,127,34,-37,-49,32,-17,18,45,-31,-25,22,0,6,68,-27,-19,15,-1,-24,-9,-29,105,-84,60,74,-19,64,62,-14,48,18,-45,-21,31,42,-22,19,0,-19,-25,3,9, 
  /* [6][0][][] */ 37,8,58,-34,105,-38,84,-127,-14,-57,42,-70,-39,65,69,-13,-39,30,-23,76,-77,-40,14,19,125,26,-26,-8,-51,36,-5,-35,-1,52,-75,2,66,79,-94,-69,-50,-36,-48,41,-5,23,2,11, 
  /* [7][0][][] */ 91,-11,1,-43,-109,66,-32,32,-61,14,44,-16,-15,127,73,-48,26,-70,-52,-2,38,-124,18,57,-88,-66,41,40,43,18,-96,-68,-13,-3,10,-15,-103,-98,-6,33,38,-38,88,87,-70,-16,48,29, 
};
const TfArray<4, int> tensor_dimension73 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant73_scale = { 8, { 0.002525565680116415, 0.0024411710910499096, 0.0018962997710332274, 0.0021094838157296181, 0.0029295163694769144, 0.0018618527101352811, 0.0016352439997717738, 0.0020558163523674011, } };
const TfArray<8, int> quant73_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const ALIGN(8) int8_t tensor_data74[48*1*1*8] = { 
  /* [0][0][][] */ 73,55,-84,-36,94,127,1,-41, 
  /* [1][0][][] */ 127,42,-18,66,-42,-83,3,-11, 
  /* [2][0][][] */ -16,-27,-20,50,39,11,-83,127, 
  /* [3][0][][] */ -51,125,-40,76,-76,-127,40,97, 
  /* [4][0][][] */ -51,-34,40,-85,3,-56,-127,-55, 
  /* [5][0][][] */ -102,-32,-36,-127,95,53,60,51, 
  /* [6][0][][] */ -76,-13,36,-127,33,26,57,-84, 
  /* [7][0][][] */ 106,68,13,-48,-109,-17,127,-36, 
  /* [8][0][][] */ -54,-32,-20,54,77,127,-102,101, 
  /* [9][0][][] */ -27,5,27,7,-30,-27,127,-6, 
  /* [10][0][][] */ -119,-15,127,66,-125,-66,-85,-125, 
  /* [11][0][][] */ -89,127,-5,100,-77,39,-38,-14, 
  /* [12][0][][] */ 69,-102,-107,-55,127,-33,65,43, 
  /* [13][0][][] */ 73,30,104,-127,94,-22,11,-49, 
  /* [14][0][][] */ -19,-11,41,-81,-15,-50,-127,-67, 
  /* [15][0][][] */ 106,106,64,82,-127,-63,-12,8, 
  /* [16][0][][] */ -49,-83,-66,127,-59,106,91,66, 
  /* [17][0][][] */ 70,-50,-101,47,65,-127,55,92, 
  /* [18][0][][] */ 0,127,21,-55,-7,-1,0,-2, 
  /* [19][0][][] */ -62,-127,-2,6,-44,-52,-56,-68, 
  /* [20][0][][] */ -55,6,-46,-6,14,17,29,127, 
  /* [21][0][][] */ 32,26,-22,37,18,70,70,127, 
  /* [22][0][][] */ -78,-7,-16,12,25,17,127,109, 
  /* [23][0][][] */ -11,-47,-119,-127,100,-85,-58,-82, 
  /* [24][0][][] */ -55,78,-127,-12,-13,-8,28,-16, 
  /* [25][0][][] */ 103,-126,-7,-127,-83,6,96,-9, 
  /* [26][0][][] */ 115,56,-127,23,64,-127,-5,61, 
  /* [27][0][][] */ 95,72,-33,127,3,-99,78,18, 
  /* [28][0][][] */ -17,13,44,-9,24,127,47,40, 
  /* [29][0][][] */ 61,-23,-19,-59,-127,31,5,39, 
  /* [30][0][][] */ 127,64,-59,-1,4,45,-115,-11, 
  /* [31][0][][] */ 46,-17,54,-127,115,-107,87,82, 
  /* [32][0][][] */ 43,-44,127,54,22,-3,-45,-18, 
  /* [33][0][][] */ 27,-12,-21,7,32,127,-10,-73, 
  /* [34][0][][] */ -15,90,124,51,-127,81,40,82, 
  /* [35][0][][] */ -21,3,-127,-27,41,25,70,36, 
  /* [36][0][][] */ -63,27,19,61,127,-27,-8,-33, 
  /* [37][0][][] */ -127,-41,22,-73,44,84,-5,18, 
  /* [38][0][][] */ 19,24,-17,-127,-8,-7,17,-23, 
  /* [39][0][][] */ -21,-108,-127,-98,33,-46,111,29, 
  /* [40][0][][] */ 100,-127,116,-25,82,60,39,73, 
  /* [41][0][][] */ 0,-20,-125,22,10,43,127,48, 
  /* [42][0][][] */ -104,-24,-81,-6,-49,60,-39,127, 
  /* [43][0][][] */ 1,-69,-71,23,127,-13,53,-14, 
  /* [44][0][][] */ -66,-106,-127,-74,53,-23,73,43, 
  /* [45][0][][] */ -112,63,52,-61,-8,-113,52,127, 
  /* [46][0][][] */ -13,-15,-71,-37,-12,-71,127,-102, 
  /* [47][0][][] */ 75,-93,-12,-120,-62,70,47,127, 
};
const TfArray<4, int> tensor_dimension74 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant74_scale = { 48, { 0.0029256823472678661, 0.0032738950103521347, 0.003638735506683588, 0.00089328794274479151, 0.0019948552362620831, 0.0021412626374512911, 0.0023145405575633049, 0.0030433181673288345, 0.0024139932356774807, 0.0013755573891103268, 0.0019719116389751434, 0.0021820401307195425, 0.0021619831677526236, 0.00082760007353499532, 0.0024154302664101124, 0.0022614409681409597, 0.0017120722914114594, 0.0021275719627737999, 0.0033674105070531368, 0.00095824751770123839, 0.0014008788857609034, 0.0029449060093611479, 0.0029329617973417044, 0.0024024306330829859, 0.0027033847291022539, 0.0017247006762772799, 0.0025937750469893217, 0.0018589890096336603, 0.0037510120309889317, 0.005217431578785181, 0.0036414675414562225, 0.0014464741107076406, 0.0028850587550550699, 0.001841012155637145, 0.002483706921339035, 0.0015222225338220596, 0.005027534905821085, 0.0030762418173253536, 0.001511868555098772, 0.0017736192094162107, 0.0017005709232762456, 0.0024079810827970505, 0.0021487446501851082, 0.0034445067867636681, 0.0023294065613299608, 0.00084003346273675561, 0.0023258887231349945, 0.0025694966316223145, } };
const TfArray<48, int> quant74_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(8) int8_t tensor_data75[16*1*1*48] = { 
  /* [0][0][][] */ -11,-41,-1,-27,-6,69,-53,-28,-7,99,15,-10,-28,7,7,-100,68,-77,-37,10,22,-30,-61,-24,-48,13,16,-121,36,-23,-24,0,-20,-27,51,-1,12,-41,127,-14,33,12,-16,-3,21,11,33,0, 
  /* [1][0][][] */ 2,23,23,50,49,47,25,16,-10,41,-29,37,23,-70,-49,-115,-46,-62,-23,-42,-83,-70,-42,-31,115,1,31,51,56,-37,-21,39,-18,117,-44,-50,33,68,18,-58,100,-58,-79,-95,-119,-64,127,40, 
  /* [2][0][][] */ -30,-12,-26,67,-64,-36,35,21,-3,-63,-17,50,-50,-89,45,-15,-70,-1,-41,79,-97,19,-10,-11,-44,-13,-38,-32,0,-23,0,11,3,68,44,-82,-14,-39,-76,-4,127,92,31,37,14,21,-28,2, 
  /* [3][0][][] */ -45,-19,-26,30,72,50,53,44,49,-43,37,-4,36,28,-37,-30,56,-9,16,63,5,16,61,23,-33,-32,22,38,5,-24,30,-52,30,127,32,-3,33,-20,62,-21,5,-5,32,13,-9,-22,20,31, 
  /* [4][0][][] */ -4,5,-90,54,-20,28,56,43,31,-127,46,3,-12,126,12,-65,101,-10,-12,125,43,-25,12,16,-28,-11,5,-68,43,-35,1,13,-56,-32,-25,-6,12,-4,-61,-19,-97,-33,3,2,-15,-103,8,-20, 
  /* [5][0][][] */ -39,-24,7,127,7,16,-12,4,3,-66,72,-55,25,33,-7,-28,31,20,-39,-16,-66,-10,-38,-48,37,-9,-53,-26,-27,16,-28,104,-8,116,20,88,-53,-43,-42,21,-78,-18,15,27,45,43,22,-37, 
  /* [6][0][][] */ -11,69,-1,-47,-24,-35,-30,52,15,21,-61,48,-2,-45,16,-11,-20,15,-6,-84,-25,18,54,15,86,-2,-12,-26,16,-83,3,21,-19,21,3,8,44,99,44,28,-41,-2,34,17,58,127,-43,9, 
  /* [7][0][][] */ 21,-32,-34,-38,-7,4,-20,34,32,-71,-25,-29,35,-100,-2,16,-69,37,6,127,-97,-1,24,35,106,-18,-34,-16,-21,30,43,119,41,-73,14,71,-36,-72,107,-5,64,-58,38,89,-7,-29,12,-21, 
  /* [8][0][][] */ 23,-20,51,10,11,-5,-23,-60,-63,61,-4,-30,-33,-1,3,35,-30,-28,3,127,13,-20,-80,-51,-7,37,-13,-15,-5,-83,-39,-45,-33,4,-33,33,78,-19,-36,38,-26,-9,-17,-13,63,1,12,-4, 
  /* [9][0][][] */ -14,45,-32,-26,31,-37,39,4,-11,127,36,-31,37,-11,7,54,80,63,-27,16,-29,54,32,-7,-15,22,-31,18,-11,64,18,-99,64,40,-54,76,-39,65,-11,51,117,-17,25,21,86,-105,-30,9, 
  /* [10][0][][] */ -34,-51,-46,12,57,56,-95,10,57,-63,-71,55,-68,52,-100,53,27,-22,-43,11,119,-67,63,14,83,23,-63,-111,-80,-69,-47,-55,-4,92,-67,26,-3,-43,-7,76,87,-90,-127,-34,107,-46,-89,34, 
  /* [11][0][][] */ 27,59,55,-87,61,71,-53,-10,53,-32,45,-127,45,-9,-91,7,-54,27,99,-44,81,-35,16,55,-65,-14,8,-123,19,-38,11,-69,119,-77,59,104,33,12,-51,-15,49,-26,-29,24,-17,87,35,-17, 
  /* [12][0][][] */ -47,2,20,27,38,67,-63,-9,-11,86,-8,13,3,7,-49,-67,4,-38,6,127,41,-49,8,-28,57,28,25,-79,74,56,-24,41,-41,57,70,-31,-59,2,-13,-7,-29,-36,-12,-40,-39,48,26,6, 
  /* [13][0][][] */ 10,-41,-81,3,-5,9,12,49,76,127,-11,3,28,-28,12,-33,-38,-21,33,-74,10,-8,59,28,4,-40,18,-20,9,12,37,59,12,-75,23,19,-18,-78,-70,-12,-21,-5,-5,47,-3,41,11,-7, 
  /* [14][0][][] */ 0,-13,-27,-42,-45,-44,-61,27,36,-64,50,-78,42,-11,12,9,-30,-23,-18,14,34,-19,80,58,-6,-30,17,-2,43,19,13,35,-25,-59,-127,25,-39,3,41,-42,55,-9,-21,-14,-82,64,1,-11, 
  /* [15][0][][] */ 40,13,62,-63,43,98,57,53,19,-86,0,26,12,-60,13,-118,-26,-95,49,-66,-15,31,-7,-2,8,-31,127,24,31,108,83,-93,29,-8,61,-20,-49,-6,-28,-33,-16,30,72,113,58,12,88,86, 
};
const TfArray<4, int> tensor_dimension75 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant75_scale = { 16, { 0.0099452603608369827, 0.0093745039775967598, 0.010553588159382343, 0.014466127380728722, 0.0090903621166944504, 0.0088930539786815643, 0.0067827305756509304, 0.0091994283720850945, 0.010293667204678059, 0.007640340831130743, 0.0081686936318874359, 0.0067562907934188843, 0.0086820237338542938, 0.010112222284078598, 0.011983294971287251, 0.007214544340968132, } };
const TfArray<16, int> quant75_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(8) int8_t tensor_data76[1280*1*1*16] = { 
  /* [0][0][][] */ -41,-69,-6,43,33,-127,39,73,88,-57,-23,43,39,-5,-119,24, 
  /* [1][0][][] */ 88,98,9,6,68,115,-27,-84,-127,61,107,-73,58,5,43,83, 
  /* [2][0][][] */ -66,28,-6,-2,-41,27,46,-53,-39,69,30,27,11,117,-9,-127, 
  /* [3][0][][] */ 53,-20,127,-87,-41,-39,81,30,-51,38,0,-78,78,27,-3,7, 
  /* [4][0][][] */ 86,98,109,-16,-45,11,65,38,-37,16,127,83,90,11,51,-73, 
  /* [5][0][][] */ -50,-22,1,1,-35,-12,127,-70,-32,87,-29,15,46,-40,85,5, 
  /* [6][0][][] */ 42,-4,-19,-21,38,67,25,-127,-74,-68,-10,-26,-15,11,26,-43, 
  /* [7][0][][] */ 8,24,-15,-15,32,38,28,-104,-9,41,-104,78,-65,-76,-13,-127, 
  /* [8][0][][] */ -32,-69,58,82,85,49,-30,-127,-100,56,22,-67,7,-66,15,-34, 
  /* [9][0][][] */ 50,-20,25,-75,54,18,-30,11,-8,-30,-47,1,3,-127,-114,26, 
  /* [10][0][][] */ -12,53,-83,32,27,38,116,6,58,5,32,12,95,-102,79,-127, 
  /* [11][0][][] */ 100,-8,17,-16,-37,31,-7,-53,127,53,46,-39,-6,54,-17,-89, 
  /* [12][0][][] */ -53,74,32,-127,-24,14,-36,-68,-34,0,-37,-4,-9,33,19,-38, 
  /* [13][0][][] */ 8,-29,7,9,20,52,-40,-50,7,-22,41,-6,127,16,4,-97, 
  /* [14][0][][] */ -11,127,11,-91,-102,36,-81,5,80,64,-19,69,19,68,49,-28, 
  /* [15][0][][] */ -15,-25,56,29,3,-57,-81,-106,127,-47,81,-23,-98,109,-50,96, 
  /* [16][0][][] */ -2,-37,127,-45,25,42,-1,35,-96,56,102,10,15,-31,40,-44, 
  /* [17][0][][] */ -70,-19,-30,-24,6,-46,127,24,75,-17,39,16,7,47,64,-109, 
  /* [18][0][][] */ 74,27,-50,127,51,-14,-63,17,-34,-18,-15,-19,83,105,78,2, 
  /* [19][0][][] */ 87,-61,32,98,61,21,31,-24,14,27,103,-40,118,-5,-81,-127, 
  /* [20][0][][] */ -119,-127,-8,-5,-22,23,70,-23,41,39,105,-12,68,28,43,47, 
  /* [21][0][][] */ -1,-48,-10,2,36,16,127,43,-9,-19,-7,-4,-42,-45,22,29, 
  /* [22][0][][] */ 65,8,127,-6,-18,28,-64,-15,-38,-120,-77,11,-34,29,-46,22, 
  /* [23][0][][] */ 23,44,65,-117,127,69,7,47,-74,-22,26,89,70,65,-81,-121, 
  /* [24][0][][] */ -111,54,48,-28,-11,40,-127,-42,-89,109,20,-14,44,93,12,61, 
  /* [25][0][][] */ 20,18,-127,-14,26,67,-37,26,9,35,29,-42,-24,-13,-18,-25, 
  /* [26][0][][] */ -9,-24,27,-3,29,35,-75,27,-127,-18,86,-5,44,-30,-37,21, 
  /* [27][0][][] */ -4,-10,-12,-127,17,84,37,-2,-13,72,-4,-39,2,115,-52,-43, 
  /* [28][0][][] */ -26,-65,87,-127,33,-63,82,31,124,-6,22,-47,-101,52,-66,19, 
  /* [29][0][][] */ -30,-18,-25,41,3,13,79,-11,25,5,39,-30,127,25,21,-34, 
  /* [30][0][][] */ 115,43,50,67,-127,-30,25,8,49,-65,33,-32,-29,39,30,-6, 
  /* [31][0][][] */ 73,-24,47,58,19,127,7,84,13,-66,50,64,-27,-54,-28,40, 
  /* [32][0][][] */ 50,22,-45,49,-99,-15,-18,1,-18,82,127,-5,49,-19,-118,-87, 
  /* [33][0][][] */ -69,-55,-96,-9,-9,-40,59,-3,95,127,45,70,-58,42,17,23, 
  /* [34][0][][] */ 11,22,0,-20,-13,46,-88,-53,2,-42,86,0,80,127,87,-16, 
  /* [35][0][][] */ -127,28,54,-32,-1,-66,-22,-2,8,69,-53,-60,-46,-64,35,15, 
  /* [36][0][][] */ -109,44,-14,11,62,-15,-127,24,15,-14,-27,1,-23,26,-38,-13, 
  /* [37][0][][] */ -103,23,-28,74,55,-7,-6,-18,127,-44,-18,43,-2,-13,-14,56, 
  /* [38][0][][] */ 27,-127,78,6,-41,2,-32,50,3,44,60,-46,118,10,7,-11, 
  /* [39][0][][] */ -41,31,43,-35,-19,-32,7,-105,19,-127,-39,3,88,8,-18,24, 
  /* [40][0][][] */ 1,-28,-89,-127,-73,-34,30,52,-66,33,101,36,81,-64,57,-15, 
  /* [41][0][][] */ 20,-55,-15,127,-31,39,98,34,-6,31,5,74,-68,-17,7,-103, 
  /* [42][0][][] */ 3,28,88,-39,-14,18,26,19,54,-50,-16,-35,-123,2,-15,-127, 
  /* [43][0][][] */ 127,32,79,-60,-12,5,-46,-91,37,-7,-53,37,5,20,60,2, 
  /* [44][0][][] */ -20,-73,26,-32,33,-50,127,-47,68,-36,63,37,10,99,-28,-86, 
  /* [45][0][][] */ 5,106,19,-43,38,7,-68,-87,68,-32,-83,50,59,-63,-46,-127, 
  /* [46][0][][] */ -18,48,-88,-61,-21,-36,-42,-56,97,43,106,51,-127,25,46,-15, 
  /* [47][0][][] */ 4,1,37,126,-3,38,-3,-85,-127,31,-125,-12,-21,3,30,0, 
  /* [48][0][][] */ 45,-5,-17,-52,-10,12,-127,39,53,60,47,-28,87,-28,-15,7, 
  /* [49][0][][] */ 46,100,35,-55,17,-32,-35,-61,-6,-70,-102,60,-14,107,127,109, 
  /* [50][0][][] */ 94,-38,-42,45,-82,-50,12,103,-55,-38,-26,-28,46,-11,-73,127, 
  /* [51][0][][] */ -69,35,-102,16,-38,97,-81,-53,-26,11,88,127,-23,-57,-51,81, 
  /* [52][0][][] */ 104,78,127,78,24,-4,86,81,-27,-119,15,72,-69,4,-40,33, 
  /* [53][0][][] */ -59,58,-8,127,31,-14,24,11,-4,-26,35,97,-15,-61,13,-42, 
  /* [54][0][][] */ -36,-72,-96,-127,62,125,-24,15,22,26,37,-73,58,-1,90,73, 
  /* [55][0][][] */ 127,23,-15,-60,60,-19,-48,25,-111,72,-49,-19,44,11,3,-5, 
  /* [56][0][][] */ -16,-52,57,50,6,28,-32,14,-27,44,29,-15,-42,127,-24,-1, 
  /* [57][0][][] */ 38,-36,4,-37,115,11,8,39,60,127,31,-83,63,35,46,-45, 
  /* [58][0][][] */ 24,26,11,-25,-60,-23,85,32,-56,127,-9,-72,-2,70,65,40, 
  /* [59][0][][] */ -53,43,33,45,83,-76,6,-119,4,-65,39,91,-17,-73,127,-47, 
  /* [60][0][][] */ -15,67,47,-127,-11,104,3,-94,11,32,-10,-127,33,-56,26,-47, 
  /* [61][0][][] */ -127,-47,-14,-9,41,47,-25,-15,10,-103,53,-21,93,2,-21,69, 
  /* [62][0][][] */ -38,17,-61,29,56,-68,54,103,-126,-86,-64,15,127,-72,44,39, 
  /* [63][0][][] */ 30,-65,56,-16,-22,75,-5,-71,-5,-30,15,48,-10,-60,48,-127, 
  /* [64][0][][] */ -92,25,83,-57,-52,17,60,-8,-73,-114,20,29,5,-126,-4,127, 
  /* [65][0][][] */ -25,-1,125,-16,-9,-9,-9,-32,39,105,55,127,81,55,27,49, 
  /* [66][0][][] */ 39,18,-7,-18,-127,4,14,47,39,57,50,44,39,-62,30,54, 
  /* [67][0][][] */ 43,-25,34,-39,-5,36,61,-16,-56,-10,-23,44,1,90,-13,-127, 
  /* [68][0][][] */ 127,85,50,95,8,41,-76,-126,-32,-77,-106,36,8,3,3,81, 
  /* [69][0][][] */ 47,-34,-24,-38,46,-49,-73,-127,-4,-20,-15,-32,8,-9,55,44, 
  /* [70][0][][] */ -3,92,109,82,44,2,-83,90,4,-90,-46,-39,113,8,49,127, 
  /* [71][0][][] */ -70,61,-23,-31,43,-70,-14,-18,-21,-44,-127,54,75,-62,19,-32, 
  /* [72][0][][] */ 63,-7,-9,36,114,-11,-49,23,-40,55,-12,61,-94,-66,-127,27, 
  /* [73][0][][] */ 81,-27,10,-64,-40,12,12,-45,-38,21,73,36,85,-98,127,-76, 
  /* [74][0][][] */ -80,-14,88,50,88,97,38,-51,25,118,-20,0,70,2,23,-127, 
  /* [75][0][][] */ 51,-89,-2,44,36,-68,43,127,15,-48,-7,-30,-85,106,-13,-21, 
  /* [76][0][][] */ 11,-8,127,-38,61,108,-94,-59,37,11,9,-70,42,-18,65,26, 
  /* [77][0][][] */ -16,61,37,-48,-22,13,127,51,-31,-18,-57,42,-98,1,46,-32, 
  /* [78][0][][] */ -14,-32,108,35,-22,127,-8,-99,-66,-35,-34,-3,-68,-5,-80,-48, 
  /* [79][0][][] */ -42,-51,1,82,-92,-25,61,-22,-45,-35,-18,6,92,-53,24,-127, 
  /* [80][0][][] */ -27,-44,46,33,6,-55,7,78,42,-127,63,1,47,-4,14,29, 
  /* [81][0][][] */ 94,-48,-55,104,-23,-57,-127,114,33,-42,-64,-114,17,-46,31,-78, 
  /* [82][0][][] */ 41,26,-127,-60,96,116,89,-113,3,-29,-72,36,-46,105,77,111, 
  /* [83][0][][] */ -94,8,-127,-72,-15,33,-8,-3,-57,-51,-60,18,-1,24,57,70, 
  /* [84][0][][] */ -86,17,22,-13,21,113,87,64,-60,92,-52,110,46,-82,-59,-127, 
  /* [85][0][][] */ 127,34,57,35,-58,30,-65,-60,-7,-13,-77,-64,-14,29,5,16, 
  /* [86][0][][] */ -3,124,45,-63,-69,34,-127,6,32,-127,42,39,-28,-65,-124,-28, 
  /* [87][0][][] */ 97,68,11,50,-1,83,106,-118,-60,-17,-63,-37,127,94,116,-83, 
  /* [88][0][][] */ -31,-12,-46,17,5,-30,34,-15,42,127,15,-49,49,-24,-9,-75, 
  /* [89][0][][] */ -39,-19,-127,-43,36,68,109,47,-38,-66,-20,27,-20,80,55,-22, 
  /* [90][0][][] */ -4,-27,-35,-4,1,-65,7,95,-127,63,60,-13,-59,-75,-34,-59, 
  /* [91][0][][] */ -7,-11,-40,-11,118,50,-18,-61,17,20,-9,0,-28,12,18,-127, 
  /* [92][0][][] */ -32,-43,-99,-13,24,-39,-5,36,24,2,-23,20,-31,-127,84,-26, 
  /* [93][0][][] */ 75,-11,-29,32,-26,-66,-127,28,27,50,45,35,-81,20,-122,53, 
  /* [94][0][][] */ 36,45,-110,-89,95,-33,73,-127,-97,25,-93,114,115,-71,32,-77, 
  /* [95][0][][] */ 49,116,-65,127,15,19,-93,11,-27,-36,11,21,116,-47,43,-84, 
  /* [96][0][][] */ -9,-48,-44,32,-48,46,16,76,127,-70,60,-57,-43,-47,-80,-49, 
  /* [97][0][][] */ -29,37,-40,1,17,11,35,-80,127,54,95,-39,19,-18,36,17, 
  /* [98][0][][] */ -43,-26,56,-26,14,-44,42,55,9,-15,-28,52,0,12,-127,-15, 
  /* [99][0][][] */ 27,-37,-85,-84,89,19,-127,-12,70,-74,29,-98,-42,41,5,-40, 
  /* [100][0][][] */ 127,-10,116,-22,39,19,-29,-49,36,-43,41,-18,-30,-14,-32,-71, 
  /* [101][0][][] */ -93,-1,-125,41,64,-92,42,30,46,33,-30,127,-37,-80,8,99, 
  /* [102][0][][] */ 40,-82,127,-49,-49,-67,119,-18,-31,24,-4,97,-77,-87,-126,31, 
  /* [103][0][][] */ -73,25,-97,-108,-18,-51,-2,127,-53,90,-6,-103,2,-60,-9,49, 
  /* [104][0][][] */ 23,-90,61,127,57,-24,80,-90,-35,21,7,-7,-50,127,127,66, 
  /* [105][0][][] */ 83,-106,32,-74,-57,34,-117,-12,39,-34,-38,-33,26,-36,-127,-19, 
  /* [106][0][][] */ -127,-49,86,27,91,-12,-16,109,30,29,-19,37,91,55,-8,10, 
  /* [107][0][][] */ -61,64,40,71,60,-110,-15,47,-58,18,-42,17,27,-127,22,-33, 
  /* [108][0][][] */ 127,-84,34,51,-65,16,41,-57,40,17,-9,3,-77,44,8,81, 
  /* [109][0][][] */ 48,-66,63,76,34,18,71,-49,-35,3,-25,1,11,-100,-127,-46, 
  /* [110][0][][] */ -37,22,63,-24,-36,-31,44,-35,92,71,-15,127,-18,-42,77,-63, 
  /* [111][0][][] */ -71,19,19,-21,-44,49,-80,-43,25,127,-4,-46,72,14,-26,49, 
  /* [112][0][][] */ -59,-22,-62,67,127,-100,-25,13,-25,-25,-39,-59,71,37,44,-33, 
  /* [113][0][][] */ 76,24,38,-127,-3,64,10,-20,17,10,43,-57,-25,-27,-4,13, 
  /* [114][0][][] */ -34,-21,-96,-27,-52,-32,15,-71,-117,72,127,46,-102,15,-20,-52, 
  /* [115][0][][] */ -46,-41,-82,-6,5,127,-8,-15,5,-23,-76,15,-115,-10,-94,-29, 
  /* [116][0][][] */ 59,-127,-124,-9,-38,-52,-70,0,31,1,20,10,78,45,-83,55, 
  /* [117][0][][] */ 20,-25,24,-3,-45,66,60,127,-47,4,-29,-61,-26,58,-41,-19, 
  /* [118][0][][] */ -6,39,-85,-30,110,127,-88,58,64,-48,-39,-15,-21,26,44,-40, 
  /* [119][0][][] */ 127,7,84,-16,45,-70,-3,121,-10,109,-22,-14,4,-46,-83,-98, 
  /* [120][0][][] */ 44,98,-33,3,-25,8,-127,0,62,-60,-20,-8,-79,-35,14,-37, 
  /* [121][0][][] */ -5,45,127,-77,45,67,-25,25,63,80,15,-24,7,1,-63,-8, 
  /* [122][0][][] */ 42,47,3,-29,-25,105,127,126,-39,-33,20,63,-16,16,103,66, 
  /* [123][0][][] */ 24,19,11,55,-7,37,-62,39,42,59,57,-127,91,-51,57,-46, 
  /* [124][0][][] */ -66,30,15,4,65,20,-55,46,32,117,-12,-127,123,-13,-17,-54, 
  /* [125][0][][] */ -53,7,-102,-57,-50,2,79,12,-55,-1,74,127,70,-38,103,60, 
  /* [126][0][][] */ -125,-24,-25,-127,-5,71,-122,-93,-126,14,-70,68,-28,-21,71,-35, 
  /* [127][0][][] */ 5,29,-50,-33,55,-21,-21,21,-32,-90,-9,-67,127,-96,21,3, 
  /* [128][0][][] */ -14,-20,-67,-34,-16,53,127,21,-5,14,30,-23,4,18,15,33, 
  /* [129][0][][] */ 73,-3,10,-11,-14,48,-68,-43,28,-31,-68,48,19,-36,39,-127, 
  /* [130][0][][] */ -10,-85,127,-72,19,-89,-63,47,86,-7,32,-68,87,-15,61,-80, 
  /* [131][0][][] */ 27,-21,-13,-1,78,82,-7,-127,-51,-30,-12,-23,8,65,-3,4, 
  /* [132][0][][] */ -32,-69,-40,-57,-8,127,48,-90,-4,34,100,-28,104,8,3,-48, 
  /* [133][0][][] */ -48,-5,-9,1,-30,14,-65,-66,19,55,127,-41,-37,-17,85,-33, 
  /* [134][0][][] */ 107,32,-46,-91,22,-20,-39,13,20,-52,-88,-9,-42,22,0,127, 
  /* [135][0][][] */ -24,-22,-5,-8,5,2,127,-14,-18,-52,-18,64,83,-47,62,-84, 
  /* [136][0][][] */ -5,83,-103,-58,90,5,-114,-10,-71,-5,-55,66,19,-127,-123,-23, 
  /* [137][0][][] */ -19,15,-85,20,32,6,3,127,-83,-32,-29,-13,-85,21,26,21, 
  /* [138][0][][] */ 114,14,-127,38,-91,-97,5,-44,26,-17,-43,-64,45,105,38,-21, 
  /* [139][0][][] */ -102,21,-2,2,-36,-43,-97,-127,-56,47,42,118,21,15,-62,93, 
  /* [140][0][][] */ 13,11,-49,-89,-14,-59,16,39,-27,82,-50,-8,-8,-127,90,60, 
  /* [141][0][][] */ -30,34,127,-66,-10,72,-40,-115,78,38,27,-41,-42,-34,43,18, 
  /* [142][0][][] */ -58,93,-85,93,18,-19,-127,46,-45,106,76,-44,-80,-65,55,53, 
  /* [143][0][][] */ -75,-124,77,-127,-27,-85,-56,-2,39,91,68,29,-53,-62,45,-76, 
  /* [144][0][][] */ 40,73,41,103,-105,-61,55,52,-127,50,0,110,34,-127,-58,57, 
  /* [145][0][][] */ -8,-15,-34,70,127,-14,-34,2,-47,2,54,66,53,23,-44,70, 
  /* [146][0][][] */ -68,-9,-50,-112,107,35,-76,20,42,-76,97,116,48,127,-73,40, 
  /* [147][0][][] */ 47,96,-127,-36,67,96,-14,-22,78,47,-88,107,83,-12,-21,-40, 
  /* [148][0][][] */ -31,-24,26,6,-84,-109,52,36,-127,6,-103,-73,-121,-95,-39,0, 
  /* [149][0][][] */ 35,-76,22,115,1,0,-19,-22,62,61,-127,-45,28,-81,-24,-111, 
  /* [150][0][][] */ 64,55,104,93,115,-29,10,-26,40,-45,86,76,96,59,58,127, 
  /* [151][0][][] */ 6,-60,-51,25,-22,-94,-71,-127,31,-66,-62,71,8,8,73,-7, 
  /* [152][0][][] */ 79,-18,96,56,-88,3,-12,-61,127,-26,-24,1,33,109,12,90, 
  /* [153][0][][] */ -11,93,66,6,-5,-36,-24,12,-97,-1,106,49,-16,11,-72,127, 
  /* [154][0][][] */ -16,71,-127,27,19,84,-6,30,33,-93,-28,50,10,22,32,67, 
  /* [155][0][][] */ -110,52,-9,-47,53,-54,35,24,60,70,-36,-32,-19,127,11,-28, 
  /* [156][0][][] */ 5,-18,27,-46,-53,-105,11,0,-92,-11,-7,-58,127,48,11,11, 
  /* [157][0][][] */ -5,14,48,13,12,-127,-15,17,-11,51,56,74,1,-61,29,-8, 
  /* [158][0][][] */ -26,13,98,-62,-2,-26,-6,-39,-25,-127,-68,-56,38,15,5,-32, 
  /* [159][0][][] */ -7,-102,51,42,121,42,45,20,-22,32,19,50,-11,-6,127,90, 
  /* [160][0][][] */ -17,2,60,53,-107,-22,87,-14,41,127,1,-39,-6,-42,49,44, 
  /* [161][0][][] */ 88,-72,-25,5,22,-81,79,78,-90,127,-7,-30,36,-47,29,-15, 
  /* [162][0][][] */ -16,89,20,-15,103,-8,-32,-46,29,3,-76,-12,64,-14,127,41, 
  /* [163][0][][] */ -90,-82,10,-45,5,-59,64,-2,-13,21,10,-15,-6,-127,6,-79, 
  /* [164][0][][] */ -84,-26,34,45,76,-120,18,-41,31,-39,-3,127,-46,3,-18,-9, 
  /* [165][0][][] */ -7,6,-38,43,-20,-127,55,29,96,-52,-26,-43,-45,-38,2,26, 
  /* [166][0][][] */ -22,36,22,-38,98,-51,84,-9,127,102,-40,95,-28,78,2,47, 
  /* [167][0][][] */ -37,-7,60,-73,89,3,-6,75,-63,61,3,18,24,-127,-50,-1, 
  /* [168][0][][] */ 16,10,-68,-55,55,-100,51,-7,122,-27,-9,10,127,121,81,99, 
  /* [169][0][][] */ -39,-61,-18,61,-127,-8,-48,13,-39,-29,43,-29,42,-29,-83,49, 
  /* [170][0][][] */ 19,-127,67,7,7,-70,15,-43,-1,-19,-6,-16,-35,20,-52,-8, 
  /* [171][0][][] */ -84,-64,-63,-42,23,-33,-1,27,20,-61,49,47,127,62,-25,46, 
  /* [172][0][][] */ -60,58,-75,63,-11,127,4,45,32,76,96,-30,23,-70,-48,54, 
  /* [173][0][][] */ -21,19,-47,-88,98,-13,53,-38,58,72,58,53,36,-127,42,-33, 
  /* [174][0][][] */ 71,58,22,22,20,-127,-121,-38,-53,-39,-49,58,-100,-10,-70,21, 
  /* [175][0][][] */ -64,62,-69,43,21,-127,23,37,62,62,-55,24,-27,7,-30,-42, 
  /* [176][0][][] */ 105,-11,127,34,-30,-4,7,-18,-63,9,-49,62,61,-47,-42,-35, 
  /* [177][0][][] */ 4,21,-10,50,124,-123,-88,3,3,127,23,77,-28,65,-1,67, 
  /* [178][0][][] */ 65,41,-68,-1,3,25,-35,0,62,13,11,-19,127,-48,-8,-74, 
  /* [179][0][][] */ -105,125,-57,46,-112,-41,-30,2,127,25,-17,86,16,46,-9,-35, 
  /* [180][0][][] */ 49,41,127,121,-2,4,-32,9,9,35,119,81,49,-7,81,-88, 
  /* [181][0][][] */ -4,-4,-7,-44,18,11,-127,-25,63,17,96,28,13,-91,32,-9, 
  /* [182][0][][] */ 33,50,85,58,124,5,51,33,-9,-49,-7,36,-15,-12,-127,-78, 
  /* [183][0][][] */ 15,3,124,-67,-102,84,47,-127,-44,10,93,41,53,9,4,40, 
  /* [184][0][][] */ 23,-26,15,116,-54,5,36,-84,127,103,39,64,-61,126,-51,61, 
  /* [185][0][][] */ 33,17,-40,-49,32,23,-27,-43,26,40,64,46,-40,-24,-6,-127, 
  /* [186][0][][] */ -69,-104,-127,-3,55,-89,-74,4,-1,79,-7,-53,-45,-37,-56,-104, 
  /* [187][0][][] */ 34,0,60,15,54,5,103,24,21,-24,-17,-8,-36,127,16,-33, 
  /* [188][0][][] */ -41,27,-57,13,127,-42,15,11,-40,-6,-61,39,2,45,-20,13, 
  /* [189][0][][] */ -97,22,46,-31,45,-40,46,-76,91,127,105,45,19,67,53,-57, 
  /* [190][0][][] */ -110,71,18,-41,37,1,-98,127,23,-10,42,35,110,-90,75,16, 
  /* [191][0][][] */ 51,84,112,-25,-30,-24,127,39,33,48,-58,8,-45,-48,-7,-2, 
  /* [192][0][][] */ 11,6,-70,-55,-57,80,-14,-62,-60,65,-3,-33,93,-127,-24,34, 
  /* [193][0][][] */ 99,-3,-51,-81,-8,127,18,-22,-34,-26,11,-45,-67,56,-1,-14, 
  /* [194][0][][] */ 60,-14,-98,24,13,-11,39,-33,52,-13,88,127,16,112,68,-9, 
  /* [195][0][][] */ -36,65,44,-4,118,-24,97,-1,-50,5,-68,127,-105,100,-78,-82, 
  /* [196][0][][] */ 99,6,-71,94,-2,11,14,-38,-46,-50,-13,69,-105,127,-65,48, 
  /* [197][0][][] */ 11,-6,69,-46,50,43,127,68,37,-47,12,91,11,-57,-6,-6, 
  /* [198][0][][] */ -23,97,92,81,-31,-127,-41,-44,28,11,-41,82,-5,-15,1,34, 
  /* [199][0][][] */ -99,127,47,-44,-20,36,-78,37,-21,35,72,-36,81,-89,-65,-117, 
  /* [200][0][][] */ -19,-17,-127,-22,-72,-75,16,-5,-31,78,28,38,-7,5,-13,74, 
  /* [201][0][][] */ -14,34,37,31,14,7,-39,67,-59,35,-108,-40,-127,74,5,63, 
  /* [202][0][][] */ 127,123,21,45,81,17,2,-65,-49,-122,18,115,34,-28,85,-20, 
  /* [203][0][][] */ 92,-121,-6,-30,-72,29,-16,44,60,-127,32,37,104,-5,2,56, 
  /* [204][0][][] */ 10,100,-7,99,43,-19,71,-2,-108,-124,4,-38,14,-98,-66,-127, 
  /* [205][0][][] */ -127,-37,37,-20,86,57,61,-110,-101,-21,-66,106,115,104,-29,-105, 
  /* [206][0][][] */ 71,-71,-45,20,-16,-47,15,-82,12,-127,-51,9,13,99,-9,88, 
  /* [207][0][][] */ -12,67,31,62,6,78,127,16,-65,-8,-48,-94,-45,-46,87,22, 
  /* [208][0][][] */ -127,-10,-25,54,35,13,-54,-70,5,53,-42,-22,42,-31,62,-44, 
  /* [209][0][][] */ -19,55,-1,-15,-13,27,82,-31,38,-96,79,61,61,-25,-66,-127, 
  /* [210][0][][] */ 75,1,77,-127,57,21,-10,57,-78,28,13,10,-61,-45,-57,-104, 
  /* [211][0][][] */ -62,75,75,-3,-56,21,-28,-71,35,-33,-11,-19,31,-127,-23,-71, 
  /* [212][0][][] */ -61,56,44,56,-100,-19,-61,-62,-47,60,86,23,127,70,-29,-24, 
  /* [213][0][][] */ -127,21,-8,10,50,-2,50,16,18,60,37,-68,18,-59,33,3, 
  /* [214][0][][] */ 22,-60,-7,-17,-114,-35,127,10,-83,-79,55,99,-52,54,-110,-91, 
  /* [215][0][][] */ -47,48,63,80,47,-17,64,-11,3,0,-28,5,-14,127,-77,-52, 
  /* [216][0][][] */ -28,26,-71,61,-53,-6,89,-127,49,-74,-85,-7,-34,-55,0,-34, 
  /* [217][0][][] */ 45,-6,-20,-52,-82,29,-17,-20,-74,-33,82,-127,15,-29,106,-10, 
  /* [218][0][][] */ 27,97,23,-9,32,-10,-95,-127,58,-56,29,-48,56,-112,13,63, 
  /* [219][0][][] */ 38,-18,-19,52,-18,-48,127,-9,91,-33,-35,19,-12,-16,23,3, 
  /* [220][0][][] */ -24,2,-81,121,-46,41,19,29,15,127,83,-30,29,25,24,0, 
  /* [221][0][][] */ 24,-81,43,-47,17,-54,-25,-67,-69,26,-28,38,42,-127,-16,-100, 
  /* [222][0][][] */ -68,16,12,-49,-13,47,-6,-56,-15,86,0,-16,127,-14,59,-71, 
  /* [223][0][][] */ -13,-5,-39,69,-38,-41,-91,30,1,-41,127,81,9,9,-112,6, 
  /* [224][0][][] */ 98,31,30,18,11,26,127,48,-11,-105,-33,28,-47,-30,-28,21, 
  /* [225][0][][] */ 47,98,-21,-16,-4,20,-6,-48,58,52,-127,-18,-63,-51,48,17, 
  /* [226][0][][] */ 37,-28,-67,-11,-48,0,80,-47,-127,-35,-30,8,-13,106,-106,6, 
  /* [227][0][][] */ 29,38,-122,-15,10,-13,8,30,-78,63,-97,-127,-63,13,45,-30, 
  /* [228][0][][] */ -123,-30,52,12,6,-43,127,34,49,75,-12,106,23,-38,45,19, 
  /* [229][0][][] */ -9,-127,48,32,1,56,4,49,-56,16,81,-40,84,-69,10,44, 
  /* [230][0][][] */ -41,85,69,-43,-104,58,90,-127,39,1,-71,35,41,-13,15,-89, 
  /* [231][0][][] */ 20,-11,29,1,28,26,127,-20,47,-18,18,43,38,18,-7,-9, 
  /* [232][0][][] */ 39,-7,127,-38,-34,-4,58,-67,-19,46,12,-50,4,-18,20,-75, 
  /* [233][0][][] */ -44,-95,9,26,-16,-24,-96,-127,42,18,61,12,-11,-14,-123,29, 
  /* [234][0][][] */ 27,37,43,-13,127,-43,2,-53,24,-83,-27,-1,50,-31,-18,0, 
  /* [235][0][][] */ 47,-84,-40,71,60,21,-28,-84,-25,-121,-46,90,105,-127,33,105, 
  /* [236][0][][] */ 23,17,49,124,-17,-50,-127,-84,-15,-14,-44,20,55,38,-67,45, 
  /* [237][0][][] */ 18,-71,-127,-66,55,86,-26,72,21,0,-29,-53,79,73,8,-19, 
  /* [238][0][][] */ -48,25,42,24,-70,-76,46,13,35,-127,-44,99,90,87,-4,80, 
  /* [239][0][][] */ 32,26,-11,13,29,-13,-71,27,85,-103,32,-13,-45,-20,-44,127, 
  /* [240][0][][] */ 0,-81,9,31,52,-51,-6,-127,-42,-68,-61,38,50,11,9,25, 
  /* [241][0][][] */ 127,126,41,-87,72,7,77,51,111,51,21,-46,-24,-30,117,29, 
  /* [242][0][][] */ 73,61,11,-53,-32,48,127,18,48,-21,-6,21,-8,-49,-15,-4, 
  /* [243][0][][] */ 27,125,27,-60,-83,-78,2,32,-16,1,-20,25,-72,-70,-17,-127, 
  /* [244][0][][] */ 14,-36,-44,-72,-53,42,13,-97,112,89,-56,-17,35,127,-55,54, 
  /* [245][0][][] */ -108,71,39,-21,-41,-67,67,65,85,42,-77,-127,-49,-86,-28,-12, 
  /* [246][0][][] */ 45,49,-71,-127,-11,-80,-35,-24,-6,-11,26,80,40,79,-24,-51, 
  /* [247][0][][] */ -64,63,29,10,127,-6,-38,-15,91,-16,11,52,9,23,56,7, 
  /* [248][0][][] */ -95,-38,22,-20,4,52,127,-36,-18,44,-47,-11,25,-13,68,-39, 
  /* [249][0][][] */ -27,33,-40,16,-68,-28,97,82,-87,-45,44,25,-45,66,-127,0, 
  /* [250][0][][] */ -3,10,-12,121,24,14,63,-33,-83,103,-65,-42,83,127,33,-15, 
  /* [251][0][][] */ -10,38,115,-11,2,-21,127,41,-2,-26,-18,-54,-18,-97,92,-24, 
  /* [252][0][][] */ 54,-35,127,21,-5,-15,42,24,31,60,30,31,12,3,37,60, 
  /* [253][0][][] */ -127,13,18,18,-5,-7,47,-39,22,10,-27,-46,0,-35,28,-78, 
  /* [254][0][][] */ -92,-80,-42,-9,-41,-45,29,90,-82,-80,-27,48,68,36,-127,75, 
  /* [255][0][][] */ -45,-54,96,-21,127,61,40,8,-37,-10,-5,-41,59,37,35,0, 
  /* [256][0][][] */ 127,36,-39,20,-20,42,-71,-83,76,23,99,-7,89,58,-55,52, 
  /* [257][0][][] */ -75,74,-96,-33,-31,93,2,-86,127,-67,26,61,52,53,-9,-119, 
  /* [258][0][][] */ -120,31,-107,-36,127,15,30,-11,109,51,-40,-109,-12,-12,-30,30, 
  /* [259][0][][] */ 79,7,-23,70,-11,76,12,-87,46,9,-47,-118,-71,-48,127,12, 
  /* [260][0][][] */ -15,-27,-13,-13,-17,-38,127,108,113,27,44,-101,-115,24,-58,-39, 
  /* [261][0][][] */ 93,-127,-66,-16,-31,-54,61,65,39,-20,45,-43,-115,-30,16,-4, 
  /* [262][0][][] */ -67,19,-57,-66,18,-84,-127,81,-68,-49,-16,-5,11,-54,-70,-4, 
  /* [263][0][][] */ 127,-63,12,8,65,47,4,-12,-63,-37,26,42,-85,-115,70,27, 
  /* [264][0][][] */ -29,-35,13,34,-104,23,-56,-22,-21,101,40,-127,-72,-48,-76,40, 
  /* [265][0][][] */ 53,-2,-41,-127,-68,46,-25,-86,68,-21,68,-40,-69,20,-28,-70, 
  /* [266][0][][] */ -6,17,-82,-60,45,-20,-127,-61,-88,93,120,16,107,-8,84,31, 
  /* [267][0][][] */ 36,35,47,-107,1,-40,123,73,45,122,47,3,30,30,-37,-127, 
  /* [268][0][][] */ -59,-90,-86,-23,-54,9,85,25,68,-21,35,-64,-29,-127,-2,76, 
  /* [269][0][][] */ -76,21,10,-78,127,11,-45,-36,114,37,50,8,-57,-52,-63,48, 
  /* [270][0][][] */ 105,99,65,-117,-7,70,-71,122,88,-127,50,-54,-9,48,-98,-61, 
  /* [271][0][][] */ 36,64,84,-72,77,-60,-17,12,-19,48,127,-33,57,-124,13,20, 
  /* [272][0][][] */ -34,-41,23,-34,6,-35,-71,-120,-28,127,57,-30,110,-28,27,-31, 
  /* [273][0][][] */ -86,22,91,-67,-12,-30,77,-40,-79,105,-63,-15,-20,-127,-5,82, 
  /* [274][0][][] */ -63,27,44,-26,127,21,8,-36,72,25,13,-26,-36,48,-27,-46, 
  /* [275][0][][] */ 28,89,82,23,-8,-61,-127,-12,41,-3,38,4,24,-72,48,-53, 
  /* [276][0][][] */ 31,16,-66,-35,72,61,-127,120,47,-57,50,49,-13,25,69,-75, 
  /* [277][0][][] */ -34,-36,-29,-30,19,93,7,-22,127,11,10,-39,7,-42,78,62, 
  /* [278][0][][] */ -61,15,-63,23,-31,36,17,-52,-72,39,19,-79,127,-105,56,89, 
  /* [279][0][][] */ -23,-30,65,-27,32,28,-78,-25,127,22,15,-101,55,-74,-8,10, 
  /* [280][0][][] */ 84,-17,27,-28,-42,-73,74,7,44,51,-31,67,-8,30,-127,-46, 
  /* [281][0][][] */ 29,35,-64,-86,12,-36,35,82,30,43,9,-127,23,79,58,-26, 
  /* [282][0][][] */ 23,-41,104,20,-124,-42,127,-28,-21,1,80,106,-76,-125,4,70, 
  /* [283][0][][] */ -71,89,-14,-64,-58,17,-127,-55,-34,81,44,-59,108,-16,1,49, 
  /* [284][0][][] */ -39,31,-16,0,34,31,-12,46,-3,72,-18,-45,-6,-127,-70,-95, 
  /* [285][0][][] */ -127,18,-9,-4,51,5,32,-16,83,-35,3,23,-35,50,44,80, 
  /* [286][0][][] */ -29,53,-22,-127,-76,14,-79,17,-76,-10,31,-126,-63,68,-44,-36, 
  /* [287][0][][] */ -56,20,-98,-58,8,6,-16,-3,-78,5,57,-33,66,-71,127,28, 
  /* [288][0][][] */ 118,16,107,-127,25,54,-2,-49,-110,34,43,63,52,59,-1,-27, 
  /* [289][0][][] */ -49,-13,43,-40,24,-20,93,86,-120,13,-31,-127,9,36,-22,-2, 
  /* [290][0][][] */ 50,-25,-82,116,-36,-22,-127,42,-24,67,68,-40,43,6,-37,-12, 
  /* [291][0][][] */ 118,41,60,83,30,-1,127,50,77,-117,-40,96,18,4,-11,36, 
  /* [292][0][][] */ 127,33,49,38,-23,-49,-36,33,-19,-59,28,6,17,10,42,21, 
  /* [293][0][][] */ 88,67,-66,-51,-80,21,-119,35,12,-34,127,67,11,-117,-4,61, 
  /* [294][0][][] */ 27,-127,35,-38,11,-75,48,-22,-12,-75,45,6,-19,49,25,30, 
  /* [295][0][][] */ -2,82,-57,-1,-11,-32,16,-1,-93,127,-10,19,-45,63,-40,-5, 
  /* [296][0][][] */ -14,61,22,-2,62,-96,24,88,-127,-36,-28,67,42,-28,-92,-18, 
  /* [297][0][][] */ 127,51,-32,49,-36,56,-27,-94,3,-62,81,-73,-38,19,63,16, 
  /* [298][0][][] */ -38,6,13,0,-25,105,-25,-115,-79,-17,-15,25,107,-16,-4,127, 
  /* [299][0][][] */ -27,-43,-52,-16,76,26,-33,-3,-15,40,-35,12,-38,127,-38,-44, 
  /* [300][0][][] */ -30,-11,63,-34,99,48,127,-25,88,31,26,50,33,-27,82,-57, 
  /* [301][0][][] */ 32,-47,-127,-46,-36,-59,-31,-19,19,-19,53,93,48,-126,-24,-99, 
  /* [302][0][][] */ -33,-90,-4,-10,-72,73,127,-24,-15,57,64,64,51,32,11,-41, 
  /* [303][0][][] */ -31,-64,33,1,-25,4,9,-68,-60,6,-11,-37,-14,127,-4,63, 
  /* [304][0][][] */ -90,-54,-64,41,-23,-16,-59,41,108,-67,124,-24,-27,127,34,-10, 
  /* [305][0][][] */ 21,-107,-8,-79,-45,-9,28,3,11,92,68,-127,-81,21,0,-14, 
  /* [306][0][][] */ -16,-11,-79,-20,-48,-10,-40,54,127,-92,-16,-101,3,-27,68,-68, 
  /* [307][0][][] */ 65,-50,84,63,29,19,-23,127,2,-23,13,-77,-8,108,-45,65, 
  /* [308][0][][] */ 94,-14,10,-24,-12,59,21,-16,26,0,51,127,14,-39,-54,90, 
  /* [309][0][][] */ 53,31,-11,-127,73,-28,-32,51,-78,94,-40,-81,-37,36,-87,62, 
  /* [310][0][][] */ 99,-51,48,-12,-54,29,-69,44,6,-97,44,-18,62,67,-28,-127, 
  /* [311][0][][] */ -87,105,-41,-4,-62,107,85,-4,84,40,-102,-73,12,-127,15,72, 
  /* [312][0][][] */ 127,14,-72,-3,90,16,37,-22,22,55,69,-86,-2,-1,-82,-31, 
  /* [313][0][][] */ 19,11,20,67,59,-47,69,30,-127,102,-12,39,122,-18,25,63, 
  /* [314][0][][] */ -48,-19,28,127,42,59,41,106,2,-30,-20,22,16,74,-27,24, 
  /* [315][0][][] */ 82,-6,64,14,-89,-127,-39,24,-69,96,17,3,29,-79,-21,-43, 
  /* [316][0][][] */ -26,-61,71,36,47,127,102,29,7,-49,-24,5,-32,24,78,-25, 
  /* [317][0][][] */ -32,-23,-107,3,-49,-127,-43,62,83,6,24,-16,-108,-45,58,68, 
  /* [318][0][][] */ 39,-18,8,13,-29,45,8,-16,-127,-72,55,-3,11,-54,67,25, 
  /* [319][0][][] */ 38,-62,-16,19,-85,-18,8,-27,-105,-24,-5,40,14,13,-127,16, 
  /* [320][0][][] */ 46,64,-116,-18,71,25,-74,-2,117,127,62,-33,-16,-45,0,-51, 
  /* [321][0][][] */ -3,-46,-102,-118,-82,-20,39,-21,-45,-1,23,66,-125,-49,-127,-44, 
  /* [322][0][][] */ 126,-2,10,7,38,-57,-68,-2,-3,-114,-127,36,3,-37,-75,76, 
  /* [323][0][][] */ 127,23,33,15,78,87,-114,34,-41,-115,93,-3,72,41,-27,-67, 
  /* [324][0][][] */ 67,44,53,102,21,-127,-80,-105,-26,20,18,30,51,-71,69,9, 
  /* [325][0][][] */ 12,17,44,38,-33,-104,-14,-88,43,-7,117,-127,-45,-57,-111,82, 
  /* [326][0][][] */ -43,-81,-48,-65,-18,14,45,-77,-37,-27,-9,127,21,29,107,-96, 
  /* [327][0][][] */ 20,-127,40,86,7,-7,39,30,23,16,-12,-16,-16,-52,-3,12, 
  /* [328][0][][] */ 25,30,10,50,61,-71,-101,36,-32,126,-42,-16,-10,127,10,-33, 
  /* [329][0][][] */ -24,83,64,90,64,5,-127,26,43,116,55,61,-82,34,-35,-92, 
  /* [330][0][][] */ 18,-53,-6,127,5,-32,6,23,-82,15,20,76,-58,41,-71,77, 
  /* [331][0][][] */ 57,73,-1,8,67,69,67,93,-127,-94,53,5,48,30,5,-116, 
  /* [332][0][][] */ -87,-127,19,-10,-19,-59,-13,-23,-4,-14,20,-38,-9,-7,-35,108, 
  /* [333][0][][] */ -25,-58,19,38,0,-62,45,-27,-17,-10,-100,-64,-127,3,-23,27, 
  /* [334][0][][] */ -86,20,-123,37,-41,-50,27,67,-45,-51,127,125,-81,-22,34,-49, 
  /* [335][0][][] */ 16,-1,-10,-15,16,76,13,-127,28,51,28,30,17,37,66,20, 
  /* [336][0][][] */ 82,-7,41,48,44,-20,67,75,89,-51,5,-49,-75,-127,-17,-95, 
  /* [337][0][][] */ 127,5,72,11,93,94,34,-34,32,71,-6,11,5,-66,-5,-95, 
  /* [338][0][][] */ -21,-76,55,7,3,-127,-16,6,-40,16,-7,-53,-45,7,4,8, 
  /* [339][0][][] */ -85,35,-20,56,9,26,-19,102,-85,-43,127,32,45,62,10,-23, 
  /* [340][0][][] */ 30,-28,-35,-80,-81,22,-79,28,-22,-88,121,37,127,-47,45,60, 
  /* [341][0][][] */ 30,92,127,-98,-26,12,-82,86,42,-7,23,-78,36,-39,-23,33, 
  /* [342][0][][] */ -81,-53,-36,-41,-105,-60,-72,-2,-62,47,38,0,127,121,58,78, 
  /* [343][0][][] */ 10,3,85,125,18,-127,49,49,42,100,-24,-124,37,76,90,25, 
  /* [344][0][][] */ 52,-72,39,-71,10,61,30,-40,-79,14,43,99,20,23,-127,-84, 
  /* [345][0][][] */ 92,38,50,66,-36,-65,13,-11,-43,127,63,17,-22,17,37,36, 
  /* [346][0][][] */ -44,47,-89,114,-29,27,-2,71,-27,10,-94,59,-6,-127,15,3, 
  /* [347][0][][] */ 52,-70,-24,42,66,65,87,-38,127,-56,33,22,-22,-16,55,35, 
  /* [348][0][][] */ 39,61,47,28,-12,17,-54,-82,-8,3,-43,8,-3,-22,127,-21, 
  /* [349][0][][] */ 40,-37,-22,80,21,-83,41,12,23,-1,41,-24,127,49,12,-6, 
  /* [350][0][][] */ 78,74,-32,10,-21,-114,14,50,-70,-25,-47,-49,-42,-127,6,-31, 
  /* [351][0][][] */ -1,-120,-57,-7,6,117,-127,62,126,-74,84,-89,19,44,-33,28, 
  /* [352][0][][] */ 2,-127,-23,75,-51,43,-68,-12,100,24,-15,-95,-30,81,-89,-93, 
  /* [353][0][][] */ 59,110,-34,-40,71,-35,-40,-54,16,5,-26,127,31,95,-51,-28, 
  /* [354][0][][] */ 11,-18,9,32,-127,42,28,-69,-20,-43,11,-101,74,55,18,-90, 
  /* [355][0][][] */ -44,-93,-20,58,-76,-7,40,66,70,82,15,-127,117,-50,102,21, 
  /* [356][0][][] */ 69,29,-85,-22,-81,-67,-88,-8,94,-103,-1,-1,90,-127,-88,-29, 
  /* [357][0][][] */ 34,-2,15,-22,-109,-53,86,127,-109,73,64,10,35,48,111,40, 
  /* [358][0][][] */ 120,38,-57,67,18,-29,-108,67,41,52,56,-94,15,52,34,-127, 
  /* [359][0][][] */ 59,39,-1,-12,-46,53,-65,-34,22,-7,-18,16,-3,-9,-127,-4, 
  /* [360][0][][] */ 91,13,19,-17,19,81,87,22,67,-69,127,-1,-62,44,-31,19, 
  /* [361][0][][] */ -35,19,-22,-112,-13,-127,101,39,92,27,3,65,101,-28,30,-48, 
  /* [362][0][][] */ -15,-10,59,127,62,78,118,27,-83,-18,30,21,11,-66,9,26, 
  /* [363][0][][] */ -105,40,119,29,30,14,6,85,-127,-13,43,-127,-121,-42,-19,12, 
  /* [364][0][][] */ -127,-63,42,60,-13,15,-3,23,-25,88,14,-7,33,38,-22,31, 
  /* [365][0][][] */ -14,8,-127,-104,-114,-15,-120,-67,51,-68,36,40,91,-114,52,14, 
  /* [366][0][][] */ -39,-45,-127,31,-14,17,-30,18,66,11,-10,-59,9,-73,18,14, 
  /* [367][0][][] */ 117,20,34,-9,-127,35,30,-41,-23,54,-6,-62,-46,23,-44,-31, 
  /* [368][0][][] */ 35,74,-19,19,-95,94,71,-74,-127,12,-62,-31,41,-34,-53,-21, 
  /* [369][0][][] */ -118,-16,74,-127,-25,15,35,-45,-98,-54,105,110,72,-4,105,-11, 
  /* [370][0][][] */ 41,-34,12,-26,-52,44,78,14,25,55,62,14,-9,21,-20,-127, 
  /* [371][0][][] */ -117,-111,12,-35,-58,4,-5,-40,96,5,31,78,123,127,-65,-84, 
  /* [372][0][][] */ -91,-16,-35,25,-16,72,64,-127,117,-73,11,25,-14,-10,23,-81, 
  /* [373][0][][] */ -36,-13,-78,57,64,-65,-127,-64,61,20,9,11,38,71,40,45, 
  /* [374][0][][] */ 90,-8,24,27,-107,60,-122,1,61,-127,95,5,53,27,65,-61, 
  /* [375][0][][] */ 122,8,59,-122,125,-69,-101,-17,7,-35,12,-32,-7,-52,55,-127, 
  /* [376][0][][] */ 13,57,-29,-29,12,-15,-127,-27,-101,-104,-34,20,-17,-35,-57,39, 
  /* [377][0][][] */ -40,-26,19,-36,-75,42,30,-11,-120,0,-10,-32,23,25,-42,127, 
  /* [378][0][][] */ 9,110,38,32,-92,-76,23,-26,-11,-124,48,93,-21,127,-30,41, 
  /* [379][0][][] */ 5,-12,-34,-16,58,9,-127,80,-44,74,6,-24,36,-61,-87,-37, 
  /* [380][0][][] */ 94,-9,-73,-127,58,46,127,-5,-55,-44,-63,1,84,-24,46,3, 
  /* [381][0][][] */ 52,-33,-112,40,-127,81,-121,-123,-37,4,62,-48,29,-36,39,-33, 
  /* [382][0][][] */ 127,10,-30,-32,-36,52,20,17,78,118,-119,-66,20,16,43,-25, 
  /* [383][0][][] */ -53,47,-4,-5,58,-9,56,-12,127,29,-27,17,-26,82,40,-34, 
  /* [384][0][][] */ -76,68,-13,-67,61,-72,33,-11,-19,36,26,26,-15,1,127,-91, 
  /* [385][0][][] */ -27,58,19,16,-93,-21,-26,-60,-102,-2,12,-11,127,-69,19,119, 
  /* [386][0][][] */ 70,-73,39,-18,52,-13,-67,56,84,-3,127,-22,64,-101,-22,11, 
  /* [387][0][][] */ -29,-7,34,86,-17,-43,14,-11,-12,27,40,-49,127,-105,-25,51, 
  /* [388][0][][] */ 77,-46,2,-5,67,-47,-68,-49,-33,55,90,60,-11,21,38,-127, 
  /* [389][0][][] */ -50,117,-31,-40,14,-112,51,92,-127,-50,32,117,-85,-14,106,58, 
  /* [390][0][][] */ -19,-15,127,-111,93,56,-125,19,20,-12,-52,-78,-73,-10,-56,-20, 
  /* [391][0][][] */ 26,88,-4,71,127,28,17,-67,-64,-2,-9,112,-77,29,48,7, 
  /* [392][0][][] */ 123,-41,-9,78,77,-28,-68,-76,-49,-62,84,-127,-25,-96,-52,66, 
  /* [393][0][][] */ -47,25,25,31,-64,2,-6,10,77,68,26,69,-127,-43,-78,104, 
  /* [394][0][][] */ -86,-8,33,-29,-43,-50,-33,-27,-111,50,24,84,127,-78,-38,-19, 
  /* [395][0][][] */ -31,127,5,-78,83,-5,27,-126,-3,23,-22,114,-72,127,76,-45, 
  /* [396][0][][] */ -127,-19,-37,110,15,-56,-123,73,16,33,-49,-77,34,43,-83,-44, 
  /* [397][0][][] */ 85,90,-29,-9,93,-30,-127,74,-19,-89,-13,-7,-113,25,117,-37, 
  /* [398][0][][] */ -122,-6,45,-55,127,46,-63,57,-20,15,-36,-38,-112,-112,-55,73, 
  /* [399][0][][] */ -127,-38,3,53,-89,22,7,-11,-41,39,93,16,67,-36,-33,-2, 
  /* [400][0][][] */ 127,8,-9,-28,23,-57,33,-36,42,-25,-17,38,30,12,72,-64, 
  /* [401][0][][] */ 32,-12,-14,-7,-20,-24,-37,-75,-16,-112,-14,48,127,16,43,59, 
  /* [402][0][][] */ 30,60,-80,-127,-14,5,58,58,7,-113,-32,94,67,127,-11,43, 
  /* [403][0][][] */ 29,-99,-38,2,37,29,51,-127,122,-98,-58,29,-85,66,53,-21, 
  /* [404][0][][] */ 127,46,39,-69,-33,71,-84,-30,5,-79,73,-2,76,-60,-50,1, 
  /* [405][0][][] */ -43,-12,42,23,25,3,-127,38,22,-60,-2,-38,-17,-27,-22,46, 
  /* [406][0][][] */ 41,-6,25,-74,-126,-74,-3,24,86,101,127,-46,13,28,28,-47, 
  /* [407][0][][] */ 87,88,75,5,20,-105,-104,2,-47,43,48,55,-32,127,-5,-78, 
  /* [408][0][][] */ 8,28,73,-96,-127,-42,59,70,13,-100,76,87,32,122,-78,75, 
  /* [409][0][][] */ 18,61,127,77,-32,22,52,16,62,-44,16,-63,-37,-3,59,-75, 
  /* [410][0][][] */ 70,127,-82,-89,-56,-84,-20,88,64,122,70,38,42,73,47,40, 
  /* [411][0][][] */ -8,4,2,-90,-30,-55,-51,-43,38,-5,-11,-46,-38,-127,-9,-56, 
  /* [412][0][][] */ 16,1,-46,-2,-101,55,9,-21,-51,-71,-16,-22,65,-22,58,127, 
  /* [413][0][][] */ 21,70,13,-64,60,-7,-61,-75,92,-3,-3,70,-62,127,-46,-58, 
  /* [414][0][][] */ -9,37,-31,3,120,-12,60,37,-35,4,-127,36,15,-14,-102,-30, 
  /* [415][0][][] */ 92,9,-10,15,-127,-74,-38,16,56,79,-67,-69,-78,98,68,-68, 
  /* [416][0][][] */ -34,-25,-19,67,54,-57,28,71,-36,-64,127,108,64,39,-87,-82, 
  /* [417][0][][] */ 18,-3,-1,42,-39,-3,47,-9,25,-3,50,127,-12,1,-34,-31, 
  /* [418][0][][] */ -58,-63,-90,-73,24,-90,-13,-106,108,-127,12,13,14,73,-82,-97, 
  /* [419][0][][] */ 33,127,-82,22,-65,70,44,-60,-24,36,-22,75,32,18,91,-1, 
  /* [420][0][][] */ 64,-26,-41,58,-1,65,2,82,127,-58,108,-15,107,46,-11,-49, 
  /* [421][0][][] */ -118,-8,2,-93,14,5,-10,9,127,21,26,-110,109,9,55,29, 
  /* [422][0][][] */ 56,-12,-77,28,-127,-24,52,-60,-6,67,2,7,-55,-1,-74,-39, 
  /* [423][0][][] */ -67,-40,-28,-71,-42,-127,41,27,83,-24,-29,-74,32,-9,84,35, 
  /* [424][0][][] */ -72,-27,20,-53,19,17,9,-7,-6,19,10,-42,5,9,-2,-127, 
  /* [425][0][][] */ -66,-27,-39,-100,27,65,-41,-38,-22,11,-38,-10,49,9,-41,-127, 
  /* [426][0][][] */ -51,66,94,78,-110,105,-55,-30,31,28,-32,-127,-56,-29,-98,10, 
  /* [427][0][][] */ -16,-46,41,-127,53,-51,56,33,63,-39,21,116,21,-43,-127,-93, 
  /* [428][0][][] */ -16,28,-14,-72,16,18,123,127,0,113,-97,77,42,126,54,-97, 
  /* [429][0][][] */ -60,-3,8,-51,43,26,-25,40,-46,-21,90,-19,72,-106,88,-127, 
  /* [430][0][][] */ -72,-17,-30,-25,-22,-2,80,6,127,-32,63,-46,54,-34,-15,27, 
  /* [431][0][][] */ 127,-13,-7,-58,-101,9,17,-18,-74,-7,-33,-18,-40,17,23,-22, 
  /* [432][0][][] */ -80,-67,-78,79,14,127,0,31,-17,-112,-57,-9,50,-116,50,-64, 
  /* [433][0][][] */ 27,91,-37,-1,-53,-5,-41,-80,107,53,-28,-127,-2,-57,47,-26, 
  /* [434][0][][] */ 77,-9,-87,53,-79,-113,-127,34,13,122,-88,-118,23,-48,61,-4, 
  /* [435][0][][] */ -88,21,-82,17,88,74,49,11,-27,127,-53,5,-34,-40,26,-101, 
  /* [436][0][][] */ 14,19,-127,30,42,8,14,-26,-55,-41,25,-24,20,-75,-36,-34, 
  /* [437][0][][] */ -6,-24,77,-127,61,28,68,-57,-105,-51,-20,12,59,-5,34,63, 
  /* [438][0][][] */ -6,-21,-8,1,-14,23,65,-4,13,-2,42,20,82,-127,85,-37, 
  /* [439][0][][] */ 81,64,19,-46,65,-58,-5,-20,-21,127,23,-2,-91,-57,40,-26, 
  /* [440][0][][] */ 43,-98,12,42,-18,47,17,-108,-48,-26,80,25,124,-20,127,27, 
  /* [441][0][][] */ 86,-26,-56,46,-23,37,13,17,24,51,56,-73,-39,127,7,-2, 
  /* [442][0][][] */ -10,68,-25,-100,92,127,45,-24,86,-95,-96,-22,-81,-38,13,-11, 
  /* [443][0][][] */ 22,-60,-29,-127,-30,-85,59,-89,66,16,-34,-111,-63,24,55,-10, 
  /* [444][0][][] */ 36,10,-34,-38,44,-21,-127,-17,-27,35,20,53,-29,-2,-50,-32, 
  /* [445][0][][] */ 18,-117,70,35,13,119,74,-2,-37,35,-26,-25,-34,-127,42,88, 
  /* [446][0][][] */ -11,-38,118,31,-63,-43,-37,74,57,-81,-59,-105,-31,-42,-127,28, 
  /* [447][0][][] */ 51,67,-43,-7,-72,54,14,-103,-127,-88,-21,120,-67,42,-59,22, 
  /* [448][0][][] */ -70,0,30,127,22,21,32,48,-11,-33,-10,-25,-18,33,29,-59, 
  /* [449][0][][] */ 114,54,-65,-2,52,-33,69,11,-67,116,-74,-12,-60,-46,18,-127, 
  /* [450][0][][] */ -11,66,0,41,57,105,-2,127,23,48,21,-126,-60,-13,-6,19, 
  /* [451][0][][] */ 16,17,-30,8,-32,85,-127,15,-99,1,62,69,113,13,-10,67, 
  /* [452][0][][] */ 39,-64,-76,-39,-76,-1,-63,59,-19,1,-28,97,-127,79,-14,15, 
  /* [453][0][][] */ 127,64,68,18,4,42,25,4,-42,8,-28,-58,-3,-3,-79,-48, 
  /* [454][0][][] */ -96,12,-12,2,-12,99,-11,-82,81,-127,-36,-9,39,22,15,79, 
  /* [455][0][][] */ -16,52,-7,35,94,9,-12,2,-2,12,-18,-19,14,18,102,-127, 
  /* [456][0][][] */ 31,24,29,-56,123,-81,-17,67,-127,-27,26,67,9,62,75,53, 
  /* [457][0][][] */ 36,63,-48,8,127,-44,16,23,120,-35,59,82,-26,85,0,-71, 
  /* [458][0][][] */ 9,-73,-11,-49,118,-49,-21,30,44,86,84,8,41,-58,-45,-127, 
  /* [459][0][][] */ 34,45,-87,-30,-32,22,-101,-127,35,77,-36,33,56,-103,-27,87, 
  /* [460][0][][] */ -17,21,-31,5,68,-127,-59,122,74,3,-58,-33,-77,37,6,46, 
  /* [461][0][][] */ 32,-74,-13,-67,29,-32,-41,-38,111,78,50,-7,22,127,4,-75, 
  /* [462][0][][] */ -59,3,-55,-127,68,-12,6,-31,68,49,-38,-3,10,13,-23,-32, 
  /* [463][0][][] */ 7,-120,57,-23,46,-31,9,76,60,68,-5,-51,-127,4,-94,104, 
  /* [464][0][][] */ -31,23,99,31,-26,127,35,39,-13,-15,103,-41,-24,-12,-95,-26, 
  /* [465][0][][] */ 45,-87,56,-7,-74,-31,6,68,56,99,-29,-47,105,41,127,-16, 
  /* [466][0][][] */ 5,3,-79,-50,6,-44,-20,-5,-113,57,-127,-55,56,-127,36,-88, 
  /* [467][0][][] */ -1,78,-86,-31,58,-82,-46,18,63,28,86,34,79,-30,77,-127, 
  /* [468][0][][] */ -47,-1,40,12,47,-83,-23,75,-127,-65,13,104,92,-78,-57,-66, 
  /* [469][0][][] */ -54,32,45,-33,27,54,-22,127,49,-29,55,-31,25,-1,60,13, 
  /* [470][0][][] */ 2,72,98,36,3,127,-56,-100,-74,9,14,-10,1,7,10,75, 
  /* [471][0][][] */ -6,-41,-2,38,104,-4,-20,-127,61,19,-43,-72,-28,-44,20,-29, 
  /* [472][0][][] */ -58,87,-44,103,-38,-6,-77,-20,-112,24,16,127,30,-22,-12,-70, 
  /* [473][0][][] */ 50,-30,92,-61,97,11,13,-125,-31,-28,88,-30,76,127,-57,30, 
  /* [474][0][][] */ -52,24,9,4,72,46,47,-86,40,11,33,-44,31,9,45,-127, 
  /* [475][0][][] */ -22,-26,-92,62,-67,113,-15,54,52,-14,-1,-56,43,127,-41,15, 
  /* [476][0][][] */ 100,-36,127,-49,49,-14,-51,9,-91,-35,-12,12,40,24,50,91, 
  /* [477][0][][] */ 70,5,-36,70,-107,-52,26,-33,-127,17,12,105,50,90,-70,-81, 
  /* [478][0][][] */ 78,-13,83,-32,-43,68,22,-32,89,-116,7,-58,-127,-50,83,-31, 
  /* [479][0][][] */ 100,-23,-43,-118,127,59,11,-18,-84,42,-6,-1,90,-75,105,-60, 
  /* [480][0][][] */ -1,-79,6,-30,-2,-40,-13,96,26,42,-22,-98,-83,-48,-94,-127, 
  /* [481][0][][] */ 127,65,40,65,58,-23,-46,5,-18,-15,10,39,49,61,-21,-24, 
  /* [482][0][][] */ -26,-8,-54,70,61,25,127,-14,41,-77,10,41,37,35,8,6, 
  /* [483][0][][] */ -91,64,-64,-127,80,-56,10,-80,54,-8,-48,105,126,-80,87,26, 
  /* [484][0][][] */ -93,-91,-14,-9,127,44,-71,-43,25,-84,66,74,-51,-20,-18,62, 
  /* [485][0][][] */ 39,36,-13,-63,-80,11,73,-127,-27,-30,-60,40,-85,-19,-76,52, 
  /* [486][0][][] */ 58,-9,-31,-51,71,-5,-3,19,-8,15,15,127,-6,-41,19,-16, 
  /* [487][0][][] */ -86,26,115,31,92,107,11,85,-36,127,-70,-29,-44,58,-77,-58, 
  /* [488][0][][] */ -29,23,-35,-86,35,-18,46,127,21,30,-8,47,43,44,26,28, 
  /* [489][0][][] */ 38,-37,112,-60,-107,81,16,-58,-29,3,-45,-82,89,-127,31,47, 
  /* [490][0][][] */ -78,-73,-127,25,94,122,36,-62,-12,36,-17,-50,66,-37,11,-77, 
  /* [491][0][][] */ -1,-5,-12,-103,23,-10,49,15,-10,113,-11,49,38,-13,13,-127, 
  /* [492][0][][] */ 26,41,-47,90,22,45,52,-127,19,-38,-12,-5,44,16,122,5, 
  /* [493][0][][] */ -5,3,-8,77,15,-56,-45,-46,64,15,7,-50,47,-127,1,-74, 
  /* [494][0][][] */ 12,-23,81,50,68,127,-3,53,85,-9,-33,-3,-68,-74,-83,-89, 
  /* [495][0][][] */ -108,79,45,-1,-1,-32,82,127,-14,73,122,51,24,43,5,58, 
  /* [496][0][][] */ -8,-29,-48,70,-86,127,50,26,-23,-53,41,84,-10,-85,90,65, 
  /* [497][0][][] */ 23,37,-12,-76,-16,-33,-87,-73,127,-68,-27,10,21,-23,-57,29, 
  /* [498][0][][] */ 1,-15,-11,-2,-23,42,96,-18,58,127,-18,-2,44,36,-3,-51, 
  /* [499][0][][] */ 18,-34,-39,-42,72,-55,-8,-34,-107,-32,6,-21,-127,-121,-22,35, 
  /* [500][0][][] */ 52,73,46,-74,53,-28,29,68,-127,39,101,39,-63,56,-43,-85, 
  /* [501][0][][] */ 51,-81,-14,-66,8,-127,58,13,30,-80,-20,31,20,55,8,29, 
  /* [502][0][][] */ 8,127,5,-8,9,-22,-50,104,-55,51,38,123,-6,-78,-51,-57, 
  /* [503][0][][] */ -6,-127,64,-74,-26,-62,80,-33,-15,15,-77,16,-5,57,83,34, 
  /* [504][0][][] */ 49,-24,-15,9,39,-6,-3,-127,57,-36,-12,-19,43,-26,-21,-23, 
  /* [505][0][][] */ -18,9,29,-93,19,-36,-6,-41,-42,111,-62,6,-9,-9,-57,-127, 
  /* [506][0][][] */ -86,-89,26,-19,-93,82,5,1,-42,-42,127,38,-75,100,49,5, 
  /* [507][0][][] */ -70,-35,-2,85,57,-2,-39,46,-64,76,66,13,-11,30,44,-127, 
  /* [508][0][][] */ 24,-39,-60,-48,87,-1,-127,11,114,-39,27,-114,-29,-52,35,-10, 
  /* [509][0][][] */ -23,119,-34,61,64,24,-127,19,-109,8,34,24,-64,35,-90,13, 
  /* [510][0][][] */ 9,62,2,31,-44,47,-37,-64,104,-105,42,-127,90,-22,7,-9, 
  /* [511][0][][] */ -16,-127,74,22,10,-17,75,27,21,-30,5,-79,82,37,34,-26, 
  /* [512][0][][] */ 36,-100,68,-33,-51,57,110,-14,79,-127,-43,-63,-94,-6,-18,26, 
  /* [513][0][][] */ 29,45,26,-59,54,75,-2,-23,59,-62,21,-89,8,-3,-127,-65, 
  /* [514][0][][] */ 64,4,39,12,-58,89,44,-27,101,-84,1,-83,46,37,127,-36, 
  /* [515][0][][] */ 56,-68,-90,-60,-60,-123,-127,-38,23,-18,59,-27,65,-6,26,62, 
  /* [516][0][][] */ 60,-51,127,104,-46,-11,-35,-3,-74,29,43,-18,26,34,3,-112, 
  /* [517][0][][] */ -21,104,51,-6,127,-24,-88,14,-75,0,-11,-17,-4,-64,-93,-2, 
  /* [518][0][][] */ -15,4,-78,27,-1,96,100,7,-26,-82,34,127,5,-99,-44,26, 
  /* [519][0][][] */ -54,-86,-24,5,16,96,127,31,122,1,-15,-16,-51,62,-63,-35, 
  /* [520][0][][] */ 102,-46,-36,-95,1,33,48,-11,-81,0,-73,-84,76,127,-14,-110, 
  /* [521][0][][] */ -127,-54,64,-25,2,52,-19,-22,117,35,-20,-39,28,-27,57,6, 
  /* [522][0][][] */ -9,31,42,12,101,-39,77,127,26,4,-31,-37,69,-49,19,-58, 
  /* [523][0][][] */ 73,-19,-2,-124,68,127,-36,23,-58,-1,29,-31,-15,-55,16,1, 
  /* [524][0][][] */ 20,-21,38,-127,46,-62,-58,-36,24,-21,-20,8,121,42,-60,-14, 
  /* [525][0][][] */ -73,-6,3,-103,0,-123,-80,45,25,69,127,56,29,42,-72,116, 
  /* [526][0][][] */ -100,-4,-42,29,28,-53,0,-77,4,127,11,-9,107,-75,68,-42, 
  /* [527][0][][] */ -19,1,51,-89,-1,60,-61,-1,-26,33,127,92,-5,91,-70,12, 
  /* [528][0][][] */ -47,30,45,14,-25,-22,127,-36,66,-33,38,37,-45,-82,7,-90, 
  /* [529][0][][] */ 69,74,7,-9,93,-41,-127,11,18,11,51,16,-23,16,-23,26, 
  /* [530][0][][] */ 127,28,33,4,84,-67,-64,53,0,-9,-6,12,15,-6,7,-82, 
  /* [531][0][][] */ 29,52,-5,-33,-127,81,-37,-44,-49,-40,-5,14,55,46,-29,14, 
  /* [532][0][][] */ 66,-119,9,4,80,38,76,-79,-18,-13,40,-111,10,22,27,-127, 
  /* [533][0][][] */ -80,-52,-26,33,-84,22,-45,-117,-45,-50,-127,27,-81,-4,42,25, 
  /* [534][0][][] */ 73,-75,91,46,69,-46,127,62,2,-36,116,-49,-98,-37,56,-34, 
  /* [535][0][][] */ 9,-34,45,17,97,58,-64,-62,-8,-75,-29,40,34,127,-29,27, 
  /* [536][0][][] */ -39,-49,-45,57,102,32,127,58,-62,25,-55,-2,74,37,42,-10, 
  /* [537][0][][] */ -1,-16,-43,-94,-29,36,48,-59,7,41,78,-31,-43,-121,127,76, 
  /* [538][0][][] */ -22,10,56,-5,127,-37,-70,88,93,-24,-19,-51,25,-6,8,56, 
  /* [539][0][][] */ -48,-22,7,-40,10,127,-36,-108,0,-29,103,7,-35,96,6,84, 
  /* [540][0][][] */ -38,13,9,-43,87,52,-127,-83,13,3,-7,-34,124,125,13,13, 
  /* [541][0][][] */ -1,-20,-39,58,-100,-88,71,36,-62,49,-127,-4,105,-65,-28,-14, 
  /* [542][0][][] */ -95,23,46,-73,81,49,46,-102,10,-42,22,127,-25,-6,-20,105, 
  /* [543][0][][] */ 22,-39,47,-11,57,64,22,127,5,-54,84,-96,77,-122,12,26, 
  /* [544][0][][] */ 92,11,-3,-60,89,60,-95,-68,69,-37,8,-13,-101,-58,127,-6, 
  /* [545][0][][] */ -43,-127,7,-13,21,-47,-21,-37,-39,13,10,-24,43,-9,-69,7, 
  /* [546][0][][] */ 40,-59,-119,3,-26,-1,29,64,-127,48,-38,59,18,26,-21,9, 
  /* [547][0][][] */ -19,-7,-56,-57,66,-3,-3,5,12,-58,-6,127,-39,3,-33,15, 
  /* [548][0][][] */ 33,-89,-127,3,16,-1,1,42,58,124,-58,-16,-25,-9,53,38, 
  /* [549][0][][] */ -2,8,16,-33,127,-38,-1,29,-7,29,-79,18,-25,-8,16,-73, 
  /* [550][0][][] */ -28,-62,106,17,68,18,127,-13,54,-35,-92,69,119,-3,-42,-56, 
  /* [551][0][][] */ 42,-9,-58,69,-95,18,2,-17,127,-36,-18,-115,36,114,50,-84, 
  /* [552][0][][] */ 6,12,-3,19,14,24,127,-79,38,3,44,70,15,51,34,-69, 
  /* [553][0][][] */ 21,-115,-77,19,-24,-127,-21,-33,16,4,101,34,75,-23,52,32, 
  /* [554][0][][] */ 127,-62,5,-28,-116,6,35,-74,-23,-22,62,8,32,59,13,48, 
  /* [555][0][][] */ 78,33,-7,-47,-49,-17,-1,88,94,-127,13,89,71,-25,118,-65, 
  /* [556][0][][] */ 30,-43,43,4,-70,-14,14,31,-121,-5,16,11,-24,17,14,127, 
  /* [557][0][][] */ -69,54,-5,16,88,-7,49,127,31,-4,65,82,21,63,-6,-2, 
  /* [558][0][][] */ -24,-58,-44,-5,13,-24,-11,31,42,118,84,-61,-123,-23,127,-56, 
  /* [559][0][][] */ 8,-7,80,21,35,-25,-52,-4,29,85,127,-16,-22,-48,-16,-27, 
  /* [560][0][][] */ 27,9,-28,-70,-94,-53,26,97,35,-127,31,-30,-52,-11,67,18, 
  /* [561][0][][] */ 44,78,85,4,-64,-7,52,-90,6,93,-87,-17,5,-127,11,-13, 
  /* [562][0][][] */ 14,-97,4,-20,42,80,-127,-88,23,-36,38,-47,35,-29,-5,-28, 
  /* [563][0][][] */ -35,27,29,68,-43,-8,82,76,-62,99,6,99,-127,83,-31,23, 
  /* [564][0][][] */ 127,77,35,46,-31,-72,-5,-52,-119,103,-73,102,119,-32,37,27, 
  /* [565][0][][] */ -6,-127,-79,-69,107,-39,43,85,4,-4,-16,82,-28,-3,-92,31, 
  /* [566][0][][] */ -44,39,38,74,-8,-42,-127,62,99,-50,13,-56,82,1,25,-31, 
  /* [567][0][][] */ -62,-33,-18,62,-68,32,-58,-49,69,48,-98,-127,51,-68,72,-76, 
  /* [568][0][][] */ 11,118,1,-29,-79,-40,45,127,-18,-8,68,-13,-27,-11,-21,-28, 
  /* [569][0][][] */ -12,7,56,-12,127,13,60,28,34,18,-88,-22,24,-104,0,-43, 
  /* [570][0][][] */ 127,95,23,-47,55,89,83,14,-96,-75,-27,33,-35,37,57,107, 
  /* [571][0][][] */ 60,111,105,-1,-28,2,36,28,-87,-96,-127,-105,-68,-10,-55,80, 
  /* [572][0][][] */ -48,2,-21,-73,20,50,-47,-51,127,9,40,-80,-55,-48,-59,-16, 
  /* [573][0][][] */ 104,-11,88,17,-18,127,-4,-40,40,80,88,-72,69,-55,-17,-38, 
  /* [574][0][][] */ 33,68,6,64,121,9,-5,-42,16,-55,127,-84,74,-27,95,7, 
  /* [575][0][][] */ -92,-6,70,64,-39,-59,80,13,2,-11,24,-127,13,-6,-10,-85, 
  /* [576][0][][] */ 30,20,-65,32,38,-47,-24,-11,-64,-26,-127,36,-48,8,42,-8, 
  /* [577][0][][] */ -31,16,-41,-56,29,-35,-101,-23,-6,82,19,29,84,127,-7,-64, 
  /* [578][0][][] */ -74,-99,12,127,108,-77,-64,-46,119,-6,-2,-121,-112,16,55,-101, 
  /* [579][0][][] */ -11,52,88,-54,-9,-4,25,107,-4,-127,44,-36,-7,-45,-59,57, 
  /* [580][0][][] */ -35,29,25,34,0,-86,-82,31,-14,93,73,-43,-2,41,108,127, 
  /* [581][0][][] */ 127,-10,93,40,102,13,-100,-98,73,65,2,57,-122,34,17,-4, 
  /* [582][0][][] */ 11,-71,36,86,35,89,-14,7,19,-127,-55,-75,30,48,56,-30, 
  /* [583][0][][] */ -7,-25,-36,54,-15,-38,-52,-71,-6,16,41,-18,-127,-55,-62,-56, 
  /* [584][0][][] */ 9,-16,-32,-69,73,-31,-127,-115,65,93,38,49,-33,46,-2,45, 
  /* [585][0][][] */ 57,-17,45,-25,55,-55,9,91,-3,22,-67,6,55,-127,-36,-35, 
  /* [586][0][][] */ -58,-127,110,108,-44,8,37,13,109,61,123,1,97,48,87,118, 
  /* [587][0][][] */ 6,-28,-51,-43,-127,15,-2,5,-8,87,-4,42,24,-93,11,3, 
  /* [588][0][][] */ 38,24,-50,-27,-14,53,-118,-51,2,-8,127,-54,-67,-63,-72,-42, 
  /* [589][0][][] */ -108,-9,35,-17,-4,-22,13,-44,127,-49,115,-28,79,32,-35,31, 
  /* [590][0][][] */ -127,-4,-31,29,-52,50,44,-81,44,-63,39,6,99,64,59,50, 
  /* [591][0][][] */ 62,-22,-97,50,34,106,-127,34,3,-64,10,-47,-59,21,-67,-44, 
  /* [592][0][][] */ 14,127,-15,-32,-4,80,-16,57,-59,52,35,33,33,-14,85,-28, 
  /* [593][0][][] */ 20,-61,30,-50,-29,31,70,-32,7,-127,-27,-35,-57,-13,10,121, 
  /* [594][0][][] */ 34,-51,-22,-4,82,-38,-5,-127,66,-37,4,-19,5,48,99,-9, 
  /* [595][0][][] */ -15,-102,-38,-79,-55,34,-6,48,15,34,127,6,-103,28,-29,-1, 
  /* [596][0][][] */ 47,-72,-10,18,103,13,45,15,100,-27,25,-43,4,127,-79,-79, 
  /* [597][0][][] */ -83,-70,47,-61,44,-70,60,118,21,50,29,127,-20,-23,-36,83, 
  /* [598][0][][] */ -1,-18,-43,36,-96,61,-24,2,-51,-23,40,-105,17,-127,72,84, 
  /* [599][0][][] */ 6,-126,79,82,-14,-35,44,74,-97,127,27,60,109,-37,-50,38, 
  /* [600][0][][] */ 10,-8,-1,50,127,41,-88,-50,1,-37,-23,-125,2,-88,6,-58, 
  /* [601][0][][] */ 61,62,-35,-85,-55,73,84,90,127,80,0,-47,89,-22,38,-1, 
  /* [602][0][][] */ 18,-15,4,18,96,1,-60,106,-9,-43,-51,-75,127,-21,10,-105, 
  /* [603][0][][] */ -105,42,-72,-22,-94,25,-17,85,52,124,65,49,8,-27,-66,-127, 
  /* [604][0][][] */ 71,-23,-44,-27,-30,4,52,18,-72,13,22,0,43,-127,27,127, 
  /* [605][0][][] */ 55,58,55,-9,-71,127,48,1,-30,-39,0,-1,-26,86,37,22, 
  /* [606][0][][] */ -15,62,22,49,-51,-17,-45,-127,-6,106,-33,-66,-106,39,39,-14, 
  /* [607][0][][] */ -20,47,66,-95,54,19,127,-40,11,24,-68,71,-78,33,-35,-11, 
  /* [608][0][][] */ -63,-66,-50,49,27,92,127,85,104,39,16,-74,0,120,-33,43, 
  /* [609][0][][] */ -64,70,48,-79,22,7,-74,-9,75,71,0,18,-9,24,-127,-80, 
  /* [610][0][][] */ 15,-13,34,11,-6,56,25,55,27,-41,15,-28,82,-127,6,-25, 
  /* [611][0][][] */ -66,42,6,127,48,111,57,47,29,84,33,-4,112,-59,-20,-96, 
  /* [612][0][][] */ 70,73,127,-4,-26,-11,-26,-20,-94,20,-9,31,-30,-31,-21,-27, 
  /* [613][0][][] */ -64,38,64,37,0,49,121,127,60,-90,18,-57,-83,-12,39,54, 
  /* [614][0][][] */ -34,-70,-48,127,11,28,-29,-68,28,-22,24,-48,50,-23,-36,22, 
  /* [615][0][][] */ 42,80,-48,-23,68,-77,-20,86,127,-113,30,-2,63,5,0,-60, 
  /* [616][0][][] */ -57,53,-69,24,30,-39,50,109,127,27,-16,-66,-60,97,-17,-50, 
  /* [617][0][][] */ -13,89,-125,34,47,-56,113,28,42,122,74,127,24,5,91,17, 
  /* [618][0][][] */ -14,-16,48,21,7,37,75,40,127,-88,48,68,-50,33,11,97, 
  /* [619][0][][] */ 69,-21,-48,7,-25,4,53,46,-41,127,64,-31,77,11,52,-22, 
  /* [620][0][][] */ -61,12,32,-87,-66,127,-74,25,3,65,-62,-7,61,-88,-47,-8, 
  /* [621][0][][] */ -18,-44,20,-8,91,35,31,-50,17,-8,82,20,-39,-127,63,-54, 
  /* [622][0][][] */ -65,68,-112,112,-7,-127,-107,39,-14,99,-108,-54,-14,33,37,113, 
  /* [623][0][][] */ -24,30,28,-15,5,120,16,-60,99,-17,-31,-127,-100,43,9,62, 
  /* [624][0][][] */ -6,18,25,-38,62,-24,-43,-60,47,42,23,6,7,127,-2,-56, 
  /* [625][0][][] */ 88,31,51,20,127,-41,48,103,64,8,-90,54,-20,32,7,-113, 
  /* [626][0][][] */ 7,54,24,-21,-14,17,32,-13,-127,52,12,21,51,3,-46,-77, 
  /* [627][0][][] */ 28,-37,-100,-2,86,48,-63,-35,-127,-56,-7,98,88,0,81,-5, 
  /* [628][0][][] */ 6,127,-86,45,27,38,38,45,-107,37,33,38,35,48,-14,-42, 
  /* [629][0][][] */ 71,-75,-63,-48,-89,-25,127,112,-1,32,41,9,109,-27,72,11, 
  /* [630][0][][] */ 53,-15,-66,-26,93,-115,-10,-10,-34,76,127,7,76,-97,63,1, 
  /* [631][0][][] */ -53,23,-26,-62,27,3,127,-15,30,-13,-31,115,-22,-43,-20,-7, 
  /* [632][0][][] */ -49,-57,-7,57,-83,67,52,-127,-60,-18,88,105,99,19,44,23, 
  /* [633][0][][] */ 23,-94,-35,41,-81,-21,58,-41,-85,127,-18,-78,-32,4,13,-85, 
  /* [634][0][][] */ -23,-5,-30,-32,8,-24,-127,31,-20,-16,-26,21,10,-41,-40,34, 
  /* [635][0][][] */ 20,62,73,26,-60,-45,17,-79,12,127,-6,17,114,-79,15,-1, 
  /* [636][0][][] */ 75,40,3,26,76,127,-8,-89,2,-77,-34,9,93,14,73,-54, 
  /* [637][0][][] */ 28,-55,-16,2,-51,-53,-25,33,64,40,127,-24,-6,3,39,14, 
  /* [638][0][][] */ 33,58,62,-56,-17,77,78,-57,13,-127,71,67,105,29,7,-11, 
  /* [639][0][][] */ 30,0,127,11,67,40,-46,7,22,7,-23,-3,71,-19,-7,-98, 
  /* [640][0][][] */ -68,-1,78,64,-17,108,-54,-63,-14,60,-127,-69,54,12,-72,-64, 
  /* [641][0][][] */ -40,0,51,-89,-23,17,-75,-45,-58,84,-39,127,34,-31,-8,106, 
  /* [642][0][][] */ 34,-21,38,-39,-24,-99,106,27,44,-127,69,95,49,10,102,-26, 
  /* [643][0][][] */ -127,5,32,-127,23,-38,111,-17,-10,20,-92,41,68,5,1,-61, 
  /* [644][0][][] */ -28,5,20,-89,-27,61,127,68,52,10,37,-6,86,89,-30,3, 
  /* [645][0][][] */ 28,17,84,50,-43,27,-104,0,15,-47,60,86,-41,5,-45,-127, 
  /* [646][0][][] */ -98,-36,-35,38,13,29,-12,44,127,73,92,-61,-11,42,19,3, 
  /* [647][0][][] */ -12,-14,31,79,-63,-127,15,-68,45,27,-1,5,-48,-17,121,-4, 
  /* [648][0][][] */ 27,8,83,-121,59,22,-27,-45,68,29,94,21,-47,11,41,-127, 
  /* [649][0][][] */ -92,121,30,93,-76,39,127,106,-66,-28,29,-34,58,-35,-1,-42, 
  /* [650][0][][] */ -19,-35,-5,-33,127,20,32,-33,10,-22,26,-12,17,-57,36,98, 
  /* [651][0][][] */ 45,42,-80,24,-64,118,77,31,52,-127,49,13,46,5,-59,-52, 
  /* [652][0][][] */ -14,69,7,-22,27,-39,-42,-23,56,-24,11,5,-25,-41,-6,-127, 
  /* [653][0][][] */ 9,-71,61,-43,-5,66,-71,30,75,9,71,-127,-64,12,-20,-72, 
  /* [654][0][][] */ 94,45,22,52,-40,40,86,-127,4,-124,-44,41,-45,-113,-38,-92, 
  /* [655][0][][] */ 24,3,-19,36,17,-29,50,47,53,-15,127,35,14,-20,-6,-1, 
  /* [656][0][][] */ 127,-10,-18,10,25,2,85,56,121,-29,-13,-21,26,2,-53,-57, 
  /* [657][0][][] */ -50,-53,127,126,109,-49,43,20,-6,65,-35,44,-27,40,-50,-41, 
  /* [658][0][][] */ -68,-26,30,-86,-30,-17,-127,9,117,67,-40,-94,-63,6,-67,-52, 
  /* [659][0][][] */ 106,-84,-59,89,72,-34,-84,-25,116,127,-105,-61,-91,22,-7,5, 
  /* [660][0][][] */ 127,30,-32,-14,-6,41,-19,-51,-41,-4,-33,-2,-4,-8,-70,6, 
  /* [661][0][][] */ -50,46,12,-127,63,73,83,-73,-17,-96,13,112,22,14,-8,124, 
  /* [662][0][][] */ -25,-53,-12,45,-25,-64,34,87,-71,-31,-45,-30,50,127,-101,77, 
  /* [663][0][][] */ 16,-3,40,43,60,-27,-55,-71,17,-73,-94,-16,127,-7,2,-119, 
  /* [664][0][][] */ 3,-24,2,-55,2,28,-15,51,37,34,56,-54,86,26,-4,127, 
  /* [665][0][][] */ -14,40,63,0,-14,-110,106,124,-74,26,109,-127,-102,2,50,5, 
  /* [666][0][][] */ 48,30,127,-8,-20,-5,30,5,-82,14,0,12,71,-19,49,-122, 
  /* [667][0][][] */ 45,19,-93,-127,-59,-116,43,73,75,5,-69,59,8,10,47,54, 
  /* [668][0][][] */ -29,-54,-30,-33,-36,32,-30,-74,-33,81,28,-95,-127,30,104,16, 
  /* [669][0][][] */ 32,1,103,21,42,-58,125,-101,-69,66,4,-13,-110,-49,127,-37, 
  /* [670][0][][] */ 57,38,-49,-68,37,-23,-127,-26,8,7,-49,21,61,-2,31,4, 
  /* [671][0][][] */ -54,-3,36,67,104,14,98,68,9,38,-28,26,127,-73,77,-96, 
  /* [672][0][][] */ 0,-36,12,-127,-42,-22,2,9,-25,-16,23,-12,9,-74,39,106, 
  /* [673][0][][] */ -47,-112,13,-33,102,81,99,0,28,-26,-55,127,5,63,-95,39, 
  /* [674][0][][] */ 19,96,1,-15,30,-55,127,52,41,-84,34,13,29,5,32,16, 
  /* [675][0][][] */ -4,-19,65,-93,-8,-21,-117,-61,118,69,103,102,-114,34,-127,-90, 
  /* [676][0][][] */ -15,-42,43,24,52,35,-24,-127,11,69,-41,-66,-47,-5,-109,62, 
  /* [677][0][][] */ 42,-49,-50,-56,-8,-59,-13,45,-36,3,1,-5,1,6,-127,-11, 
  /* [678][0][][] */ 127,-4,116,-72,34,-15,122,41,-124,-77,-104,8,-45,52,30,-91, 
  /* [679][0][][] */ 40,-3,20,67,-58,-37,-73,14,-29,62,-3,17,-127,19,35,97, 
  /* [680][0][][] */ -82,-20,-127,-87,82,-44,40,23,-30,103,-78,-25,-33,9,-126,108, 
  /* [681][0][][] */ -94,20,-16,-26,85,114,-49,38,58,33,127,10,73,-67,-23,-72, 
  /* [682][0][][] */ -10,-30,13,-27,62,9,34,33,55,57,118,11,1,-127,-58,92, 
  /* [683][0][][] */ 80,37,-54,-37,127,-20,-122,-35,56,85,-16,36,-11,48,-88,-86, 
  /* [684][0][][] */ -82,-36,-73,-60,-97,-89,19,127,-27,14,-40,-39,-38,-1,0,56, 
  /* [685][0][][] */ -61,7,9,-33,-21,43,-13,-75,-93,36,-6,4,-17,-127,-6,48, 
  /* [686][0][][] */ 74,22,120,-92,-22,22,-18,62,53,127,39,-53,-38,-40,47,83, 
  /* [687][0][][] */ -3,6,29,-16,15,95,127,-16,38,-27,-67,-66,96,-83,0,-88, 
  /* [688][0][][] */ 59,9,53,122,-125,-52,-14,-55,57,-6,-31,45,127,28,-24,-79, 
  /* [689][0][][] */ -111,-127,20,61,-46,-56,63,-53,33,-31,59,13,24,22,79,-37, 
  /* [690][0][][] */ -25,-6,-39,127,50,-77,30,29,100,-9,-52,-25,93,29,77,-45, 
  /* [691][0][][] */ 69,-59,-41,-14,97,0,59,104,-46,58,28,49,127,-34,-75,-84, 
  /* [692][0][][] */ -70,-25,-26,-85,48,-120,-44,-116,99,60,10,17,95,127,-1,-60, 
  /* [693][0][][] */ -100,-75,-75,-18,3,-23,127,-9,114,67,18,59,46,-30,14,-75, 
  /* [694][0][][] */ 117,-59,-53,-102,-77,-97,-35,-78,4,-8,36,29,52,4,127,68, 
  /* [695][0][][] */ -127,-26,-31,6,-55,94,3,-60,-118,85,43,0,26,-91,21,36, 
  /* [696][0][][] */ 5,9,-6,1,26,13,-12,-69,-26,25,-27,11,63,-102,13,-127, 
  /* [697][0][][] */ -38,11,-22,8,-13,6,11,18,2,48,-79,-19,-81,12,-127,-20, 
  /* [698][0][][] */ -1,127,-37,-38,-39,8,24,53,-99,-58,-63,53,-8,-57,-96,30, 
  /* [699][0][][] */ 48,21,-86,127,37,-105,-19,76,53,57,27,-70,-72,-40,0,22, 
  /* [700][0][][] */ 89,-41,9,-48,-94,49,127,28,-45,-63,13,77,120,19,-34,13, 
  /* [701][0][][] */ 55,-95,103,56,61,70,60,-62,-5,15,127,-90,-120,107,-110,-34, 
  /* [702][0][][] */ 127,-25,-3,-78,46,-86,-13,-11,47,41,69,73,59,-25,-16,-21, 
  /* [703][0][][] */ -17,-127,10,53,9,-16,59,97,-2,21,-66,-17,35,34,-34,89, 
  /* [704][0][][] */ -32,-89,40,127,69,-2,117,123,6,71,40,-41,28,107,119,15, 
  /* [705][0][][] */ -35,14,113,-22,52,-32,122,25,-62,15,18,74,127,52,30,42, 
  /* [706][0][][] */ -2,-73,9,-9,12,48,-66,-38,-14,91,69,-95,5,-127,62,55, 
  /* [707][0][][] */ 83,-34,94,-20,-127,-51,-10,-5,67,-43,30,-98,18,-2,3,-6, 
  /* [708][0][][] */ -22,78,-96,49,-101,-39,12,-41,64,-127,-1,31,59,81,-69,69, 
  /* [709][0][][] */ 1,-9,-92,-122,65,-59,110,-39,49,30,-71,37,123,34,-23,-127, 
  /* [710][0][][] */ 43,30,12,-50,-39,127,27,-28,-63,14,40,-56,-44,53,-53,48, 
  /* [711][0][][] */ 117,-64,-110,-127,91,86,1,70,-1,37,94,18,-43,17,-47,-2, 
  /* [712][0][][] */ 66,32,-62,35,36,2,-127,-1,-2,-59,34,-40,-68,-8,-70,-70, 
  /* [713][0][][] */ -90,-44,13,-51,127,-28,37,-22,14,2,15,34,72,-33,27,43, 
  /* [714][0][][] */ 5,-37,-127,-3,75,-19,51,-7,17,32,-26,35,0,-123,16,-32, 
  /* [715][0][][] */ -78,-6,-7,-51,-55,59,-54,-33,127,26,77,-60,84,74,-20,93, 
  /* [716][0][][] */ -32,63,-127,23,93,-71,50,5,-62,17,48,92,50,-79,70,-100, 
  /* [717][0][][] */ -20,38,40,127,111,-38,68,40,8,54,90,-6,-52,37,9,-38, 
  /* [718][0][][] */ -75,19,35,24,21,33,-100,-19,49,108,-78,-124,42,127,0,-49, 
  /* [719][0][][] */ -44,70,50,-10,3,-26,-57,-12,-99,127,61,40,-33,-46,33,20, 
  /* [720][0][][] */ -17,119,-53,51,-22,-14,-11,-31,19,40,42,127,-46,11,54,34, 
  /* [721][0][][] */ 66,-72,26,-35,-87,41,51,95,72,-39,127,18,-50,12,-5,-34, 
  /* [722][0][][] */ 12,-62,-78,-23,58,127,91,32,-39,57,114,69,72,18,8,-115, 
  /* [723][0][][] */ 14,-7,49,79,50,-61,105,66,-68,-127,40,-66,-25,-76,32,-2, 
  /* [724][0][][] */ -17,66,7,41,-18,-85,40,1,17,127,-72,-22,-44,-12,84,32, 
  /* [725][0][][] */ -44,21,-15,-12,36,-46,19,-1,10,-27,11,34,-10,127,4,-50, 
  /* [726][0][][] */ 54,116,41,-50,-45,10,-56,59,-82,127,45,-63,-44,-23,-80,-67, 
  /* [727][0][][] */ 22,50,81,13,70,71,-20,-13,-16,-29,-20,-27,32,-12,40,127, 
  /* [728][0][][] */ -64,-29,64,13,-34,25,61,-20,-27,47,-13,-17,127,-28,82,12, 
  /* [729][0][][] */ 18,-113,78,50,-72,28,47,-61,42,112,44,-43,127,20,31,-125, 
  /* [730][0][][] */ -25,-87,-63,57,-71,23,-118,37,-89,69,-21,-107,127,-88,75,108, 
  /* [731][0][][] */ -127,-4,-44,-90,101,5,-66,77,46,-58,32,-65,36,53,62,-106, 
  /* [732][0][][] */ 100,-32,-90,127,93,11,-4,42,52,-31,-100,85,82,-88,-94,-34, 
  /* [733][0][][] */ -7,39,11,-21,-12,35,112,52,-9,-15,-67,75,-77,-127,14,7, 
  /* [734][0][][] */ 127,-19,40,-67,6,-7,47,-6,-5,80,6,28,-66,109,-47,57, 
  /* [735][0][][] */ -79,60,-54,-62,11,103,13,127,29,13,82,-24,-47,-46,-73,48, 
  /* [736][0][][] */ 24,127,11,38,2,64,50,114,121,-17,118,-35,114,93,75,27, 
  /* [737][0][][] */ 112,8,2,-37,-89,62,127,18,-70,70,82,-7,19,-11,-27,-76, 
  /* [738][0][][] */ -54,-43,2,64,-18,-46,-46,-17,43,33,20,42,93,111,127,-37, 
  /* [739][0][][] */ 65,-44,-26,-38,-54,-46,14,67,127,38,126,-2,-58,77,14,110, 
  /* [740][0][][] */ 46,51,-120,-54,-126,58,83,17,-40,47,-66,127,-49,-39,26,-16, 
  /* [741][0][][] */ 127,41,-9,-16,-69,114,-76,55,93,-22,7,119,72,112,-57,29, 
  /* [742][0][][] */ -76,17,50,-43,88,118,-22,-26,-73,-127,-95,64,64,-3,-70,-43, 
  /* [743][0][][] */ 0,-21,-57,-75,-53,127,76,-96,-24,-49,-124,24,20,-14,-45,-9, 
  /* [744][0][][] */ -23,-14,-26,-37,60,-42,72,13,44,0,-127,-19,-85,-55,7,0, 
  /* [745][0][][] */ -11,-38,53,-32,-65,-127,-37,61,-41,42,-72,-39,3,10,20,-18, 
  /* [746][0][][] */ 127,-104,15,22,-50,8,85,-14,22,68,1,-73,28,46,33,-109, 
  /* [747][0][][] */ -28,2,46,-72,27,50,-9,-82,-3,34,0,-11,38,-127,51,-74, 
  /* [748][0][][] */ -66,101,48,-106,122,22,123,-22,127,-16,-98,-31,106,-80,43,13, 
  /* [749][0][][] */ -54,36,-22,-127,27,41,62,43,44,13,-12,27,81,11,-41,69, 
  /* [750][0][][] */ -1,19,5,22,1,27,41,-34,-75,-127,59,-1,77,-17,-76,45, 
  /* [751][0][][] */ -32,2,47,-5,108,-53,127,-28,72,48,-16,13,-24,101,-67,-81, 
  /* [752][0][][] */ 3,56,6,50,62,70,-118,-127,-18,47,108,32,77,-5,-119,-89, 
  /* [753][0][][] */ 26,-123,-34,54,-65,-13,-86,19,-32,42,52,-123,109,-61,117,127, 
  /* [754][0][][] */ -5,-33,0,-32,9,-4,-12,39,-66,52,-71,18,-2,-14,-127,28, 
  /* [755][0][][] */ 126,-67,-6,48,5,-55,-12,-32,127,-63,108,-112,71,84,75,-63, 
  /* [756][0][][] */ 99,-15,41,12,119,-65,-59,127,-6,35,13,21,89,44,71,100, 
  /* [757][0][][] */ 29,-82,19,23,-78,79,-53,-127,87,-26,82,-46,50,-28,100,21, 
  /* [758][0][][] */ 20,64,-19,52,45,3,-31,127,-56,-61,14,20,68,-122,-39,13, 
  /* [759][0][][] */ 10,-11,-49,-78,-33,11,33,8,34,74,13,-15,39,-32,127,-26, 
  /* [760][0][][] */ 86,-20,49,16,18,-116,-127,59,-8,59,-30,-50,-26,-81,20,44, 
  /* [761][0][][] */ 21,-18,-101,-6,-108,-22,-36,-97,-127,-25,1,34,-6,-98,-6,42, 
  /* [762][0][][] */ -9,-2,-62,-2,26,-113,-15,14,-39,69,13,55,100,-25,70,-127, 
  /* [763][0][][] */ 114,-106,-53,22,60,35,-37,12,34,-49,50,-74,34,-52,-8,-127, 
  /* [764][0][][] */ -23,46,-19,-49,31,2,16,42,-15,30,-17,34,127,-3,-9,-95, 
  /* [765][0][][] */ -29,23,-6,86,-17,4,96,56,3,35,89,-30,33,-67,127,47, 
  /* [766][0][][] */ -70,-4,53,37,-51,-103,0,1,-32,113,23,-5,8,-69,72,-127, 
  /* [767][0][][] */ 57,41,3,36,27,90,-17,-72,28,95,-2,-97,15,-51,127,-82, 
  /* [768][0][][] */ -30,-126,-41,21,76,63,23,127,23,-67,-43,-9,-34,13,-85,-46, 
  /* [769][0][][] */ -69,22,10,-44,13,17,127,-71,114,8,58,96,-14,95,-31,3, 
  /* [770][0][][] */ -74,11,42,-39,-101,127,122,62,17,-118,-41,21,42,-27,38,-21, 
  /* [771][0][][] */ 9,-86,114,-62,23,-72,47,16,68,78,-92,127,-110,-2,51,27, 
  /* [772][0][][] */ -26,-61,52,-47,-60,-66,11,-127,0,-25,-23,-25,54,-11,70,32, 
  /* [773][0][][] */ 111,-65,-127,60,115,73,-60,48,-8,-105,-47,-107,66,98,9,68, 
  /* [774][0][][] */ 23,-127,-27,45,22,6,23,-23,6,32,28,15,-5,30,57,-10, 
  /* [775][0][][] */ -40,0,58,-39,-96,-27,38,127,10,-28,-17,-12,-55,-39,-39,68, 
  /* [776][0][][] */ 49,-41,47,-12,30,-116,75,40,-32,-42,-6,-27,74,11,127,-10, 
  /* [777][0][][] */ -21,74,-69,-9,65,19,-12,81,127,-23,0,-56,119,91,-10,-47, 
  /* [778][0][][] */ 92,0,-42,-20,-18,-65,55,127,25,-73,122,33,-3,36,59,-2, 
  /* [779][0][][] */ -26,-7,29,20,6,68,105,-100,-40,-79,15,90,14,70,55,127, 
  /* [780][0][][] */ -53,-111,-16,76,-20,59,16,-19,73,27,100,-118,74,24,127,34, 
  /* [781][0][][] */ 109,-39,115,29,115,89,-15,55,-127,12,94,112,-84,-47,-58,52, 
  /* [782][0][][] */ -39,41,68,-17,81,-19,127,21,-21,-30,-47,6,7,5,-3,-37, 
  /* [783][0][][] */ -127,-3,-16,-68,78,-12,0,31,-5,103,-44,-6,-94,-22,-81,64, 
  /* [784][0][][] */ -26,-1,1,-25,-14,39,127,51,-80,43,21,32,-24,-38,-43,-108, 
  /* [785][0][][] */ 127,-17,23,48,42,37,-36,10,23,43,-25,-37,52,36,-21,-17, 
  /* [786][0][][] */ -32,49,17,-34,22,70,58,-41,48,-51,21,22,-71,50,27,127, 
  /* [787][0][][] */ -21,-20,83,-17,35,-127,48,-58,-24,31,12,-22,6,23,48,-31, 
  /* [788][0][][] */ 90,127,17,6,10,57,-73,77,-1,-101,-109,-25,16,8,36,-31, 
  /* [789][0][][] */ -5,-31,18,82,40,-21,-20,30,-12,-75,4,30,127,20,-5,4, 
  /* [790][0][][] */ -56,-15,-26,12,-11,0,-60,-4,122,-13,-127,44,-50,-57,-72,35, 
  /* [791][0][][] */ 56,16,-27,35,54,127,-56,56,80,54,40,55,15,32,-57,-106, 
  /* [792][0][][] */ 9,-63,-79,13,-52,-11,76,-25,127,-55,-41,-20,37,0,71,-6, 
  /* [793][0][][] */ -22,-127,92,10,13,91,117,36,52,-28,90,-11,61,106,-68,42, 
  /* [794][0][][] */ 36,48,62,75,-49,-31,-20,108,13,-100,72,-127,27,115,23,-51, 
  /* [795][0][][] */ -18,-70,5,-8,-47,79,-55,-57,-42,-19,66,-127,87,13,15,33, 
  /* [796][0][][] */ 26,-107,-46,16,21,-127,41,10,-95,47,-10,3,-59,4,-29,-1, 
  /* [797][0][][] */ -57,-31,37,-29,-32,127,-86,6,7,71,19,-71,75,-117,36,21, 
  /* [798][0][][] */ -68,-48,117,-79,83,-69,-2,-37,111,28,-16,26,37,-33,127,26, 
  /* [799][0][][] */ 35,6,-38,3,11,-12,22,-87,53,20,48,22,26,26,127,4, 
  /* [800][0][][] */ -36,-43,-34,98,-12,18,-18,-122,30,34,-20,5,9,-8,9,-127, 
  /* [801][0][][] */ 49,-58,20,-18,-3,-77,0,-25,-42,-54,-35,87,-52,-15,-15,127, 
  /* [802][0][][] */ -53,-15,9,-57,39,-3,-23,44,-127,36,-5,-74,7,38,58,-93, 
  /* [803][0][][] */ 44,-43,16,3,-6,69,-73,-123,-26,36,11,-43,-127,29,70,122, 
  /* [804][0][][] */ 17,106,79,-74,47,15,-13,-2,-18,54,-56,-127,-26,-67,76,11, 
  /* [805][0][][] */ 1,18,38,-106,13,-24,127,6,80,-73,-16,102,-59,-15,-21,124, 
  /* [806][0][][] */ 40,-25,-9,-127,-6,119,-72,78,-25,-1,-19,-41,-8,-93,-50,63, 
  /* [807][0][][] */ -9,53,-56,32,-54,-10,127,-91,-81,83,32,62,46,99,10,30, 
  /* [808][0][][] */ -82,127,-57,-36,-27,-23,-10,26,117,-2,71,-2,-38,35,62,-19, 
  /* [809][0][][] */ -68,-59,-66,-65,23,92,-71,97,40,-68,127,-108,-31,37,-85,21, 
  /* [810][0][][] */ 3,-109,-30,15,-6,-55,127,25,-15,-43,-5,39,6,7,89,26, 
  /* [811][0][][] */ -7,-17,7,68,68,22,58,-20,-127,39,-3,7,-16,-89,-63,-26, 
  /* [812][0][][] */ 49,-73,-127,35,-18,4,35,-86,21,-34,106,89,-1,-79,61,36, 
  /* [813][0][][] */ -9,-40,-127,-45,-53,1,42,-37,72,34,10,-27,102,28,-17,-91, 
  /* [814][0][][] */ -20,15,-8,1,-12,17,20,-66,-3,-43,-7,71,127,47,-2,30, 
  /* [815][0][][] */ -127,28,-69,-70,78,12,-29,-66,-17,44,39,127,98,-11,-63,42, 
  /* [816][0][][] */ -22,39,-16,1,77,-50,-115,43,34,-43,14,58,66,-12,-127,50, 
  /* [817][0][][] */ 49,9,-127,-115,-2,-63,-14,-1,85,22,85,18,83,84,-37,-52, 
  /* [818][0][][] */ -18,14,-28,103,18,24,127,0,38,42,-97,-45,-20,-12,-5,-13, 
  /* [819][0][][] */ 23,37,99,-65,-2,9,22,-7,5,7,48,8,127,-24,-47,-95, 
  /* [820][0][][] */ -75,28,75,70,54,89,13,-127,35,10,-13,3,5,-66,21,-9, 
  /* [821][0][][] */ 15,27,82,-41,76,-22,29,1,8,93,127,97,55,-19,-19,-56, 
  /* [822][0][][] */ 50,44,-56,-1,58,91,-127,-65,-40,9,56,20,10,-29,38,-70, 
  /* [823][0][][] */ 54,-22,11,73,8,-59,59,-23,127,-9,10,-4,-29,71,19,-66, 
  /* [824][0][][] */ -91,8,-10,3,-120,42,15,-127,-22,-62,-50,-14,-10,-46,110,31, 
  /* [825][0][][] */ -40,-9,-105,-15,-99,2,-30,-14,125,19,4,-1,127,58,16,-34, 
  /* [826][0][][] */ -78,-10,-24,-9,-80,91,-39,-72,-127,46,-22,24,89,52,77,47, 
  /* [827][0][][] */ 33,99,71,1,75,127,-55,-6,-48,32,-46,-26,17,-50,-33,-20, 
  /* [828][0][][] */ 26,-4,127,-38,-73,60,73,62,10,58,5,-94,-9,16,22,19, 
  /* [829][0][][] */ -71,-39,49,-84,-18,48,64,0,-20,43,67,74,65,-61,-127,-23, 
  /* [830][0][][] */ 110,42,14,28,39,127,1,112,-5,54,22,27,-25,-96,-61,-33, 
  /* [831][0][][] */ -50,52,24,77,-104,-24,3,-47,-3,17,-18,10,127,-19,60,19, 
  /* [832][0][][] */ 89,32,-22,-3,-20,127,30,-83,44,94,-47,59,14,28,-10,-94, 
  /* [833][0][][] */ -79,-66,-51,28,127,32,-112,55,35,98,-46,-19,33,-99,8,71, 
  /* [834][0][][] */ -14,127,-13,20,-39,31,-1,58,-6,58,32,-43,59,5,18,3, 
  /* [835][0][][] */ 115,-1,84,-83,9,1,-37,22,-100,-1,91,-127,-96,-65,3,-89, 
  /* [836][0][][] */ 29,-33,59,80,39,47,1,-80,50,-45,75,-127,-86,-15,-1,-93, 
  /* [837][0][][] */ -47,127,4,-79,-26,88,112,53,-24,3,48,-113,-35,-62,46,-18, 
  /* [838][0][][] */ -25,43,18,-127,28,-11,108,-89,-4,96,-18,69,11,0,-57,-61, 
  /* [839][0][][] */ -125,35,59,47,-76,38,79,-94,95,-5,12,1,-127,100,-27,44, 
  /* [840][0][][] */ 56,-8,127,72,123,-71,72,-60,9,-88,-70,43,-26,18,70,0, 
  /* [841][0][][] */ 86,54,-22,-127,50,-101,123,-24,21,4,-85,104,-115,10,-16,-88, 
  /* [842][0][][] */ -14,-4,-35,44,15,-21,-22,-33,-48,14,-87,21,7,40,-17,127, 
  /* [843][0][][] */ -111,29,38,-120,-73,36,-3,90,127,92,14,-50,-4,-46,-5,84, 
  /* [844][0][][] */ 76,-6,-58,48,36,-55,-49,23,49,-72,10,127,-25,-21,33,70, 
  /* [845][0][][] */ -22,-53,76,79,-61,-127,36,93,-4,89,-71,8,33,74,-111,70, 
  /* [846][0][][] */ -25,5,-9,127,-41,-47,58,63,34,78,31,-52,37,8,-79,-73, 
  /* [847][0][][] */ -127,61,-42,9,101,120,109,-20,107,40,-36,-43,58,47,50,69, 
  /* [848][0][][] */ 0,-37,-60,80,-127,87,-63,-10,-64,-13,60,-39,75,-3,48,88, 
  /* [849][0][][] */ 20,2,112,-8,39,75,46,10,127,-41,-12,-35,26,46,66,-37, 
  /* [850][0][][] */ 22,-42,-12,16,122,104,-7,13,89,-56,-32,-127,84,87,120,47, 
  /* [851][0][][] */ 13,-75,14,46,59,65,-33,-47,127,-59,58,32,-5,42,-4,-19, 
  /* [852][0][][] */ 42,0,16,-127,34,-101,-109,67,-19,70,15,-88,90,-62,-26,-4, 
  /* [853][0][][] */ -101,-97,21,-21,-127,0,42,50,1,38,43,-32,-29,14,-1,-80, 
  /* [854][0][][] */ 25,-4,-7,65,-76,-43,-80,12,63,127,50,-16,26,24,34,57, 
  /* [855][0][][] */ -90,-92,-36,86,-40,-5,127,16,29,50,-74,-103,-79,101,52,103, 
  /* [856][0][][] */ -111,53,25,-75,2,26,18,-80,-59,24,56,27,127,55,-41,-7, 
  /* [857][0][][] */ 95,20,37,-127,69,-43,49,98,81,-100,16,25,-69,-35,-94,-81, 
  /* [858][0][][] */ -53,-97,-48,-96,-43,94,89,-73,-55,72,36,-4,64,-127,35,70, 
  /* [859][0][][] */ -81,-41,-56,49,-102,46,-87,-32,127,-18,104,-36,-90,4,-32,-28, 
  /* [860][0][][] */ 82,119,26,-40,12,2,66,-55,12,38,34,28,7,127,40,12, 
  /* [861][0][][] */ -17,35,5,5,18,48,-127,-5,-70,22,-5,-20,10,106,-17,59, 
  /* [862][0][][] */ 14,-54,-98,1,64,0,15,61,127,15,32,18,-9,32,-5,-84, 
  /* [863][0][][] */ 62,51,-89,-47,46,-71,-22,-46,15,127,87,45,-123,-88,-22,-53, 
  /* [864][0][][] */ 31,8,-10,42,-85,-13,78,76,127,10,71,-77,60,-18,18,19, 
  /* [865][0][][] */ -42,-59,-74,-7,-9,35,81,-69,4,-10,-35,12,127,65,99,-49, 
  /* [866][0][][] */ -16,-15,7,31,63,15,127,21,-65,-79,-70,82,22,-21,-19,16, 
  /* [867][0][][] */ 11,5,1,127,88,36,-85,51,95,-15,82,22,-1,-50,-63,-75, 
  /* [868][0][][] */ -127,67,-51,23,1,81,-37,-21,-3,10,57,69,94,37,67,-93, 
  /* [869][0][][] */ -126,-55,-9,-35,3,-20,-75,-85,-52,2,51,52,97,-127,-54,86, 
  /* [870][0][][] */ -78,-127,-20,-28,38,1,57,-2,1,66,89,63,77,-100,-48,-39, 
  /* [871][0][][] */ -26,-15,7,5,28,-16,-4,21,0,101,-26,-40,127,-63,79,30, 
  /* [872][0][][] */ -29,-53,-44,0,5,-87,-24,-127,3,-47,42,54,64,24,-12,5, 
  /* [873][0][][] */ -16,29,39,53,50,47,91,-14,-79,24,-79,33,-46,-36,41,-127, 
  /* [874][0][][] */ 113,95,-42,4,17,-83,41,127,-22,-32,-26,41,27,-31,6,3, 
  /* [875][0][][] */ -127,20,15,18,93,-12,98,27,64,-80,-59,-37,18,-9,12,11, 
  /* [876][0][][] */ -19,-65,39,58,-64,-4,-114,27,127,-71,114,-118,-98,28,94,119, 
  /* [877][0][][] */ 127,-19,51,-11,67,-47,86,40,0,106,-8,7,-18,-18,-17,-77, 
  /* [878][0][][] */ 30,94,22,-13,20,29,-18,-120,-22,81,9,-88,-8,29,109,-127, 
  /* [879][0][][] */ 127,-87,0,121,-95,46,13,-25,-28,37,5,-78,74,75,81,-63, 
  /* [880][0][][] */ 70,-17,0,103,-44,-127,-30,63,42,3,-54,13,53,107,-33,-84, 
  /* [881][0][][] */ -46,6,97,-60,-49,58,-31,68,-70,-112,50,127,-24,6,-117,81, 
  /* [882][0][][] */ -77,78,64,-45,127,79,-109,26,32,77,21,37,51,-59,-43,-40, 
  /* [883][0][][] */ 16,23,0,-54,37,-45,68,-65,-15,51,-20,-127,19,18,-72,-31, 
  /* [884][0][][] */ 40,48,-20,-27,2,-12,-8,-29,9,44,-113,118,34,24,32,-127, 
  /* [885][0][][] */ -112,64,22,32,81,-127,-108,126,-28,-14,-109,55,6,-81,64,12, 
  /* [886][0][][] */ 36,-39,52,28,44,-97,65,16,57,127,-49,-66,39,-84,67,-125, 
  /* [887][0][][] */ -11,85,33,-2,76,-30,-39,-55,41,60,-25,57,-127,101,49,-2, 
  /* [888][0][][] */ 32,46,2,-2,-96,14,-31,45,2,-7,1,-23,-127,-4,-38,14, 
  /* [889][0][][] */ 69,8,14,8,-5,-70,-127,-30,42,-52,49,-56,62,74,52,-34, 
  /* [890][0][][] */ -40,34,-68,19,-17,57,-5,-127,-35,12,-69,4,-78,-40,11,13, 
  /* [891][0][][] */ -77,-35,43,4,53,44,12,-40,127,10,19,7,-14,-8,-48,-32, 
  /* [892][0][][] */ 9,11,19,64,48,-25,30,-50,-54,-13,93,-18,36,-55,34,-127, 
  /* [893][0][][] */ 37,-62,127,106,37,-41,-65,65,123,38,-14,-62,30,7,27,-94, 
  /* [894][0][][] */ 34,-39,13,-14,86,-112,-127,-101,-122,58,-71,-77,-37,-61,-82,-106, 
  /* [895][0][][] */ -2,45,58,-15,23,60,-121,-23,-42,-7,3,-52,14,71,14,-127, 
  /* [896][0][][] */ 0,-116,110,35,52,20,-44,24,-30,88,-39,-127,-104,-23,-92,-50, 
  /* [897][0][][] */ 36,-74,-49,-64,124,101,46,-20,-82,39,2,71,127,39,-16,61, 
  /* [898][0][][] */ -99,90,-62,-127,-62,16,18,46,-4,36,56,18,-20,-25,-16,-56, 
  /* [899][0][][] */ 60,-25,-15,-7,95,22,127,34,68,-12,-16,-24,63,-14,-26,-14, 
  /* [900][0][][] */ -15,23,-87,22,-127,12,80,-15,38,-3,-14,-44,-112,61,-27,1, 
  /* [901][0][][] */ 99,127,-48,-40,-12,105,-11,-88,57,-72,36,123,28,96,-83,-66, 
  /* [902][0][][] */ -127,9,45,-6,-14,15,78,-40,38,45,-36,13,68,61,89,-10, 
  /* [903][0][][] */ -43,14,-26,1,-32,17,-46,-42,-34,20,20,-9,127,-94,47,-45, 
  /* [904][0][][] */ -8,-43,-53,90,-90,1,86,-48,33,16,77,-4,-69,26,127,-5, 
  /* [905][0][][] */ -28,-105,85,-63,-4,44,127,-85,126,123,73,-108,-94,16,89,-19, 
  /* [906][0][][] */ -127,-36,-22,-28,10,-111,-10,76,7,-16,-59,57,34,-15,-108,-4, 
  /* [907][0][][] */ 78,35,75,117,-6,-5,77,-127,-25,31,15,111,90,86,35,51, 
  /* [908][0][][] */ 57,-15,36,-8,-80,107,115,33,25,-74,-23,127,44,112,-70,-2, 
  /* [909][0][][] */ 59,5,28,-29,74,29,75,77,115,-24,17,6,111,-54,-5,-127, 
  /* [910][0][][] */ -45,48,-48,-36,20,-4,-79,-118,33,17,-38,22,15,127,6,-19, 
  /* [911][0][][] */ -37,46,17,-44,27,54,28,101,-67,-64,5,-86,-127,-70,90,-111, 
  /* [912][0][][] */ -41,-46,-56,11,2,54,7,-127,104,59,-14,-103,31,66,82,5, 
  /* [913][0][][] */ -21,2,-48,127,-41,15,-49,-80,73,-18,22,61,-23,94,60,-45, 
  /* [914][0][][] */ 95,-54,127,-43,-46,54,83,41,42,61,-57,-8,8,44,-65,-88, 
  /* [915][0][][] */ 37,71,127,56,30,65,86,19,-41,-69,18,-25,-105,17,8,40, 
  /* [916][0][][] */ 52,-11,6,-69,40,-29,65,3,127,30,51,1,-35,6,44,-74, 
  /* [917][0][][] */ 38,5,-91,46,37,65,87,62,-13,-79,30,3,-127,89,55,-25, 
  /* [918][0][][] */ -33,-33,51,57,-31,-88,69,-18,127,113,6,-74,10,-95,57,33, 
  /* [919][0][][] */ -17,48,-25,-8,-14,-19,-127,-22,-19,-29,4,-32,65,-52,-24,66, 
  /* [920][0][][] */ -127,3,105,73,-84,-8,7,-85,35,-69,43,95,109,-7,-70,36, 
  /* [921][0][][] */ -84,-101,-6,27,92,-2,119,-84,23,125,127,11,-118,52,34,-95, 
  /* [922][0][][] */ 29,-2,-11,19,12,-127,-40,-81,-42,46,-68,-50,-21,7,32,-36, 
  /* [923][0][][] */ 80,62,-71,20,120,-94,-50,34,-8,71,-127,-3,12,-27,-22,-21, 
  /* [924][0][][] */ 95,-16,-7,90,-101,29,53,-40,-127,-25,63,5,-40,103,-110,-111, 
  /* [925][0][][] */ -36,-1,-20,3,127,-61,-72,-79,-10,14,32,34,87,-89,-12,-38, 
  /* [926][0][][] */ -6,-54,34,-32,-122,-9,-57,16,27,14,14,-83,56,127,-34,-7, 
  /* [927][0][][] */ 40,-58,-58,75,-82,55,-127,16,-14,-79,82,-30,53,9,32,97, 
  /* [928][0][][] */ 127,5,20,-5,32,-42,50,92,-64,36,-27,-40,-86,-8,-22,-58, 
  /* [929][0][][] */ 1,-127,-14,-65,-26,-19,52,79,15,-21,50,-50,-50,-78,-11,-49, 
  /* [930][0][][] */ -85,-43,-75,-16,-76,-84,-21,-127,29,58,16,-21,17,41,16,9, 
  /* [931][0][][] */ 22,-74,17,66,68,-76,-89,-127,9,-84,11,26,-6,-23,60,8, 
  /* [932][0][][] */ -9,-34,-68,87,-51,10,24,-26,-92,-14,24,-4,15,127,71,-25, 
  /* [933][0][][] */ 56,71,64,-56,-27,40,36,-43,60,15,-127,-29,31,34,17,-9, 
  /* [934][0][][] */ 63,-7,38,-52,127,-48,-65,-80,10,68,38,60,-35,26,-38,-23, 
  /* [935][0][][] */ 80,70,-32,-72,-50,-90,-58,10,-127,-12,-6,50,-59,16,-25,52, 
  /* [936][0][][] */ 111,78,22,-91,-70,-108,127,-17,93,-14,32,10,44,53,101,12, 
  /* [937][0][][] */ 72,-27,42,3,16,12,-100,-31,-61,12,-17,-82,-127,3,40,69, 
  /* [938][0][][] */ 51,42,30,66,-37,110,-127,66,53,-76,77,-41,7,39,-43,-6, 
  /* [939][0][][] */ 16,80,-127,52,-70,-65,-58,35,-71,-82,-15,103,71,10,-20,65, 
  /* [940][0][][] */ 127,-8,-24,16,40,-17,-32,65,80,15,7,-57,-5,65,18,-82, 
  /* [941][0][][] */ -10,-34,-69,35,22,-100,40,80,127,101,-74,-113,30,-5,4,-107, 
  /* [942][0][][] */ -11,2,58,13,-14,-5,-93,-19,-50,-20,-60,-22,113,127,0,-47, 
  /* [943][0][][] */ -37,2,-51,-36,-87,68,72,-93,66,21,-12,6,65,31,-127,-50, 
  /* [944][0][][] */ 127,-54,-48,-32,30,18,-13,-4,21,82,-58,-64,-23,-2,58,-3, 
  /* [945][0][][] */ 36,104,-36,-29,-58,-8,-2,-42,61,-51,-64,-12,-127,-79,46,43, 
  /* [946][0][][] */ -2,44,5,-3,127,78,61,-26,7,24,-48,123,29,-80,55,-97, 
  /* [947][0][][] */ 28,-74,-43,88,48,89,-10,41,-66,-4,127,43,-29,-69,14,19, 
  /* [948][0][][] */ -14,-127,-71,68,106,-92,-27,3,91,89,9,44,22,95,-112,9, 
  /* [949][0][][] */ -69,123,-40,28,-23,-50,68,-18,-33,-77,105,-127,-37,-104,95,123, 
  /* [950][0][][] */ 3,48,-59,-14,4,8,21,-27,34,-37,-2,127,13,5,-66,-6, 
  /* [951][0][][] */ -2,-100,109,54,-66,127,80,-2,-29,-25,-34,46,-8,-28,51,92, 
  /* [952][0][][] */ -24,29,127,-23,18,47,36,-46,51,-44,29,53,7,3,50,126, 
  /* [953][0][][] */ 62,52,16,-5,44,-36,17,58,96,-55,-59,8,21,83,-113,-127, 
  /* [954][0][][] */ -18,23,44,83,82,-88,28,-19,58,19,20,48,64,-34,-28,127, 
  /* [955][0][][] */ 110,-17,51,92,-127,25,51,43,51,-53,-90,123,14,17,105,60, 
  /* [956][0][][] */ 2,6,35,-87,10,23,96,19,28,-109,-15,5,-22,127,12,-10, 
  /* [957][0][][] */ 13,83,115,34,8,57,-89,-77,-127,-2,-24,-15,21,-112,100,-29, 
  /* [958][0][][] */ -2,-4,44,-87,17,93,-18,64,56,43,110,37,126,-108,95,127, 
  /* [959][0][][] */ -25,-94,23,126,6,114,127,-72,-31,-48,5,-36,-91,-21,-31,-14, 
  /* [960][0][][] */ 57,-56,105,-28,78,-8,37,-91,90,-127,57,69,-4,93,-42,109, 
  /* [961][0][][] */ 40,-70,77,-12,49,-127,-9,-67,38,4,28,-115,6,-15,-17,17, 
  /* [962][0][][] */ 93,-10,-63,-40,-67,-23,6,-35,36,-89,47,54,101,-11,99,127, 
  /* [963][0][][] */ 29,-4,-74,-83,8,-48,-107,29,23,-127,104,-18,15,-101,17,86, 
  /* [964][0][][] */ 117,4,-10,118,15,52,-120,-57,-127,-30,-49,67,-7,99,-125,-94, 
  /* [965][0][][] */ -21,-28,-95,-123,-127,121,-91,67,46,90,-8,-102,22,117,84,-83, 
  /* [966][0][][] */ -21,-67,52,-100,58,-11,127,4,32,116,6,-83,14,-57,82,-69, 
  /* [967][0][][] */ 91,2,42,-15,-51,43,39,-33,-45,-24,-6,20,-127,82,-6,-14, 
  /* [968][0][][] */ -127,7,8,-22,61,0,10,-50,-40,-7,-14,95,56,56,-32,16, 
  /* [969][0][][] */ -124,71,-27,42,86,127,-9,-66,-100,8,67,127,81,-36,49,-21, 
  /* [970][0][][] */ 25,-33,14,-26,40,79,-15,-65,29,127,-40,-62,-57,-46,-22,-4, 
  /* [971][0][][] */ -87,-17,-63,39,30,-83,43,-37,-4,-42,-52,127,90,-86,-2,-9, 
  /* [972][0][][] */ -5,-127,-67,-123,25,11,101,-2,-1,113,-26,-41,-98,64,93,112, 
  /* [973][0][][] */ 12,-17,-13,34,18,104,59,0,-10,97,125,-19,12,-127,35,-119, 
  /* [974][0][][] */ 92,47,-126,61,-127,35,93,-50,51,34,4,-77,20,26,114,24, 
  /* [975][0][][] */ -49,18,-22,49,73,-89,-127,-88,7,10,69,45,-3,65,-34,-5, 
  /* [976][0][][] */ 21,6,-54,-44,-34,-10,-58,-57,-95,98,-23,-74,41,-65,44,127, 
  /* [977][0][][] */ 3,-12,6,127,41,38,77,0,-1,-81,-6,23,-110,7,22,30, 
  /* [978][0][][] */ -24,15,-47,-35,70,53,-25,80,10,-31,100,-1,-49,-35,-37,-127, 
  /* [979][0][][] */ -45,-111,17,43,-30,-68,36,-42,29,127,62,-74,21,24,41,82, 
  /* [980][0][][] */ -33,-61,37,-127,-4,57,98,25,-121,-11,7,7,92,-76,40,-86, 
  /* [981][0][][] */ -10,127,-54,75,-91,87,-19,124,-33,-33,102,47,50,1,51,64, 
  /* [982][0][][] */ 127,119,39,-74,-29,-82,4,34,32,33,-63,10,54,-37,5,-30, 
  /* [983][0][][] */ -16,7,-31,20,-66,4,4,10,-50,115,10,-77,127,29,-36,-4, 
  /* [984][0][][] */ -1,46,14,-50,56,19,112,-47,-69,37,-61,127,-15,34,-91,27, 
  /* [985][0][][] */ -32,60,5,-39,-14,-127,14,28,-18,113,-41,82,4,-71,-68,64, 
  /* [986][0][][] */ 29,14,-12,-127,-115,-30,84,59,-5,-26,-48,12,-95,104,-42,-32, 
  /* [987][0][][] */ 60,7,-12,-76,77,-9,-87,-37,9,-61,-17,67,43,-53,127,-30, 
  /* [988][0][][] */ -36,84,-28,-78,-75,-33,-79,39,107,127,-51,85,-32,115,-79,11, 
  /* [989][0][][] */ -62,-10,-29,-43,84,109,-20,-33,-23,-13,127,10,59,20,-99,-88, 
  /* [990][0][][] */ 25,6,29,9,-22,55,41,3,-7,33,127,74,13,36,-19,-7, 
  /* [991][0][][] */ 111,-16,9,-33,-20,-9,89,47,124,-6,46,59,127,2,39,19, 
  /* [992][0][][] */ 33,114,73,-60,5,-8,-107,-23,-61,-127,-72,-4,9,55,42,-18, 
  /* [993][0][][] */ -14,16,127,-63,-9,36,-21,-102,-62,-4,-65,22,-53,57,-64,-74, 
  /* [994][0][][] */ 76,-127,-49,-81,-62,-78,-40,-20,90,-62,15,5,-57,44,40,13, 
  /* [995][0][][] */ -12,20,-33,1,-127,73,3,34,8,-29,32,-63,-23,-7,23,-19, 
  /* [996][0][][] */ 75,32,22,-110,45,22,-30,35,11,-45,71,-30,-18,34,127,-54, 
  /* [997][0][][] */ -58,29,2,-3,42,-21,127,22,16,-46,24,78,-80,-21,-73,-11, 
  /* [998][0][][] */ -87,40,5,-1,38,-59,-127,-61,24,109,-11,-55,46,105,-52,-35, 
  /* [999][0][][] */ 87,91,-51,41,56,-50,66,-39,-27,4,14,31,37,-10,127,-55, 
  /* [1000][0][][] */ -12,-40,49,-26,-34,65,47,-57,-19,127,108,-13,43,73,25,-46, 
  /* [1001][0][][] */ -97,18,-127,-40,108,65,7,10,22,52,113,97,28,22,-55,30, 
  /* [1002][0][][] */ -47,25,-6,-98,-11,-54,93,-6,69,127,-4,60,-9,-68,-54,103, 
  /* [1003][0][][] */ 19,-9,-25,9,-39,-27,7,59,127,28,-55,-99,90,-7,27,-30, 
  /* [1004][0][][] */ -36,-122,5,-90,-49,-60,26,-5,24,127,-7,-46,59,50,-64,-47, 
  /* [1005][0][][] */ -61,49,12,24,8,63,-79,18,-36,-5,-49,-127,-30,-71,-124,-107, 
  /* [1006][0][][] */ -38,59,52,-8,31,29,80,-11,45,16,-15,6,17,127,14,-55, 
  /* [1007][0][][] */ -13,-40,57,-24,-43,-60,-23,14,-52,-127,59,-16,-52,52,71,-6, 
  /* [1008][0][][] */ -26,16,-2,-83,127,-109,74,60,-55,27,-29,48,-36,-55,-27,29, 
  /* [1009][0][][] */ 22,-16,70,43,96,-10,-1,-127,-53,-26,-36,-49,-25,-54,66,-30, 
  /* [1010][0][][] */ 11,-15,-15,3,-42,33,-59,-34,28,0,8,-127,6,-27,-13,-31, 
  /* [1011][0][][] */ 28,-127,-20,-27,0,63,20,38,120,97,-33,-94,70,-8,-76,-68, 
  /* [1012][0][][] */ -19,-42,-81,14,127,7,17,-4,-28,-48,-41,3,-1,-30,107,-39, 
  /* [1013][0][][] */ 23,2,20,-41,-5,39,55,-52,0,127,10,-10,116,14,18,-47, 
  /* [1014][0][][] */ -127,21,51,-17,90,-49,114,-64,74,21,-81,45,-48,46,-11,-48, 
  /* [1015][0][][] */ 8,39,95,-65,45,-48,-65,1,49,-4,124,-127,-59,117,-66,-88, 
  /* [1016][0][][] */ 52,0,-127,16,98,-47,-124,80,-50,-28,-4,-72,31,-29,18,-101, 
  /* [1017][0][][] */ 2,36,-37,-49,-77,21,26,19,15,-127,-11,-21,31,-10,9,-77, 
  /* [1018][0][][] */ -14,21,-50,-34,-13,32,41,49,26,10,12,36,127,2,27,9, 
  /* [1019][0][][] */ -9,-122,127,77,-15,-21,-115,4,-88,-82,-8,-16,43,46,-123,125, 
  /* [1020][0][][] */ 107,100,15,-10,10,4,-31,-46,70,-42,126,127,-59,-58,-90,-39, 
  /* [1021][0][][] */ -6,61,79,-127,102,75,-90,104,72,-89,-10,64,-85,-88,-50,77, 
  /* [1022][0][][] */ 74,-34,100,-67,-37,53,127,16,9,-13,-72,-82,-30,18,17,23, 
  /* [1023][0][][] */ 90,-55,85,4,-11,-111,50,-127,27,37,16,7,63,-83,64,3, 
  /* [1024][0][][] */ 9,-53,-22,22,-127,42,-44,-38,35,2,73,-8,-126,-93,26,24, 
  /* [1025][0][][] */ 67,41,127,1,-23,30,-73,3,-32,-60,-18,18,115,8,-47,87, 
  /* [1026][0][][] */ -119,-42,-58,43,-6,90,48,-56,-43,-42,127,84,60,77,76,-12, 
  /* [1027][0][][] */ 75,-60,-41,-40,28,-13,127,121,95,102,5,-123,43,-67,-41,-31, 
  /* [1028][0][][] */ -57,-52,18,-121,68,-41,59,30,-40,5,-24,83,127,-9,-72,31, 
  /* [1029][0][][] */ 6,93,5,-127,-108,27,118,-43,13,-44,86,6,48,58,-16,-36, 
  /* [1030][0][][] */ 5,15,-11,1,25,-23,127,-81,32,-39,-35,53,-2,39,7,-69, 
  /* [1031][0][][] */ 33,12,-62,-127,90,-56,-13,7,14,-11,-38,68,-19,-65,-82,14, 
  /* [1032][0][][] */ -64,-30,-103,65,61,-60,-33,-40,-27,62,84,127,49,20,-43,-30, 
  /* [1033][0][][] */ -16,-52,-32,11,-24,-29,127,-67,4,63,-6,118,-2,51,-12,-28, 
  /* [1034][0][][] */ 85,43,-29,-27,-48,41,-44,38,-50,6,-60,94,-9,55,-127,62, 
  /* [1035][0][][] */ 17,-57,31,-99,73,-108,18,-16,32,-67,14,76,-27,-60,6,127, 
  /* [1036][0][][] */ 21,-47,98,-117,45,82,56,-30,-74,82,104,12,12,101,-29,-127, 
  /* [1037][0][][] */ -28,-12,60,-5,-17,7,57,-16,116,27,42,31,-20,127,-7,-88, 
  /* [1038][0][][] */ 34,87,79,-127,-3,-127,-12,111,71,8,31,94,14,-14,-20,18, 
  /* [1039][0][][] */ -127,0,7,-45,9,-7,0,-61,25,23,13,17,46,18,-11,9, 
  /* [1040][0][][] */ -60,20,9,96,41,127,46,-1,-20,-10,22,-65,-87,-67,-20,-77, 
  /* [1041][0][][] */ -64,44,37,84,77,-89,4,-31,-2,24,7,17,61,-26,64,-127, 
  /* [1042][0][][] */ 110,-111,-78,-23,-50,55,15,35,-108,-100,-127,-24,16,66,-7,-37, 
  /* [1043][0][][] */ -7,-26,-20,13,-19,-24,31,52,50,66,1,6,70,64,38,127, 
  /* [1044][0][][] */ -36,-21,-27,26,83,14,3,-110,56,41,74,61,24,-6,-5,-127, 
  /* [1045][0][][] */ 41,2,-16,45,58,5,-16,34,2,-84,-25,-5,127,-69,31,-33, 
  /* [1046][0][][] */ 49,-41,-35,17,66,101,-109,68,70,-127,90,-1,-49,67,-91,48, 
  /* [1047][0][][] */ 8,96,-127,-3,-94,-25,14,47,-16,64,-8,113,-11,9,-12,-18, 
  /* [1048][0][][] */ -62,80,20,-25,29,44,96,127,-89,6,-20,-47,-52,-48,-59,-58, 
  /* [1049][0][][] */ 5,19,-12,-54,-17,7,29,29,6,-49,62,-37,-13,11,127,28, 
  /* [1050][0][][] */ -85,-41,105,43,34,88,-44,-81,16,27,-35,-127,-91,70,53,-120, 
  /* [1051][0][][] */ 22,-10,-61,-16,60,-25,-127,-91,-4,7,89,84,83,33,-21,28, 
  /* [1052][0][][] */ -4,-58,37,-5,-56,-127,95,-21,11,59,-34,97,67,-7,-35,33, 
  /* [1053][0][][] */ 109,22,35,126,-127,-84,-78,66,-11,-46,82,-34,57,116,-43,52, 
  /* [1054][0][][] */ -45,12,-97,-41,21,-28,79,-41,106,-127,-14,121,-91,117,37,-110, 
  /* [1055][0][][] */ 98,60,40,127,43,-94,-3,84,49,-113,-17,-55,93,86,-43,-93, 
  /* [1056][0][][] */ 63,-113,-63,-67,127,51,6,72,0,-40,-71,-15,15,31,-55,-34, 
  /* [1057][0][][] */ -11,17,-50,-63,-27,123,106,-94,101,59,-42,-84,75,46,127,-23, 
  /* [1058][0][][] */ -63,-60,23,3,13,48,3,-2,-13,65,53,-38,54,13,-4,127, 
  /* [1059][0][][] */ 42,-33,8,-9,-14,-2,-101,30,-43,59,-38,-12,-32,-48,-127,6, 
  /* [1060][0][][] */ 14,-22,33,38,-25,49,127,88,-33,-10,-37,-48,4,-83,23,72, 
  /* [1061][0][][] */ -43,-21,-1,-103,55,46,73,70,-39,-127,5,20,14,56,-65,72, 
  /* [1062][0][][] */ 105,39,-2,57,-65,15,-2,22,-108,-29,126,-6,1,-33,-127,46, 
  /* [1063][0][][] */ -89,-27,-55,-1,127,-58,-58,84,-83,51,23,74,101,-65,-100,-119, 
  /* [1064][0][][] */ 43,-2,19,-18,-25,-2,127,52,-29,-33,-6,-33,21,-23,-3,-9, 
  /* [1065][0][][] */ -10,-22,-14,30,-81,85,78,-44,46,-127,-5,-20,-18,70,2,34, 
  /* [1066][0][][] */ -10,-18,-30,-68,59,32,-22,-23,127,75,83,-30,-45,84,-122,1, 
  /* [1067][0][][] */ -127,8,54,1,67,20,100,30,-104,38,-12,-14,79,-53,-29,-36, 
  /* [1068][0][][] */ -91,34,-55,-39,75,-15,72,9,-14,36,-36,-33,56,-20,-41,-127, 
  /* [1069][0][][] */ -14,-127,85,54,85,-39,-47,35,-13,-72,-17,86,-16,-28,89,-99, 
  /* [1070][0][][] */ 56,-13,-78,26,28,33,-16,-38,61,2,-15,-48,108,-6,-28,-127, 
  /* [1071][0][][] */ 6,67,-3,83,79,-127,31,64,-46,84,-53,32,34,-15,-26,-12, 
  /* [1072][0][][] */ 44,-32,48,81,28,-57,65,127,-59,-38,8,11,-39,-115,-11,-65, 
  /* [1073][0][][] */ -117,-22,18,34,-13,-33,6,-17,120,-66,54,-43,-78,-41,-127,-26, 
  /* [1074][0][][] */ 72,1,-18,-62,-34,2,73,88,-6,-100,4,-123,19,127,33,56, 
  /* [1075][0][][] */ 38,52,-43,-17,1,-32,41,127,1,62,32,63,56,15,-20,-79, 
  /* [1076][0][][] */ 49,127,106,-22,-12,-34,-47,-4,39,122,-113,-26,-18,-54,-93,102, 
  /* [1077][0][][] */ -10,-31,50,124,0,27,-127,81,84,-83,7,72,-11,11,-23,52, 
  /* [1078][0][][] */ 97,8,-34,-17,57,-127,10,30,-24,39,-23,23,-41,62,21,30, 
  /* [1079][0][][] */ 92,0,-20,-41,50,55,-63,-18,-127,-62,13,88,70,6,-60,-31, 
  /* [1080][0][][] */ -28,89,127,-43,-51,34,-12,17,42,29,63,-39,-40,22,102,22, 
  /* [1081][0][][] */ 127,6,7,16,-33,-54,-1,-45,54,42,13,-33,59,17,96,26, 
  /* [1082][0][][] */ -44,-31,31,-3,57,6,17,49,-16,4,30,6,127,-35,-9,-68, 
  /* [1083][0][][] */ -8,-33,127,-95,-122,-29,117,111,116,-53,-5,-84,34,100,-46,-56, 
  /* [1084][0][][] */ 104,101,-33,31,-54,20,-13,-127,-41,21,-6,59,-106,-20,-19,31, 
  /* [1085][0][][] */ -46,-127,31,10,-34,11,19,111,99,-28,-51,-94,117,6,52,-13, 
  /* [1086][0][][] */ 58,-51,-38,-91,80,113,-12,36,-55,-3,49,15,50,21,-127,92, 
  /* [1087][0][][] */ -55,-64,-10,-20,-41,92,-37,-10,46,-108,28,-127,-56,90,-20,5, 
  /* [1088][0][][] */ 30,8,-14,-1,-7,61,40,22,99,-13,127,-87,-2,6,31,-46, 
  /* [1089][0][][] */ 75,-5,127,63,-42,-52,88,15,-88,45,-33,81,85,18,5,37, 
  /* [1090][0][][] */ 82,-5,15,19,-30,4,42,0,43,52,65,-34,14,127,-3,-24, 
  /* [1091][0][][] */ 66,11,-79,20,-49,-48,-23,27,-122,-21,-14,86,-27,3,-127,-59, 
  /* [1092][0][][] */ -44,-38,-42,-27,119,-49,127,20,117,-15,-70,-36,-116,-20,0,84, 
  /* [1093][0][][] */ 104,-51,-16,-14,-18,-34,127,103,-87,91,-9,-24,-105,23,-70,12, 
  /* [1094][0][][] */ 53,-48,43,-108,-42,-11,-9,62,-14,-40,22,-41,-47,-39,-127,-118, 
  /* [1095][0][][] */ 27,53,-20,-127,-113,-93,78,43,10,51,-100,-8,31,56,38,19, 
  /* [1096][0][][] */ -79,-79,-94,-30,-5,35,17,21,100,-11,127,-105,44,60,77,-120, 
  /* [1097][0][][] */ -14,-1,27,65,100,-7,-75,-50,31,-74,102,59,81,127,2,-46, 
  /* [1098][0][][] */ 51,-94,8,-61,75,127,15,-53,7,-123,-94,29,40,98,-15,-23, 
  /* [1099][0][][] */ -110,56,-74,-50,81,127,125,31,-20,47,-54,-41,31,13,-67,38, 
  /* [1100][0][][] */ 77,-35,83,-100,-102,-45,-91,-82,122,-62,21,103,77,-127,-64,-86, 
  /* [1101][0][][] */ 30,50,-127,-22,-23,-10,-58,37,66,-53,-36,-44,-9,-36,-68,-20, 
  /* [1102][0][][] */ -66,-11,127,22,6,21,46,-9,27,20,-18,-4,-17,-21,6,-26, 
  /* [1103][0][][] */ 56,47,53,-3,117,51,-53,-70,33,61,-41,-49,5,-61,127,17, 
  /* [1104][0][][] */ 25,70,-33,-47,7,56,127,69,-60,7,74,70,12,-92,-83,-13, 
  /* [1105][0][][] */ -5,-56,-18,-32,-24,14,-2,68,45,13,-18,-127,-61,-36,3,-61, 
  /* [1106][0][][] */ 74,-29,-24,-127,-56,10,-9,37,110,-7,-12,-36,-25,-36,-40,-31, 
  /* [1107][0][][] */ 26,-17,86,-127,72,-14,81,-70,-1,50,-45,39,81,-112,-21,-45, 
  /* [1108][0][][] */ 55,-10,-13,-103,10,-127,-31,-25,-38,82,-26,-30,-13,38,5,-48, 
  /* [1109][0][][] */ 126,-76,27,101,48,-76,109,-45,-57,13,-28,103,122,53,127,-32, 
  /* [1110][0][][] */ -9,-8,54,-57,-36,-45,-35,-107,-11,127,27,105,25,29,-27,-40, 
  /* [1111][0][][] */ -29,91,-64,113,6,60,120,10,84,-56,-61,-30,-43,110,44,-127, 
  /* [1112][0][][] */ 66,127,-15,-7,15,50,-65,60,57,111,-72,-3,106,-47,-30,-11, 
  /* [1113][0][][] */ 67,88,117,40,-107,-55,-51,18,127,65,75,-11,-38,43,26,-50, 
  /* [1114][0][][] */ 40,-29,-105,35,20,0,61,124,-18,-52,58,-48,49,50,35,127, 
  /* [1115][0][][] */ 30,-68,51,70,125,21,-30,-50,-60,64,-127,15,-26,-102,33,-25, 
  /* [1116][0][][] */ -31,-35,-30,9,34,56,30,42,-33,-44,-23,-25,127,-47,-49,-20, 
  /* [1117][0][][] */ 46,108,127,48,51,-19,-19,-107,-45,7,34,-66,47,-22,10,-22, 
  /* [1118][0][][] */ 93,-71,107,-76,3,21,127,-94,-71,-113,64,-17,36,-6,41,31, 
  /* [1119][0][][] */ 39,65,-61,-31,114,55,-121,109,-120,104,127,46,-39,50,61,91, 
  /* [1120][0][][] */ -94,66,-43,-121,110,-63,-86,-15,21,28,-60,127,-15,-82,-68,-46, 
  /* [1121][0][][] */ -77,20,-56,18,88,19,3,-32,39,87,-51,-15,60,127,8,-26, 
  /* [1122][0][][] */ -103,21,74,-102,-25,-9,25,-22,127,26,73,52,41,76,50,44, 
  /* [1123][0][][] */ 61,-2,65,55,73,127,-49,-51,-15,65,6,-41,-65,-19,-76,-111, 
  /* [1124][0][][] */ 127,44,-1,-95,-25,30,14,-8,84,4,-105,-35,97,35,30,-31, 
  /* [1125][0][][] */ -65,-32,51,73,-52,-12,-30,72,127,-55,57,-34,63,78,-49,33, 
  /* [1126][0][][] */ -42,-65,-32,43,48,22,-21,-25,126,50,65,-127,9,6,-32,-16, 
  /* [1127][0][][] */ 12,124,42,-71,-19,-127,32,70,68,53,78,-33,104,25,12,33, 
  /* [1128][0][][] */ 46,-91,-100,-58,-28,-50,-23,-127,33,19,85,73,56,18,66,-38, 
  /* [1129][0][][] */ -127,35,-100,26,33,65,-57,-6,18,64,5,-23,-49,60,-37,-61, 
  /* [1130][0][][] */ -25,-5,-31,-23,-41,-71,47,-34,63,127,98,-85,26,-14,40,-35, 
  /* [1131][0][][] */ 13,-111,56,-6,-8,-15,127,22,-38,37,80,94,0,-76,-23,15, 
  /* [1132][0][][] */ -127,-88,-21,23,17,-20,17,-20,5,-24,2,44,96,32,-44,-55, 
  /* [1133][0][][] */ 46,-17,26,-20,52,-47,-75,-50,113,127,18,3,56,-36,32,-25, 
  /* [1134][0][][] */ 19,-2,34,-48,86,22,-62,-48,-89,-13,-95,-127,-62,-90,51,-113, 
  /* [1135][0][][] */ -1,127,27,48,-2,-5,-6,5,-54,-102,-17,-14,83,27,44,5, 
  /* [1136][0][][] */ 68,50,10,27,-15,25,57,-92,7,83,78,4,-76,-74,-85,-127, 
  /* [1137][0][][] */ 45,26,45,-127,16,-9,-30,39,115,-10,83,35,41,41,-40,-1, 
  /* [1138][0][][] */ 3,127,26,35,47,53,-35,13,-22,-53,23,15,6,-86,51,-42, 
  /* [1139][0][][] */ -75,-20,21,-53,-127,-7,64,-18,-24,53,115,-35,-7,-115,44,21, 
  /* [1140][0][][] */ 21,-127,-9,-65,56,-18,-72,-15,-26,95,54,87,39,-102,-46,33, 
  /* [1141][0][][] */ 114,60,-39,127,-35,47,-24,5,37,-64,-101,-63,-101,43,-96,58, 
  /* [1142][0][][] */ 14,-2,-22,-11,-14,-104,-79,83,69,127,41,-105,-88,-126,-42,64, 
  /* [1143][0][][] */ -79,42,-18,-41,-127,34,81,-17,53,52,105,-34,-82,-6,23,11, 
  /* [1144][0][][] */ 48,-20,35,47,-31,-54,-72,-19,-127,104,-71,85,21,-27,-95,-35, 
  /* [1145][0][][] */ 96,81,-16,66,81,-2,9,42,-7,35,99,-127,71,-29,33,-26, 
  /* [1146][0][][] */ 36,49,13,127,-3,80,25,-67,30,-61,-4,74,-66,-110,86,48, 
  /* [1147][0][][] */ 66,25,-9,-12,-4,4,-127,-112,11,66,18,67,-35,25,34,39, 
  /* [1148][0][][] */ -127,41,-30,10,23,50,-51,-31,10,21,-60,5,-29,-57,-41,62, 
  /* [1149][0][][] */ 91,32,127,-37,64,-52,-54,-47,93,-47,69,42,6,17,-9,-114, 
  /* [1150][0][][] */ 46,26,-107,93,-50,-58,-40,-127,-69,52,-88,-12,121,-63,-53,-119, 
  /* [1151][0][][] */ -68,62,89,-14,-6,127,63,-23,-9,61,29,-58,-57,2,45,-81, 
  /* [1152][0][][] */ -19,127,109,-69,90,-8,120,54,94,-9,-67,104,-44,103,-79,-74, 
  /* [1153][0][][] */ -15,-91,38,-38,-18,-15,-16,-34,-6,71,38,127,95,-69,35,-29, 
  /* [1154][0][][] */ 10,58,-23,-39,15,127,-46,-69,-30,-54,-64,-20,-12,-2,93,-41, 
  /* [1155][0][][] */ -13,-34,-12,-80,127,40,5,30,30,-78,59,69,-31,28,-5,67, 
  /* [1156][0][][] */ -9,-83,-25,9,41,-62,-26,-64,56,21,-81,-127,43,-43,-5,47, 
  /* [1157][0][][] */ -78,15,-1,-124,34,-32,29,-15,80,-6,-109,127,11,6,-79,5, 
  /* [1158][0][][] */ 31,-63,60,-4,12,127,43,-12,-1,-25,-3,15,-7,87,3,-79, 
  /* [1159][0][][] */ -5,-39,21,-6,12,127,-30,-1,-111,-94,-37,-5,-45,30,24,8, 
  /* [1160][0][][] */ 111,-67,-1,-22,34,4,-36,95,127,-88,106,-14,-22,74,-78,-35, 
  /* [1161][0][][] */ 57,10,22,5,-44,-36,127,-13,-90,-33,114,54,67,-112,93,101, 
  /* [1162][0][][] */ 32,-53,-28,-40,-46,-19,7,-22,28,42,-10,-60,127,-110,43,-35, 
  /* [1163][0][][] */ -17,127,60,-17,-42,-116,-66,-78,58,63,-64,-15,-75,-96,106,-104, 
  /* [1164][0][][] */ 32,-104,-96,108,32,15,-29,-107,80,-28,127,96,26,-7,-78,-63, 
  /* [1165][0][][] */ -55,-41,32,28,-89,-111,58,-4,127,82,78,4,92,0,92,-37, 
  /* [1166][0][][] */ 43,-127,-41,51,-70,52,-125,-49,51,-35,64,-71,115,-47,41,59, 
  /* [1167][0][][] */ -67,4,-16,120,80,-17,-56,-73,125,-1,85,-7,127,24,12,-73, 
  /* [1168][0][][] */ -100,-1,-77,46,-19,-51,127,-8,27,51,-82,-75,21,73,51,66, 
  /* [1169][0][][] */ 88,-10,5,-27,-78,47,36,42,127,-84,107,-10,10,63,-5,-16, 
  /* [1170][0][][] */ 127,48,-35,-48,32,-74,-11,30,-5,46,-71,-37,-41,-65,-13,28, 
  /* [1171][0][][] */ -6,-5,-27,6,22,-16,78,-29,-32,13,-108,7,71,26,30,-127, 
  /* [1172][0][][] */ 94,66,14,-24,30,-32,-13,1,98,59,57,127,85,127,-66,-40, 
  /* [1173][0][][] */ -92,-73,-7,33,-49,12,-38,-1,60,18,-23,-112,127,-124,61,9, 
  /* [1174][0][][] */ -57,-76,-76,-12,127,32,-20,-57,28,7,72,64,13,-36,-60,-19, 
  /* [1175][0][][] */ 0,-94,-51,-127,95,14,11,78,-40,-43,40,65,86,13,-30,-37, 
  /* [1176][0][][] */ 13,61,13,27,127,46,-33,-3,-1,8,57,1,59,-17,52,-38, 
  /* [1177][0][][] */ 84,108,-81,-11,22,29,21,-127,-11,47,-42,-41,-48,24,91,14, 
  /* [1178][0][][] */ 83,-17,-1,21,-29,-58,-18,-100,32,35,-15,-1,79,-127,29,72, 
  /* [1179][0][][] */ 66,10,12,58,64,-116,29,38,127,31,-34,2,85,46,-30,28, 
  /* [1180][0][][] */ 23,6,44,14,12,-65,8,23,127,-27,-26,-31,-80,29,36,29, 
  /* [1181][0][][] */ -50,80,83,-37,-68,-39,29,-62,-72,27,4,57,127,-2,83,-101, 
  /* [1182][0][][] */ -21,-12,-87,56,38,127,-71,38,-24,33,7,-49,34,3,-96,56, 
  /* [1183][0][][] */ 41,49,-78,-18,46,6,-64,8,-18,35,40,127,-8,-122,-94,7, 
  /* [1184][0][][] */ -71,-81,2,-93,-34,127,43,44,56,23,80,-75,-51,-74,-54,-47, 
  /* [1185][0][][] */ 5,-14,53,12,32,-22,35,-16,-111,9,-33,-15,61,73,127,-23, 
  /* [1186][0][][] */ -21,15,-22,-8,-2,15,34,57,116,37,14,127,34,110,41,-90, 
  /* [1187][0][][] */ -113,70,94,-24,-114,62,99,107,-24,97,-12,127,91,-46,-7,-36, 
  /* [1188][0][][] */ -66,54,-54,-108,72,-10,-20,127,33,-18,-38,-91,49,-50,-47,-9, 
  /* [1189][0][][] */ -30,29,-12,-33,46,41,107,15,2,127,25,23,-3,7,36,-73, 
  /* [1190][0][][] */ 4,-39,-50,17,33,41,-26,-19,-69,27,16,21,14,15,127,26, 
  /* [1191][0][][] */ 62,-7,-75,-31,-95,-6,-64,51,-69,-11,-57,-45,115,-127,63,45, 
  /* [1192][0][][] */ 61,-18,38,77,23,41,-11,85,6,-95,51,-39,65,127,-31,-19, 
  /* [1193][0][][] */ -115,46,-84,39,23,57,-124,-33,-44,-46,-75,-58,127,61,-63,60, 
  /* [1194][0][][] */ 68,54,-4,-93,-71,127,-58,-43,-73,126,42,-22,24,69,-81,-99, 
  /* [1195][0][][] */ 105,-1,-54,92,-68,-1,3,-64,-4,-127,-26,40,7,48,1,-23, 
  /* [1196][0][][] */ -23,127,-51,83,-13,47,-21,12,-51,-65,-100,59,25,33,-53,-58, 
  /* [1197][0][][] */ -4,-55,24,-2,71,86,-73,10,-33,92,127,12,-6,73,-44,-35, 
  /* [1198][0][][] */ -56,-21,9,-16,63,41,127,0,27,-35,-16,-96,-44,-28,-13,-55, 
  /* [1199][0][][] */ -115,-73,-65,-52,-24,-25,60,67,127,-6,-66,90,-86,12,12,61, 
  /* [1200][0][][] */ -57,4,-87,-25,-115,50,5,-9,108,127,-28,6,-65,100,84,117, 
  /* [1201][0][][] */ -40,43,-45,-35,70,20,-7,-14,-34,-100,-127,-52,116,22,-70,-55, 
  /* [1202][0][][] */ 67,101,51,-4,-36,-59,-25,-32,-127,107,-55,106,48,-76,38,53, 
  /* [1203][0][][] */ -80,72,55,-16,58,-39,22,-45,32,35,-9,45,-53,127,-48,-73, 
  /* [1204][0][][] */ -36,-16,13,-52,6,11,127,-41,-36,19,-46,56,68,4,38,-27, 
  /* [1205][0][][] */ -34,52,-2,12,-7,7,50,-11,-3,-42,-65,4,-12,20,127,41, 
  /* [1206][0][][] */ -127,43,58,-57,-43,66,-32,-19,36,-92,-8,-36,19,107,-101,17, 
  /* [1207][0][][] */ 118,-112,-8,92,24,65,28,-122,-114,54,-18,127,95,8,114,-38, 
  /* [1208][0][][] */ -39,42,30,13,7,-13,26,51,60,127,-24,-40,28,-92,-43,49, 
  /* [1209][0][][] */ 45,-31,103,23,57,22,-2,-123,50,-31,-127,-70,-4,35,11,4, 
  /* [1210][0][][] */ 58,36,41,16,-58,1,52,-111,-127,-31,-49,64,27,13,-78,-13, 
  /* [1211][0][][] */ -26,-30,-12,-127,55,-14,-5,-34,-77,72,-49,-28,-9,-16,20,-35, 
  /* [1212][0][][] */ 6,-39,-62,97,18,35,-80,36,28,-105,-7,-127,41,72,13,-77, 
  /* [1213][0][][] */ -42,7,-54,-127,-103,-46,-54,-8,-15,65,-33,17,15,93,21,24, 
  /* [1214][0][][] */ -4,-16,-20,38,-83,69,6,8,-32,39,17,32,-11,-84,-36,-127, 
  /* [1215][0][][] */ -56,59,-74,127,-61,-2,-29,-35,5,-51,25,2,-18,18,-31,-10, 
  /* [1216][0][][] */ 95,40,42,-18,-40,-12,127,81,-114,30,2,-50,-84,-24,-12,44, 
  /* [1217][0][][] */ 28,11,-8,15,-39,3,32,-84,-127,-69,-17,-64,-62,-28,-50,24, 
  /* [1218][0][][] */ -26,-36,25,15,42,-14,33,81,59,30,-54,-11,-1,-41,45,127, 
  /* [1219][0][][] */ -7,45,-50,-36,62,-62,-52,-41,-26,111,-127,-36,12,33,-28,-103, 
  /* [1220][0][][] */ -6,-12,-18,45,-127,-65,99,9,-70,83,-74,-12,-30,34,19,-24, 
  /* [1221][0][][] */ -19,-99,42,-35,67,28,63,-78,-127,-91,14,116,9,-30,-11,2, 
  /* [1222][0][][] */ 82,44,27,-127,-20,19,12,6,3,11,67,87,-46,-66,-96,-67, 
  /* [1223][0][][] */ 47,9,23,15,62,-111,45,14,-36,83,10,111,7,-47,-46,-127, 
  /* [1224][0][][] */ -26,78,-83,-26,94,-21,25,41,-57,28,33,-95,-69,127,51,-71, 
  /* [1225][0][][] */ 13,-3,-23,-8,10,-127,-55,-61,4,65,-55,103,-64,-3,8,1, 
  /* [1226][0][][] */ -12,-110,127,35,37,-34,-63,-39,-65,14,91,43,66,-43,11,64, 
  /* [1227][0][][] */ 125,-38,29,-40,41,19,34,48,-127,77,67,-2,28,-60,-82,14, 
  /* [1228][0][][] */ -3,2,-39,-120,-91,-42,8,-53,-24,-34,-3,127,8,44,68,18, 
  /* [1229][0][][] */ -29,92,25,-22,-2,-57,58,49,-36,-13,36,-10,127,67,16,-95, 
  /* [1230][0][][] */ 52,47,68,70,21,-23,119,13,-127,-113,-37,13,72,69,62,-47, 
  /* [1231][0][][] */ 9,37,-70,-14,65,-44,-31,102,15,-66,20,72,-97,-39,-127,-16, 
  /* [1232][0][][] */ -94,-67,-9,-34,57,127,-9,-25,97,29,32,-78,-14,27,73,-8, 
  /* [1233][0][][] */ 1,-103,32,21,-101,-111,-11,6,34,127,39,53,-92,1,-9,23, 
  /* [1234][0][][] */ -18,127,78,104,50,77,2,-11,-1,68,86,39,38,24,42,-56, 
  /* [1235][0][][] */ -4,-43,-47,-3,-56,29,127,17,111,50,37,24,41,-58,36,10, 
  /* [1236][0][][] */ 56,31,-86,-2,-71,57,-36,-127,56,-33,56,59,-9,37,5,-70, 
  /* [1237][0][][] */ 4,-31,-84,41,65,31,-13,-30,-11,127,63,-21,7,-37,36,-26, 
  /* [1238][0][][] */ -70,20,-35,-127,-17,5,-82,-50,32,-87,43,31,49,-55,-50,125, 
  /* [1239][0][][] */ 28,-20,-41,-29,-67,-10,48,0,87,57,-31,-41,-43,-80,46,-127, 
  /* [1240][0][][] */ -19,-32,28,-77,64,-127,-10,-61,-7,48,-6,-19,-27,60,32,-49, 
  /* [1241][0][][] */ 0,11,36,127,-88,-53,-60,-61,-36,-68,-26,66,30,-34,-1,-18, 
  /* [1242][0][][] */ 70,-81,-10,101,-110,-42,-12,127,47,-106,6,-19,114,89,48,-44, 
  /* [1243][0][][] */ 56,85,-36,-51,-26,-77,-19,-70,18,6,42,81,26,-96,127,52, 
  /* [1244][0][][] */ 75,28,33,-62,34,-127,-66,24,32,-31,-24,91,50,-37,44,-61, 
  /* [1245][0][][] */ 18,76,-16,41,-39,51,44,22,14,-63,-52,127,36,-10,70,-21, 
  /* [1246][0][][] */ -30,117,38,-39,-60,79,2,50,-127,-24,-2,-31,65,16,24,-26, 
  /* [1247][0][][] */ 8,22,5,1,5,41,21,-19,79,-84,-38,10,90,-92,-83,-127, 
  /* [1248][0][][] */ 40,-15,0,-56,-5,50,22,-127,-32,0,42,17,84,-27,67,-114, 
  /* [1249][0][][] */ 60,63,-108,32,22,71,-63,127,83,52,29,-56,58,-7,-52,-41, 
  /* [1250][0][][] */ -51,-49,-127,98,74,17,-21,25,55,-21,107,45,19,-46,16,-54, 
  /* [1251][0][][] */ 30,-38,27,94,62,-53,-78,-71,118,30,-7,-5,-127,-22,-37,123, 
  /* [1252][0][][] */ -127,52,46,31,-14,37,-27,69,-9,83,-2,-91,39,27,4,-76, 
  /* [1253][0][][] */ -59,-6,-15,-43,127,33,46,-95,-11,-7,-110,85,-48,-60,-26,48, 
  /* [1254][0][][] */ -7,20,-46,-44,127,81,-46,17,44,11,21,-36,23,-20,27,29, 
  /* [1255][0][][] */ -127,-74,-38,15,12,-13,-17,71,82,-76,80,-34,-51,2,-6,-3, 
  /* [1256][0][][] */ -42,-42,36,127,-43,30,46,-39,-19,-43,17,-57,9,48,64,34, 
  /* [1257][0][][] */ -97,56,75,35,127,-22,-7,62,-48,-67,-67,62,-105,95,-63,-5, 
  /* [1258][0][][] */ 127,-28,-10,48,-9,-64,87,40,25,-2,-1,13,36,-24,-8,-26, 
  /* [1259][0][][] */ -87,-50,-54,-48,-31,-71,-80,24,57,-36,-38,-22,122,-127,-63,-53, 
  /* [1260][0][][] */ 42,53,21,-69,-58,-46,61,44,9,-62,-42,0,127,-18,45,39, 
  /* [1261][0][][] */ -52,-33,31,-40,11,-16,-29,-18,37,26,-50,53,37,127,-79,-74, 
  /* [1262][0][][] */ -47,100,-25,4,-28,-3,31,21,46,-19,35,127,-58,30,-71,98, 
  /* [1263][0][][] */ -58,-73,-58,-10,17,40,27,-6,-80,76,-116,-94,-14,-25,-127,-21, 
  /* [1264][0][][] */ -72,-5,23,-67,40,-48,-85,-53,-25,-57,63,127,67,-53,-55,-5, 
  /* [1265][0][][] */ 14,-87,-11,-59,99,23,-29,103,107,-56,127,6,46,54,14,-5, 
  /* [1266][0][][] */ 37,12,127,-16,81,48,72,35,-98,-62,57,26,-15,67,-42,16, 
  /* [1267][0][][] */ 27,-27,85,-42,3,127,25,-31,4,66,42,-28,-40,-48,-81,36, 
  /* [1268][0][][] */ 32,77,61,3,7,16,68,-39,82,-28,-50,-127,-38,34,56,-1, 
  /* [1269][0][][] */ 112,52,34,108,-7,85,-127,36,92,-113,-27,-82,51,63,-83,15, 
  /* [1270][0][][] */ 121,1,-35,-127,43,69,-28,79,-87,102,12,74,-98,-6,-73,-78, 
  /* [1271][0][][] */ 20,-66,-43,38,-31,-55,37,52,-50,127,-47,-18,1,-50,-38,-38, 
  /* [1272][0][][] */ -105,14,15,78,89,36,-85,-127,11,58,-15,-66,27,-83,-76,-55, 
  /* [1273][0][][] */ 31,-32,72,-28,66,9,-18,-127,-1,82,-45,84,77,17,46,-80, 
  /* [1274][0][][] */ -121,-18,39,35,51,-54,34,-10,-31,-21,-74,43,-127,-104,-24,10, 
  /* [1275][0][][] */ -83,-4,-71,-127,45,41,-42,36,-30,62,-80,-1,-25,-58,40,23, 
  /* [1276][0][][] */ -11,17,2,45,41,9,-59,21,-44,-79,31,52,127,4,6,27, 
  /* [1277][0][][] */ 127,-37,-7,-42,-45,34,84,19,-35,80,17,-23,24,-7,-71,-24, 
  /* [1278][0][][] */ -73,7,96,-62,105,-58,-11,80,-38,-24,34,-22,-6,-55,52,-127, 
  /* [1279][0][][] */ 55,-11,127,-55,46,38,-5,49,-18,93,-2,65,-13,-57,-43,26, 
};
const TfArray<4, int> tensor_dimension76 = { 4, { 1280,1,1,16 } };
const TfArray<1280, float> quant76_scale = { 1280, { 0.0054545318707823753, 0.0039630457758903503, 0.0050721485167741776, 0.0052831023931503296, 0.0046178721822798252, 0.0067197391763329506, 0.0063027180731296539, 0.0050705038011074066, 0.0063592535443603992, 0.0062466482631862164, 0.0050626522861421108, 0.0053506521508097649, 0.0061522745527327061, 0.0065171560272574425, 0.0045182774774730206, 0.0036311126314103603, 0.0056968284770846367, 0.0068035661242902279, 0.0052693611942231655, 0.0039643649943172932, 0.0051665725186467171, 0.0075956359505653381, 0.0069350004196166992, 0.0037531396374106407, 0.0041926871053874493, 0.0073473546653985977, 0.0061368593014776707, 0.0045945309102535248, 0.0047552147880196571, 0.0071060284972190857, 0.0053979698568582535, 0.0048501975834369659, 0.0044483570381999016, 0.0055233296006917953, 0.0051314504817128181, 0.0071869581006467342, 0.0057409852743148804, 0.005425705574452877, 0.0048278248868882656, 0.0058243335224688053, 0.0054430910386145115, 0.0048880241811275482, 0.0060612973757088184, 0.0058896858245134354, 0.0051568262279033661, 0.0053740069270133972, 0.0049363435246050358, 0.0060221194289624691, 0.0058078751899302006, 0.0044983630068600178, 0.0056970925070345402, 0.0043701552785933018, 0.0048158243298530579, 0.0057973903603851795, 0.0036486173048615456, 0.0051787532866001129, 0.0071243587881326675, 0.0048426338471472263, 0.0053130476735532284, 0.0042489292100071907, 0.0052229710854589939, 0.0049010571092367172, 0.0047630784101784229, 0.0056591578759253025, 0.003810968017205596, 0.0041609685868024826, 0.0062875542789697647, 0.0058658020570874214, 0.0052956086583435535, 0.0071827787905931473, 0.004090484231710434, 0.0065870983526110649, 0.005305243656039238, 0.005549571942538023, 0.0048643718473613262, 0.0055493940599262714, 0.0049627553671598434, 0.0065217902883887291, 0.0055519086308777332, 0.0044524208642542362, 0.0056483461521565914, 0.0033424242865294218, 0.0033535934053361416, 0.0052474429830908775, 0.0038017206825315952, 0.006336018443107605, 0.004470242653042078, 0.0037660896778106689, 0.0067426543682813644, 0.0055293822661042213, 0.0048527941107749939, 0.007101601455360651, 0.0061087715439498425, 0.0064291032031178474, 0.0037300470285117626, 0.0047544464468955994, 0.0057416600175201893, 0.0050127636641263962, 0.006959348451346159, 0.0051721637137234211, 0.0070337704382836819, 0.0049445568583905697, 0.004037030041217804, 0.0046145552769303322, 0.0049115577712655067, 0.0051532546058297157, 0.0047847889363765717, 0.0052285827696323395, 0.0053435019217431545, 0.0049467268399894238, 0.004929322749376297, 0.0052040019072592258, 0.0050656790845096111, 0.0062043084762990475, 0.0043889349326491356, 0.0056634941138327122, 0.0047272713854908943, 0.0066446191631257534, 0.0047574741765856743, 0.0038380157202482224, 0.0051623964682221413, 0.0052725179120898247, 0.005160982720553875, 0.0051010954193770885, 0.0046081137843430042, 0.005666694138199091, 0.0032697725109755993, 0.0052091712132096291, 0.0068192239850759506, 0.0052497759461402893, 0.0043155145831406116, 0.0057765538804233074, 0.0046926168724894524, 0.0065180128440260887, 0.0058081494644284248, 0.0062964889220893383, 0.0048168748617172241, 0.0056919590570032597, 0.0038963041733950377, 0.0042972560040652752, 0.0058311149477958679, 0.0050088227726519108, 0.0048119365237653255, 0.0040752766653895378, 0.0039937668479979038, 0.0066292891278862953, 0.0038181690033525229, 0.0036024469882249832, 0.0043962164781987667, 0.004294978454709053, 0.0040116477757692337, 0.0054705520160496235, 0.0045659281313419342, 0.0044532292522490025, 0.0053251706995069981, 0.0053578377701342106, 0.0046902652829885483, 0.006577945314347744, 0.0057163047604262829, 0.0049556391313672066, 0.0057967370375990868, 0.004618227481842041, 0.0056241508573293686, 0.0059735439717769623, 0.0047147409059107304, 0.0061007770709693432, 0.0035045782569795847, 0.0055961171165108681, 0.0040541035123169422, 0.0049140169285237789, 0.0085782790556550026, 0.0060610123910009861, 0.0049886628985404968, 0.0048903119750320911, 0.0047840499319136143, 0.0060716462321579456, 0.0055840504355728626, 0.004820551723241806, 0.005712208803743124, 0.0039789201691746712, 0.0044501759111881256, 0.0063857319764792919, 0.0048817899078130722, 0.0042303078807890415, 0.0041519980877637863, 0.0077053317800164223, 0.0046726958826184273, 0.0070369141176342964, 0.0067094597034156322, 0.0044894767925143242, 0.0042793969623744488, 0.0052304868586361408, 0.00536370649933815, 0.0059688789770007133, 0.0054710586555302143, 0.0043517914600670338, 0.0051915957592427731, 0.004929705522954464, 0.0048766806721687317, 0.0045650494284927845, 0.006739247590303421, 0.0062452862039208412, 0.0048986147157847881, 0.0051045846194028854, 0.0033804825507104397, 0.0036939666606485844, 0.0059008919633924961, 0.005595529917627573, 0.0067854137159883976, 0.0046570119448006153, 0.0047606285661458969, 0.0057968287728726864, 0.0045616556890308857, 0.0068782675080001354, 0.0039232592098414898, 0.0050945370458066463, 0.0053773890249431133, 0.0047383252531290054, 0.0046264408156275749, 0.0062061697244644165, 0.0051480378024280071, 0.0052133798599243164, 0.0062658083625137806, 0.0057414881885051727, 0.0053486577235162258, 0.0054099275730550289, 0.0046618068590760231, 0.0044749518856406212, 0.0051359264180064201, 0.0056877504102885723, 0.00502777099609375, 0.0065946872346103191, 0.006914693396538496, 0.00595841184258461, 0.0063255741260945797, 0.0046003428287804127, 0.0051198289729654789, 0.0044668903574347496, 0.0054716747254133224, 0.0051388111896812916, 0.0066773775033652782, 0.0039160405285656452, 0.0056373421102762222, 0.0048278006725013256, 0.0039447294548153877, 0.0054150447249412537, 0.0055079893209040165, 0.0051135243847966194, 0.0068128784187138081, 0.0048518064431846142, 0.004501712042838335, 0.0053686192259192467, 0.0064016426913440228, 0.0081080561503767967, 0.005015107337385416, 0.0058616106398403645, 0.0045980648137629032, 0.0045280861668288708, 0.0044580972753465176, 0.0046353372745215893, 0.0050005912780761719, 0.0052020181901752949, 0.0045912275090813637, 0.0049270954914391041, 0.0055738561786711216, 0.0054235770367085934, 0.0047181942500174046, 0.0043507758527994156, 0.0046240249648690224, 0.0039818901568651199, 0.0045283157378435135, 0.0045260987244546413, 0.0055305818095803261, 0.0045950552448630333, 0.0058230836875736713, 0.0052594463340938091, 0.004080834798514843, 0.0050570783205330372, 0.0046184388920664787, 0.0057763759978115559, 0.0049534821882843971, 0.0044694598764181137, 0.0036968877539038658, 0.0048447423614561558, 0.006391916424036026, 0.0049604075029492378, 0.0044603850692510605, 0.0057273651473224163, 0.0047033829614520073, 0.0048560425639152527, 0.0045124543830752373, 0.00430270005017519, 0.0073544164188206196, 0.0051521765999495983, 0.0071483245119452477, 0.0054577342234551907, 0.0048517361283302307, 0.0052424222230911255, 0.0051898444071412086, 0.0062459828332066536, 0.0043652625754475594, 0.0050359601154923439, 0.0054516573436558247, 0.0065241227857768536, 0.0043141092173755169, 0.0058429543860256672, 0.0045998366549611092, 0.0060476851649582386, 0.0051866290159523487, 0.0051166708581149578, 0.0048076682724058628, 0.0038683849852532148, 0.0038815841544419527, 0.0054480982944369316, 0.0065828152000904083, 0.0046721901744604111, 0.005751908291131258, 0.0056819193996489048, 0.0058458256535232067, 0.0056481519713997841, 0.0050928168930113316, 0.0042828163132071495, 0.0057899276725947857, 0.0048558851704001427, 0.005390537902712822, 0.003572933841496706, 0.0051714936271309853, 0.0069185574539005756, 0.0048063374124467373, 0.0038868258707225323, 0.006521331612020731, 0.0045218518935143948, 0.0061668632552027702, 0.0069769714027643204, 0.0045377989299595356, 0.0056004514917731285, 0.0043068286031484604, 0.0047169607132673264, 0.0070098219439387321, 0.0052884705364704132, 0.0048588183708488941, 0.0056521696969866753, 0.004027792252600193, 0.0039437804371118546, 0.0046298149973154068, 0.0060262037441134453, 0.0045052454806864262, 0.0045234537683427334, 0.007059877272695303, 0.0052129817195236683, 0.0043201739899814129, 0.0038489368744194508, 0.0042947367765009403, 0.0048828250728547573, 0.0049912575632333755, 0.003875277703627944, 0.004445456899702549, 0.0051712160930037498, 0.0040457951836287975, 0.0080491751432418823, 0.0045622317120432854, 0.0053604152053594589, 0.0050463816151022911, 0.0044059283100068569, 0.0065544154495000839, 0.0047506638802587986, 0.0068039549514651299, 0.0058058868162333965, 0.0046334555372595787, 0.0037452809046953917, 0.0067083840258419514, 0.0037023124750703573, 0.004997926764190197, 0.005488615483045578, 0.004268464632332325, 0.0047419271431863308, 0.0056188330054283142, 0.005637001246213913, 0.0045364643447101116, 0.0059941769577562809, 0.0041777514852583408, 0.0042613819241523743, 0.0036688903346657753, 0.0057894871570169926, 0.0058686975389719009, 0.0048402245156466961, 0.0053735151886940002, 0.0045400443486869335, 0.0059050875715911388, 0.0038701011799275875, 0.0049570444971323013, 0.0045782197266817093, 0.0040520611219108105, 0.0048258965834975243, 0.0045323260128498077, 0.0036651359405368567, 0.0040739732794463634, 0.0041212188079953194, 0.0044229710474610329, 0.0057023931294679642, 0.0063871662132441998, 0.0065890601836144924, 0.0051883324049413204, 0.004815918393433094, 0.0065678446553647518, 0.0064395829103887081, 0.004793146625161171, 0.0042731505818665028, 0.0052486909553408623, 0.0056711491197347641, 0.004389849491417408, 0.0065126167610287666, 0.0062677557580173016, 0.0044217710383236408, 0.0052890153601765633, 0.0037555794697254896, 0.0045409318991005421, 0.0071785501204431057, 0.0040825027972459793, 0.00563046894967556, 0.0044943112879991531, 0.0048237089067697525, 0.0053790779784321785, 0.0061312653124332428, 0.0077701103873550892, 0.0055599971674382687, 0.0052977469749748707, 0.0041059288196265697, 0.0038135969080030918, 0.0050608296878635883, 0.0057411096058785915, 0.006663633044809103, 0.0039940467104315758, 0.0053252861835062504, 0.0034592919982969761, 0.0060936161316931248, 0.0057451212778687477, 0.0044695711694657803, 0.0059293867088854313, 0.0057556112296879292, 0.0052173682488501072, 0.0052444655448198318, 0.0041648400947451591, 0.0051556583493947983, 0.0077807595953345299, 0.0040350127965211868, 0.0046833199448883533, 0.0044318344444036484, 0.0070861685089766979, 0.0042664334177970886, 0.0059251617640256882, 0.005101486574858427, 0.0049208975397050381, 0.0058679264038801193, 0.0048449477180838585, 0.0068504693917930126, 0.0051966886967420578, 0.0048606842756271362, 0.0055783814750611782, 0.00508152786642313, 0.0065925479866564274, 0.0050521711818873882, 0.0063558970578014851, 0.0052717933431267738, 0.0061022308655083179, 0.0038371644914150238, 0.0044641918502748013, 0.0059236437082290649, 0.0038953004404902458, 0.0064651216380298138, 0.0052475137636065483, 0.0063082990236580372, 0.0046656602062284946, 0.0038485364057123661, 0.0063375663012266159, 0.0049038776196539402, 0.0060801715590059757, 0.0040773302316665649, 0.0045867431908845901, 0.0043630655854940414, 0.0051136491820216179, 0.0064109242521226406, 0.0060888072475790977, 0.00432943319901824, 0.0040209623984992504, 0.0050590592436492443, 0.0068159131333231926, 0.0045260908082127571, 0.0066800862550735474, 0.0043295701034367085, 0.0052623092196881771, 0.0055888076312839985, 0.0056461361236870289, 0.0060321725904941559, 0.0050569898448884487, 0.0050130439922213554, 0.0040790890343487263, 0.0069187772460281849, 0.005565327126532793, 0.0047124582342803478, 0.0041291327215731144, 0.0070502539165318012, 0.0049174772575497627, 0.0066394614987075329, 0.0079436702653765678, 0.0049625704996287823, 0.0041570058092474937, 0.0058790836483240128, 0.0050903744995594025, 0.0052138986065983772, 0.0043626460246741772, 0.0061829178594052792, 0.005093245767056942, 0.0052690980955958366, 0.0048530683852732182, 0.0049767540767788887, 0.0045974045060575008, 0.0055208527483046055, 0.0043668304570019245, 0.0051833516918122768, 0.0036556941922754049, 0.0048525766469538212, 0.0054922844283282757, 0.0052815312519669533, 0.0052791074849665165, 0.0041452515870332718, 0.0064856121316552162, 0.0049248230643570423, 0.0051644849590957165, 0.0070610982365906239, 0.0059116804040968418, 0.006763828918337822, 0.0045310622081160545, 0.0045740990899503231, 0.0045781531371176243, 0.0054973862133920193, 0.0058209397830069065, 0.0048825982958078384, 0.0059726289473474026, 0.0040298691019415855, 0.0042206114158034325, 0.0039970548823475838, 0.0035326031502336264, 0.0043386146426200867, 0.0042672622948884964, 0.0069986339658498764, 0.0052370922639966011, 0.0060219485312700272, 0.0044960929080843925, 0.0070864553563296795, 0.005010153166949749, 0.0041130250319838524, 0.0053606303408741951, 0.0063652764074504375, 0.0061240661889314651, 0.0043936297297477722, 0.0067377248778939247, 0.0062581957317888737, 0.005568389780819416, 0.0073474226519465446, 0.0052651506848633289, 0.005161031149327755, 0.0059477463364601135, 0.0045922752469778061, 0.0046012420207262039, 0.0050609163008630276, 0.0043934728018939495, 0.0044422750361263752, 0.0062887961976230145, 0.0054709953255951405, 0.0044734273105859756, 0.0050197853706777096, 0.0054705217480659485, 0.0044369990937411785, 0.0040499987080693245, 0.0050883288495242596, 0.0072179799899458885, 0.0048445719294250011, 0.0042979288846254349, 0.005368212703615427, 0.0049819913692772388, 0.0041987234726548195, 0.0053722108714282513, 0.0064025293104350567, 0.0047398689202964306, 0.0048658554442226887, 0.0036509199999272823, 0.0060579841956496239, 0.0056929108686745167, 0.0045031094923615456, 0.0050681210123002529, 0.0048695667646825314, 0.0064042620360851288, 0.0056988196447491646, 0.006520361639559269, 0.0068071954883635044, 0.0049825282767415047, 0.0048320256173610687, 0.0044235009700059891, 0.0040893326513469219, 0.0059716878458857536, 0.0039965645410120487, 0.0041803363710641861, 0.0056159347295761108, 0.0050557181239128113, 0.0064944149926304817, 0.0055712061002850533, 0.0044870250858366489, 0.004305665846914053, 0.0051737520843744278, 0.0060398024506866932, 0.0048928768374025822, 0.0065679028630256653, 0.0047275228425860405, 0.0062996619381010532, 0.0053465450182557106, 0.0053710355423390865, 0.0040107821114361286, 0.0045171394012868404, 0.0048603750765323639, 0.0045721624046564102, 0.0056623928248882294, 0.0044019678607583046, 0.0046927342191338539, 0.0062434603460133076, 0.004345194436609745, 0.0058184992522001266, 0.0054473141208291054, 0.0054782889783382416, 0.0045516630634665489, 0.0049141859635710716, 0.0052366801537573338, 0.0045889993198215961, 0.0048541449941694736, 0.0073095019906759262, 0.0055051622912287712, 0.0057440167292952538, 0.0078682638704776764, 0.0046327258460223675, 0.0059900428168475628, 0.0050288154743611813, 0.0043792440555989742, 0.0054265544749796391, 0.0047284062020480633, 0.0053222258575260639, 0.0044900905340909958, 0.0056630424223840237, 0.0062947375699877739, 0.0051378132775425911, 0.0047831442207098007, 0.005150077398866415, 0.0053922859951853752, 0.0070358850061893463, 0.0062059313058853149, 0.0038447086699306965, 0.0071576391346752644, 0.0045807757414877415, 0.0051896045915782452, 0.004807058721780777, 0.0037122056819498539, 0.0068816347047686577, 0.0034714923240244389, 0.005288037471473217, 0.0049916780553758144, 0.0053866608068346977, 0.0040396843105554581, 0.0058026355691254139, 0.005766652524471283, 0.0058459537103772163, 0.0041438625194132328, 0.0067448178306221962, 0.0047287070192396641, 0.0061204922385513783, 0.004146612249314785, 0.0058616660535335541, 0.0037517014425247908, 0.0054252413101494312, 0.0066113322973251343, 0.0041013527661561966, 0.0063609126955270767, 0.0042126062326133251, 0.0052058030851185322, 0.0040627275593578815, 0.0046434015966951847, 0.0059052295982837677, 0.0063184476457536221, 0.004530884325504303, 0.0048230472020804882, 0.003775167278945446, 0.005599848460406065, 0.0052609997801482677, 0.0042412127368152142, 0.0040646232664585114, 0.0052907820791006088, 0.0056052319705486298, 0.0055593210272490978, 0.0068894489668309689, 0.007662053219974041, 0.0057195965200662613, 0.0045441235415637493, 0.005085404496639967, 0.003892483888193965, 0.0055596595630049706, 0.0059559685178101063, 0.0042620711028575897, 0.0046453224495053291, 0.0050586117431521416, 0.0057503506541252136, 0.0047838632017374039, 0.0037916414439678192, 0.0056344904005527496, 0.0041136802174150944, 0.0060042082332074642, 0.0055814431980252266, 0.0056365593336522579, 0.0042146383784711361, 0.0048085427843034267, 0.0050691524520516396, 0.003977388609200716, 0.0057047395966947079, 0.0051991944201290607, 0.0062909163534641266, 0.0044817458838224411, 0.0041693444363772869, 0.0063125616870820522, 0.0068349782377481461, 0.0051365639083087444, 0.0056432341225445271, 0.0062956470064818859, 0.004168141633272171, 0.003539747092872858, 0.0041791191324591637, 0.0038534058257937431, 0.004873709287494421, 0.0051326220855116844, 0.0056060049682855606, 0.0040088226087391376, 0.0048479214310646057, 0.0048131220974028111, 0.0050336737185716629, 0.0044928728602826595, 0.0039642895571887493, 0.0047550508752465248, 0.005066276527941227, 0.0062580821104347706, 0.0050058974884450436, 0.0042034178040921688, 0.006195547990500927, 0.0033818972297012806, 0.005107121542096138, 0.0048346235416829586, 0.0043264641426503658, 0.0047484631650149822, 0.0035226258914917707, 0.0066178399138152599, 0.0039658923633396626, 0.0044895983301103115, 0.0046861572191119194, 0.0054138298146426678, 0.0067781382240355015, 0.0051921033300459385, 0.005334251094609499, 0.005529564805328846, 0.0044677155092358589, 0.0066380701027810574, 0.0055763581767678261, 0.0055169225670397282, 0.0051338407211005688, 0.0051479330286383629, 0.0040999036282300949, 0.0048288814723491669, 0.0039386921562254429, 0.0060681216418743134, 0.0037793582305312157, 0.0084742875769734383, 0.0066953441128134727, 0.0056762374006211758, 0.0045752306468784809, 0.0056759780272841454, 0.0043341126292943954, 0.0042026974260807037, 0.0038294808473438025, 0.0063519440591335297, 0.0049712336622178555, 0.0054040160030126572, 0.0055239624343812466, 0.0040370626375079155, 0.006310279481112957, 0.00493280915543437, 0.0066996915265917778, 0.0053712590597569942, 0.0045042694546282291, 0.0057535474188625813, 0.004391595721244812, 0.003964434377849102, 0.0048424499109387398, 0.0053711016662418842, 0.0047536264173686504, 0.0043686111457645893, 0.0070983129553496838, 0.0069837090559303761, 0.0067423288710415363, 0.0051663331687450409, 0.0042868521995842457, 0.0058104903437197208, 0.004063023254275322, 0.0048772003501653671, 0.0042612403631210327, 0.0053301402367651463, 0.0044488552957773209, 0.0074058892205357552, 0.0053768390789628029, 0.0050889085978269577, 0.0050771608948707581, 0.0072441184893250465, 0.0043387236073613167, 0.0060329674743115902, 0.0047906171530485153, 0.0058124242350459099, 0.0056053441949188709, 0.0052135437726974487, 0.0047268467023968697, 0.0069651841185986996, 0.0057317526079714298, 0.005185465794056654, 0.0047777765430510044, 0.0044003608636558056, 0.0064143557101488113, 0.0066935154609382153, 0.004566107876598835, 0.0049694688059389591, 0.0054041324183344841, 0.0043916665017604828, 0.0044128065928816795, 0.0074913469143211842, 0.0042488332837820053, 0.0050207274034619331, 0.0050043514929711819, 0.0040186685509979725, 0.0039520463906228542, 0.0048956782557070255, 0.0038891476579010487, 0.0073130051605403423, 0.0045399176888167858, 0.0065199742093682289, 0.0044079022482037544, 0.0048340153880417347, 0.003519850317388773, 0.0045028147287666798, 0.0054169176146388054, 0.0037158532068133354, 0.0056385854259133339, 0.0041666729375720024, 0.0060534160584211349, 0.005299961194396019, 0.0046585854142904282, 0.0046219914220273495, 0.0041224528104066849, 0.0038390189874917269, 0.0045750918798148632, 0.0045280233025550842, 0.0060797980986535549, 0.0060151703655719757, 0.0046876375563442707, 0.0048791016452014446, 0.0055057480931282043, 0.0062468717806041241, 0.0054892366752028465, 0.00534392474219203, 0.0041329944506287575, 0.0053333188407123089, 0.0056535410694777966, 0.0061138318851590157, 0.0052726459689438343, 0.0056461775675415993, 0.0060492581687867641, 0.0031961505301296711, 0.004418584518134594, 0.0051881857216358185, 0.0034630047157406807, 0.0040356139652431011, 0.0041829082183539867, 0.0046067885123193264, 0.0043773707002401352, 0.0045403321273624897, 0.0035901013761758804, 0.0043226913549005985, 0.0045927152968943119, 0.0073844250291585922, 0.0053184940479695797, 0.006284395232796669, 0.0061565116047859192, 0.0057454141788184643, 0.0036993904504925013, 0.0038551888428628445, 0.00529490876942873, 0.0057480721734464169, 0.0039614583365619183, 0.005768198985606432, 0.0049578971229493618, 0.0059405569918453693, 0.0037984703667461872, 0.0061264527030289173, 0.0063135246746242046, 0.0056166546419262886, 0.0038795261643826962, 0.0054053380154073238, 0.0043513961136341095, 0.0049135354347527027, 0.0045197578147053719, 0.0047967764548957348, 0.0043675336055457592, 0.0047234832309186459, 0.005441104993224144, 0.0043707261793315411, 0.0051865600980818272, 0.0065845977514982224, 0.0049557420425117016, 0.0049651265144348145, 0.0064358646050095558, 0.0040982873179018497, 0.0041177598759531975, 0.0062015336006879807, 0.0046951966360211372, 0.0037779849953949451, 0.0064330613240599632, 0.0050499029457569122, 0.0044536273926496506, 0.0051324740052223206, 0.0057788514532148838, 0.0058025592006742954, 0.006299865897744894, 0.005677396897226572, 0.0057766679674386978, 0.0053270854987204075, 0.0056757982820272446, 0.0046667600981891155, 0.005751424003392458, 0.0053109112195670605, 0.00546667305752635, 0.0050675263628363609, 0.0039916299283504486, 0.0044277599081397057, 0.0048778699710965157, 0.0050995592027902603, 0.005400379654020071, 0.0043116360902786255, 0.0054492205381393433, 0.0047494824975728989, 0.0028134500607848167, 0.0068200826644897461, 0.0042829420417547226, 0.0045416755601763725, 0.0045021381229162216, 0.0049502192996442318, 0.003694155253469944, 0.0057529406622052193, 0.0046252128668129444, 0.0035732721444219351, 0.0048517221584916115, 0.0038105116691440344, 0.0052775354124605656, 0.0052844998426735401, 0.0045680715702474117, 0.0041560954414308071, 0.0030434008222073317, 0.0047595049254596233, 0.0065321982838213444, 0.0054870308376848698, 0.0044456594623625278, 0.0059947352856397629, 0.005651252344250679, 0.0039053137879818678, 0.0050622997805476189, 0.0037446729838848114, 0.0053732818923890591, 0.0049930443055927753, 0.005875742994248867, 0.0060143996961414814, 0.0050906841643154621, 0.0043510706163942814, 0.004692484624683857, 0.0048163835890591145, 0.004600385669618845, 0.004229844082146883, 0.0058950465172529221, 0.0057284636422991753, 0.0056824344210326672, 0.0037820311263203621, 0.004689428023993969, 0.0070209414698183537, 0.0047922255471348763, 0.0051146466284990311, 0.0049720555543899536, 0.0060174115933477879, 0.0071453382261097431, 0.0059870593249797821, 0.0047867647372186184, 0.0047899340279400349, 0.0058563593775033951, 0.005432620644569397, 0.0042560617439448833, 0.0040155509486794472, 0.0046852775849401951, 0.0051745134405791759, 0.005469747819006443, 0.0062644830904901028, 0.0048146662302315235, 0.0051156934350728989, 0.0069021349772810936, 0.0071720336563885212, 0.0040795160457491875, 0.0061603100039064884, 0.0051936274394392967, 0.0047271503135561943, 0.0041431994177401066, 0.0043042427860200405, 0.0058121387846767902, 0.0078143775463104248, 0.0042360993102192879, 0.0041525457054376602, 0.0031724900472909212, 0.0063699819147586823, 0.0052187829278409481, 0.0050680479034781456, 0.0056954794563353062, 0.0047503560781478882, 0.0034663670230656862, 0.0044575142674148083, 0.0044929422438144684, 0.0064520062878727913, 0.0054768798872828484, 0.0062960791401565075, 0.0056207906454801559, 0.0055933832190930843, 0.0046197297051548958, 0.0039713946171104908, 0.0054463199339807034, 0.0046494295820593834, 0.0066351350396871567, 0.0061630075797438622, 0.0055620456114411354, 0.0036354553885757923, 0.0056375316344201565, 0.0060538500547409058, 0.0061429888010025024, 0.0048274216242134571, 0.005547698587179184, 0.0057558021508157253, 0.0069250930100679398, 0.0052936729043722153, 0.0059466804377734661, 0.0053908252157270908, 0.0036470424383878708, 0.0037604821845889091, 0.0037862681783735752, 0.0050720786675810814, 0.0037113712169229984, 0.0056615271605551243, 0.006515825167298317, 0.0056527713313698769, 0.0053093270398676395, 0.0043861647136509418, 0.0043209320865571499, 0.0074872411787509918, 0.006029872689396143, 0.0045286240056157112, 0.0053604887798428535, 0.0052941520698368549, 0.0037216993514448404, 0.0052751451730728149, 0.0052462462335824966, 0.004477126058191061, 0.0045290538109838963, 0.0043639997020363808, 0.005459614098072052, 0.0040112254209816456, 0.0039136097766458988, 0.0058211875148117542, 0.0055267936550080776, 0.0051957191899418831, 0.0052790599875152111, 0.006998435128480196, 0.0043748160824179649, 0.004778561182320118, 0.0038121331017464399, 0.0041194986552000046, 0.0047770733945071697, 0.0057665882632136345, 0.0053694820962846279, 0.0054698372259736061, 0.0044058398343622684, 0.0038939446676522493, 0.0047401208430528641, 0.0048985788598656654, 0.0057430481538176537, 0.0043917614966630936, 0.0049144118092954159, 0.0047793942503631115, 0.0039974050596356392, 0.00352504663169384, 0.0059716110117733479, 0.0074203247204422951, 0.0054863947443664074, 0.0044520390219986439, 0.0066033340990543365, 0.006440452765673399, 0.004318412858992815, 0.0052172578871250153, 0.0040781251154839993, 0.0051077995449304581, 0.0041125407442450523, 0.004371370654553175, 0.004033123143017292, 0.004590142983943224, 0.0047327633947134018, 0.0059578255750238895, 0.0048930258490145206, 0.0040157046169042587, 0.003866617102175951, 0.0042615057900547981, 0.0054176365956664085, 0.0041775275021791458, 0.006336594931781292, 0.0047006122767925262, 0.0051597603596746922, 0.0053560133092105389, 0.0042530084028840065, 0.0055774669162929058, 0.0058217146433889866, 0.0056939865462481976, 0.0053191566839814186, 0.0061187213286757469, 0.0052257557399570942, 0.0050212452188134193, 0.0067582582123577595, 0.0040477979928255081, 0.0057535450905561447, 0.0064114434644579887, 0.0053562447428703308, 0.0050312499515712261, 0.0046850894577801228, 0.0050432099960744381, 0.005396026186645031, 0.0043046427890658379, 0.0041425437666475773, 0.0041805696673691273, 0.0058853118680417538, 0.0058635999448597431, 0.0047843889333307743, 0.0035696160048246384, 0.0058554899878799915, 0.003667821642011404, 0.0048681567423045635, 0.0057715452276170254, 0.0047558541409671307, 0.0057193958200514317, 0.0044100801460444927, 0.0063339793123304844, 0.0057406597770750523, 0.0051196524873375893, 0.0043565020896494389, 0.0052906977944076061, 0.0044965441338717937, 0.0052195573225617409, 0.0048294831067323685, 0.0040094656869769096, 0.0046373927034437656, 0.0056471037678420544, 0.0055106049403548241, 0.0054431739263236523, 0.0053548440337181091, 0.0037853820249438286, 0.004189356230199337, 0.0059184776619076729, 0.0049027213826775551, 0.0074327802285552025, 0.0043778014369308949, 0.0051073567010462284, 0.0044783963821828365, 0.0066647622734308243, 0.0051251421682536602, 0.0053358851000666618, 0.0053174961358308792, 0.0054655321873724461, 0.0066054523922502995, 0.0046077994629740715, 0.0035221346188336611, 0.005413801409304142, 0.0056763659231364727, 0.0064813075587153435, 0.0041259368881583214, 0.0060254759155213833, 0.0042372127063572407, 0.0043363389559090137, 0.0058236783370375633, 0.0054665100760757923, 0.006255412008613348, 0.0058906315825879574, 0.0043983780778944492, 0.0038404238875955343, 0.0049343602731823921, 0.0050819371826946735, 0.0045957658439874649, 0.0068890196271240711, 0.0081418305635452271, 0.0046908506192266941, 0.0038888517301529646, 0.0054337573237717152, 0.0059610488824546337, 0.0049137291498482227, 0.0065422705374658108, 0.0041568931192159653, 0.0051331198774278164, 0.0055689583532512188, 0.0052758650854229927, 0.0050339773297309875, 0.0052578463219106197, 0.0056399567984044552, 0.0048123393207788467, 0.0052486266940832138, 0.0040376419201493263, 0.0049453889951109886, 0.0044665830209851265, 0.0041218232363462448, 0.006265539675951004, 0.0047709932550787926, 0.0046176793985068798, 0.006194655317813158, 0.005073231179267168, 0.0048878868110477924, 0.0047499663196504116, 0.0049888668581843376, 0.0056857084855437279, 0.0048376657068729401, 0.0054700984619557858, 0.0056679043918848038, 0.007375841960310936, 0.0044133332557976246, 0.0058497642166912556, 0.0063974750228226185, 0.0046689794398844242, 0.0035578438546508551, 0.0055346861481666565, 0.0052640917710959911, 0.0062284148298203945, 0.0058950884267687798, 0.0050454777665436268, 0.0060311206616461277, 0.0045141400769352913, 0.0062580825760960579, 0.0043243700638413429, 0.0059118643403053284, 0.0045265397056937218, 0.00574480090290308, 0.0049093193374574184, 0.0067431656643748283, 0.0046368604525923729, 0.0052484557963907719, 0.0044206748716533184, 0.0063646691851317883, 0.0052671576850116253, 0.0047662500292062759, 0.0049882992170751095, 0.0045688813552260399, 0.0050917943008244038, 0.0051278630271553993, 0.0053043877705931664, 0.0054501262493431568, 0.0043581402860581875, 0.0038545865099877119, 0.0053388928063213825, 0.0060892272740602493, 0.0050841709598898888, 0.004775454755872488, 0.0048530134372413158, 0.00754213472828269, 0.0049302675761282444, 0.0049616312608122826, 0.0047980975359678268, } };
const TfArray<1280, int> quant76_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(8) int8_t tensor_data77[1*3*3*8] = { 
  /* [0][0][][] */ 1,-17,-4,7,0,-1,0,-5, -13,18,-11,127,4,3,-3,64, 0,-1,-3,5,-1,3,1,1, 
  /* [0][1][][] */ -9,-127,-7,-3,1,1,-127,-1, 127,-1,-127,1,-127,127,-5,-13, -7,4,-3,-1,1,7,0,3, 
  /* [0][2][][] */ 0,7,-8,-4,-1,1,8,2, -8,9,0,5,4,-18,3,-127, -1,-3,-1,-1,-2,1,1,-19, 
};
const TfArray<4, int> tensor_dimension77 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant77_scale = { 8, { 0.0096412086859345436, 0.0046483725309371948, 0.013894679956138134, 0.0083508361130952835, 0.014161180704832077, 0.0074575357139110565, 0.0063511882908642292, 0.0078233126550912857, } };
const TfArray<8, int> quant77_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 3 };
const ALIGN(8) int32_t tensor_data78[8] = { 5306, -9011, -9874, 4821, 7009, 280, -10122, 10927, };
const TfArray<1, int> tensor_dimension78 = { 1, { 8 } };
const TfArray<8, float> quant78_scale = { 8, { 0.00019670087203849107, 5.6424745707772672e-05, 0.00010668301547411829, 8.0122146755456924e-05, 3.7929283280391246e-05, 9.8492753750178963e-05, 4.2713389120763168e-05, 5.9438483731355518e-05, } };
const TfArray<8, int> quant78_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const ALIGN(8) int8_t tensor_data79[1*3*3*48] = { 
  /* [0][0][][] */ -49,113,35,36,-77,-78,-19,75,-89,-90,51,13,60,-127,-74,-75,93,-88,-109,-31,71,-56,34,24,113,80,-103,101,-23,26,-55,-69,-68,33,-3,81,105,77,-77,95,70,2,-113,58,-44,-46,-78,-46, 85,71,22,-127,-88,-115,-27,75,34,-127,54,-114,84,-37,-121,90,102,-95,-115,-34,106,-97,-81,98,-121,86,18,-127,-74,43,-82,-93,-87,40,-57,0,127,94,82,77,-80,-15,0,95,-97,-49,-116,-67, -20,-13,-11,88,-37,-21,12,13,48,-54,-21,84,9,-22,-38,-44,24,-10,-16,-8,74,-40,-17,41,11,31,97,26,-71,8,-43,-28,-36,-4,2,-13,43,42,-17,28,13,6,-10,52,-71,-16,-27,-13, 
  /* [0][1][][] */ -76,127,-126,-21,-127,-87,-95,96,127,24,116,18,111,-68,-83,-86,112,-127,-96,-79,86,98,-71,21,-127,113,-127,-72,-27,-86,84,-110,-93,115,-56,127,-18,119,-90,127,17,-54,-127,68,-89,-101,-97,-98, 127,53,-127,119,-107,-127,-127,127,-46,23,127,-122,127,29,-127,127,127,-112,-127,-127,127,127,127,127,119,127,-12,99,-127,-127,127,-127,-127,127,-127,82,-4,127,127,57,-47,-77,-20,127,-127,-127,-127,-127, -24,-23,-27,-98,-46,-30,-26,31,-71,7,1,127,22,24,-44,-69,29,4,-42,-45,85,54,12,51,8,48,100,-18,-95,-75,68,-50,-67,13,-9,-2,-7,27,-19,29,28,-32,0,64,-94,-46,-59,-36, 
  /* [0][2][][] */ -34,46,96,-17,-72,-3,-94,7,-34,67,91,-5,50,-47,-33,-55,42,-52,1,-71,10,-28,36,6,14,27,-45,-11,-1,85,-22,-47,-57,57,5,54,-70,24,-51,53,-86,-92,-64,16,-34,-61,-40,-40, 52,28,96,8,-61,-21,-115,14,11,78,87,-63,46,17,-45,72,29,-35,11,-90,21,-38,-43,45,2,32,-18,7,-83,122,-49,-45,-66,58,-10,56,-114,10,61,2,127,-127,4,51,-48,-70,-66,-44, -9,-5,36,10,-3,3,-64,-1,21,22,1,59,6,21,-1,-51,13,15,-1,-35,10,-20,7,-5,-17,27,32,-4,-48,71,-27,-9,-37,-2,12,18,-43,1,7,11,-39,-49,11,11,-32,-17,-19,-3, 
};
const TfArray<4, int> tensor_dimension79 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant79_scale = { 48, { 0.01043145265430212, 0.0040926956571638584, 0.01286227535456419, 0.023484289646148682, 0.0070057609118521214, 0.0036128601059317589, 0.0035440241917967796, 0.0039978446438908577, 0.018676565960049629, 0.0035850042477250099, 0.0049428059719502926, 0.0047158421948552132, 0.0020810696296393871, 0.008478640578687191, 0.005476086400449276, 0.0043857456184923649, 0.0060314950533211231, 0.0053149140439927578, 0.0028795592952519655, 0.00542454794049263, 0.0036176396533846855, 0.0090530207380652428, 0.042116411030292511, 0.0043904935009777546, 0.020627066493034363, 0.0026438841596245766, 0.0047174543142318726, 0.024031508713960648, 0.0050785061903297901, 0.009218897670507431, 0.012229002080857754, 0.0077596884220838547, 0.0054111499339342117, 0.013527576811611652, 0.0067969281226396561, 0.0050129448063671589, 0.0064019509591162205, 0.005089824553579092, 0.0050687068141996861, 0.00239384057931602, 0.028503753244876862, 0.0053194151259958744, 0.010109648108482361, 0.0028006106149405241, 0.0038213147781789303, 0.0051766303367912769, 0.0047842352651059628, 0.0025015701539814472, } };
const TfArray<48, int> quant79_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 3 };
const ALIGN(8) int32_t tensor_data80[8] = { -19363, -6769, -6560, -593, 10499, 15004, -14309, 7258, };
const TfArray<1, int> tensor_dimension80 = { 1, { 8 } };
const TfArray<8, float> quant80_scale = { 8, { 0.0001321740128332749, 8.8127351773437113e-05, 0.0001298915158258751, 0.00012210881686769426, 0.00011722952331183478, 0.00012179367331555113, 0.00014566458412446082, 9.1253779828548431e-05, } };
const TfArray<8, int> quant80_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const ALIGN(8) int8_t tensor_data81[1*3*3*48] = { 
  /* [0][0][][] */ 13,36,-89,-20,-78,11,99,9,48,67,8,9,-45,-1,-8,-8,100,-4,12,-117,-109,-9,16,76,-15,-16,15,-13,75,13,-19,-16,-26,1,-17,-111,-37,-2,-12,36,32,-55,-22,-40,48,27,0,-32, 116,127,127,-42,-103,74,-38,127,93,104,-33,-61,-9,-56,0,21,127,59,28,75,127,-30,-3,127,56,127,68,8,-61,16,7,127,-127,12,-36,-40,50,-38,-69,127,66,127,-127,26,-44,-44,-4,-37, 9,32,19,41,-29,-27,-95,-37,18,45,10,33,-5,27,-14,1,-5,-24,-2,41,-5,-2,9,67,-27,-48,12,-13,-44,10,-11,-9,-28,7,42,-116,5,33,-9,38,-84,-20,5,-47,39,-5,-9,0, 
  /* [0][1][][] */ 49,-40,-126,-96,-24,2,127,-45,-54,6,5,-75,27,-127,21,24,109,-9,27,127,87,-17,2,-36,-55,14,-41,-13,127,34,31,72,37,4,0,-127,-47,40,49,-40,20,31,25,51,29,104,99,127, 28,-2,118,4,36,-42,-16,-71,-127,121,127,-127,-127,-67,127,127,72,-127,-127,-71,-79,-127,127,-81,127,-66,-127,127,-46,-127,127,59,85,127,-104,-74,-45,-127,127,-5,72,-82,105,127,-127,-127,127,-39, 42,-28,-72,127,-18,1,-104,-38,-13,-3,-21,-28,37,-18,2,37,33,55,65,-79,9,-6,-4,-53,-73,25,-42,-5,-42,19,-16,14,39,13,127,-110,127,101,32,-52,-127,5,1,13,25,53,57,-98, 
  /* [0][2][][] */ 15,-68,-83,-24,-6,-42,-32,4,-1,59,-10,63,36,0,-25,3,-17,37,4,-19,40,-12,11,-39,-21,8,27,-9,87,-10,-30,1,-4,12,-5,71,-14,-18,-31,-23,29,24,-3,-3,26,48,-4,-95, 127,14,92,-27,-127,-127,16,48,30,-127,-37,-49,23,-56,6,2,11,30,67,-2,-61,-1,-21,-44,47,-62,66,2,-116,48,-33,79,33,37,-31,17,36,-9,-71,-44,42,-31,21,34,-34,-67,-13,32, 10,-80,15,-37,-44,-40,48,-13,-14,57,1,65,59,27,-22,5,10,8,-2,14,-8,-11,9,-26,-35,21,21,-4,-20,-9,-15,-8,-9,25,19,77,7,11,-21,-11,-88,8,-2,6,27,1,-17,-16, 
};
const TfArray<4, int> tensor_dimension81 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant81_scale = { 48, { 0.0054330197162926197, 0.0088657001033425331, 0.0059890546835958958, 0.0034333588555455208, 0.009386429563164711, 0.0058158589527010918, 0.028354715555906296, 0.014929462224245071, 0.0091205425560474396, 0.0094519834965467453, 0.025030570104718208, 0.006608723197132349, 0.020842097699642181, 0.0049478150904178619, 0.023874811828136444, 0.0099764596670866013, 0.0046020215377211571, 0.16852405667304993, 0.012168065644800663, 0.038622908294200897, 0.01032409630715847, 0.0070218048058450222, 0.0081046679988503456, 0.010060194879770279, 0.014330169185996056, 0.010166567750275135, 0.011377880349755287, 0.023970061913132668, 0.010558802634477615, 0.05373777449131012, 0.023377729579806328, 0.0026895550545305014, 0.010617928579449654, 0.012245521880686283, 0.01360455434769392, 0.005081529263406992, 0.0065609137527644634, 0.0091555928811430931, 0.022838633507490158, 0.015192383900284767, 0.005417725071310997, 0.035218782722949982, 0.013770016841590405, 0.032990731298923492, 0.017552973702549934, 0.0081687606871128082, 0.011565154418349266, 0.006404142826795578, } };
const TfArray<48, int> quant81_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 3 };
const ALIGN(8) int32_t tensor_data82[8] = { -18789, 1498, -4583, 24786, -15422, -2552, 8627, -9989, };
const TfArray<1, int> tensor_dimension82 = { 1, { 8 } };
const TfArray<8, float> quant82_scale = { 8, { 0.00011883735714945942, 0.00010645560541888699, 7.5946561992168427e-05, 0.00011272456322330981, 0.00019794146646745503, 0.00010122037201654166, 7.7313176007010043e-05, 0.00011755818559322506, } };
const TfArray<8, int> quant82_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const ALIGN(8) int8_t tensor_data83[1*3*3*48] = { 
  /* [0][0][][] */ -89,78,-82,120,73,-68,12,-119,-77,80,87,-65,78,51,-112,-95,56,-58,-98,74,-89,78,81,88,-102,74,71,67,-39,-52,-65,96,72,-59,-59,-74,-78,78,-66,99,-37,51,-97,-52,-87,95,58,-62, -122,115,-99,-77,-43,-94,-63,-118,-116,105,95,-93,127,78,-127,-106,93,-68,-90,83,-87,98,107,127,-90,89,94,98,-63,-83,-86,119,92,-73,-86,-94,-71,112,-115,111,-57,86,-104,-81,-111,117,82,-91, -52,55,-63,-24,-90,-38,-71,-47,-46,41,28,-32,50,33,-45,-49,29,-46,-50,50,-34,61,37,43,-53,34,33,24,-33,-34,-45,49,34,-49,-46,-39,-35,59,-62,29,-1,29,-37,-44,-47,32,33,-24, 
  /* [0][1][][] */ -106,96,-108,127,68,-103,5,-123,-93,93,102,-94,-9,91,-112,-116,64,-102,-112,102,-124,105,108,83,-127,102,100,87,-77,-93,-104,100,101,-123,-83,-100,-127,90,-96,105,-89,86,-127,-80,-108,104,106,-92, -127,127,-127,-126,-105,-127,-112,-127,-127,127,127,-127,-4,127,-99,-127,127,-127,-127,127,-127,127,127,120,-111,127,127,127,-127,-127,-127,127,127,-127,-127,-127,-110,127,-127,127,-127,127,-121,-127,-127,127,127,-127, -74,64,-84,-95,-127,-67,-127,-44,-48,49,45,-52,2,55,-62,-57,44,-66,-74,63,-52,66,41,32,-58,46,40,41,-69,-72,-80,54,45,-100,-49,-47,-77,50,-80,32,-31,60,-45,-62,-55,34,65,-56, 
  /* [0][2][][] */ -78,37,-39,59,67,-66,3,-69,-34,22,39,-41,-82,48,-59,-73,15,-50,-40,44,-59,60,40,-12,-28,28,28,38,-50,-48,-69,22,39,-36,-38,-51,-61,16,-46,32,-54,39,-70,-30,-48,29,52,-23, -95,39,-72,-46,-76,-74,-71,-60,-32,32,60,-58,-116,67,-85,-64,44,-56,-76,50,-52,78,41,-15,-24,54,35,40,-68,-75,-79,33,49,-56,-54,-56,-61,29,-64,34,-71,62,-64,-62,-61,19,67,-49, -46,24,-14,-61,-110,-38,-84,-13,-10,24,30,-33,-65,22,-2,-20,18,-23,-50,27,-19,21,11,-14,-9,16,15,38,-57,-37,-52,12,8,-45,-7,-7,-15,3,-27,6,-28,29,-24,-26,0,14,29,-22, 
};
const TfArray<4, int> tensor_dimension83 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant83_scale = { 48, { 0.0041944142431020737, 0.0047686356119811535, 0.0041037225164473057, 0.0039555639959871769, 0.0043239975348114967, 0.0042765303514897823, 0.0041914037428796291, 0.0033856427762657404, 0.0023894980549812317, 0.0050469366833567619, 0.0049326657317578793, 0.0033821864053606987, 0.0064997770823538303, 0.0038705114275217056, 0.0038095545023679733, 0.0027809529565274715, 0.0041933157481253147, 0.0046365568414330482, 0.0037021285388618708, 0.010844261385500431, 0.0038724006153643131, 0.0060847783461213112, 0.0081725511699914932, 0.0031069607939571142, 0.0046545700170099735, 0.020734982565045357, 0.0042830947786569595, 0.021829767152667046, 0.0039420421235263348, 0.0054536070674657822, 0.0039299996569752693, 0.0015606974484398961, 0.0048887073062360287, 0.0033965101465582848, 0.0056657982058823109, 0.004293534904718399, 0.004697056021541357, 0.0047511323355138302, 0.0043546832166612148, 0.0036098277196288109, 0.002366113243624568, 0.0033262115903198719, 0.0024352155160158873, 0.0042861886322498322, 0.0030791410245001316, 0.0024737166240811348, 0.0028919996693730354, 0.0045806374400854111, } };
const TfArray<48, int> quant83_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 3 };
const ALIGN(8) int32_t tensor_data84[8] = { 9146, -14634, -26594, 3928, 482, 7299, -5039, 33005, };
const TfArray<1, int> tensor_dimension84 = { 1, { 8 } };
const TfArray<8, float> quant84_scale = { 8, { 0.00010900945198955014, 7.6921278377994895e-05, 7.4276860686950386e-05, 0.00010799443407449871, 9.2222297098487616e-05, 8.9602719526737928e-05, 9.5479896117467433e-05, 7.9265919339377433e-05, } };
const TfArray<8, int> quant84_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const ALIGN(8) int8_t tensor_data85[1*3*3*48] = { 
  /* [0][0][][] */ 1,-22,21,-24,-103,6,-30,11,-6,66,-50,-94,-42,-127,-19,-120,-98,-24,-5,-1,7,38,-10,28,-127,2,-80,-111,-41,24,11,-37,-13,69,-30,-51,-37,-17,-13,-80,126,4,97,19,28,34,15,19, 46,-12,33,-127,-114,66,50,127,-75,-75,-116,33,26,-47,-127,41,103,-18,-12,-4,-79,2,11,-21,-31,-1,-76,-127,-127,67,88,-29,-3,127,-40,-87,-110,-67,-14,-127,-127,51,127,52,34,36,18,44, -2,32,4,-8,-41,0,-52,6,3,90,-46,-92,36,-87,-5,-95,56,-22,-15,9,3,34,0,34,-111,-3,-90,-105,-36,22,14,-41,-4,37,-7,-38,-13,-45,-15,-92,126,-8,75,-127,12,35,-16,32, 
  /* [0][1][][] */ 32,-111,-27,34,-107,2,111,-25,3,30,-108,28,-78,-9,-66,-30,82,-39,-30,-93,81,25,127,8,-76,-32,-108,-21,-50,117,2,-18,-31,51,-11,-127,12,-69,7,-110,-82,24,-88,105,8,26,127,26, 127,13,127,59,127,127,127,-60,-80,-83,-26,127,-51,1,-113,-127,18,127,127,-19,-127,127,-95,127,-74,-74,107,103,-80,76,-127,-90,-127,41,127,40,95,-1,-127,6,-100,127,-110,17,127,-127,-48,86, 40,127,-42,16,-68,2,112,-22,5,80,-127,16,127,30,-49,-37,-78,-82,-50,127,59,14,-30,8,-74,127,-127,-59,-42,91,-15,-10,-49,30,-88,-120,12,-127,5,-106,-79,1,-61,-53,1,20,-84,-38, 
  /* [0][2][][] */ -8,-37,10,-2,-71,15,-61,19,12,127,-54,13,-8,-63,11,-107,-127,0,-41,12,28,-7,6,4,-120,8,-84,-110,28,127,-12,69,-12,45,-76,-43,-29,16,50,-58,109,-52,0,1,21,28,6,-34, -3,-28,15,65,-74,-26,84,-71,127,96,-118,-27,-21,-37,-102,21,31,-56,-36,-46,-36,36,4,23,-29,0,72,-87,-18,-49,38,127,-32,1,-107,-72,-127,-46,67,-127,-104,-40,8,-70,-16,12,-14,-127, 6,47,13,-8,-40,2,-66,18,1,82,-40,4,18,-35,18,-87,25,2,-42,25,11,9,-12,6,-121,-4,-97,-91,38,83,-3,57,-7,52,-26,-4,-17,-4,49,-56,105,-45,-6,-76,9,24,0,-9, 
};
const TfArray<4, int> tensor_dimension85 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant85_scale = { 48, { 0.0053727212361991405, 0.011182785965502262, 0.013540560379624367, 0.028148137032985687, 0.0051770112477242947, 0.012525882571935654, 0.0047132731415331364, 0.019493278115987778, 0.012992230243980885, 0.003219568869099021, 0.0033811316825449467, 0.012724478729069233, 0.011623146012425423, 0.0043969559483230114, 0.0067485487088561058, 0.0055547174997627735, 0.011702786199748516, 0.013903071172535419, 0.0062344521284103394, 0.011583771556615829, 0.015200401656329632, 0.024003930389881134, 0.020050538703799248, 0.0068807546049356461, 0.0038371838163584471, 0.019393656402826309, 0.0042390041053295135, 0.0032199621200561523, 0.0035513602197170258, 0.012552449479699135, 0.01489645428955555, 0.0086498521268367767, 0.006741388700902462, 0.0032368479296565056, 0.0059243980795145035, 0.0047679799608886242, 0.0061935549601912498, 0.0052458769641816616, 0.012191725894808769, 0.0038480348885059357, 0.0049758292734622955, 0.010100732557475567, 0.00919309351593256, 0.020743111148476601, 0.060663066804409027, 0.009215756319463253, 0.014893470332026482, 0.016098121181130409, } };
const TfArray<48, int> quant85_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 3 };
const ALIGN(8) int32_t tensor_data86[8] = { -7504, 10099, -13711, 16423, -3032, -9541, 3277, -6727, };
const TfArray<1, int> tensor_dimension86 = { 1, { 8 } };
const TfArray<8, float> quant86_scale = { 8, { 6.5796368289738894e-05, 7.4596224294509739e-05, 3.9191138057503849e-05, 7.5464464316610247e-05, 6.2673112552147359e-05, 7.6189418905414641e-05, 6.5795888076536357e-05, 6.4642255892977118e-05, } };
const TfArray<8, int> quant86_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const ALIGN(8) int8_t tensor_data87[1*3*3*48] = { 
  /* [0][0][][] */ 43,13,114,-126,-17,-11,-26,51,-94,-68,-20,-71,12,-44,110,72,-117,119,57,66,-4,-3,15,79,13,-48,-124,77,-45,88,-24,47,-35,-61,-42,54,-14,-123,32,32,-12,-51,-107,30,-22,-65,12,-14, -12,85,124,-127,22,36,-11,127,21,-71,-126,-79,67,6,-28,127,-51,91,-127,-32,-95,101,53,-24,76,-118,-25,98,-127,56,-127,79,23,4,127,110,-49,-127,-17,27,-127,127,1,75,32,-66,5,42, 25,-98,124,-121,-13,16,17,36,-84,-65,-31,-58,-4,50,-62,36,-127,108,52,43,6,-4,16,-49,15,-51,-88,67,-27,48,-19,32,-35,-45,-66,42,-5,-87,-12,22,-9,-28,65,6,-12,-52,6,-43, 
  /* [0][1][][] */ 62,43,-4,86,70,-117,-127,-10,59,-60,-95,-99,31,-24,127,48,-88,127,39,-54,-119,-2,34,68,13,-15,-120,120,38,77,-15,44,90,0,52,89,-34,-48,127,-6,-107,33,-114,85,8,-125,23,8, 127,89,51,91,127,-61,13,-104,127,11,127,61,127,-75,-55,67,-33,32,73,127,-8,127,127,-127,-127,127,27,-83,108,-127,52,127,127,16,125,-127,103,-42,-103,127,-49,113,17,-14,30,-127,113,127, 26,-127,-69,92,26,-5,-23,-6,49,-66,-117,-105,9,127,-59,13,-101,58,38,25,-127,-10,-22,25,10,-33,-37,127,20,16,-19,38,73,7,43,69,-46,2,-8,-32,-101,-38,107,78,-15,-104,16,-6, 
  /* [0][2][][] */ 46,74,100,25,21,-100,29,-25,-61,71,-32,-59,27,-23,87,114,-25,35,16,33,19,-5,21,103,9,28,-127,-42,10,65,23,6,-18,12,-61,60,-15,-72,10,-52,-45,-39,-127,-11,-127,-50,-45,-11, -82,-23,28,29,36,-127,-40,5,14,127,-79,-127,-5,-34,-73,52,-59,70,14,4,-79,-51,25,-38,-10,7,-25,18,1,20,82,77,39,127,-79,94,-127,43,-12,-96,-31,46,35,127,-75,36,-127,-21, 47,-67,127,17,-11,-9,77,-22,-40,79,-52,-51,27,72,-13,20,-31,50,17,15,-1,3,18,-24,5,15,-91,1,9,34,29,-21,-23,4,-62,39,1,-69,-20,-78,-40,4,76,-31,-83,-27,-38,-34, 
};
const TfArray<4, int> tensor_dimension87 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant87_scale = { 48, { 0.0074593476019799709, 0.0066795824095606804, 0.0037093828432261944, 0.0066528045572340488, 0.0079588759690523148, 0.0035920438822358847, 0.0093393567949533463, 0.011716779321432114, 0.015938080847263336, 0.0075343395583331585, 0.0064348159357905388, 0.0044365189969539642, 0.0094788568094372749, 0.010847746394574642, 0.007901439443230629, 0.0028227437287569046, 0.0047370134852826595, 0.0036177204456180334, 0.0094144474714994431, 0.0071242759004235268, 0.0040359259583055973, 0.010410415008664131, 0.0063355020247399807, 0.010848758742213249, 0.027708727866411209, 0.009160495363175869, 0.0028891903348267078, 0.014904782176017761, 0.014658564701676369, 0.0050182747654616833, 0.0089510073885321617, 0.005898443516343832, 0.0055421111173927784, 0.014628206379711628, 0.0088687436655163765, 0.0050735324621200562, 0.0099868280813097954, 0.0037262567784637213, 0.011729582212865353, 0.011089710518717766, 0.004879421554505825, 0.0084825912490487099, 0.005603911355137825, 0.0058081387542188168, 0.0088903298601508141, 0.0030313925817608833, 0.013414569199085236, 0.017187861725687981, } };
const TfArray<48, int> quant87_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 3 };
const ALIGN(8) int32_t tensor_data88[8] = { 6823, 27925, -1371, 13969, 2147, -24350, -125, -1966, };
const TfArray<1, int> tensor_dimension88 = { 1, { 8 } };
const TfArray<8, float> quant88_scale = { 8, { 7.5451011070981622e-05, 0.00018320743402000517, 7.9107812780421227e-05, 7.0930131187196821e-05, 5.9841731854248792e-05, 7.8890363511163741e-05, 7.9323159297928214e-05, 5.4051848564995453e-05, } };
const TfArray<8, int> quant88_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const ALIGN(8) int8_t tensor_data89[1*3*3*48] = { 
  /* [0][0][][] */ -49,56,-110,-34,-84,78,73,56,92,79,76,-56,-92,119,-55,-66,-33,107,-37,-77,-90,-50,-90,-44,88,97,62,90,61,-67,-60,-97,-78,-91,79,37,70,-105,127,55,-75,75,90,-42,62,-83,76,70, -75,72,-124,-55,-92,96,95,83,111,87,79,-83,-110,114,-88,55,-88,119,-63,-99,-71,-77,-103,-62,116,104,76,104,76,-87,-80,-108,-98,-127,104,52,88,-113,-4,72,-83,83,109,-75,86,-93,92,87, -27,29,-71,-28,-32,31,36,39,47,41,43,-28,-52,39,-49,81,-20,24,-30,-14,-5,-38,-49,-33,52,38,20,33,14,-39,-10,-51,-26,-78,30,59,32,-31,-23,28,-20,28,52,-33,54,-35,42,27, 
  /* [0][1][][] */ -96,103,-127,-80,-96,100,110,86,112,102,118,-93,-105,127,-85,-58,-66,118,-82,-107,-127,-90,-115,-113,96,127,100,101,105,-110,-95,-127,-106,32,104,-83,90,-93,115,102,-111,109,112,-74,96,-108,107,96, -127,127,-127,-127,-127,127,127,127,127,127,127,-127,-127,116,-127,81,-127,127,-127,-127,-113,-127,-127,-127,127,127,127,127,127,-127,-127,-113,-127,41,127,-84,127,-127,-109,127,-127,127,127,-127,127,-127,127,127, -37,39,-51,-59,-30,32,52,62,53,40,62,-38,-56,61,-58,127,-71,34,-68,-30,8,-68,-63,-36,48,27,46,53,33,-23,-27,-79,-32,33,41,-44,58,-61,-61,45,-55,41,76,-48,82,-42,51,46, 
  /* [0][2][][] */ -42,48,-21,-40,-30,30,31,40,19,42,79,-40,-56,23,-14,12,-41,75,-50,-44,-80,-48,-47,-64,22,58,50,39,46,-58,-55,-87,-41,15,45,-127,37,-43,70,68,-48,36,43,-34,58,-68,38,40, -66,60,-33,-70,-56,39,56,63,42,58,89,-43,-75,-4,-35,87,-70,100,-78,-51,-83,-66,-62,-59,30,65,61,54,53,-82,-62,-96,-54,12,61,-105,62,-69,-73,85,-59,41,54,-58,82,-92,48,58, -26,33,-22,-24,-2,9,47,37,31,29,32,-15,-16,-3,-8,124,-48,48,-39,-23,4,-34,-2,19,11,40,32,36,28,-26,-7,-29,-2,9,27,-104,27,-34,-83,45,-43,12,45,-6,53,3,24,23, 
};
const TfArray<4, int> tensor_dimension89 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant89_scale = { 48, { 0.0023744604550302029, 0.0038841394707560539, 0.0020164377056062222, 0.0031454048585146666, 0.0058144186623394489, 0.0041428664699196815, 0.003271779278293252, 0.0029676309786736965, 0.0057068667374551296, 0.0059724114835262299, 0.00356842833571136, 0.0059388424269855022, 0.0038201815914362669, 0.01026776060461998, 0.0029869766440242529, 0.0051862890832126141, 0.0047410940751433372, 0.0065618911758065224, 0.0022679518442600965, 0.0035262764431536198, 0.0046567558310925961, 0.002083613071590662, 0.0040409485809504986, 0.0034339663106948137, 0.0030810881871730089, 0.0097609469667077065, 0.0039463667199015617, 0.0035276284907013178, 0.0034014643169939518, 0.0036161881871521473, 0.0045490092597901821, 0.0033459269907325506, 0.0032681890297681093, 0.0063573848456144333, 0.0060882894322276115, 0.0035992769990116358, 0.0050616119988262653, 0.0029764927458018064, 0.006252792663872242, 0.0076641985215246677, 0.0034063658677041531, 0.0034011676907539368, 0.0059793791733682156, 0.0029924851842224598, 0.0060153026133775711, 0.0034779452253133059, 0.004255328793078661, 0.0033515505492687225, } };
const TfArray<48, int> quant89_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 3 };
const ALIGN(8) int32_t tensor_data90[8] = { -1983, -23655, -776, -6553, -8970, -9399, -5018, -8917, };
const TfArray<1, int> tensor_dimension90 = { 1, { 8 } };
const TfArray<8, float> quant90_scale = { 8, { 6.9033609179314226e-05, 7.683302101213485e-05, 6.5646119765006006e-05, 8.3279286627657712e-05, 5.6323337048524991e-05, 7.0786059950478375e-05, 7.4028219387400895e-05, 9.3970033049117774e-05, } };
const TfArray<8, int> quant90_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const ALIGN(8) int8_t tensor_data91[1*3*3*48] = { 
  /* [0][0][][] */ -30,3,52,-30,-40,5,4,3,-101,-127,-13,22,-17,-80,26,33,-127,-56,-1,-41,44,2,28,-4,-29,-85,118,-43,33,0,-7,62,35,-15,-103,-21,32,-13,-39,34,16,32,48,-68,27,-26,-104,-85, -15,37,127,-51,56,77,-6,127,-127,-86,26,127,34,-127,122,46,-2,-68,4,36,23,-35,80,32,-125,-127,45,53,-29,41,3,-21,-78,-30,-67,-127,127,45,-14,124,-51,127,-6,-31,23,-80,96,57, -18,4,30,-14,-30,12,5,-4,-78,-120,7,14,-15,-13,24,7,-112,-46,5,-56,38,-9,21,0,105,-54,107,-31,40,-14,20,53,21,-9,-110,-18,16,-48,-14,-9,17,29,43,-86,18,-31,3,-127, 
  /* [0][1][][] */ -72,35,-23,-69,0,-22,-27,-21,51,-74,-5,-6,-66,-68,5,-46,-31,-46,9,20,45,-31,54,41,-67,-14,-47,-23,58,-2,-126,34,127,52,20,19,-19,23,-127,63,-80,23,119,-63,49,-28,-127,20, 109,-127,28,-85,124,-32,127,-119,126,-73,-21,-121,-53,-73,14,-82,-27,127,-114,127,-127,-125,-127,127,-31,71,-122,127,127,127,32,-127,-55,127,81,108,-97,127,-57,15,-127,-86,-127,127,127,-102,126,-124, -73,26,9,-64,5,-33,-43,-74,43,-39,-7,-10,-57,-49,6,-65,-40,-55,2,-17,28,-35,64,29,127,-46,-21,-38,13,-5,127,35,-86,9,2,8,-18,-48,-101,44,-78,12,-119,-67,67,2,30,39, 
  /* [0][2][][] */ 76,31,-53,41,2,29,-16,-108,28,-88,-32,-4,65,-3,-36,-127,-97,-52,-1,-9,24,29,17,2,24,-72,127,-33,19,-2,-26,40,28,-74,-127,-3,-22,-66,72,127,52,-39,38,-102,20,36,-63,-11, 127,-1,-119,-127,-127,127,-24,-41,55,-81,-127,-23,127,-81,-127,-49,-56,-5,127,-109,-10,127,-12,51,-47,-116,63,43,-3,55,-20,-27,-63,-58,-59,59,-8,-61,-56,97,-98,-5,107,-72,24,127,30,-55, -48,25,-52,48,3,37,-17,-115,-4,-113,-27,1,51,42,-39,-63,-124,-56,-8,11,31,47,14,-7,30,-52,108,-23,14,4,38,33,44,-69,-127,-6,-27,-10,61,56,49,-33,45,-77,19,16,-28,-17, 
};
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant91_scale = { 48, { 0.0083295563235878944, 0.02003210037946701, 0.0077964253723621368, 0.0055223684757947922, 0.016205096617341042, 0.0085461810231208801, 0.01334474328905344, 0.0050716688856482506, 0.0066428622230887413, 0.0029822110664099455, 0.0062067587859928608, 0.016194071620702744, 0.0079328930005431175, 0.0039847991429269314, 0.0076667247340083122, 0.0056169405579566956, 0.0039827711880207062, 0.0083069708198308945, 0.01421352569013834, 0.010780039243400097, 0.011135157197713852, 0.0084151662886142731, 0.010227286256849766, 0.0064437147229909897, 0.0074546518735587597, 0.0061051240190863609, 0.0045794537290930748, 0.014585938304662704, 0.0059862793423235416, 0.017007986083626747, 0.0087653286755084991, 0.0079641910269856453, 0.010648737661540508, 0.011721847578883171, 0.0044478173367679119, 0.013217022642493248, 0.012237892486155033, 0.02606954425573349, 0.0075783506035804749, 0.0050159287638962269, 0.0073216091841459274, 0.01218466367572546, 0.009684806689620018, 0.008998427540063858, 0.0066728787496685982, 0.0072145764715969563, 0.0063048265874385834, 0.0079602394253015518, } };
const TfArray<48, int> quant91_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 3 };
const ALIGN(8) int32_t tensor_data92[8] = { 9432, 8905, -2665, 3112, -26736, 475, -2219, 8539, };
const TfArray<1, int> tensor_dimension92 = { 1, { 8 } };
const TfArray<8, float> quant92_scale = { 8, { 8.8104367023333907e-05, 5.9752255765488371e-05, 7.1029098762664944e-05, 4.9057696742238477e-05, 4.8967554903356358e-05, 7.5831616413779557e-05, 4.1936105844797567e-05, 4.3922707845922559e-05, } };
const TfArray<8, int> quant92_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const ALIGN(8) int8_t tensor_data93[1*3*3*48] = { 
  /* [0][0][][] */ -103,-26,-25,-114,13,105,89,-1,-23,3,20,84,-54,-82,-111,-117,-10,24,36,-3,16,-4,17,8,127,120,37,-16,6,17,9,-32,-21,61,-24,-101,47,-101,2,29,33,33,-86,102,-48,19,-25,99, 20,-4,86,-127,-38,45,42,29,67,21,10,-36,-17,-127,-57,-71,-13,107,-51,46,127,91,-24,127,-1,34,31,-17,-113,52,127,50,118,109,-26,-97,2,-125,-40,127,127,-127,-127,-39,101,125,53,-8, -46,-16,-15,-108,14,87,81,3,72,4,26,-66,-29,-67,-109,-120,-28,18,46,-13,-12,-5,9,4,73,127,27,-17,11,-103,4,-37,-7,70,-25,-127,-60,-56,-6,22,10,30,-88,96,-25,-1,-37,-36, 
  /* [0][1][][] */ -82,22,103,-66,95,20,3,32,0,97,-39,61,13,-48,-90,127,-112,8,127,-62,-12,68,-9,9,50,40,75,6,5,71,-10,52,-35,22,-44,-38,127,-17,-39,117,-1,-9,-104,43,-84,70,-35,91, 15,-127,-127,-92,6,-127,-127,127,-127,-127,127,8,127,-35,34,115,89,-89,23,22,-101,19,127,-55,13,-59,68,-127,127,29,-62,-127,-47,-127,-127,2,29,127,127,17,-63,-10,-36,-80,-104,127,127,-10, 91,15,86,-51,80,-19,-9,18,44,84,-47,-62,5,-42,-127,112,-125,12,70,-50,-5,65,21,5,101,31,36,12,-13,-127,-4,38,-36,-9,-7,-45,-116,-100,-28,126,-3,-8,-92,75,-120,35,-2,-127, 
  /* [0][2][][] */ -127,21,-6,-91,56,69,-28,5,-61,12,-21,-127,18,-27,-72,-28,-14,-7,-110,35,-10,-21,31,7,3,14,-39,62,-27,44,-3,6,-20,12,6,-43,22,-16,-15,29,-38,24,9,127,-32,-19,-39,95, 75,36,-92,-111,127,-59,-36,50,16,34,-2,38,12,-28,-99,-8,-127,-127,-4,127,-27,-127,59,-6,22,-31,-127,80,12,-69,-19,122,127,-68,-40,48,-7,40,6,32,14,32,2,-25,127,59,-4,-108, 26,52,-17,-86,36,47,-25,20,40,6,-34,107,29,-18,-53,-25,-9,-11,-77,23,-12,-27,35,13,-29,39,-24,37,-32,-6,-5,9,-6,-5,18,-29,-21,-25,-14,52,-30,27,45,72,-58,10,-34,-30, 
};
const TfArray<4, int> tensor_dimension93 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant93_scale = { 48, { 0.0068281264975667, 0.012349221855401993, 0.010717069730162621, 0.0052718082442879677, 0.0043543190695345402, 0.0051915384829044342, 0.0068958071060478687, 0.0071625551208853722, 0.0096420291811227798, 0.0099679548293352127, 0.013458791188895702, 0.0098699061200022697, 0.011543584056198597, 0.005333340261131525, 0.0035991065669804811, 0.0074205775745213032, 0.0067983516491949558, 0.0096967648714780807, 0.00820175651460886, 0.0086469277739524841, 0.012889156118035316, 0.0082125738263130188, 0.008060806430876255, 0.015558970160782337, 0.018383437767624855, 0.0055071436800062656, 0.0069365282543003559, 0.01124310027807951, 0.015153359621763229, 0.0081504788249731064, 0.014227149076759815, 0.011634958907961845, 0.010620907880365849, 0.007260915357619524, 0.0075394120067358017, 0.0059204711578786373, 0.0072834733873605728, 0.0065134251490235329, 0.016530312597751617, 0.0064418073743581772, 0.010125015862286091, 0.025435138493776321, 0.0030907758045941591, 0.0049673076719045639, 0.0054025524295866489, 0.0067043597809970379, 0.016016941517591476, 0.006336479913443327, } };
const TfArray<48, int> quant93_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 3 };
const ALIGN(8) int32_t tensor_data94[8] = { -8131, -2101, 12453, 8311, 1595, 16883, 4664, -6907, };
const TfArray<1, int> tensor_dimension94 = { 1, { 8 } };
const TfArray<8, float> quant94_scale = { 8, { 4.1604722355259582e-05, 4.5768407289870083e-05, 5.8454821555642411e-05, 7.3057810368482023e-05, 8.8290398707613349e-05, 3.943838964914903e-05, 3.2972147891996428e-05, 5.6257300457218662e-05, } };
const TfArray<8, int> quant94_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const ALIGN(8) int8_t tensor_data95[1*3*3*48] = { 
  /* [0][0][][] */ -35,5,-102,-9,20,-26,100,-5,106,-27,-26,0,-35,-111,-71,66,32,2,-36,-107,127,41,-127,82,30,7,4,-70,29,28,35,85,13,-53,-98,-72,-116,96,-21,-3,55,40,127,-6,-100,0,23,5, 20,-127,-98,1,-3,42,7,-13,-46,7,-21,-127,-127,-25,-92,-38,121,43,26,122,-113,-127,17,-127,127,31,87,-97,-1,105,92,-90,127,-127,-96,-127,-30,110,-23,-5,54,-12,-52,-127,-47,-74,-89,94, -32,3,-66,-9,17,-26,120,-9,-40,-27,-29,-19,-66,-119,127,39,43,-6,20,-127,-54,44,-78,78,21,-13,-29,-82,25,30,30,57,17,-39,-60,-104,-106,99,-11,0,-127,26,-104,15,-127,49,-4,37, 
  /* [0][1][][] */ 89,12,38,26,-68,28,50,33,-127,16,-27,-115,-61,-110,-3,80,0,-127,-127,119,62,26,22,-41,30,42,101,-127,16,-1,74,-126,22,59,51,-59,15,124,3,6,73,-11,51,37,-119,30,-127,-14, 126,27,-127,127,127,124,127,115,60,127,127,40,-41,1,69,-127,-127,-94,-5,121,63,-102,-17,-63,-126,127,30,-68,-127,127,-127,-51,-63,74,127,89,-87,-127,127,127,-103,-123,81,35,1,121,-32,127, 94,10,-17,17,-64,47,-45,24,10,18,-34,-115,-78,-127,67,83,-3,-120,121,99,23,39,27,-23,13,25,127,-122,17,1,60,-127,15,47,39,-81,17,63,7,-12,44,-3,-88,18,-116,-7,-103,14, 
  /* [0][2][][] */ -40,-9,-72,-40,-37,-18,-11,-25,-116,-20,-30,-11,-29,-2,1,45,-20,-86,-14,-86,40,5,-106,-18,2,-33,15,-8,33,-94,10,101,-30,-22,-14,3,-61,106,-23,-10,62,-127,58,11,-26,83,5,14, 127,-36,97,-60,56,127,-30,-127,79,33,-38,-83,3,18,-89,61,-3,60,-9,77,-92,-62,0,32,9,-60,13,-95,43,-86,-51,-23,-59,70,106,122,-127,12,40,-37,-22,-40,-40,84,27,127,-102,3, -49,-17,-50,-32,-10,-15,29,-10,27,-24,-29,22,-38,0,62,32,-12,-94,28,-91,11,-10,-111,-43,3,-61,23,-1,35,-76,16,42,-27,-12,7,-10,-56,105,-28,-16,-57,-115,-66,-36,-96,95,-28,6, 
};
const TfArray<4, int> tensor_dimension95 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant95_scale = { 48, { 0.0041266824118793011, 0.019497176632285118, 0.002986883046105504, 0.012019375339150429, 0.015443187206983566, 0.0055901650339365005, 0.0076904152520000935, 0.017823908478021622, 0.010843323543667793, 0.010695742443203926, 0.013326223939657211, 0.0037242579273879528, 0.0037653623148798943, 0.0036608788650482893, 0.0070334482006728649, 0.0068738311529159546, 0.013055048882961273, 0.004100569523870945, 0.0095833688974380493, 0.0061575658619403839, 0.0082361437380313873, 0.0062794205732643604, 0.0055118333548307419, 0.0098827248439192772, 0.011854369193315506, 0.0075294743292033672, 0.0046958113089203835, 0.0043450319208204746, 0.012966297566890717, 0.0071594058535993099, 0.0089791677892208099, 0.0062647820450365543, 0.011210612021386623, 0.010184849612414837, 0.0065059778280556202, 0.0062518804334104061, 0.0045306896790862083, 0.0041943355463445187, 0.012300768867135048, 0.01487343292683363, 0.0075097656808793545, 0.0049548009410500526, 0.0062256273813545704, 0.010427058674395084, 0.0034070434048771858, 0.0069568650797009468, 0.0041326964274048805, 0.0061251064762473106, } };
const TfArray<48, int> quant95_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 3 };
const ALIGN(8) int32_t tensor_data96[8] = { -743, 11686, 2901, -1952, -28229, 18709, -1125, 11468, };
const TfArray<1, int> tensor_dimension96 = { 1, { 8 } };
const TfArray<8, float> quant96_scale = { 8, { 3.3504922612337396e-05, 4.7462675865972415e-05, 5.5764157878002152e-05, 4.3579253542702645e-05, 4.4993284973315895e-05, 6.6745735239237547e-05, 4.3758303945651278e-05, 5.3045216191094369e-05, } };
const TfArray<8, int> quant96_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const ALIGN(8) int8_t tensor_data97[1*3*3*48] = { 
  /* [0][0][][] */ 17,37,-19,0,37,41,10,-7,-26,-60,-96,19,-6,29,-121,28,-32,72,-46,25,-56,-42,1,35,-43,13,-19,-38,11,-24,-97,83,28,24,-28,-36,-127,-28,-28,-25,-8,-107,73,4,68,78,-13,37, 5,-10,127,-15,-127,57,127,2,127,-51,-90,127,-23,-6,-31,127,50,100,-38,127,-19,22,127,-43,-60,127,-105,127,20,20,-112,108,-33,-127,-105,106,-53,127,-116,-46,72,23,126,48,-32,127,127,83, -37,-44,-33,1,66,12,16,-11,34,-46,-127,-23,-13,27,101,30,-31,6,-44,7,-54,44,-15,52,-29,7,-33,-18,-5,-39,-71,60,23,1,4,-42,-104,-22,31,-19,-22,99,43,6,61,87,-49,17, 
  /* [0][1][][] */ 40,127,78,35,26,69,-26,-1,-57,22,-1,117,-13,-118,21,-9,40,127,106,1,-34,-127,11,-20,25,-5,-53,-38,55,-54,-71,-54,-49,-20,-109,31,-87,13,43,-54,37,-127,127,-57,28,-60,32,7, 99,-11,22,127,-46,-127,113,-127,-113,127,0,-11,127,-36,14,43,127,-44,63,36,-127,2,3,-127,127,-100,127,-17,127,7,-95,-127,127,-65,28,127,-45,39,127,40,127,-47,85,-15,-127,-32,119,-2, -127,-47,53,19,-17,33,-49,2,67,-4,17,-3,-19,-127,29,-6,49,68,103,6,-85,117,6,23,13,-29,-43,-36,-18,-33,-77,-57,-54,-29,-127,7,-95,-34,-36,-47,-25,99,67,-63,9,-85,2,16, 
  /* [0][2][][] */ -54,22,-92,-10,-19,14,7,38,-19,-6,-38,-39,7,55,-113,-35,1,58,127,3,-46,-49,3,53,13,-33,-2,23,-9,26,-127,67,-58,10,-83,-21,-77,-113,-1,75,7,-47,33,16,-45,41,-24,51, -41,-17,12,11,24,2,-107,107,-33,7,21,-81,60,-125,-52,-8,7,101,40,8,0,10,8,52,15,5,40,72,34,-127,-118,113,-67,-33,-105,-23,-109,2,21,127,-109,66,32,127,-13,85,-84,-127, 63,-60,-81,-16,-20,21,0,31,4,-4,-54,-48,-1,53,127,-19,-2,72,81,2,-41,42,7,42,14,-21,-5,32,-31,20,-118,71,-58,0,-79,-22,-73,-113,4,47,16,54,29,10,-50,49,-7,30, 
};
const TfArray<4, int> tensor_dimension97 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant97_scale = { 48, { 0.016155412420630455, 0.00928485207259655, 0.0073474887758493423, 0.0090066688135266304, 0.012941106222569942, 0.012507314793765545, 0.0069102016277611256, 0.010374994017183781, 0.0089795226231217384, 0.013756100088357925, 0.0049229557625949383, 0.0075943740084767342, 0.0098706036806106567, 0.0070143095217645168, 0.0072377785108983517, 0.008542696014046669, 0.0076690809801220894, 0.002227401128038764, 0.0039380788803100586, 0.014770424924790859, 0.0045457389205694199, 0.0063238912262022495, 0.012205620296299458, 0.011970652267336845, 0.011885780841112137, 0.0093395169824361801, 0.010966924950480461, 0.0086510805413126945, 0.012119301594793797, 0.012189073488116264, 0.0035029025748372078, 0.005225298460572958, 0.011846074834465981, 0.007878531701862812, 0.0034935616422444582, 0.0085814967751502991, 0.003715819213539362, 0.00635950593277812, 0.01398327574133873, 0.0084522515535354614, 0.010050486773252487, 0.0062063420191407204, 0.015939859673380852, 0.014719576574862003, 0.009789569303393364, 0.0094319991767406464, 0.0080299228429794312, 0.017320571467280388, } };
const TfArray<48, int> quant97_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 3 };
const ALIGN(8) int32_t tensor_data98[8] = { 23211, -12989, -12258, -17227, -7467, 17779, 11448, 2468, };
const TfArray<1, int> tensor_dimension98 = { 1, { 8 } };
const TfArray<8, float> quant98_scale = { 8, { 4.2391788156237453e-05, 5.3911549912299961e-05, 6.2673025240655988e-05, 7.4102114012930542e-05, 5.3365296480478719e-05, 0.000141332478960976, 4.6135202865116298e-05, 4.5997159759281203e-05, } };
const TfArray<8, int> quant98_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const ALIGN(8) int8_t tensor_data99[1*3*3*48] = { 
  /* [0][0][][] */ 11,-127,41,127,-14,41,-19,6,7,20,41,-9,-63,63,4,16,-51,-80,127,-14,-2,21,61,43,-39,38,55,127,-117,62,-36,46,-127,33,-22,-47,-27,-90,24,-51,28,-6,-59,47,-3,34,57,-64, -53,103,127,-28,14,72,-125,56,104,-20,127,-16,45,95,62,-4,-91,-71,-69,-77,127,21,127,20,82,123,112,18,-60,39,-69,26,6,127,32,-127,21,60,14,-127,127,16,-21,-127,-60,-23,-4,-93, 17,19,16,75,-11,102,1,-32,10,12,56,13,27,51,-4,11,-28,-74,-69,66,4,4,4,-26,-29,11,48,118,-91,38,-44,40,14,26,-13,-21,-21,-74,25,-63,-8,-13,-8,66,2,49,59,-13, 
  /* [0][1][][] */ -58,-76,92,127,-25,31,65,26,-7,7,-31,27,127,127,40,127,27,-30,-69,54,57,8,-17,101,81,45,32,45,58,-35,-93,-24,-6,35,18,40,-19,32,1,-8,30,-40,39,-41,0,9,52,69, 67,27,77,-46,127,94,-81,127,-127,-127,33,-32,-96,-91,86,-105,120,-33,16,57,-14,127,86,-127,127,-55,-70,-2,-54,16,73,-127,1,81,79,-29,-127,125,-127,11,-40,-125,5,-30,127,-127,-36,-17, -65,34,59,73,-29,-103,60,-65,-13,9,-21,-27,-25,91,24,117,42,-20,50,-15,65,-22,0,15,73,55,47,26,-56,-57,-95,-12,23,-5,46,51,-36,43,-3,4,21,83,87,2,-2,28,63,30, 
  /* [0][2][][] */ -76,-32,-23,-55,-9,-51,94,-18,-16,32,-43,127,114,-27,-122,-12,99,-124,-96,-40,-80,-31,-47,0,-65,-28,-47,40,-63,54,-94,54,21,-39,-53,-117,-32,-127,-4,-39,-61,95,-10,10,81,10,127,3, -127,-8,102,32,-23,127,15,2,31,-46,-6,34,-42,-20,-33,-17,-127,23,73,-127,-29,-96,-15,-20,-6,-127,-127,-7,-127,127,-127,58,50,-52,127,-74,0,26,13,124,-37,127,127,-89,88,43,71,127, -33,6,-28,38,-1,3,127,-21,-25,6,-44,-122,-92,1,-127,6,92,-127,56,80,-73,-12,-40,0,-89,-33,-45,43,-61,33,-79,37,4,-11,-46,-76,-4,-115,-3,-41,-27,-50,-6,20,33,21,117,-12, 
};
const TfArray<4, int> tensor_dimension99 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant99_scale = { 48, { 0.00653097964823246, 0.0097325369715690613, 0.0049450523220002651, 0.006082264706492424, 0.017571981996297836, 0.0081879515200853348, 0.0060939015820622444, 0.017416121438145638, 0.010610696859657764, 0.0086249895393848419, 0.0090231141075491905, 0.0088960984721779823, 0.0070271980948746204, 0.00661104591563344, 0.0068680774420499802, 0.0059472406283020973, 0.0069599687121808529, 0.0040600588545203209, 0.0094944639131426811, 0.010021367110311985, 0.0084074093028903008, 0.010792547836899757, 0.0083684418350458145, 0.013036048039793968, 0.0061146710067987442, 0.0077757807448506355, 0.0069453641772270203, 0.0058149686083197594, 0.0046323877759277821, 0.0093243792653083801, 0.0052791307680308819, 0.012474187649786472, 0.012655522674322128, 0.0097464527934789658, 0.0074297874234616756, 0.0046413009986281395, 0.0065132207237184048, 0.0085568763315677643, 0.015311466529965401, 0.0059532085433602333, 0.013134604319930077, 0.010183030739426613, 0.0087910257279872894, 0.010961066000163555, 0.0059094768948853016, 0.021537002176046371, 0.0057131093926727772, 0.010200296528637409, } };
const TfArray<48, int> quant99_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 3 };
const ALIGN(8) int32_t tensor_data100[8] = { 2935, -5194, -13759, 2625, -8839, -9539, -8566, -6688, };
const TfArray<1, int> tensor_dimension100 = { 1, { 8 } };
const TfArray<8, float> quant100_scale = { 8, { 7.6850126788485795e-05, 6.9615794927813113e-05, 8.2654303696472198e-05, 6.8722743890248239e-05, 6.9974295911379158e-05, 9.1553723905235529e-05, 3.8962491089478135e-05, 4.4956112105865031e-05, } };
const TfArray<8, int> quant100_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const ALIGN(8) int8_t tensor_data101[1*3*3*48] = { 
  /* [0][0][][] */ 40,111,-66,-68,34,22,33,75,-19,52,81,24,-57,10,-75,-127,-112,20,-81,74,17,-46,-88,-7,-12,62,-127,21,97,-61,-29,113,74,-10,77,-127,21,21,127,-125,-19,-6,26,-23,127,-6,-15,-51, 28,34,-29,-31,65,47,-85,58,127,-41,101,127,89,19,127,-43,-7,-14,-114,12,-127,13,-27,72,-52,101,23,31,127,-39,-44,-127,72,-63,-22,-90,49,77,-113,127,127,127,127,-101,-11,-110,-2,92, 39,91,-41,-58,38,13,33,63,-38,43,66,6,-91,7,-25,-91,127,27,-66,52,41,-50,-72,-16,4,12,101,22,28,-97,-18,121,76,-5,60,0,48,-67,64,17,-54,-10,-36,-105,123,-3,-5,-127, 
  /* [0][1][][] */ 60,50,-127,51,-26,36,27,-90,33,102,64,-23,125,127,-40,28,-65,42,25,-48,31,0,38,103,40,-45,69,22,0,-100,-1,11,-34,-21,66,-76,127,5,-24,-33,-62,9,26,-34,38,1,14,-39, -127,-127,-48,127,-127,-118,-95,127,101,27,-127,12,4,-30,80,67,-22,127,-127,127,36,127,127,98,127,127,-20,-127,-15,-17,-22,-98,-127,127,-127,-14,-5,127,-57,-42,-62,-12,119,91,-115,-3,1,83, 45,25,-125,19,-34,21,25,-67,0,60,4,-10,59,67,7,43,38,0,-12,-38,-8,15,10,78,-41,-29,-37,9,-3,-127,8,-13,-43,-76,29,-54,114,39,97,49,-51,-39,-42,-127,8,4,-12,-9, 
  /* [0][2][][] */ 43,66,-59,60,21,-127,47,28,11,-127,-16,-49,1,9,-17,59,-47,-86,-25,-70,113,-23,34,-77,-56,-38,91,30,36,-89,32,9,-26,89,63,32,-5,-6,25,-86,7,-97,22,22,124,1,-127,-26, -45,15,-70,46,-36,-24,127,44,23,-94,-12,-10,-127,54,16,-16,45,-48,-65,-74,4,34,46,127,-88,26,-12,-17,-11,-80,127,-49,31,76,-72,25,62,-3,68,62,-68,-119,-78,12,56,127,103,64, 42,68,-41,27,17,-118,36,-46,7,-91,-10,-58,8,3,-5,44,45,-57,-18,-65,95,-24,46,-78,-11,-67,-78,30,16,-99,18,29,-42,-70,75,53,8,-26,-25,-3,-6,-74,36,-39,111,11,31,-35, 
};
const TfArray<4, int> tensor_dimension101 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant101_scale = { 48, { 0.0083528179675340652, 0.0051712552085518837, 0.0048126885667443275, 0.0062085320241749287, 0.0081233540549874306, 0.003655226668342948, 0.0074840565212070942, 0.0095205912366509438, 0.007394447922706604, 0.0061653624288737774, 0.0096966689452528954, 0.0090972445905208588, 0.0065796929411590099, 0.0074400301091372967, 0.0092265158891677856, 0.0096235228702425957, 0.0085859214887022972, 0.014137577265501022, 0.003147707786411047, 0.0082494784146547318, 0.0068060625344514847, 0.010490252636373043, 0.0071953525766730309, 0.005304303951561451, 0.0089340563863515854, 0.0085697276517748833, 0.010843665339052677, 0.012509094551205635, 0.011238791048526764, 0.0035656711552292109, 0.0063729989342391491, 0.0083930725231766701, 0.0080366553738713264, 0.009077032096683979, 0.0090051442384719849, 0.0070994221605360508, 0.0071258074603974819, 0.0078184138983488083, 0.0085357651114463806, 0.0084546953439712524, 0.009615875780582428, 0.0057142283767461777, 0.0082656648010015488, 0.0060357106849551201, 0.0054246452637016773, 0.010194741189479828, 0.016726057976484299, 0.011202114634215832, } };
const TfArray<48, int> quant101_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 3 };
const ALIGN(8) int32_t tensor_data102[8] = { 10184, -3642, -12165, 13217, 5812, -1708, 20750, -14871, };
const TfArray<1, int> tensor_dimension102 = { 1, { 8 } };
const TfArray<8, float> quant102_scale = { 8, { 0.00010352752724429592, 6.0730104451067746e-05, 0.00013746097101829946, 7.0665912062395364e-05, 7.3125687777064741e-05, 0.00010461635247338563, 7.1615264459978789e-05, 6.5800828451756388e-05, } };
const TfArray<8, int> quant102_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const ALIGN(8) int8_t tensor_data103[1*3*3*48] = { 
  /* [0][0][][] */ 125,127,-67,127,71,83,95,127,26,84,-110,56,-82,116,97,110,86,104,54,-76,-52,-49,-99,93,33,101,-127,-71,127,83,-127,95,127,122,99,89,82,98,80,56,-56,-73,-100,124,-68,80,-101,125, 127,112,-65,121,70,94,90,124,-13,87,-127,64,-127,112,127,114,79,127,63,-122,-76,-40,-112,121,41,118,-98,-82,119,84,-112,127,125,127,115,127,78,113,86,53,-58,-120,-104,127,-106,74,-127,119, 56,40,9,27,24,32,11,46,37,26,-48,26,-53,33,72,63,51,27,18,5,18,-13,11,40,21,45,-24,-9,16,18,-18,45,51,43,30,46,19,35,-5,-3,5,-127,-27,6,-26,36,-16,36, 
  /* [0][1][][] */ -12,99,-104,74,117,-76,126,111,127,117,-68,112,-25,127,-84,114,111,79,108,-127,-24,-66,-127,98,109,106,-87,-98,44,123,45,93,90,93,113,73,126,119,121,121,-119,-117,-102,73,-127,127,-101,117, -12,103,-127,66,127,-70,127,116,123,127,-75,127,-48,125,-120,127,104,78,127,-123,-59,-59,-104,127,127,127,-112,-127,16,127,55,108,75,93,127,92,127,127,127,127,-127,-90,-127,68,-119,116,-80,127, 37,31,-83,36,41,-71,20,25,58,31,-68,28,-9,26,-22,65,46,23,39,-45,-28,-64,-29,44,47,47,-34,-26,9,-1,44,33,71,38,17,4,57,27,12,17,-69,95,-26,1,-65,32,-53,14, 
  /* [0][2][][] */ -26,40,-48,-69,52,-127,52,45,97,66,32,61,-47,36,-7,44,123,68,65,-77,118,-127,-103,11,88,87,-38,-35,-5,51,125,-7,58,32,26,54,-90,26,19,41,-45,-44,-22,90,-83,84,-35,13, -23,17,-36,-104,51,-87,43,19,96,78,73,62,-57,35,-6,49,127,51,63,-54,127,-50,-91,3,107,126,6,-73,-8,42,126,-4,42,30,24,51,-68,32,31,46,-79,-37,-26,86,-112,73,-22,0, -13,57,-59,-2,28,12,27,16,45,22,38,31,-49,11,-1,23,56,21,38,-18,37,-56,7,6,46,32,-60,-9,-11,1,72,-24,53,17,10,-19,18,2,14,-35,-26,-94,5,79,-28,32,7,16, 
};
const TfArray<4, int> tensor_dimension103 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant103_scale = { 48, { 0.0042090108618140221, 0.0020564387086778879, 0.0025378505233675241, 0.0036065513268113136, 0.0031947577372193336, 0.0040226816199719906, 0.0062902034260332584, 0.0029565852601081133, 0.0053758220747113228, 0.0034671206958591938, 0.0030364508274942636, 0.0030214556027203798, 0.0059416634030640125, 0.0028431520331650972, 0.0053442986682057381, 0.0032077643554657698, 0.0022341129370033741, 0.004555962048470974, 0.0059150769375264645, 0.0027365440037101507, 0.0055509824305772781, 0.003655559616163373, 0.0046844566240906715, 0.004759080708026886, 0.0045568891800940037, 0.0023843937087804079, 0.0025765325408428907, 0.0027487550396472216, 0.0043952809646725655, 0.0074205971322953701, 0.0059010908007621765, 0.0061485408805310726, 0.0025042598135769367, 0.0031451995018869638, 0.0033396687358617783, 0.015578489750623703, 0.0039422758854925632, 0.0035503674298524857, 0.0029920446686446667, 0.0071656596846878529, 0.0026464185211807489, 0.0028588487766683102, 0.0033229305408895016, 0.0047919121570885181, 0.0025392752140760422, 0.0031517434399574995, 0.0032428812701255083, 0.0044585149735212326, } };
const TfArray<48, int> quant103_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 3 };
const ALIGN(8) int32_t tensor_data104[8] = { -5906, -11709, 2795, 3610, -11882, -10683, -7610, -11954, };
const TfArray<1, int> tensor_dimension104 = { 1, { 8 } };
const TfArray<8, float> quant104_scale = { 8, { 8.9704561105463654e-05, 0.00012952520046383142, 0.00011960669507971033, 0.00010731702786870301, 9.5499221060890704e-05, 0.00014101274427957833, 0.00014762021601200104, 7.6531199738383293e-05, } };
const TfArray<8, int> quant104_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const ALIGN(8) int8_t tensor_data105[1*3*3*48] = { 
  /* [0][0][][] */ 33,-45,-52,-29,-64,28,-81,7,-32,52,127,-4,-9,6,-20,49,35,-56,6,115,-44,-15,39,-3,-59,116,-12,-40,-39,-79,-1,-29,40,-29,-90,-43,20,-66,119,-27,-41,87,-30,-9,-37,86,3,-18, 104,-127,127,8,-68,-15,-73,-99,-96,45,54,-25,-39,17,-41,86,102,-78,41,87,12,-47,-71,127,-5,9,-31,7,11,-36,-127,-113,94,-50,5,12,46,-26,19,90,-14,115,-63,-127,-56,-22,51,127, 17,-25,-15,-61,-86,-35,-61,6,-28,37,77,0,-8,9,-4,42,16,-62,8,118,21,-7,38,15,62,127,-12,32,32,-51,26,-12,12,-23,57,-47,16,-65,127,1,-34,54,-44,-2,-33,46,-9,-35, 
  /* [0][1][][] */ 21,-17,70,-44,-127,46,-65,-34,20,90,43,-127,-51,-44,-39,90,125,-127,39,-127,-71,-44,-97,-101,-127,27,-53,-127,-91,-60,39,127,-55,-58,-127,-54,16,-75,9,44,-9,28,-62,11,-71,109,70,76, -127,47,-97,127,-101,92,-13,-127,127,-105,-3,-2,127,127,127,-92,120,7,43,119,-17,127,127,7,-1,16,127,33,-28,117,91,-58,127,127,42,127,11,127,-12,127,127,-45,127,25,127,-127,-127,2, 44,-34,59,-23,-95,-127,-98,-31,-6,127,36,-112,-61,-33,-57,127,127,-112,32,-124,82,-49,-117,-96,127,11,-59,108,127,-76,25,116,-42,-65,120,-57,13,-93,14,25,-25,79,-79,10,-79,83,73,112, 
  /* [0][2][][] */ 30,-57,-75,24,-23,16,127,38,-1,76,114,1,-40,-8,-25,102,42,-15,-29,-104,-127,-34,24,1,-79,53,-40,-55,-55,-127,-12,42,-68,-27,-51,-12,7,-41,72,11,-2,54,-54,6,-15,81,21,53, 78,-116,8,-74,39,40,112,-53,70,112,47,20,-66,-25,-30,66,-9,-94,-127,-23,56,2,-25,106,45,20,-30,34,15,-43,-111,-27,-124,-39,15,-17,17,33,-69,105,-42,127,71,92,-12,-8,48,117, 2,-51,-61,6,-57,-30,123,31,-4,73,71,0,-43,-13,-12,104,44,-29,-18,-53,84,-33,17,-16,44,64,-37,31,50,-93,1,45,-46,-29,48,-14,-127,-37,70,20,8,56,-64,-9,-11,41,11,15, 
};
const TfArray<4, int> tensor_dimension105 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant105_scale = { 48, { 0.0086789978668093681, 0.0049410671927034855, 0.012120031751692295, 0.023659704253077507, 0.010600889101624489, 0.0083170495927333832, 0.0054301787167787552, 0.0053070276044309139, 0.0080026024952530861, 0.0034005311317741871, 0.0040140370838344097, 0.0082824593409895897, 0.018853370100259781, 0.014763268642127514, 0.010806085541844368, 0.0044699306599795818, 0.0030347276479005814, 0.009687383659183979, 0.0082199880853295326, 0.0061030457727611065, 0.006369628943502903, 0.013313282281160355, 0.012050953693687916, 0.006610487587749958, 0.0074696773663163185, 0.0061123962514102459, 0.015894686803221703, 0.0091568557545542717, 0.0087188864126801491, 0.0062741395086050034, 0.0094003835693001747, 0.0073700672946870327, 0.0052498565055429935, 0.012547580525279045, 0.0056959199719130993, 0.018406502902507782, 0.011302289552986622, 0.011799046769738197, 0.0063401786610484123, 0.0038541865069419146, 0.012046159245073795, 0.0038495885673910379, 0.011364199221134186, 0.013995859771966934, 0.019197419285774231, 0.0080059003084897995, 0.012501395307481289, 0.0026614621747285128, } };
const TfArray<48, int> quant105_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 3 };
const ALIGN(8) int32_t tensor_data106[8] = { -18356, -10944, 14717, -6216, -25334, 3218, 15278, 12392, };
const TfArray<1, int> tensor_dimension106 = { 1, { 8 } };
const TfArray<8, float> quant106_scale = { 8, { 4.3481224565766752e-05, 5.2487528591882437e-05, 7.6704236562363803e-05, 5.9844776842510328e-05, 4.0656028431840241e-05, 5.4487856687046587e-05, 6.7681896325666457e-05, 3.4699893149081618e-05, } };
const TfArray<8, int> quant106_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const ALIGN(8) int8_t tensor_data107[1*3*3*48] = { 
  /* [0][0][][] */ 78,11,-24,69,-18,9,-8,-21,9,12,49,-61,64,-71,20,-16,32,15,127,14,40,53,-24,-115,41,-54,-43,-52,-99,26,0,-5,41,-39,11,-7,26,122,29,52,-69,-24,92,-90,-100,-127,-47,37, 65,73,-45,-1,0,-127,-33,54,127,5,31,5,-72,-83,95,-127,127,71,-92,3,127,127,-127,95,8,-75,-127,-102,-127,14,-77,101,66,-127,-43,127,127,35,63,127,53,15,104,-127,65,-16,19,-57, 111,-14,31,83,-20,-11,-17,-27,-1,18,-52,-54,76,-59,0,-10,33,13,124,21,37,22,-18,33,6,-60,22,-52,-92,-15,-2,-1,43,-36,-1,-4,25,127,28,36,-74,-44,82,-78,-127,84,-28,-59, 
  /* [0][1][][] */ 56,-32,-127,39,-22,4,-45,113,102,49,95,43,119,-90,47,-80,76,-16,79,13,28,38,-83,-19,127,-87,-71,-15,-76,-20,25,86,61,-103,-60,11,4,73,91,-20,-62,8,-18,-60,-31,-102,65,64, 53,126,87,-32,127,-29,127,21,73,127,13,-85,-23,-45,94,-106,20,-10,-94,-127,-41,79,80,23,-6,-14,59,127,-41,127,127,87,-34,-55,111,12,-9,-107,127,-59,127,33,71,-62,85,7,127,67, 59,-90,31,59,-27,-1,-51,127,103,41,-127,57,127,-93,32,-79,57,-22,88,19,22,48,-80,111,100,-89,-76,-14,-57,-66,25,127,65,-105,-23,27,10,70,64,-49,-59,8,34,-24,-57,89,84,-127, 
  /* [0][2][][] */ 114,-20,-34,127,-11,23,-17,70,54,-15,40,-29,27,-127,-29,-44,-19,46,95,44,16,5,55,-127,55,-32,21,-4,-27,-24,-18,32,10,-49,-58,-108,9,93,-3,-45,-13,-125,-127,-77,97,-81,40,17, 11,-127,65,13,-26,51,-48,48,107,78,32,-127,-24,-96,-127,-6,-57,127,-72,-94,28,26,-41,54,75,-127,50,39,-72,-58,-71,-12,127,-44,127,6,99,120,57,-30,28,-84,-102,-79,1,25,34,77, 127,-26,-4,101,-5,26,-16,62,41,-5,-70,-29,-27,-113,-14,-13,-6,52,81,50,24,11,54,28,38,-30,-14,-3,-28,-46,-38,32,-8,-50,-7,-61,12,85,-6,-50,-6,-127,-71,-37,92,84,60,-80, 
};
const TfArray<4, int> tensor_dimension107 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant107_scale = { 48, { 0.0051245051436126232, 0.0074583739042282104, 0.0087612941861152649, 0.0085342573001980782, 0.017281444743275642, 0.0090024434030056, 0.013526532799005508, 0.0054467581212520599, 0.0040701674297451973, 0.0083010811358690262, 0.0074288086034357548, 0.00823206827044487, 0.0075537571683526039, 0.0047294232062995434, 0.0060020671226084232, 0.0054865670390427113, 0.0071740704588592052, 0.008811265230178833, 0.010997884906828403, 0.0097032971680164337, 0.0097305970266461372, 0.0080957980826497078, 0.0088488152250647545, 0.006779741495847702, 0.0049883569590747356, 0.0087582031264901161, 0.010735823772847652, 0.0104701928794384, 0.005676737055182457, 0.012868057005107403, 0.0097900871187448502, 0.0063022002577781677, 0.011008209548890591, 0.0039275661110877991, 0.010260204784572124, 0.0097481394186615944, 0.0070897229015827179, 0.0038049810100346804, 0.0057366024702787399, 0.0062931077554821968, 0.012255345471203327, 0.0058276276104152203, 0.0052428939379751682, 0.0049618477933108807, 0.0064994227141141891, 0.005223528016358614, 0.0056622042320668697, 0.0066107106395065784, } };
const TfArray<48, int> quant107_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 3 };
const ALIGN(8) int32_t tensor_data108[8] = { -3627, -4724, 39682, -4912, 36289, -10417, -1684, 28771, };
const TfArray<1, int> tensor_dimension108 = { 1, { 8 } };
const TfArray<8, float> quant108_scale = { 8, { 2.7680116545525379e-05, 2.6755154976854101e-05, 2.0783383661182597e-05, 2.3119873731047846e-05, 3.2107403967529535e-05, 2.0405845134519041e-05, 1.7922220649779774e-05, 2.2531679860549048e-05, } };
const TfArray<8, int> quant108_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 0 };
const ALIGN(8) int8_t tensor_data109[1*3*3*48] = { 
  /* [0][0][][] */ 41,-8,-20,39,7,-89,21,-84,-114,0,-122,3,-35,0,-6,-3,13,10,22,-5,-13,-17,2,-111,16,13,-3,6,18,-8,15,15,9,15,9,39,-8,-13,3,-45,-16,-55,53,23,-5,19,9,6, 22,6,21,127,7,-127,39,-17,-127,2,-86,39,-51,51,-33,35,124,-8,38,-2,-41,-58,-36,-127,85,-62,-1,31,87,3,53,68,-20,-48,31,127,-7,-20,8,-8,-38,-88,108,62,-6,65,70,-3, 41,-6,-18,42,6,-82,23,-69,-107,1,-126,1,-12,0,-5,-4,12,0,27,-6,-12,-17,0,-109,11,15,1,7,22,-4,16,10,3,13,8,34,-6,-15,2,38,-15,-39,58,28,-17,22,20,6, 
  /* [0][1][][] */ 25,-12,8,12,21,-102,36,-118,-44,-2,-87,21,-79,1,-49,17,2,-23,18,-6,-15,-111,94,-77,2,127,24,9,56,3,36,-1,32,11,25,-1,-3,25,-2,-127,-1,-81,32,64,19,26,24,14, 127,-127,127,-100,127,60,127,-75,-86,127,-55,127,-89,-127,-127,127,127,-127,127,-127,-112,-127,127,-126,127,-123,127,127,127,127,127,-127,127,-127,127,42,127,127,-127,10,127,-127,127,127,127,127,127,-32, 23,-8,3,18,18,-84,39,-127,-42,-3,-87,22,-55,7,-49,18,1,-44,18,-6,-15,-105,93,-71,-4,110,30,7,52,2,24,2,29,12,22,-11,-5,22,3,117,-1,-65,39,84,-20,29,47,21, 
  /* [0][2][][] */ 8,-17,-3,-5,20,-96,25,-50,-57,0,-88,-6,-59,26,-19,-2,-3,-6,3,-3,26,-90,52,-87,-11,33,-1,10,-13,-5,16,18,12,14,0,-33,-9,4,0,-23,11,0,10,23,3,24,-10,27, -2,-22,82,-41,34,-109,104,10,-109,5,-127,-68,-127,127,-55,15,-10,-79,19,-11,127,-97,116,-81,-53,-56,55,23,54,5,10,-56,30,51,33,-106,-2,38,-13,-4,124,53,1,73,41,73,5,127, 10,-20,-3,-8,21,-80,25,-44,-51,1,-85,-4,-54,26,-19,-1,2,-5,-1,-3,28,-72,56,-82,-9,28,3,9,-6,-6,13,17,7,11,-1,-27,-10,-2,-1,18,13,13,4,19,-2,30,0,31, 
};
const TfArray<4, int> tensor_dimension109 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant109_scale = { 48, { 0.0058264839462935925, 0.007971959188580513, 0.0055093886330723763, 0.0085321515798568726, 0.010927244089543819, 0.002933732233941555, 0.0046161157079041004, 0.0027505990583449602, 0.0027731670998036861, 0.017027849331498146, 0.0026816125027835369, 0.00762568274512887, 0.0033716084435582161, 0.012595676816999912, 0.0063722296617925167, 0.0077942563220858574, 0.0058417432010173798, 0.0039794282056391239, 0.0064146053045988083, 0.020451882854104042, 0.012340093031525612, 0.00299216085113585, 0.0034170907456427813, 0.0025885454379022121, 0.0072330161929130554, 0.0084365876391530037, 0.0063713104464113712, 0.010662773624062538, 0.00439043203368783, 0.00758393295109272, 0.0051155174151062965, 0.0065423552878201008, 0.0062529528513550758, 0.0077284094877541065, 0.0063419057987630367, 0.0077057634480297565, 0.010804989375174046, 0.0098908552899956703, 0.014847858808934689, 0.0061144391074776649, 0.0066118915565311909, 0.0034266365692019463, 0.0047576092183589935, 0.0035795599687844515, 0.0072967298328876495, 0.0095805628225207329, 0.0048092254437506199, 0.0059050880372524261, } };
const TfArray<48, int> quant109_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 3 };
const ALIGN(8) int32_t tensor_data110[16] = { -15183, -12700, -8089, -51048, 31503, -25644, -19492, -40392, -3047, -52616, 9261, 22869, -50295, -166, 15532, 14508, };
const TfArray<1, int> tensor_dimension110 = { 1, { 16 } };
const TfArray<16, float> quant110_scale = { 16, { 0.00010880572517635301, 0.00010256138921249658, 0.00011546111636562273, 0.00015826609160285443, 9.9452750873751938e-05, 9.7294105216860771e-05, 7.4206196586601436e-05, 0.00010064598609460518, 0.00011261746112722903, 8.358884952031076e-05, 8.9369270426686853e-05, 7.391693361569196e-05, 9.4985334726516157e-05, 0.00011063236888730898, 0.00013110275904182345, 7.8930439485702664e-05, } };
const TfArray<16, int> quant110_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const TfArray<4, int> tensor_dimension111 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant111_scale = { 1, { 0.022225983440876007, } };
const TfArray<1, int> quant111_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant112_scale = { 1, { 0.01484612375497818, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.028332116082310677, } };
const TfArray<1, int> quant113_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.043096236884593964, } };
const TfArray<1, int> quant114_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant115_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant115_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant116_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant116_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.018659992143511772, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant118_scale = { 1, { 0.027700640261173248, } };
const TfArray<1, int> quant118_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant119_scale = { 1, { 0.014678094536066055, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant120_scale = { 1, { 0.015363279730081558, } };
const TfArray<1, int> quant120_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant121_scale = { 1, { 0.036549936980009079, } };
const TfArray<1, int> quant121_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant122_scale = { 1, { 0.04800758883357048, } };
const TfArray<1, int> quant122_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant123_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant123_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,9,9,48 } };
const TfArray<1, float> quant124_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant124_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.017139382660388947, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant126_scale = { 1, { 0.034732349216938019, } };
const TfArray<1, int> quant126_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant127_scale = { 1, { 0.012236158363521099, } };
const TfArray<1, int> quant127_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant128_scale = { 1, { 0.017036721110343933, } };
const TfArray<1, int> quant128_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant129_scale = { 1, { 0.023326484486460686, } };
const TfArray<1, int> quant129_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant130_scale = { 1, { 0.042495731264352798, } };
const TfArray<1, int> quant130_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant131_scale = { 1, { 0.014250442385673523, } };
const TfArray<1, int> quant131_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant132_scale = { 1, { 0.017141237854957581, } };
const TfArray<1, int> quant132_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant133_scale = { 1, { 0.047459673136472702, } };
const TfArray<1, int> quant133_zero = { 1, { 52 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,4,4,8 } };
const TfArray<1, float> quant134_scale = { 1, { 0.056848376989364624, } };
const TfArray<1, int> quant134_zero = { 1, { 32 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,4,4,48 } };
const TfArray<1, float> quant135_scale = { 1, { 0.016753043979406357, } };
const TfArray<1, int> quant135_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,5,5,48 } };
const TfArray<1, float> quant136_scale = { 1, { 0.016753043979406357, } };
const TfArray<1, int> quant136_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.015833465382456779, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant138_scale = { 1, { 0.03555694967508316, } };
const TfArray<1, int> quant138_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant139_scale = { 1, { 0.012028426863253117, } };
const TfArray<1, int> quant139_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant140_scale = { 1, { 0.016990557312965393, } };
const TfArray<1, int> quant140_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant141_scale = { 1, { 0.021563189104199409, } };
const TfArray<1, int> quant141_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant142_scale = { 1, { 0.045215331017971039, } };
const TfArray<1, int> quant142_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant143_scale = { 1, { 0.018007569015026093, } };
const TfArray<1, int> quant143_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant144_scale = { 1, { 0.016358133405447006, } };
const TfArray<1, int> quant144_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant145_scale = { 1, { 0.022279597818851471, } };
const TfArray<1, int> quant145_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant146_scale = { 1, { 0.047865353524684906, } };
const TfArray<1, int> quant146_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant147_scale = { 1, { 0.013459095731377602, } };
const TfArray<1, int> quant147_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant148_scale = { 1, { 0.015635421499609947, } };
const TfArray<1, int> quant148_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant149_scale = { 1, { 0.017319420352578163, } };
const TfArray<1, int> quant149_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant150_scale = { 1, { 0.051520481705665588, } };
const TfArray<1, int> quant150_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant151_scale = { 1, { 0.015563784167170525, } };
const TfArray<1, int> quant151_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant152_scale = { 1, { 0.015278566628694534, } };
const TfArray<1, int> quant152_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant153_scale = { 1, { 0.02951439656317234, } };
const TfArray<1, int> quant153_zero = { 1, { -50 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant154_scale = { 1, { 0.063832052052021027, } };
const TfArray<1, int> quant154_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant155_scale = { 1, { 0.020881418138742447, } };
const TfArray<1, int> quant155_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant156_scale = { 1, { 0.018261481076478958, } };
const TfArray<1, int> quant156_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant157_scale = { 1, { 0.020078333094716072, } };
const TfArray<1, int> quant157_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant158_scale = { 1, { 0.063261516392230988, } };
const TfArray<1, int> quant158_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant159_scale = { 1, { 0.017151886597275734, } };
const TfArray<1, int> quant159_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant160_scale = { 1, { 0.017424572259187698, } };
const TfArray<1, int> quant160_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant161_scale = { 1, { 0.026061968877911568, } };
const TfArray<1, int> quant161_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant162_scale = { 1, { 0.078045263886451721, } };
const TfArray<1, int> quant162_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant163_scale = { 1, { 0.015778429806232452, } };
const TfArray<1, int> quant163_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant164_scale = { 1, { 0.015778429806232452, } };
const TfArray<1, int> quant164_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant165_scale = { 1, { 0.020433017984032631, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant166_scale = { 1, { 0.031003551557660103, } };
const TfArray<1, int> quant166_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant167_scale = { 1, { 0.011906464584171772, } };
const TfArray<1, int> quant167_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant168_scale = { 1, { 0.015676993876695633, } };
const TfArray<1, int> quant168_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant169_scale = { 1, { 0.016431018710136414, } };
const TfArray<1, int> quant169_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant170_scale = { 1, { 0.028233829885721207, } };
const TfArray<1, int> quant170_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant171_scale = { 1, { 0.0096459509804844856, } };
const TfArray<1, int> quant171_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant172_scale = { 1, { 0.010959967039525509, } };
const TfArray<1, int> quant172_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant173_scale = { 1, { 0.0088678020983934402, } };
const TfArray<1, int> quant173_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,1,1,8 } };
const TfArray<1, float> quant174_scale = { 1, { 0.025853702798485756, } };
const TfArray<1, int> quant174_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant175_scale = { 1, { 0.010709377937018871, } };
const TfArray<1, int> quant175_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,1,1,48 } };
const TfArray<1, float> quant176_scale = { 1, { 0.010940460488200188, } };
const TfArray<1, int> quant176_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,1,1,16 } };
const TfArray<1, float> quant177_scale = { 1, { 0.030049331486225128, } };
const TfArray<1, int> quant177_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,1,1,1280 } };
const TfArray<1, float> quant178_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant178_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<2, int> tensor_dimension179 = { 2, { 1,1280 } };
const TfArray<1, float> quant179_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant179_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<2, int> tensor_dimension180 = { 2, { 1,10 } };
const TfArray<1, float> quant180_scale = { 1, { 0.023525258526206017, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 1,3 } };
const TfArray<1, float> quant181_scale = { 1, { 0.03363678976893425, } };
const TfArray<1, int> quant181_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 1,3 } };
const TfArray<1, float> quant182_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant182_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,42,5 } };
const TfArray<1, int> outputs0 = { 1, { 111 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 111,77,34 } };
const TfArray<1, int> outputs1 = { 1, { 112 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 112,43,78 } };
const TfArray<1, int> outputs2 = { 1, { 113 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 111,113 } };
const TfArray<1, int> outputs3 = { 1, { 114 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 114,44,12 } };
const TfArray<1, int> outputs4 = { 1, { 115 } };
const TfArray<2, int> inputs5 = { 2, { 115,1 } };
const TfArray<1, int> outputs5 = { 1, { 116 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 116,79,20 } };
const TfArray<1, int> outputs6 = { 1, { 117 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 117,45,80 } };
const TfArray<1, int> outputs7 = { 1, { 118 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 118,46,31 } };
const TfArray<1, int> outputs8 = { 1, { 119 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 119,81,32 } };
const TfArray<1, int> outputs9 = { 1, { 120 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 120,47,82 } };
const TfArray<1, int> outputs10 = { 1, { 121 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 118,121 } };
const TfArray<1, int> outputs11 = { 1, { 122 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 122,48,33 } };
const TfArray<1, int> outputs12 = { 1, { 123 } };
const TfArray<2, int> inputs13 = { 2, { 123,1 } };
const TfArray<1, int> outputs13 = { 1, { 124 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 124,83,35 } };
const TfArray<1, int> outputs14 = { 1, { 125 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 125,49,84 } };
const TfArray<1, int> outputs15 = { 1, { 126 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 126,50,36 } };
const TfArray<1, int> outputs16 = { 1, { 127 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 127,85,37 } };
const TfArray<1, int> outputs17 = { 1, { 128 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 128,51,86 } };
const TfArray<1, int> outputs18 = { 1, { 129 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 126,129 } };
const TfArray<1, int> outputs19 = { 1, { 130 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 130,52,38 } };
const TfArray<1, int> outputs20 = { 1, { 131 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 131,87,39 } };
const TfArray<1, int> outputs21 = { 1, { 132 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 132,53,88 } };
const TfArray<1, int> outputs22 = { 1, { 133 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 130,133 } };
const TfArray<1, int> outputs23 = { 1, { 134 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 134,54,40 } };
const TfArray<1, int> outputs24 = { 1, { 135 } };
const TfArray<2, int> inputs25 = { 2, { 135,1 } };
const TfArray<1, int> outputs25 = { 1, { 136 } };
const TfLiteDepthwiseConvParams opdata26 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 136,89,41 } };
const TfArray<1, int> outputs26 = { 1, { 137 } };
const TfLiteConvParams opdata27 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 137,55,90 } };
const TfArray<1, int> outputs27 = { 1, { 138 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 138,56,6 } };
const TfArray<1, int> outputs28 = { 1, { 139 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 139,91,7 } };
const TfArray<1, int> outputs29 = { 1, { 140 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 140,57,92 } };
const TfArray<1, int> outputs30 = { 1, { 141 } };
const TfLiteAddParams opdata31 = { kTfLiteActNone };
const TfArray<2, int> inputs31 = { 2, { 138,141 } };
const TfArray<1, int> outputs31 = { 1, { 142 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 142,58,8 } };
const TfArray<1, int> outputs32 = { 1, { 143 } };
const TfLiteDepthwiseConvParams opdata33 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 143,93,9 } };
const TfArray<1, int> outputs33 = { 1, { 144 } };
const TfLiteConvParams opdata34 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 144,59,94 } };
const TfArray<1, int> outputs34 = { 1, { 145 } };
const TfLiteAddParams opdata35 = { kTfLiteActNone };
const TfArray<2, int> inputs35 = { 2, { 142,145 } };
const TfArray<1, int> outputs35 = { 1, { 146 } };
const TfLiteConvParams opdata36 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs36 = { 3, { 146,60,10 } };
const TfArray<1, int> outputs36 = { 1, { 147 } };
const TfLiteDepthwiseConvParams opdata37 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 147,95,11 } };
const TfArray<1, int> outputs37 = { 1, { 148 } };
const TfLiteConvParams opdata38 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 148,61,96 } };
const TfArray<1, int> outputs38 = { 1, { 149 } };
const TfLiteAddParams opdata39 = { kTfLiteActNone };
const TfArray<2, int> inputs39 = { 2, { 146,149 } };
const TfArray<1, int> outputs39 = { 1, { 150 } };
const TfLiteConvParams opdata40 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs40 = { 3, { 150,62,13 } };
const TfArray<1, int> outputs40 = { 1, { 151 } };
const TfLiteDepthwiseConvParams opdata41 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 151,97,14 } };
const TfArray<1, int> outputs41 = { 1, { 152 } };
const TfLiteConvParams opdata42 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 152,63,98 } };
const TfArray<1, int> outputs42 = { 1, { 153 } };
const TfLiteAddParams opdata43 = { kTfLiteActNone };
const TfArray<2, int> inputs43 = { 2, { 150,153 } };
const TfArray<1, int> outputs43 = { 1, { 154 } };
const TfLiteConvParams opdata44 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs44 = { 3, { 154,64,15 } };
const TfArray<1, int> outputs44 = { 1, { 155 } };
const TfLiteDepthwiseConvParams opdata45 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 155,99,16 } };
const TfArray<1, int> outputs45 = { 1, { 156 } };
const TfLiteConvParams opdata46 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 156,65,100 } };
const TfArray<1, int> outputs46 = { 1, { 157 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 154,157 } };
const TfArray<1, int> outputs47 = { 1, { 158 } };
const TfLiteConvParams opdata48 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs48 = { 3, { 158,66,17 } };
const TfArray<1, int> outputs48 = { 1, { 159 } };
const TfLiteDepthwiseConvParams opdata49 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 159,101,18 } };
const TfArray<1, int> outputs49 = { 1, { 160 } };
const TfLiteConvParams opdata50 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 160,67,102 } };
const TfArray<1, int> outputs50 = { 1, { 161 } };
const TfLiteAddParams opdata51 = { kTfLiteActNone };
const TfArray<2, int> inputs51 = { 2, { 158,161 } };
const TfArray<1, int> outputs51 = { 1, { 162 } };
const TfLiteConvParams opdata52 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs52 = { 3, { 162,68,19 } };
const TfArray<1, int> outputs52 = { 1, { 163 } };
const TfArray<2, int> inputs53 = { 2, { 163,1 } };
const TfArray<1, int> outputs53 = { 1, { 164 } };
const TfLiteDepthwiseConvParams opdata54 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs54 = { 3, { 164,103,21 } };
const TfArray<1, int> outputs54 = { 1, { 165 } };
const TfLiteConvParams opdata55 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 165,69,104 } };
const TfArray<1, int> outputs55 = { 1, { 166 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 166,70,22 } };
const TfArray<1, int> outputs56 = { 1, { 167 } };
const TfLiteDepthwiseConvParams opdata57 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 167,105,23 } };
const TfArray<1, int> outputs57 = { 1, { 168 } };
const TfLiteConvParams opdata58 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 168,71,106 } };
const TfArray<1, int> outputs58 = { 1, { 169 } };
const TfLiteAddParams opdata59 = { kTfLiteActNone };
const TfArray<2, int> inputs59 = { 2, { 166,169 } };
const TfArray<1, int> outputs59 = { 1, { 170 } };
const TfLiteConvParams opdata60 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs60 = { 3, { 170,72,24 } };
const TfArray<1, int> outputs60 = { 1, { 171 } };
const TfLiteDepthwiseConvParams opdata61 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 171,107,25 } };
const TfArray<1, int> outputs61 = { 1, { 172 } };
const TfLiteConvParams opdata62 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 172,73,108 } };
const TfArray<1, int> outputs62 = { 1, { 173 } };
const TfLiteAddParams opdata63 = { kTfLiteActNone };
const TfArray<2, int> inputs63 = { 2, { 170,173 } };
const TfArray<1, int> outputs63 = { 1, { 174 } };
const TfLiteConvParams opdata64 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 174,74,26 } };
const TfArray<1, int> outputs64 = { 1, { 175 } };
const TfLiteDepthwiseConvParams opdata65 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 175,109,27 } };
const TfArray<1, int> outputs65 = { 1, { 176 } };
const TfLiteConvParams opdata66 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 176,75,110 } };
const TfArray<1, int> outputs66 = { 1, { 177 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 177,76,28 } };
const TfArray<1, int> outputs67 = { 1, { 178 } };
const TfLiteReshapeParams opdata68 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs68 = { 2, { 178,4 } };
const TfArray<1, int> outputs68 = { 1, { 179 } };
const TfLiteFullyConnectedParams opdata69 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs69 = { 3, { 179,29,2 } };
const TfArray<1, int> outputs69 = { 1, { 180 } };
const TfLiteFullyConnectedParams opdata70 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs70 = { 3, { 180,30,3 } };
const TfArray<1, int> outputs70 = { 1, { 181 } };
const TfLiteSoftmaxParams opdata71 = { 1 };
const TfArray<1, int> inputs71 = { 1, { 181 } };
const TfArray<1, int> outputs71 = { 1, { 182 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data44, (TfLiteIntArray*)&tensor_dimension44, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data45, (TfLiteIntArray*)&tensor_dimension45, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data46, (TfLiteIntArray*)&tensor_dimension46, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data47, (TfLiteIntArray*)&tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data48, (TfLiteIntArray*)&tensor_dimension48, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data49, (TfLiteIntArray*)&tensor_dimension49, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data50, (TfLiteIntArray*)&tensor_dimension50, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data51, (TfLiteIntArray*)&tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data52, (TfLiteIntArray*)&tensor_dimension52, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data53, (TfLiteIntArray*)&tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data54, (TfLiteIntArray*)&tensor_dimension54, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data55, (TfLiteIntArray*)&tensor_dimension55, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data56, (TfLiteIntArray*)&tensor_dimension56, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data57, (TfLiteIntArray*)&tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data58, (TfLiteIntArray*)&tensor_dimension58, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data59, (TfLiteIntArray*)&tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data60, (TfLiteIntArray*)&tensor_dimension60, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data61, (TfLiteIntArray*)&tensor_dimension61, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data62, (TfLiteIntArray*)&tensor_dimension62, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data63, (TfLiteIntArray*)&tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data64, (TfLiteIntArray*)&tensor_dimension64, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data65, (TfLiteIntArray*)&tensor_dimension65, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data66, (TfLiteIntArray*)&tensor_dimension66, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data67, (TfLiteIntArray*)&tensor_dimension67, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data68, (TfLiteIntArray*)&tensor_dimension68, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data69, (TfLiteIntArray*)&tensor_dimension69, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data70, (TfLiteIntArray*)&tensor_dimension70, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data71, (TfLiteIntArray*)&tensor_dimension71, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data72, (TfLiteIntArray*)&tensor_dimension72, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data73, (TfLiteIntArray*)&tensor_dimension73, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data74, (TfLiteIntArray*)&tensor_dimension74, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data75, (TfLiteIntArray*)&tensor_dimension75, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data76, (TfLiteIntArray*)&tensor_dimension76, 20480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data77, (TfLiteIntArray*)&tensor_dimension77, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data78, (TfLiteIntArray*)&tensor_dimension78, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data79, (TfLiteIntArray*)&tensor_dimension79, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data80, (TfLiteIntArray*)&tensor_dimension80, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data81, (TfLiteIntArray*)&tensor_dimension81, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data82, (TfLiteIntArray*)&tensor_dimension82, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data83, (TfLiteIntArray*)&tensor_dimension83, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data84, (TfLiteIntArray*)&tensor_dimension84, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data85, (TfLiteIntArray*)&tensor_dimension85, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data86, (TfLiteIntArray*)&tensor_dimension86, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data87, (TfLiteIntArray*)&tensor_dimension87, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data88, (TfLiteIntArray*)&tensor_dimension88, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data89, (TfLiteIntArray*)&tensor_dimension89, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data90, (TfLiteIntArray*)&tensor_dimension90, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data91, (TfLiteIntArray*)&tensor_dimension91, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data92, (TfLiteIntArray*)&tensor_dimension92, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data93, (TfLiteIntArray*)&tensor_dimension93, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data94, (TfLiteIntArray*)&tensor_dimension94, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data95, (TfLiteIntArray*)&tensor_dimension95, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data96, (TfLiteIntArray*)&tensor_dimension96, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data97, (TfLiteIntArray*)&tensor_dimension97, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data99, (TfLiteIntArray*)&tensor_dimension99, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data101, (TfLiteIntArray*)&tensor_dimension101, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data105, (TfLiteIntArray*)&tensor_dimension105, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data106, (TfLiteIntArray*)&tensor_dimension106, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data107, (TfLiteIntArray*)&tensor_dimension107, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data110, (TfLiteIntArray*)&tensor_dimension110, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4096, (TfLiteIntArray*)&tensor_dimension111, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension112, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2048, (TfLiteIntArray*)&tensor_dimension113, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension114, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension115, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension116, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13872, (TfLiteIntArray*)&tensor_dimension117, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6144, (TfLiteIntArray*)&tensor_dimension118, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension119, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension120, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3072, (TfLiteIntArray*)&tensor_dimension121, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension122, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension123, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension124, 3888, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3888, (TfLiteIntArray*)&tensor_dimension125, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1664, (TfLiteIntArray*)&tensor_dimension126, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension127, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension128, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension129, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension130, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension131, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension132, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension133, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension134, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension135, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension136, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension137, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension138, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension139, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension140, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension141, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension142, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension143, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension144, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant144))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension145, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant145))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension146, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant146))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension147, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension148, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant148))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension149, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant149))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension150, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant150))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension151, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant151))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension152, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant152))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension153, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant153))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension154, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant154))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension155, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant155))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension156, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant156))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension157, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant157))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension158, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant158))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension159, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant159))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension160, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant160))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension161, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant161))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension162, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant162))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension163, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant163))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension164, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant164))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension165, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant165))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension166, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant166))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension167, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant167))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension168, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant168))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension169, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant169))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension170, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant170))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension171, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant171))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension172, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant172))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension173, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant173))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension174, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant174))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension175, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant175))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension176, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant176))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension177, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant177))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension178, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant178))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension179, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant179))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension180, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant180))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension181, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant181))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension182, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant182))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_ADD, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_ADD, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_ADD, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_ADD, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_ADD, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_ADD, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_ADD, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_ADD, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 183;
  for(size_t i = 0; i < 183; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = *tflite::ops::micro::Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_PAD] = *tflite::ops::micro::Register_PAD();
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 72; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 72; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  182, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 72; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
