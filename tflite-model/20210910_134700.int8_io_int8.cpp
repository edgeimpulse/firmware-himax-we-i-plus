// This file is generated. Do not edit.
// Generated on: 10.09.2021 14:05:39

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 234848;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_PAD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[72];
TfLiteEvalTensor tflEvalTensors[72];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[32] = { 1224, 488, -953, 1149, 1668, -1022, -1032, 1541, -722, -1140, -1150, -1039, -1169, 1399, 1546, -1037, -1145, 1563, 1442, -1145, -1080, -1389, -1037, -170, -1389, 1768, -983, 28, -1226, 1215, 1392, -1108, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 5.4281725169857964e-05, 5.1334518502699211e-05, 4.8099860578076914e-05, 5.1376166084082797e-05, 5.5855340178823099e-05, 4.9185753596248105e-05, 4.8937705287244171e-05, 5.3618558013113216e-05, 4.6515000576619059e-05, 4.8144989705178887e-05, 4.9463633331470191e-05, 4.9793041398515925e-05, 4.9524838686920702e-05, 6.0254940763115883e-05, 5.8337645896244794e-05, 4.7965157136786729e-05, 4.8561083531240001e-05, 6.0832451708847657e-05, 5.5565506045240909e-05, 5.0079856009688228e-05, 4.9976551963482052e-05, 5.4342915973393247e-05, 4.9242724344367161e-05, 5.191452510189265e-05, 5.0972939789062366e-05, 5.5639386118855327e-05, 4.9027101340470836e-05, 3.9749931602273136e-05, 5.0930411816807464e-05, 5.5796099331928417e-05, 5.5405365856131539e-05, 4.9413956730859354e-05, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { 3617, 1729, 2130, 564, 55837, 53378, 6878, 17639, 6664, 20567, 3199, 890, 10572, 13631, 1754, 26704, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.0001385119539918378, 0.00034730834886431694, 0.00014809008280280977, 0.00010913668666034937, 2.3916665668366477e-05, 2.613593460409902e-05, 9.0656270913314074e-05, 2.3160948330769315e-05, 0.00011135499516967684, 2.7377198421163484e-05, 0.00024801766267046332, 0.00024191515694838017, 0.00014884020492900163, 1.5522073226748034e-05, 0.00026302173500880599, 3.7333255022531375e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[48] = { 1894, -521, -761, 2283, 24757, 2498, -1177, 11701, 1757, 2292, 379, 3890, 1943, 1307, -2630, 973, 6199, 23468, 4859, -1204, 1564, -3415, -3, 4775, -283, -887, 2719, 23, 4504, 33605, 3888, -126, 911, -492, 3891, 318, 580, -188, 2177, 2071, 3358, 4187, 161, -968, 1681, 3810, 2414, -392, };
const TfArray<1, int> tensor_dimension4 = { 1, { 48 } };
const TfArray<48, float> quant4_scale = { 48, { 0.00025811104569584131, 0.00024906790349632502, 0.0002024606365012005, 0.00019414120470173657, 3.7814759707543999e-05, 0.00022730625641997904, 0.00026218022685497999, 8.3810366049874574e-05, 0.00020340431365184486, 0.00027796041104011238, 0.00019526851247064769, 0.00022166827693581581, 0.00012817264359910041, 0.0001950954319909215, 0.00015093584079295397, 0.00017117669631261379, 0.00012805874575860798, 4.2328178096795455e-05, 0.00014368916163221002, 0.000224760573473759, 0.00024790165480226278, 9.129856334766373e-05, 0.00025018406449817121, 0.00015605443331878632, 0.00024278425553347915, 0.00054171343799680471, 0.00016902135394047946, 0.00047158388770185411, 0.00016294363013003021, 3.0157376386341639e-05, 0.00017180756549350917, 0.00033333676401525736, 0.00023830585996620357, 0.00021475595713127404, 0.00016871262050699443, 0.00020542614220175892, 0.00024342532560694963, 0.00034810553188435733, 0.00022528329282067716, 0.00025508383987471461, 0.00018505605112295598, 0.00015254446770995855, 0.00018810908659361303, 0.00022683148563373834, 0.000225739975576289, 0.00014265863865148276, 0.00014649752120021731, 0.00017527086311019957, } };
const TfArray<48, int> quant4_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[48] = { 10417, 4940, 2990, 975, 1169, -1850, 987, 35354, -24, 1815, 9337, 48536, 2303, 7212, 247, 12669, -2185, 13876, -18, 7661, 8823, 1031, 2393, -8943, 11040, 2209, 4269, 15264, 1568, -3096, -8797, 9840, 2359, -398, -1365, 3749, -7490, 14265, 826, 21997, 641, -1017, 6559, 3160, -1541, -1373, -902, -766, };
const TfArray<1, int> tensor_dimension5 = { 1, { 48 } };
const TfArray<48, float> quant5_scale = { 48, { 6.9597743276972324e-05, 0.000114475391455926, 0.00016504363156855106, 0.00017496701912023127, 0.00085263041546568274, 0.00010378223669249564, 0.00011328722757752985, 0.00010660084808478132, 0.0001392889826092869, 8.044923743000254e-05, 6.702994869556278e-05, 6.3057872466742992e-05, 8.4255807450972497e-05, 6.4004911109805107e-05, 0.00026365552912466228, 9.7676478617358953e-05, 0.00012969109229743481, 0.00039323832606896758, 0.00011800586071331054, 0.00011018561781384051, 0.00018033508968073875, 0.00034988712286576629, 0.00012175073788966984, 0.0002800863585434854, 0.00010482268407940865, 7.0206187956500798e-05, 5.7310349802719429e-05, 8.1256810517515987e-05, 0.00013101175136398524, 0.00086776807438582182, 0.00024777319049462676, 6.1888582422398031e-05, 9.8265511041972786e-05, 0.00011496585648274049, 0.00021361897233873606, 7.3544499173294753e-05, 0.00010035865125246346, 4.2918447434203699e-05, 0.00014452177856583148, 6.0407677665352821e-05, 0.00014939953689463437, 0.00013012807175982744, 7.5396368629299104e-05, 8.9079148892778903e-05, 7.9300494689960033e-05, 0.00035987675073556602, 7.6790369348600507e-05, 0.00022365161566995084, } };
const TfArray<48, int> quant5_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[48] = { 5672, 5959, 19618, 1785, 4872, -1921, 8912, 39238, 6798, -2205, 9674, -4522, 28142, -2670, 3388, 13946, -205, 3556, -21, 2850, 5229, 7080, 812, 37959, 6739, 4506, 26884, 2310, 7129, 6567, 688, 1875, 1322, 2361, -693, 497, -4489, -594, 5474, 4901, 7271, 2515, 6017, 8226, 4820, 7804, 2982, 8071, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00012734717165585607, 0.00014420269872061908, 5.2012448577443138e-05, 0.0001424584916094318, 0.00012668935232795775, 0.00018004888261202723, 9.6511103038210422e-05, 2.5922408894984983e-05, 8.7022017396520823e-05, 0.00014315058069769293, 9.1834153863601387e-05, 0.00012193946167826653, 3.5704852052731439e-05, 0.00014818730414845049, 0.00015350876492448151, 6.7147018853574991e-05, 0.00030000161495991051, 0.00012402395077515393, 0.00020777063036803156, 0.00021086665219627321, 0.00013614841736853123, 0.00011508526949910447, 0.00023834110470488667, 2.9684139008168131e-05, 0.00011821714724646881, 0.0001291104854317382, 3.8154084904817864e-05, 0.00016130616131704301, 0.00010285012831445783, 0.00011735919542843476, 0.00025824506883509457, 0.00027393948403187096, 0.00016716279787942767, 0.00017400593787897378, 0.00016725859313737601, 0.00017895380733534694, 0.00013637871597893536, 0.00018986088980454952, 0.00010619408567436039, 0.0001181001280201599, 0.00010572745668468997, 0.00018570752581581473, 0.00012856539979111403, 0.00010414459393359721, 0.00013683225552085787, 0.00010269309859722853, 0.00022189201263245195, 9.8677381174638867e-05, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { 722, 10249, -104, -1113, -29, -966, 5614, -6694, -6332, -412, -13175, -241, 1450, -1271, -2646, 3540, 6750, 3391, -754, -4035, -7590, 1396, 14123, -5067, -4548, -1235, 8268, -6636, -952, 1703, -8858, 12910, 6382, -579, 4335, -361, 94, -466, 12091, 3863, 6496, -2583, 2630, 7237, -2557, 9613, -3798, 2550, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00035641359863802791, 0.00012391398195177317, 0.00067584658972918987, 0.00019852054538205266, 0.00023394533491227776, 0.00044628363684751093, 0.0001821967598516494, 0.00030150881502777338, 8.5834020865149796e-05, 0.00021862961875740439, 0.00010942093649646267, 0.001343464944511652, 0.00033738050842657685, 0.00044047285337001085, 0.00035124161513522267, 0.00063182495068758726, 0.00016169647278729826, 5.5974134738789871e-05, 0.00020384672097861767, 0.00024873303482308984, 0.0002553124213591218, 0.00019793192041106522, 9.5185190730262548e-05, 0.00040920858737081289, 0.00016371585661545396, 0.00034591183066368103, 0.00041714246617630124, 0.00017820029461290687, 0.00027707347180694342, 0.00034298791433684528, 0.00011055327922804281, 0.0001064618700183928, 0.00012928832438774407, 0.00018034358799923211, 0.00013333000242710114, 0.00027644057990983129, 0.0011977446265518665, 0.00023398910707328469, 0.00010428564564790577, 0.00015543775225523859, 0.00019554166647139937, 0.00011055607319576666, 0.00027296127518638968, 0.00017089871107600629, 0.00021520500013139099, 7.487194670829922e-05, 6.1552251281682402e-05, 0.00020841082732658833, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { 3539, -2581, 883, -3889, 7300, -1272, 8545, -4573, 1859, 843, 2500, 6416, 649, -343, 999, 6622, -2161, 7659, 7632, 756, -886, 4859, -1491, 7226, 3903, 3567, 1595, -1230, 11966, -95, 2859, -3432, -931, 7737, -813, 4294, 3717, 2455, 1050, 6658, 2938, 10054, -5549, 2421, 8640, 970, 5408, 5078, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00013947593106422573, 0.00015384258585982025, 0.00019263783178757876, 0.00012414981028996408, 0.00011854853801196441, 0.00013589947775471956, 9.3230919446796179e-05, 0.00011217694554943591, 0.00016838833107613027, 0.00018602873024065048, 0.00018175595323555171, 0.0001227504835696891, 0.0002098653931170702, 0.0002030735049629584, 0.00016414017591159791, 0.0001231930946232751, 0.00017490171012468636, 0.00010691054922062904, 0.0001112788959289901, 0.00018804473802447319, 0.00017420947551727295, 0.00013063513324595988, 0.00015509894001297653, 0.00011654449917841703, 0.00013421275070868433, 0.00011462315160315484, 0.00015343631093855947, 0.0002285364898853004, 7.4319985287729651e-05, 0.00027723825769498944, 0.00015247111150529236, 0.00010325953189749271, 0.0001213790601468645, 0.00010824750643223524, 0.00019707057799678296, 0.00012941269960720092, 0.00013833683624397963, 0.0001408504176652059, 0.00013644946739077568, 0.00010965402179863304, 0.00017788184050004929, 8.5185041825752705e-05, 0.00011311734851915389, 0.00015112198889255524, 9.3400762125384063e-05, 0.00012625532690435648, 0.00011804055247921497, 0.00011264748172834516, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[16] = { 24059, -271, -716, 3026, -486, 447, 8759, 1675, -307, 291, -2388, 2291, -33, 1126, -246, -1349, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 9.7528223705012351e-05, 0.00023435050388798118, 0.00017953259521164, 0.00017825778922997415, 0.00086104206275194883, 0.00067975162528455257, 0.00017598130216356367, 0.00067755923373624682, 0.00028193986508995295, 0.00088506191968917847, 0.00022576033370569348, 0.00019851664546877146, 0.00011816247570095584, 0.00015950688975863159, 0.00024034519447013736, 0.00049975694855675101, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { 11907, -31, 17310, 517, 13243, -1639, 37059, 180, 9881, 32694, 3304, 21981, 534, 10168, 55400, 22802, 462, 829, -1647, 40040, -562, 15439, 1456, 18103, 16331, 38308, 857, -1225, 861, 17483, 16951, 440, 1297, -2786, 991, 12763, 9595, 40721, 3172, 16547, 21771, 3582, 746, 10255, 3740, 647, 36606, 24038, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00011508192255860195, 0.00013001743354834616, 7.8644334280397743e-05, 9.8479933512862772e-05, 0.00019756126857828349, 0.00013109686551615596, 5.3047126129968092e-05, 0.00014046241994947195, 0.00010569207370281219, 6.5677370002958924e-05, 7.5530690082814544e-05, 0.00011058669042540714, 5.8350604376755655e-05, 0.000114910100819543, 2.9164393708924763e-05, 8.9694542111828923e-05, 0.00010018466127803549, 6.6429049184080213e-05, 0.00022673692728858441, 4.9267662689089775e-05, 7.7778109698556364e-05, 8.6191059381235391e-05, 0.00012863334268331528, 9.0550885943230242e-05, 7.0812136982567608e-05, 5.823387618875131e-05, 5.4131520300870761e-05, 5.8979061577701941e-05, 0.00028645683778449893, 7.089993596309796e-05, 0.00010069706331705675, 0.00040688674198463559, 0.00010374409612268209, 0.00020599861454684287, 0.00011618075950536877, 6.9421330408658832e-05, 0.00011892672046087682, 3.9528593333670869e-05, 9.3614835350308567e-05, 7.172899495344609e-05, 6.7784982093144208e-05, 0.00012149117537774146, 0.00038470482104457915, 6.2027538660913706e-05, 0.00012949804659001529, 7.1608548751100898e-05, 5.5433174566132948e-05, 4.4323140173219144e-05, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[96] = { 2379, 9909, 756, 1588, 5169, 19384, 271, 1763, 14472, -1633, 19356, 3847, 1376, 1256, 7965, 208, 3249, 8229, -418, 14463, 1104, 5824, -1917, 1493, -8778, 1624, 3878, 2081, 10386, 1072, 5482, 4083, 1653, 16670, 3445, 4485, 4566, 3271, 5034, 4229, 33844, 1430, 2231, 2002, 1859, 11792, 7985, 11818, 2143, -1213, 1511, 4356, 2708, -3669, 8701, -136, 4306, 11164, 2386, 3447, 2105, 9765, 3659, -134, 26591, 7647, 1335, 4519, 7562, 5908, 1436, 1611, -4805, 3888, 2537, 2428, 712, 8564, 3989, 6084, 1803, 1525, 3959, 18591, -406, 7444, 9534, 1445, -893, 2090, 902, 14096, 3381, 2784, 5759, 7066, };
const TfArray<1, int> tensor_dimension11 = { 1, { 96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.00014567536709364504, 7.9786062997300178e-05, 0.00016453005082439631, 0.00022485539375338703, 0.00013315549585968256, 4.8017620429163799e-05, 0.00028168430435471237, 0.00015102176985237747, 5.5021228035911918e-05, 0.00013851004769094288, 4.5631764805875719e-05, 0.00013154881889931858, 0.00019187171710655093, 0.00022438800078816712, 7.9163626651279628e-05, 0.00015903949679341167, 0.00016518679331056774, 8.1683356256689876e-05, 0.00015261315274983644, 6.7892840888816863e-05, 0.00019042156054638326, 0.00013447116361930966, 0.00016570718435104936, 0.00016507711552549154, 9.149593097390607e-05, 0.0001393118582200259, 0.00014809533604420722, 0.00016992671589832753, 8.7214255472645164e-05, 0.00018113464466296136, 0.00010126169945579022, 0.00012612524733413011, 0.00021322238899301738, 5.448362571769394e-05, 0.00013092807785142213, 0.00012141450861236081, 0.00013281661085784435, 0.00013603846309706569, 0.00010885284427786246, 0.00010397747973911464, 3.0953480745665729e-05, 0.00016013065760489553, 0.00015011298819445074, 0.00012496796261984855, 0.00016689038602635264, 6.7970555392093956e-05, 9.6480194770265371e-05, 6.3525767473038286e-05, 0.00015657159383408725, 0.0002240765024907887, 0.00021947071945760399, 0.00015491992235183716, 0.00017546262824907899, 0.00011350933345966041, 7.9982208262663335e-05, 0.00017943824059329927, 9.4655952125322074e-05, 7.0391921326518059e-05, 0.00011908597662113607, 0.00010707980982260779, 0.00021196635498199612, 8.0597514170221984e-05, 0.00015630829147994518, 0.00021135645511094481, 3.9361431845463812e-05, 0.00011099303810624406, 0.00024484522873535752, 0.00013587927969638258, 0.00010349951480748132, 8.3827078924514353e-05, 0.00028033406124450266, 0.00012577182496897876, 0.00012844891170971096, 0.00015081590390764177, 0.00015614244330208749, 0.00022221625840757042, 0.00015636287571396679, 8.6870677478145808e-05, 0.00014448656293097883, 0.00013237183156888932, 0.00023340586631093174, 0.00013976659101899713, 0.00010672751523088664, 5.2443920139921829e-05, 0.00010840674076462165, 9.9199343821965158e-05, 8.0263118434231728e-05, 0.00022811321832705289, 0.0001954410836333409, 0.00022208722657524049, 0.0001693849335424602, 5.9085894463350996e-05, 0.00012917336425743997, 0.00015976745635271072, 0.00011448418081272393, 9.7630247182678431e-05, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[96] = { 12119, 559, -6286, 5615, 2259, 1231, 1704, -1963, 3388, -2777, 1035, -1955, 9135, -5158, -451, -9549, -797, 1283, -7630, 2559, -3729, 1944, -4750, 307, 12, 9709, -9611, -4795, 802, -3511, -1803, -1157, 17139, 1653, -4019, -1576, 1201, 11570, 8099, 11933, 2553, 5684, -1421, 6577, 713, -2375, 10960, 1261, -8662, -750, -4257, -1709, -1140, -3981, -3391, 2319, -1572, 2235, 1315, -291, -162, -3230, -4181, 8773, 16130, -1307, 14619, 9482, -1523, -119, 9082, -105, -97, 589, -4126, -1027, 14449, 17027, 10561, 13634, 13620, -2064, 6375, 7375, -534, -873, 11419, -6740, 9473, -204, -7370, -602, -1987, 2242, 27518, 504, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.6968244179151952e-05, 0.00025270093465223908, 0.00015810842160135508, 0.00017577476683072746, 0.00016088584379758686, 0.00047083661775104702, 9.5203358796425164e-05, 0.00021608741371892393, 0.0002715661539696157, 0.00022609591542277485, 0.00021536508575081825, 0.00014026944700162858, 6.8070439738221467e-05, 9.4653711130376905e-05, 0.00019120189244858921, 0.0001068430719897151, 0.00025618576910346746, 0.00030810452881269157, 0.00014230453234631568, 0.000247471674811095, 0.00020140309061389416, 0.00021100847516208887, 0.00013405896606855094, 0.00016374862752854824, 0.0016422243788838387, 0.00011284795618848875, 0.00022707850439473987, 0.00015613113646395504, 0.00026950152823701501, 0.00013622650294564664, 0.00018624744552653283, 0.00025449926033616066, 5.5505628552054986e-05, 0.00035841346834786236, 0.00011249044473515823, 0.00023654451069887727, 0.00030668204999528825, 9.0968096628785133e-05, 0.00014403258683159947, 0.00010522230877541006, 0.00031248573213815689, 0.00013950579159427434, 0.00015219897613860667, 0.00013834454875905067, 0.00012351697660051286, 0.00028961387579329312, 0.00010279228445142508, 0.00024474889505654573, 0.00015633183647878468, 0.00037267801235429943, 0.00022671971237286925, 0.00018260203069075942, 0.00011410014849388972, 0.0002076539967674762, 0.00019142581732012331, 0.00022181526583153754, 0.0001194771466543898, 0.00034504113136790693, 0.00030211074044927955, 0.00030778246582485735, 0.00025611015735194087, 0.00024474799283780158, 0.00011463045666459948, 0.00011116288078483194, 0.00018612762505654246, 0.0003635679604485631, 0.0001020068084471859, 0.00013031039270572364, 0.00019335308752488345, 0.00031416601268574595, 0.00012433572555892169, 0.00030686939135193825, 0.00044867963879369199, 0.00016224377031903714, 0.00012976840662304312, 0.00022556938347406685, 8.1046317063737661e-05, 9.1657828306779265e-05, 0.00011153625382576138, 0.00014258995361160487, 9.1403475380502641e-05, 0.00024001364363357425, 0.00013199856039136648, 0.00030710038845427334, 9.4789837021380663e-05, 0.00027098663849756122, 0.0001556345378048718, 0.0001943236420629546, 0.00012703583342954516, 0.00022931514831725508, 0.00010490536078577861, 0.00018679459753911942, 0.00030925823375582695, 0.00012445583706721663, 7.7762386354152113e-05, 0.00025557249318808317, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[96] = { 7612, 2577, 1420, -885, 4171, 16606, 9592, 753, 24, 5310, 1124, -3161, 5326, 2790, 49, -116, 3313, 6261, -437, 520, 3696, 8541, 8890, -1826, -2820, -443, 9170, 475, 991, 1087, 7619, -1893, 9814, 2360, 9413, -6387, 344, -6954, 652, 1702, 2163, 1299, 2602, -1133, 1013, 1631, 4151, 3681, 3149, 2005, 4601, 3089, -3225, 2441, 1145, 2466, 3307, 4216, 6186, 773, -656, 9476, 3749, 7739, 3526, 6847, -3854, 3362, 7075, -208, 5439, 1574, 2475, 2439, 4091, 2830, -242, 1717, 2353, 2988, 3061, 2523, 5672, 1382, 2154, 4130, 380, -762, 11845, -937, 976, -1712, 7965, 2076, 316, -1155, };
const TfArray<1, int> tensor_dimension13 = { 1, { 96 } };
const TfArray<96, float> quant13_scale = { 96, { 8.8926353782881051e-05, 0.00014668211224488914, 0.00016951613361015916, 0.00020518439123407006, 0.00014991685748100281, 5.3308718634070829e-05, 8.8188506197184324e-05, 0.00024210399715229869, 0.00014429519069381058, 0.00012873472587671131, 0.00016731592768337578, 0.00013698528346139938, 0.00010566022683633491, 0.00014005409320816398, 0.00025045906659215689, 0.00023876054910942912, 0.00018590166291687638, 0.00010993595788022503, 0.00010609583114273846, 0.00018228538101539016, 0.00014525387086905539, 9.8799195257015526e-05, 8.6370440840255469e-05, 0.00017331739945802838, 0.0001680947607383132, 0.00021115044364705682, 9.3071030278224498e-05, 0.0001592182379681617, 0.00020937935914844275, 0.00018854293739423156, 0.00011839147191494703, 0.00015629830886609852, 8.7891603470779955e-05, 0.00020760901679750532, 7.9654688306618482e-05, 0.00010977771307807416, 0.00020893276087008417, 9.251665323972702e-05, 0.00012496844283305109, 0.0001197043529828079, 0.00018756231293082237, 0.00016072033031377941, 0.00015009612252470106, 0.00015281471132766455, 0.0002360529761062935, 0.00019044577493332326, 0.00015551422256976366, 0.00014028124860487878, 0.00017586689500603825, 0.00021890344214625657, 0.00015468729543499649, 0.00014274496061261743, 0.00013223871064838022, 0.00018194336735177785, 0.00016227633750531822, 0.00019283307483419776, 0.00012133303243899718, 0.00010618683882057667, 0.00013064585800748318, 0.00022041730699129403, 0.00022363783500622958, 8.3110353443771601e-05, 0.00015359419921878725, 8.9721441327128559e-05, 0.00014945560542400926, 0.00010646558075677603, 0.00014066450239624828, 0.00013043540820945054, 9.2894384579267353e-05, 0.00024617361486889422, 0.00013376845163293183, 0.00012828756007365882, 0.00014483177801594138, 0.00014294087304733694, 0.00011913644266314805, 0.00012886678450740874, 0.00018946104682981968, 0.00024134264094755054, 0.00013649249740410596, 0.00016812782268971205, 0.00016183659317903221, 0.00013903435319662094, 0.0001203054707730189, 0.00011149163765367121, 0.00018811173504218459, 0.00015271415759343654, 0.00015672661538701504, 0.00027149598463438451, 7.8882039815653116e-05, 0.0001515877665951848, 0.00023929061717353761, 0.000152907072333619, 9.9284741736482829e-05, 0.0001473556476412341, 0.00021256253239698708, 0.00014573030057363212, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[96] = { -3311, -3529, -3541, -5468, -522, 3742, -1083, -2679, 548, -2870, 8226, -2624, 2162, 7489, 7574, -2779, 14082, -817, -4262, -522, -1848, -1973, 175, -1812, 1129, -2049, 2247, -3088, -1872, -6745, 573, 295, 8556, -277, -1764, -364, -226, -1440, -111, 6339, -852, 540, 1197, -5335, 18528, 8635, 792, 14565, 540, 9030, 9499, -2658, -1034, 917, -169, 9173, 775, 574, 9896, 4178, 7220, 10270, 5063, -8174, -140, 1697, -2354, 1702, -3747, -2474, 838, 1249, 9644, -1561, -1846, 8631, -1079, 310, 8138, -28, -1568, 13194, -1380, 2488, 15822, 4302, -2985, -3597, 2948, -4012, 7205, -750, -1643, -1207, -4649, -3035, };
const TfArray<1, int> tensor_dimension14 = { 1, { 96 } };
const TfArray<96, float> quant14_scale = { 96, { 0.00020779369515366852, 0.00017780481721274555, 0.00012262421660125256, 0.00013158511137589812, 0.00035551944165490568, 0.00035183943691663444, 0.00026366469683125615, 0.00016164204862434417, 0.00029263331089168787, 0.00017924947314895689, 0.00011897040531039238, 0.00023783193319104612, 0.00027279852656647563, 0.00015532672114204615, 0.00011775385064538568, 0.0002056941157206893, 9.6536277851555496e-05, 0.00025928285322152078, 0.00019882259948644787, 9.5276176580227911e-05, 0.00018964703485835344, 0.00025438802549615502, 0.00017079083772841841, 0.00029179762350395322, 0.00041591943590901792, 0.00024644838413223624, 0.00027983501786366105, 0.00015975085261743516, 0.00025086465757340193, 0.00011331982386764139, 0.00035016570473089814, 0.00023681655875407159, 0.00022176164202392101, 0.00014927933807484806, 0.00029071027529425919, 0.00034228383447043598, 0.00020550117187667638, 0.00030395187786780298, 0.00044572853948920965, 0.0001134911144617945, 0.00023079177481122315, 0.00020811436115764081, 0.00026653378154151142, 0.00013883726205676794, 6.9552945205941796e-05, 0.00014708799426443875, 0.00022541085490956903, 9.724858682602644e-05, 0.00019902079657185823, 9.8239957878831774e-05, 0.00017982066492550075, 0.00017773246509023011, 0.00019917506142519414, 0.00017179528367705643, 0.00024672734434716403, 0.00020185562607366592, 0.00025828040088526905, 0.00026902224635705352, 0.0001808178931241855, 0.00011595234536798671, 0.00012324833369348198, 0.0002134776150342077, 0.00014276520232670009, 9.4194743724074215e-05, 0.00024731064331717789, 0.00030570881790481508, 0.00025345472386106849, 0.00028600468067452312, 0.00016977800987660885, 0.00014622196613345295, 0.00021779697271995246, 0.00010019223554991186, 0.0001253857190022245, 0.00020910582679789513, 0.00039242138154804707, 0.0001506723347119987, 0.00015725362754892558, 0.00015304861881304532, 0.00012604011863004416, 0.00029802040080539882, 0.00033146433997899294, 0.00013724980817642063, 0.00025538521003909409, 0.0002061213890556246, 8.7264830654021353e-05, 0.00018195361190009862, 0.0001176812220364809, 0.00014012445171829313, 0.00021142525656614453, 0.00028250381001271307, 0.00016060801863204688, 0.00030007874011062086, 0.00024875215603969991, 0.00038766532088629901, 0.00015481717127840966, 0.00034200274967588484, } };
const TfArray<96, int> quant14_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[96] = { 564, 211, 3767, 3653, 6832, -1653, 5206, -726, -3557, -596, 5416, -1615, 3234, 4760, 1963, 3358, -384, -249, -727, 6422, 2431, -1276, 3163, -792, -507, 4320, 1889, 1500, 3925, 2422, 4949, 1102, 1324, 4670, 3570, 3242, -512, 3127, 3203, -1885, 133, 880, -322, 2158, -838, 891, -1403, 906, -5973, 996, 677, -2962, 6260, -538, 1504, 1119, 1417, 1782, -846, -2515, 193, 958, 334, 5326, 4307, 2783, 4076, 3659, 3313, -806, 2981, 3751, 1366, -965, 5576, 5078, 1049, -3974, 379, 1143, 7307, 1065, -75, -2169, 620, 1001, 1721, -4375, 3053, -47, 4818, 744, -263, -2951, 53, 1119, };
const TfArray<1, int> tensor_dimension15 = { 1, { 96 } };
const TfArray<96, float> quant15_scale = { 96, { 0.00020823703380301595, 0.00035738645237870514, 0.00014621861919295043, 0.00018495677795726806, 0.00010303618910256773, 0.00018880816060118377, 0.00011987765901722014, 0.00024212409334722906, 0.00012860936112701893, 0.00032587265013717115, 0.00010950465366477147, 0.00024008059699553996, 0.00019325061293784529, 0.00011569928756216541, 0.00019612313190009445, 0.00014850393927190453, 0.00039612324326299131, 0.00025797361740842462, 0.00026572644128464162, 0.00010796279821079224, 0.00014344068767968565, 0.00014000591181684285, 0.00014012760948389769, 0.00016325524484273046, 0.00033949798671528697, 0.0001493432791903615, 0.00017170469800475985, 0.00028585302061401308, 0.00016314690583385527, 0.00020715498249046504, 0.00011949666077271104, 0.00025318533880636096, 0.00018131358956452459, 0.00015029344649519771, 0.00015501135203521699, 0.00013169007434044033, 0.00028179649962112308, 0.0001698293344816193, 0.00014023113180883229, 0.00026498877559788525, 0.00019473262364044785, 0.00018429363262839615, 0.00023778673494234681, 0.00017001329979393631, 0.00019772048108279705, 0.00018854031804949045, 0.00022966079995967448, 0.000219551264308393, 0.0001221055572386831, 0.0001915386674227193, 0.00024909782223403454, 0.00017978901450987905, 0.00012985820649191737, 0.00023163168225437403, 0.00021491822553798556, 0.00027452455833554268, 0.00015963884652592242, 0.00018209293193649501, 0.00024046048929449171, 0.00014187478518579155, 0.00024638426839374006, 0.00021006508904974908, 0.00030610064277425408, 0.00013895436131861061, 0.00017644435865804553, 0.00019532749138306826, 0.0001220429694512859, 0.00021336736972443759, 0.00019185259588994086, 0.00025207645376212895, 0.00018440783605910838, 0.00019988021813333035, 0.00029925559647381306, 0.00017648158245719969, 0.00011787722178269178, 0.00014689423551317304, 0.00015338888624683022, 0.00015727158461231738, 0.000149502870044671, 0.00012668232375290245, 0.00011628887295955792, 0.00019474083092063665, 0.00025701354024931788, 0.00019839884771499783, 0.00024595335707999766, 0.00019610856543295085, 0.00012515828711912036, 0.00010928027040790766, 0.00023469366715289652, 0.00015794455248396844, 0.00014142940926831216, 0.0002166845224564895, 0.00021608489623758942, 0.00011424276453908533, 0.00032085072598420084, 0.00018024179735220969, } };
const TfArray<96, int> quant15_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int8_t tensor_data16[16*3*3*1] = { 
  /* [0][0][][] */ -93, -118, -34, 
  /* [0][1][][] */ 65, -43, 14, 
  /* [0][2][][] */ 28, 127, 17, 
  /* [1][0][][] */ 101, -95, -12, 
  /* [1][1][][] */ -127, 100, 21, 
  /* [1][2][][] */ 11, -4, -14, 
  /* [2][0][][] */ -26, -5, -51, 
  /* [2][1][][] */ 34, 95, 127, 
  /* [2][2][][] */ -14, -98, -82, 
  /* [3][0][][] */ 121, 127, 58, 
  /* [3][1][][] */ 4, -19, -14, 
  /* [3][2][][] */ -98, -123, -43, 
  /* [4][0][][] */ 16, -65, 11, 
  /* [4][1][][] */ 18, -127, 13, 
  /* [4][2][][] */ 12, -81, -1, 
  /* [5][0][][] */ -66, 37, -8, 
  /* [5][1][][] */ -127, 39, -11, 
  /* [5][2][][] */ -88, 22, -15, 
  /* [6][0][][] */ -17, 80, 127, 
  /* [6][1][][] */ -49, 59, -12, 
  /* [6][2][][] */ -36, -49, -85, 
  /* [7][0][][] */ 30, 21, -22, 
  /* [7][1][][] */ 127, 80, -5, 
  /* [7][2][][] */ 45, 17, -10, 
  /* [8][0][][] */ -19, -28, 54, 
  /* [8][1][][] */ -52, -85, 127, 
  /* [8][2][][] */ -25, -60, 95, 
  /* [9][0][][] */ -24, 56, -1, 
  /* [9][1][][] */ -17, 127, -3, 
  /* [9][2][][] */ -10, 82, 2, 
  /* [10][0][][] */ 22, 84, 10, 
  /* [10][1][][] */ -38, -127, -31, 
  /* [10][2][][] */ 10, 37, 15, 
  /* [11][0][][] */ 5, -21, 9, 
  /* [11][1][][] */ 64, -96, 35, 
  /* [11][2][][] */ -88, 127, -47, 
  /* [12][0][][] */ -39, 53, -7, 
  /* [12][1][][] */ -127, 119, 7, 
  /* [12][2][][] */ -80, 81, 5, 
  /* [13][0][][] */ 40, -5, -7, 
  /* [13][1][][] */ 104, 92, 2, 
  /* [13][2][][] */ 90, 127, 64, 
  /* [14][0][][] */ -32, -29, 45, 
  /* [14][1][][] */ 41, 95, -127, 
  /* [14][2][][] */ -18, -71, 77, 
  /* [15][0][][] */ -82, -45, 16, 
  /* [15][1][][] */ -92, -127, 11, 
  /* [15][2][][] */ -15, -81, -15, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant16_scale = { 16, { 0.035320546478033066, 0.088563621044158936, 0.037762969732284546, 0.027829853817820549, 0.0060987495817244053, 0.0066646630875766277, 0.023117348551750183, 0.0059060412459075451, 0.028395522385835648, 0.0069811851717531681, 0.063244499266147614, 0.061688359826803207, 0.037954248487949371, 0.0039581283926963806, 0.067070536315441132, 0.0095199793577194214, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int8_t tensor_data17[8*1*1*16] = { 
  /* [0][0][][] */ -6,-9,-27,-67,-34,-37,13,-24,34,4,-19,-3,101,127,-14,-111, 
  /* [1][0][][] */ 127,-55,-42,22,-52,79,-78,-45,-33,92,-42,-47,2,8,-61,-27, 
  /* [2][0][][] */ -32,-100,39,48,48,-43,-74,-16,33,-72,33,-127,41,-14,-78,21, 
  /* [3][0][][] */ 41,5,20,11,-7,62,-51,-24,127,37,3,15,7,-14,7,20, 
  /* [4][0][][] */ -99,-30,-32,-122,-19,45,60,-107,35,-11,-46,-31,-127,37,-38,-34, 
  /* [5][0][][] */ 83,54,60,-38,45,-53,-118,-127,-18,-82,59,52,-53,42,65,-39, 
  /* [6][0][][] */ 99,43,-127,-59,22,-61,-7,-96,-28,28,-121,91,98,-76,5,58, 
  /* [7][0][][] */ -127,2,99,-37,-52,1,5,-61,-54,56,78,-23,53,-28,31,32, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant17_scale = { 8, { 0.0082087861374020576, 0.0088728358969092369, 0.008075077086687088, 0.0093659646809101105, 0.0076069110073149204, 0.0079238815233111382, 0.0073555354028940201, 0.010861282236874104, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int8_t tensor_data18[48*1*1*8] = { 
  /* [0][0][][] */ -30,34,3,-18,-79,-26,-127,29, 
  /* [1][0][][] */ 70,-74,-59,-61,127,-69,95,11, 
  /* [2][0][][] */ -99,127,-42,-96,31,-12,-22,32, 
  /* [3][0][][] */ 28,22,69,-5,64,127,114,8, 
  /* [4][0][][] */ -86,-127,74,-6,-48,-123,-23,-27, 
  /* [5][0][][] */ 127,-27,49,54,-62,7,9,-30, 
  /* [6][0][][] */ 30,32,127,-23,39,-37,-50,26, 
  /* [7][0][][] */ 30,4,-127,-34,-49,107,118,-84, 
  /* [8][0][][] */ -7,127,-59,7,54,92,65,51, 
  /* [9][0][][] */ -38,113,-77,48,44,-127,35,97, 
  /* [10][0][][] */ -12,-105,5,-37,-61,-127,-68,-85, 
  /* [11][0][][] */ -127,-74,107,48,-5,-68,93,63, 
  /* [12][0][][] */ -21,55,-127,88,40,-57,-76,90, 
  /* [13][0][][] */ 87,-127,110,93,1,29,49,-76, 
  /* [14][0][][] */ -41,106,-39,-123,-58,-127,-23,-82, 
  /* [15][0][][] */ 53,116,22,-17,40,-53,81,-127, 
  /* [16][0][][] */ -98,-127,-39,92,-62,-3,-27,72, 
  /* [17][0][][] */ -15,-127,-111,70,-47,89,-56,54, 
  /* [18][0][][] */ -111,-68,-33,77,-24,77,-21,127, 
  /* [19][0][][] */ 42,-104,82,-127,18,-65,10,-37, 
  /* [20][0][][] */ 4,65,28,23,31,127,78,-25, 
  /* [21][0][][] */ 36,120,45,-27,33,-74,91,-127, 
  /* [22][0][][] */ 33,20,113,14,-6,127,28,-46, 
  /* [23][0][][] */ -91,-75,20,-60,80,102,-43,-127, 
  /* [24][0][][] */ -100,-80,36,-71,96,100,-38,-127, 
  /* [25][0][][] */ 127,-4,-65,-19,14,44,-56,-7, 
  /* [26][0][][] */ -127,-25,-115,-12,-56,-34,18,10, 
  /* [27][0][][] */ 87,35,-8,-55,-127,-14,100,87, 
  /* [28][0][][] */ -101,-88,-2,30,-52,-127,-4,-11, 
  /* [29][0][][] */ 127,97,68,-114,15,16,-62,-104, 
  /* [30][0][][] */ -93,-72,19,-70,76,82,-62,-127, 
  /* [31][0][][] */ 50,51,-13,127,0,-69,-1,5, 
  /* [32][0][][] */ -35,127,4,38,37,59,-9,50, 
  /* [33][0][][] */ -40,127,-90,28,22,-20,-29,9, 
  /* [34][0][][] */ -117,-127,-41,111,-13,10,13,123, 
  /* [35][0][][] */ -62,127,-42,-11,78,115,69,64, 
  /* [36][0][][] */ 79,24,-1,-49,-127,-34,119,103, 
  /* [37][0][][] */ -73,105,32,12,-122,127,-28,-95, 
  /* [38][0][][] */ 39,23,28,6,127,59,93,45, 
  /* [39][0][][] */ -31,-86,25,-26,21,53,-103,127, 
  /* [40][0][][] */ -64,-54,-61,127,-31,11,7,75, 
  /* [41][0][][] */ 127,20,72,125,-39,-26,-22,-30, 
  /* [42][0][][] */ -38,2,-87,-127,46,-115,-1,93, 
  /* [43][0][][] */ 35,-8,92,4,34,127,98,6, 
  /* [44][0][][] */ -22,-33,-64,127,43,12,-38,-43, 
  /* [45][0][][] */ 57,99,86,-127,55,-44,32,-120, 
  /* [46][0][][] */ -41,-121,-41,29,3,47,-58,127, 
  /* [47][0][][] */ 33,51,118,-2,115,127,125,-34, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant18_scale = { 48, { 0.0047203321009874344, 0.0045549515634775162, 0.0037025981582701206, 0.0035504524130374193, 0.00069155596429482102, 0.0041569746099412441, 0.0047947494313120842, 0.0015327231958508492, 0.0037198560312390327, 0.0050833374261856079, 0.0035710686352103949, 0.0040538674220442772, 0.0023440199438482523, 0.0035679033026099205, 0.002760313218459487, 0.0031304778531193733, 0.0023419370409101248, 0.00077409727964550257, 0.0026277860160917044, 0.0041104191914200783, 0.0045336228795349598, 0.0016696671955287457, 0.0045753638260066509, 0.0028539218474179506, 0.0044400361366569996, 0.0099068498238921165, 0.0030910607893019915, 0.0086243217810988426, 0.0029799113981425762, 0.00055151781998574734, 0.0031420150771737099, 0.0060960594564676285, 0.0043581351637840271, 0.0039274548180401325, 0.0030854148790240288, 0.0037568311672657728, 0.0044517600908875465, 0.0063661504536867142, 0.0041199787519872189, 0.0046649710275232792, 0.0033843033015727997, 0.0027897318359464407, 0.0034401370212435722, 0.004148291889578104, 0.0041283303871750832, 0.0026089397724717855, 0.0026791451964527369, 0.0032053517643362284, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int8_t tensor_data19[8*1*1*48] = { 
  /* [0][0][][] */ -47,-3,34,17,-35,-9,17,16,-42,-9,-57,-56,-27,-55,-8,-28,43,-42,38,37,-6,29,-44,16,8,-32,50,-19,4,-12,10,6,74,38,45,-127,26,1,-18,-36,1,-14,41,54,36,10,29,8, 
  /* [1][0][][] */ 1,46,66,-30,-14,52,-63,-30,-3,27,-17,-97,3,96,-16,51,-19,24,-32,-45,-1,-74,-32,14,-66,-19,-9,-103,-27,-21,37,-45,41,85,-25,-2,127,-27,-3,53,-29,42,-88,-29,107,-16,-37,-26, 
  /* [2][0][][] */ 8,-29,-61,16,4,46,17,-9,-8,58,-4,36,56,-88,18,-54,24,-93,21,27,-28,49,-11,29,-26,53,-24,-76,18,1,25,-69,-45,-89,47,-31,112,28,-12,-58,-8,31,73,27,127,22,17,27, 
  /* [3][0][][] */ -15,36,-61,41,20,-43,-67,-99,15,-31,-39,-10,5,32,33,71,-14,24,-29,32,-7,-93,29,-56,-62,-9,127,-15,-38,9,-74,6,-7,-76,14,-12,-21,-41,-18,99,-47,-40,-11,18,40,6,-39,47, 
  /* [4][0][][] */ -17,-44,-3,9,27,-20,-18,-6,20,-23,50,-75,4,27,9,14,-11,-26,5,-16,-10,-49,2,-14,9,-12,37,46,37,16,-15,31,-8,-5,4,-2,-61,79,35,-17,28,-17,-13,-18,-74,12,127,17, 
  /* [5][0][][] */ 45,-24,-4,11,21,-44,32,-127,30,-29,-11,107,-93,65,14,-63,-12,-84,24,-2,-34,58,-40,-50,-52,64,-31,2,-20,46,-50,-42,21,65,34,-18,-35,-8,-52,-50,9,-40,-58,-10,-38,55,76,17, 
  /* [6][0][][] */ 50,-25,21,-1,-32,-16,-30,24,-36,5,-33,127,-42,-34,-6,64,14,46,16,30,43,-87,-20,20,28,45,-63,8,12,-40,8,35,9,16,-15,4,16,6,5,-9,-3,-9,44,63,0,-40,81,-10, 
  /* [7][0][][] */ -35,17,0,70,28,41,7,41,17,-4,81,3,127,115,59,50,44,56,-30,17,37,-15,-85,-26,25,-10,-36,85,30,-31,-43,-8,53,3,35,-110,-81,41,42,68,-49,29,88,124,-74,-26,-123,69, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0092968689277768135, 0.0047699175775051117, 0.0060272132977843285, 0.00604990404099226, 0.0071451906114816666, 0.0075426888652145863, 0.0091908499598503113, 0.0047037596814334393, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 65,127,-73,-96,34,103,12,55, 
  /* [1][0][][] */ 85,-53,56,-127,-58,89,-84,-47, 
  /* [2][0][][] */ -24,127,109,40,94,16,61,17, 
  /* [3][0][][] */ 115,14,-79,67,2,-112,-127,-21, 
  /* [4][0][][] */ -50,36,-6,-54,-44,127,121,47, 
  /* [5][0][][] */ 38,56,-127,-68,51,54,21,-44, 
  /* [6][0][][] */ 7,127,43,70,55,3,-12,-83, 
  /* [7][0][][] */ 115,-33,-30,13,40,29,127,6, 
  /* [8][0][][] */ 60,122,60,112,127,50,81,-109, 
  /* [9][0][][] */ 43,126,-127,-95,33,72,-11,90, 
  /* [10][0][][] */ -76,-29,32,-38,-10,-21,-60,127, 
  /* [11][0][][] */ 19,-127,-114,-23,40,-5,53,-7, 
  /* [12][0][][] */ -14,-127,-127,-15,-97,34,-51,23, 
  /* [13][0][][] */ -4,2,-117,95,-127,-34,-8,-17, 
  /* [14][0][][] */ -49,-34,-127,-11,28,-14,-23,-50, 
  /* [15][0][][] */ 14,-74,-127,2,-96,-12,-12,-23, 
  /* [16][0][][] */ 127,-73,-19,51,-94,20,35,102, 
  /* [17][0][][] */ -23,98,127,-27,-42,-12,-38,-16, 
  /* [18][0][][] */ 1,-127,51,61,-15,-77,47,-77, 
  /* [19][0][][] */ 127,-36,-55,40,-84,7,38,109, 
  /* [20][0][][] */ -35,-127,87,70,-9,-97,5,-73, 
  /* [21][0][][] */ -1,-28,-2,-11,127,-19,49,16, 
  /* [22][0][][] */ -127,11,-80,36,28,41,-75,-97, 
  /* [23][0][][] */ -76,-55,47,-12,-72,118,127,-51, 
  /* [24][0][][] */ -17,32,12,-53,-10,103,127,19, 
  /* [25][0][][] */ -27,-77,-127,-29,-63,-26,-38,-55, 
  /* [26][0][][] */ -24,60,-28,127,-85,51,-56,-1, 
  /* [27][0][][] */ 7,-127,43,88,19,-66,-5,-115, 
  /* [28][0][][] */ 1,103,68,58,127,-11,39,-55, 
  /* [29][0][][] */ 99,-3,-42,-33,58,-127,-69,10, 
  /* [30][0][][] */ 9,-20,28,-127,4,-18,14,-10, 
  /* [31][0][][] */ 47,-50,-12,72,-21,33,15,127, 
  /* [32][0][][] */ -57,-46,11,-40,-57,127,61,65, 
  /* [33][0][][] */ -29,50,45,-56,37,127,-108,84, 
  /* [34][0][][] */ 37,127,-75,-92,29,72,-102,97, 
  /* [35][0][][] */ -2,-127,49,83,-11,-60,38,-94, 
  /* [36][0][][] */ -25,-21,-62,-1,-127,-61,-24,20, 
  /* [37][0][][] */ -60,-127,83,106,-36,-91,-29,-72, 
  /* [38][0][][] */ -76,16,50,-60,-127,-83,-51,62, 
  /* [39][0][][] */ 64,-126,114,79,-53,-55,-45,-127, 
  /* [40][0][][] */ -8,36,14,34,-127,-7,-55,-2, 
  /* [41][0][][] */ 98,127,-63,-103,53,23,-19,33, 
  /* [42][0][][] */ -16,-35,-22,11,127,9,36,24, 
  /* [43][0][][] */ 127,28,84,11,-79,-31,61,103, 
  /* [44][0][][] */ 41,26,-1,26,38,-110,-127,11, 
  /* [45][0][][] */ 48,12,33,30,99,-127,-15,-50, 
  /* [46][0][][] */ 58,-23,-3,127,42,45,9,55, 
  /* [47][0][][] */ -127,-81,67,101,-37,22,124,-79, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0028466226067394018, 0.0032233984675258398, 0.0011626470368355513, 0.0031844095792621374, 0.0028319181874394417, 0.0040246769785881042, 0.0021573363337665796, 0.00057944998843595386, 0.0019452244741842151, 0.0031998800113797188, 0.00205279141664505, 0.0027257427573204041, 0.00079811934847384691, 0.0033124673645943403, 0.0034314191434532404, 0.0015009538037702441, 0.0067060096189379692, 0.0027723377570509911, 0.004644347820430994, 0.0047135539352893829, 0.0030433591455221176, 0.0025725292507559061, 0.0053276973776519299, 0.00066353683359920979, 0.0026425370015203953, 0.0028860385064035654, 0.00085286761168390512, 0.0036057163961231709, 0.0022990342695266008, 0.0026233589742332697, 0.0057726153172552586, 0.0061234366148710251, 0.0037366310134530067, 0.0038895974867045879, 0.003738772589713335, 0.0040001985616981983, 0.0030485070310533047, 0.0042440071702003479, 0.0023737824521958828, 0.0026399211492389441, 0.0023633518721908331, 0.0041511659510433674, 0.0028738540131598711, 0.0023279697634279728, 0.0030586451757699251, 0.0022955241147428751, 0.0049600065685808659, 0.0022057597525417805, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -37,-59,-19,-62,5,-19,75,76,-95,-74,-31,11,-44,-10,-66,34,-91,8,3,127,47,-15,18,98,72,84,37,-2,-94,-61,-64,-49,-51,99,38,-45,18,-41,93,-6,18,24,12,-99,31,-33,-28,-93, 
  /* [1][0][][] */ -16,75,-26,-31,-82,55,-24,-40,-39,76,-30,34,64,34,-69,0,-28,-127,76,-58,126,-2,-54,35,69,-9,-85,69,49,-17,83,47,-35,-21,23,-13,-8,112,2,-32,62,47,7,10,127,12,-38,66, 
  /* [2][0][][] */ -27,-24,117,-4,85,-37,-14,14,-33,7,-18,63,20,-41,-55,-127,-49,-100,-38,23,-115,13,-32,-25,-52,29,-8,-56,-49,1,-37,-7,-7,-4,37,-8,14,-46,-46,10,28,-40,36,-39,-46,-54,-69,-56, 
  /* [3][0][][] */ 62,11,51,2,27,-34,25,57,-42,-14,31,-39,-91,58,-18,64,59,40,-53,52,-127,-55,114,-20,7,12,-69,-51,-58,68,100,-58,-3,-96,-11,41,-9,-99,-12,96,-63,-50,62,2,-100,-64,54,-28, 
  /* [4][0][][] */ 20,-12,77,-35,2,-19,0,12,-67,-3,-25,21,61,-77,32,-99,50,46,-13,-33,7,27,30,20,6,13,72,-21,27,17,-127,-11,-33,-25,17,12,36,-10,42,-4,-52,-18,-67,34,-19,-115,-3,21, 
  /* [5][0][][] */ 12,-58,74,30,48,5,16,-17,-80,-11,-57,23,32,-5,7,-55,95,92,1,-23,102,-56,127,-99,-18,50,-6,60,16,25,-49,-60,-25,-42,-57,25,56,42,65,17,-72,35,46,18,71,-4,86,2, 
  /* [6][0][][] */ -44,44,-115,95,68,17,22,17,-21,3,74,-62,-76,-25,-25,46,-115,37,-2,76,30,58,-87,-91,8,-8,15,81,-28,-26,-47,3,35,82,-48,-23,0,-4,62,18,89,67,-111,-58,-25,127,-56,-35, 
  /* [7][0][][] */ 34,80,-78,1,6,69,119,72,38,67,-81,14,-39,20,-45,-53,29,28,125,109,75,-16,127,33,92,96,-24,72,-83,14,19,-59,22,-68,2,21,-18,96,-48,80,-78,25,-1,-62,54,-39,37,-31, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0036353473551571369, 0.0028929105028510094, 0.0046515492722392082, 0.0029378219041973352, 0.0050432025454938412, 0.004007403738796711, 0.003527109744027257, 0.0036567456554621458, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int8_t tensor_data22[48*1*1*8] = { 
  /* [0][0][][] */ 60,12,127,-31,58,81,-52,-61, 
  /* [1][0][][] */ 22,-91,-127,1,53,22,48,15, 
  /* [2][0][][] */ -127,-7,-61,-21,42,14,-76,-61, 
  /* [3][0][][] */ 35,84,127,-72,-12,-120,-16,-8, 
  /* [4][0][][] */ -127,12,-67,-20,52,4,-38,-77, 
  /* [5][0][][] */ -108,43,-52,-14,19,41,-84,-127, 
  /* [6][0][][] */ -24,-127,-122,43,91,12,0,50, 
  /* [7][0][][] */ -59,-127,-75,-77,-58,-47,9,89, 
  /* [8][0][][] */ 118,40,-29,-12,115,-98,-127,22, 
  /* [9][0][][] */ -29,46,-70,87,-69,-48,127,-19, 
  /* [10][0][][] */ -26,127,34,49,100,-28,3,55, 
  /* [11][0][][] */ -92,-31,-30,-29,-102,96,127,4, 
  /* [12][0][][] */ 67,32,-127,38,-2,-30,-58,-21, 
  /* [13][0][][] */ 64,-45,-73,11,2,-127,-31,-37, 
  /* [14][0][][] */ 23,-88,72,-2,123,-127,-49,16, 
  /* [15][0][][] */ -20,-42,-5,127,50,58,-77,16, 
  /* [16][0][][] */ 127,16,-54,7,70,-124,-112,-43, 
  /* [17][0][][] */ 68,127,69,77,45,66,36,-100, 
  /* [18][0][][] */ 15,8,9,12,127,11,5,-4, 
  /* [19][0][][] */ 2,127,40,2,-104,15,33,-37, 
  /* [20][0][][] */ -62,11,51,-127,30,32,-5,86, 
  /* [21][0][][] */ -53,58,14,-127,34,22,5,79, 
  /* [22][0][][] */ -65,-45,-77,1,-127,78,109,-18, 
  /* [23][0][][] */ 82,48,-127,28,20,-36,-80,-11, 
  /* [24][0][][] */ -54,41,-8,22,-24,61,-127,92, 
  /* [25][0][][] */ -114,-75,-127,16,-65,-67,61,115, 
  /* [26][0][][] */ 57,-3,-47,-39,113,-22,127,-30, 
  /* [27][0][][] */ 127,-45,28,75,5,18,-20,89, 
  /* [28][0][][] */ 52,35,33,9,127,-58,61,-42, 
  /* [29][0][][] */ -2,-11,-22,-32,-53,3,127,-44, 
  /* [30][0][][] */ 32,-127,-49,-92,-103,-27,31,-53, 
  /* [31][0][][] */ 14,19,-12,-22,-127,-6,-18,-18, 
  /* [32][0][][] */ 47,-51,-69,80,-9,-104,123,-127, 
  /* [33][0][][] */ 74,127,29,63,73,-36,-13,-28, 
  /* [34][0][][] */ -127,-23,99,6,-32,102,90,-1, 
  /* [35][0][][] */ -45,87,127,-6,-78,-61,-46,23, 
  /* [36][0][][] */ -110,-12,127,-25,-30,127,95,8, 
  /* [37][0][][] */ -11,-105,-12,-127,-27,-98,55,36, 
  /* [38][0][][] */ 58,-22,96,-62,51,59,-127,7, 
  /* [39][0][][] */ -28,75,-127,-72,-12,-13,22,114, 
  /* [40][0][][] */ 82,-71,7,43,13,-2,21,127, 
  /* [41][0][][] */ -13,66,127,-27,-13,55,-53,43, 
  /* [42][0][][] */ 44,-103,-90,-43,-127,-10,38,-104, 
  /* [43][0][][] */ -19,-73,37,-80,127,-53,20,51, 
  /* [44][0][][] */ -14,114,127,-6,5,69,-44,2, 
  /* [45][0][][] */ -33,43,-1,89,-111,51,-127,16, 
  /* [46][0][][] */ -38,-64,53,75,-125,-127,-56,-22, 
  /* [47][0][][] */ -29,77,29,-127,-108,11,-9,69, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0025753134395927191, 0.0028405822813510895, 0.0035569060128182173, 0.0022923287469893694, 0.0021889056079089642, 0.002509277081117034, 0.0017214356921613216, 0.0020712590776383877, 0.0031091582495719194, 0.0034348743502050638, 0.0033559808507561684, 0.0022664912976324558, 0.0038749994710087776, 0.0037495926953852177, 0.0030307192355394363, 0.0022746636532247066, 0.0032294224947690964, 0.0019740192219614983, 0.0020546773448586464, 0.0034720983821898699, 0.0032166410237550735, 0.0024120749440044165, 0.0028637801297008991, 0.0021519025322049856, 0.0024781329557299614, 0.0021164263598620892, 0.0028330809436738491, 0.004219746682792902, 0.0013722601579502225, 0.0051189865916967392, 0.0028152591548860073, 0.001906606019474566, 0.0022411688696593046, 0.0019987050909548998, 0.0036387532018125057, 0.0023895036429166794, 0.0025542809162288904, 0.0026006922125816345, 0.0025194322224706411, 0.0020246752537786961, 0.00328444829210639, 0.001572874840348959, 0.0020886228885501623, 0.0027903488371521235, 0.0017245716881006956, 0.0023312054108828306, 0.002179526025429368, 0.0020799471531063318, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int8_t tensor_data23[16*1*1*48] = { 
  /* [0][0][][] */ 25,57,35,-27,79,53,-34,46,-21,127,-7,59,-29,30,-29,64,50,81,56,-53,-78,79,-20,50,79,58,55,60,-42,-40,6,76,-34,-8,-74,73,59,-121,-39,30,17,-39,45,0,-3,-62,-54,-2, 
  /* [1][0][][] */ -48,-14,-75,-56,22,86,-59,8,0,-38,-57,42,70,-2,-18,-35,-40,-41,-8,33,-81,58,-123,-57,-48,-37,35,65,-29,-18,49,-55,6,-75,-45,62,22,-48,127,-24,-12,21,-64,-5,45,47,37,29, 
  /* [2][0][][] */ -14,-6,48,-34,-18,-79,26,34,103,78,-65,5,97,-34,127,99,-90,-24,-32,19,97,-101,-25,-86,-3,-41,31,-84,55,39,-52,35,30,-24,81,27,-89,-1,7,-28,24,20,77,-19,31,-78,88,-74, 
  /* [3][0][][] */ 32,-2,-37,-19,23,111,23,-7,31,-49,30,-15,-53,4,5,55,-32,-63,48,-127,-2,-12,-12,-5,-46,79,119,64,-22,-51,22,48,63,-25,98,26,-43,-71,7,32,15,16,-2,-13,25,23,-16,-31, 
  /* [4][0][][] */ 112,-24,-1,-63,93,99,42,21,84,-27,-112,23,39,-14,27,-36,-113,-114,-50,-98,-36,35,-36,-37,-97,124,-124,127,-68,-66,23,76,48,-43,-2,-53,-2,23,-35,13,-38,-16,-1,52,-58,99,-45,-68, 
  /* [5][0][][] */ -12,-15,-58,6,-12,57,17,-15,65,48,35,79,38,-10,28,-9,-46,127,-29,33,5,3,-54,-4,30,10,-66,-38,-22,34,9,-20,-37,7,34,7,-52,-4,-83,13,82,-24,31,37,-23,5,-43,27, 
  /* [6][0][][] */ 72,25,23,76,12,-38,90,-62,20,66,116,108,52,35,-41,66,37,-51,-74,90,41,-54,-49,49,-71,83,99,-18,117,53,-15,-11,106,-56,-127,5,96,41,-11,9,16,55,46,-15,62,110,39,8, 
  /* [7][0][][] */ -82,-16,-13,14,-63,-69,29,42,95,107,-69,-85,-114,22,-8,-26,-90,85,-11,127,-61,55,26,28,-20,-104,-41,-96,23,50,-3,-5,-12,9,2,-4,16,-51,116,6,16,30,12,-4,59,56,-39,14, 
  /* [8][0][][] */ -22,-97,33,-71,61,-57,77,-43,-9,-120,27,-7,-47,8,53,19,-14,14,-24,101,5,28,-14,35,56,-2,-72,-23,-123,-29,-61,-111,11,-63,27,85,-21,42,127,28,5,9,88,127,-22,-61,-45,74, 
  /* [9][0][][] */ 31,-37,20,-58,40,98,-49,64,15,-45,-35,-23,37,-68,118,-23,13,-126,19,41,-71,40,67,-35,-35,-101,-44,94,82,77,-58,-21,-50,43,-9,127,-21,-59,-54,-36,-37,6,47,112,67,97,-79,7, 
  /* [10][0][][] */ -17,4,-33,-11,9,28,-60,-34,48,31,62,-14,-44,0,41,-46,-54,127,-1,42,-5,-7,30,35,-41,40,-3,87,29,-4,-40,-8,68,15,-3,15,-15,-56,-36,25,-85,9,40,-21,7,41,16,22, 
  /* [11][0][][] */ -48,38,-29,52,23,60,9,19,3,13,-120,-66,68,30,-17,-46,11,32,-58,-66,-6,-19,127,9,35,8,-22,33,-21,25,-13,65,24,3,-51,-16,36,77,115,11,27,-20,83,-9,-61,-6,83,-13, 
  /* [12][0][][] */ -74,10,23,9,-74,-53,-9,6,-37,-28,-127,8,69,-103,5,21,60,107,87,-109,-41,49,-40,-85,4,-16,48,-19,0,5,-29,62,75,87,34,-27,-54,-32,39,10,-36,16,57,-16,23,-21,-24,-29, 
  /* [13][0][][] */ -37,-99,-19,-74,4,7,44,24,-127,19,119,-47,43,18,104,26,117,6,-13,-93,87,-79,113,9,-60,-6,-11,-12,-50,-109,-121,33,61,-11,-72,63,45,-68,70,-67,-16,42,81,31,43,-39,100,-55, 
  /* [14][0][][] */ 74,-2,-44,-6,-52,7,-67,-38,-31,49,50,52,-5,-65,24,-36,40,-113,9,7,72,-52,20,-13,-1,119,-87,-13,-60,-21,-79,2,127,39,73,-26,-67,9,-35,49,-2,-46,109,-25,-51,-44,-50,51, 
  /* [15][0][][] */ -67,8,36,19,89,1,6,40,26,82,-25,42,39,-6,-44,-14,4,35,-2,-32,29,-30,-40,-39,65,-50,-32,63,-30,-8,11,11,-61,9,127,-7,-90,8,57,-2,-47,-14,15,-10,-39,-33,-17,6, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant23_scale = { 16, { 0.004712854977697134, 0.0058355731889605522, 0.0058628884144127369, 0.0057336324825882912, 0.0042711035348474979, 0.0054883696138858795, 0.0042076581157743931, 0.0048159011639654636, 0.0041311061941087246, 0.0029268641956150532, 0.0093579692766070366, 0.0068538831546902657, 0.0045104203745722771, 0.0035985193680971861, 0.0069693042896687984, 0.0051272697746753693, } };
const TfArray<16, int> quant23_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int8_t tensor_data24[96*1*1*16] = { 
  /* [0][0][][] */ 30,24,-14,56,-126,-12,127,51,55,126,-7,69,11,16,42,120, 
  /* [1][0][][] */ -7,49,-111,-14,127,104,-25,-3,-8,21,-48,55,-69,107,-44,-58, 
  /* [2][0][][] */ -49,53,58,-3,73,79,-2,47,40,-4,49,-11,38,-127,-16,15, 
  /* [3][0][][] */ 127,-8,35,-22,42,63,9,-6,38,36,-82,-49,-52,28,-65,30, 
  /* [4][0][][] */ -66,-28,30,49,-77,-24,-86,-27,-23,51,-19,-48,-21,32,-23,127, 
  /* [5][0][][] */ -56,18,-1,12,127,35,4,7,-21,21,-34,14,-63,28,-110,-28, 
  /* [6][0][][] */ -127,23,-18,16,4,-47,58,-1,-14,-6,-39,44,10,2,-54,12, 
  /* [7][0][][] */ -24,127,76,-98,107,36,117,-9,19,25,-24,55,55,8,-16,-17, 
  /* [8][0][][] */ -18,-24,-104,91,-76,66,-31,-49,20,-79,125,68,127,69,-88,44, 
  /* [9][0][][] */ -8,-127,-35,104,-58,-82,6,74,38,33,24,88,-60,32,13,-22, 
  /* [10][0][][] */ -67,-50,-124,86,-127,96,24,-46,-20,-65,94,-6,-1,116,-55,113, 
  /* [11][0][][] */ -4,-93,-54,-7,-40,68,26,15,39,-14,48,-79,17,101,-90,127, 
  /* [12][0][][] */ -7,-63,-86,103,-106,-127,33,67,50,41,-13,101,15,-38,-3,9, 
  /* [13][0][][] */ -75,-35,-21,-14,-2,10,30,9,-7,127,-22,-22,34,21,4,-22, 
  /* [14][0][][] */ -97,-2,-74,-60,-47,112,-1,-127,95,-65,104,-25,119,-30,-63,-61, 
  /* [15][0][][] */ -4,-127,79,-32,-46,-34,8,60,4,-56,-67,-25,67,-31,-24,-45, 
  /* [16][0][][] */ -51,-40,42,-30,45,17,-16,-25,61,-127,37,-19,-21,-5,-89,-116, 
  /* [17][0][][] */ -3,60,21,-112,79,22,-37,-14,125,-67,15,89,127,-112,-66,-110, 
  /* [18][0][][] */ 43,-14,-13,-115,26,2,123,-61,43,39,-23,42,13,50,-26,-127, 
  /* [19][0][][] */ -39,-14,-9,-49,-111,34,10,-23,26,-38,6,-127,-12,-31,-28,-15, 
  /* [20][0][][] */ 29,108,57,-127,75,18,-80,109,-94,-109,61,-71,-63,121,-39,1, 
  /* [21][0][][] */ 21,-65,-127,-35,52,38,87,57,-81,-56,-23,4,86,-66,-6,46, 
  /* [22][0][][] */ 74,-29,71,-1,-10,15,48,36,22,113,51,43,-9,8,127,11, 
  /* [23][0][][] */ -114,-44,-15,52,85,26,-8,-8,-23,34,5,-62,-14,40,57,127, 
  /* [24][0][][] */ 46,2,15,36,-12,-106,32,-72,15,90,-127,45,-12,-54,102,-30, 
  /* [25][0][][] */ 127,-74,105,74,67,-9,-30,57,-80,83,27,-57,-28,3,53,-30, 
  /* [26][0][][] */ -35,16,10,56,-54,127,-8,52,-76,-49,-94,26,8,24,49,-125, 
  /* [27][0][][] */ 23,-24,4,-58,-39,15,-66,0,-127,-20,-84,-59,-79,38,-37,127, 
  /* [28][0][][] */ -84,25,8,-23,40,15,-127,-20,-24,-14,15,9,18,-32,-79,-23, 
  /* [29][0][][] */ -34,-90,-38,92,-28,0,127,15,59,43,-97,44,35,-20,-43,78, 
  /* [30][0][][] */ 53,-36,-80,-23,-127,58,104,-69,-4,11,10,-1,1,61,-31,69, 
  /* [31][0][][] */ -103,-43,-11,127,-64,-18,-78,19,-28,-80,23,-19,-12,-34,7,108, 
  /* [32][0][][] */ -127,-64,-111,9,-113,-48,18,-33,101,41,-22,-74,54,61,46,0, 
  /* [33][0][][] */ -22,15,-66,32,-111,-83,69,-24,-127,16,-66,-70,-29,91,81,78, 
  /* [34][0][][] */ 42,77,-12,43,-75,-55,1,8,46,-127,-27,22,-4,-7,26,70, 
  /* [35][0][][] */ 71,15,-93,-38,-127,32,66,-52,50,72,-4,9,9,50,40,52, 
  /* [36][0][][] */ -20,17,-67,29,127,0,55,44,-54,22,-80,-69,14,-35,-11,17, 
  /* [37][0][][] */ -127,77,5,-87,15,-95,-19,-63,-28,-43,-29,41,87,-55,31,-115, 
  /* [38][0][][] */ 22,125,53,-86,-85,-47,-112,-73,-56,-54,35,46,-93,-127,68,-14, 
  /* [39][0][][] */ 30,-15,21,91,-9,65,125,-81,-16,22,-16,-55,-26,101,74,127, 
  /* [40][0][][] */ 127,100,111,85,-88,-57,40,-9,-93,69,-52,-62,-20,-72,108,-21, 
  /* [41][0][][] */ -9,1,9,62,-115,104,13,45,-74,36,-115,28,35,46,71,-127, 
  /* [42][0][][] */ -19,-118,-2,11,127,73,50,16,-3,-122,-88,-11,-47,-21,-17,21, 
  /* [43][0][][] */ -33,-116,-25,-12,127,37,-16,72,-42,-46,-120,-58,119,-26,-87,35, 
  /* [44][0][][] */ -12,-17,-94,-68,12,54,71,4,-52,-127,-39,80,-9,59,23,123, 
  /* [45][0][][] */ -28,-44,-95,7,-127,89,1,-76,53,-90,14,-79,-4,45,-72,79, 
  /* [46][0][][] */ 3,-49,5,-6,93,-86,-5,70,-19,-9,5,31,-68,-68,47,-127, 
  /* [47][0][][] */ -68,-58,-36,124,-38,-20,17,79,-3,127,114,122,-34,117,1,95, 
  /* [48][0][][] */ 29,-21,-67,-93,42,-52,-3,44,50,-61,-10,17,-67,-3,-48,-127, 
  /* [49][0][][] */ 37,43,21,16,3,5,45,22,-29,127,-41,30,-43,-36,65,57, 
  /* [50][0][][] */ 10,10,6,20,-127,-23,-6,-34,46,12,33,43,-15,-55,21,8, 
  /* [51][0][][] */ 28,9,8,-127,-18,77,25,-58,-4,28,20,-41,73,52,-5,18, 
  /* [52][0][][] */ 38,-7,5,-66,49,-116,-25,-52,40,8,127,-37,41,6,-7,76, 
  /* [53][0][][] */ -83,-39,75,-53,-15,-109,50,-122,-32,97,-127,70,-54,-27,1,-88, 
  /* [54][0][][] */ 108,57,56,-11,-127,-37,-80,-120,22,0,81,93,-35,-12,93,24, 
  /* [55][0][][] */ 36,-18,-32,93,-45,21,37,3,29,127,42,86,15,31,19,45, 
  /* [56][0][][] */ 65,-89,-110,61,-122,77,-1,42,127,-42,73,71,26,-36,10,97, 
  /* [57][0][][] */ 29,37,123,-108,108,16,-16,-25,68,-11,8,127,48,-75,100,-67, 
  /* [58][0][][] */ 83,-37,-22,-106,30,37,-9,127,95,75,23,107,69,-1,57,-19, 
  /* [59][0][][] */ -63,52,58,-60,20,-53,10,-16,23,34,-114,-72,-127,-63,37,-34, 
  /* [60][0][][] */ 54,-6,10,-11,-1,-11,31,-74,21,127,-27,49,7,-52,-35,-46, 
  /* [61][0][][] */ 65,40,17,2,-94,-127,0,-37,-45,-35,-17,-12,-45,-34,71,91, 
  /* [62][0][][] */ -15,91,-63,56,-88,127,-46,37,-80,-7,-35,45,-38,59,72,-92, 
  /* [63][0][][] */ 11,-18,-61,-127,-34,-30,71,-25,-17,-65,-6,53,-27,87,19,-42, 
  /* [64][0][][] */ -71,27,-7,-36,62,-46,32,74,-127,3,-62,-46,-39,100,38,59, 
  /* [65][0][][] */ -42,-7,-44,0,30,13,-33,-51,-127,-58,7,-32,-109,85,-39,49, 
  /* [66][0][][] */ 2,43,-11,30,-29,127,-30,16,-46,25,-3,57,-30,46,46,-72, 
  /* [67][0][][] */ -7,-2,-57,-63,-6,-46,94,-127,-6,16,0,83,-28,-21,-57,-108, 
  /* [68][0][][] */ 11,-127,-35,87,-4,22,17,78,66,52,76,38,-74,20,-38,-38, 
  /* [69][0][][] */ -28,115,38,-127,73,29,-8,72,5,76,35,44,72,-103,-14,-96, 
  /* [70][0][][] */ 22,36,33,-9,73,2,-71,-48,-127,-90,3,24,-15,75,-103,11, 
  /* [71][0][][] */ 11,-57,59,-41,96,-13,48,-2,-127,93,-104,-53,17,81,8,76, 
  /* [72][0][][] */ 43,39,44,7,-96,-28,-92,-81,-20,49,-28,32,56,127,-105,7, 
  /* [73][0][][] */ 15,-56,-28,-24,25,-105,42,-30,57,69,111,0,33,-5,-46,127, 
  /* [74][0][][] */ -8,-16,-44,87,-54,-8,65,46,62,80,54,127,104,23,-54,21, 
  /* [75][0][][] */ -34,24,-15,47,-54,127,-5,33,-52,21,-51,32,-15,62,43,-57, 
  /* [76][0][][] */ -69,117,-80,56,-124,-14,-2,55,42,54,-28,-24,33,-43,-127,63, 
  /* [77][0][][] */ 118,96,-72,127,33,37,81,14,15,-20,64,-47,89,33,69,37, 
  /* [78][0][][] */ 24,-11,-11,-49,57,-118,35,-47,35,54,126,-15,15,-8,-35,127, 
  /* [79][0][][] */ -26,62,10,8,-15,-34,-23,-18,-127,8,43,4,125,55,-81,-59, 
  /* [80][0][][] */ -66,44,33,10,22,44,23,-127,-81,31,-28,-46,20,-47,26,70, 
  /* [81][0][][] */ 59,47,-9,-25,51,-26,89,120,-73,127,-67,-37,-45,33,118,93, 
  /* [82][0][][] */ 23,74,-11,-91,9,-23,127,-125,6,46,-93,79,117,-22,48,-81, 
  /* [83][0][][] */ 1,-23,7,14,-22,40,-20,-127,64,-37,115,-7,57,-88,-48,-124, 
  /* [84][0][][] */ -107,-80,-63,-6,-23,85,107,19,78,56,124,127,80,109,-64,25, 
  /* [85][0][][] */ 120,-5,67,-47,44,-34,12,93,-10,84,-37,23,-17,74,127,36, 
  /* [86][0][][] */ -81,87,-15,-33,46,87,15,8,114,61,127,-15,-26,46,-12,-48, 
  /* [87][0][][] */ 3,-66,12,-34,37,-127,28,-25,36,-18,74,-35,42,-31,-21,77, 
  /* [88][0][][] */ -73,72,22,-25,100,-31,15,18,-34,-47,98,-65,57,112,108,-127, 
  /* [89][0][][] */ -33,30,-2,15,-22,127,-24,16,-30,18,-44,22,-6,41,15,-86, 
  /* [90][0][][] */ 30,-54,6,33,127,2,29,38,-18,-89,-109,0,-16,-18,-80,53, 
  /* [91][0][][] */ -37,78,-5,-38,22,-61,-71,22,-72,38,-88,-127,-107,-60,2,24, 
  /* [92][0][][] */ 51,57,105,41,-127,-79,28,-21,-43,43,-48,-35,0,-99,27,-12, 
  /* [93][0][][] */ 27,-88,-127,68,-76,-86,18,100,76,30,9,35,-24,79,-8,-14, 
  /* [94][0][][] */ 64,1,127,-34,42,-10,-5,46,43,96,13,71,-3,-15,85,-25, 
  /* [95][0][][] */ -48,-35,-2,-13,127,-25,54,57,-43,-1,-117,-81,39,7,-48,46, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant24_scale = { 96, { 0.002966027008369565, 0.0016244861762970686, 0.0033499184064567089, 0.0045781740918755531, 0.0027111158706247807, 0.00097766402177512646, 0.0057352408766746521, 0.0030748825520277023, 0.0011202611494809389, 0.0028201374225318432, 0.00092908670194447041, 0.002678403165191412, 0.0039066090248525143, 0.0045686578378081322, 0.0016118130879476666, 0.0032381277997046709, 0.0033632901031523943, 0.0016631161561235785, 0.0031072839628905058, 0.0013823339249938726, 0.0038770830724388361, 0.0027379035018384457, 0.0033738855272531509, 0.0033610567916184664, 0.0018629052210599184, 0.0028364628087729216, 0.0030152990948408842, 0.003459797240793705, 0.0017757280729711056, 0.0036879966501146555, 0.0020617414265871048, 0.0025679764803498983, 0.0043413201346993446, 0.0011093153152614832, 0.002665764419361949, 0.0024720632936805487, 0.0027042161673307419, 0.0027698148041963577, 0.0022163011599332094, 0.0021170361433178186, 0.00063022912945598364, 0.0032603444997221231, 0.0030563792679458857, 0.0025444135535508394, 0.0033979760482907295, 0.0013839162420481443, 0.001964387483894825, 0.0012934181140735745, 0.003187880152836442, 0.0045623155310750008, 0.0044685392640531063, 0.0031542510259896517, 0.0035725114867091179, 0.0023111097980290651, 0.0016284798039123416, 0.0036534569226205349, 0.0019272449426352978, 0.0014332166174426675, 0.0024246531538665295, 0.0021802012342959642, 0.0043157464824616909, 0.0016410078387707472, 0.003182518994435668, 0.0043033286929130554, 0.00080141949001699686, 0.0022598765790462494, 0.0049851778894662857, 0.0027665735688060522, 0.0021073045209050179, 0.0017067634034901857, 0.0057077491655945778, 0.0025607806164771318, 0.002615287434309721, 0.0030706911347806454, 0.0031791422516107559, 0.0045244400389492512, 0.0031836305279284716, 0.0017687326762825251, 0.002941822400316596, 0.0026951602194458246, 0.0047522662207484245, 0.0028457213193178177, 0.0021730284206569195, 0.0010677857790142298, 0.0022072182036936283, 0.0020197508856654167, 0.0016341992886736989, 0.004644505213946104, 0.0039792833849787712, 0.0045218127779662609, 0.0034487664233893156, 0.0012030198704451323, 0.0026300377212464809, 0.0032529495656490326, 0.0023309581447392702, 0.0019878032617270947, } };
const TfArray<96, int> quant24_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int8_t tensor_data25[16*1*1*96] = { 
  /* [0][0][][] */ 9,44,20,15,-19,-94,0,-13,-11,-92,14,4,70,-50,40,48,-86,-14,55,28,98,39,-57,38,1,87,121,91,26,90,67,-22,-1,20,26,-8,52,45,-17,-18,111,12,32,-31,7,-4,12,-50,15,-17,104,20,-55,21,54,12,4,-50,23,14,-13,53,-67,-24,11,12,76,36,16,-13,29,42,12,16,16,12,57,-41,52,11,-22,54,30,42,-50,-5,18,61,9,25,-82,-32,39,-2,127,86, 
  /* [1][0][][] */ 29,54,-35,-25,-6,-56,72,-78,-41,-48,-43,-58,-5,-53,-18,-64,-7,-5,-27,-15,-21,-70,112,-17,6,37,13,46,-41,-11,-48,23,-10,11,3,-12,-23,51,-64,93,3,27,6,-28,48,-55,-28,27,-64,2,43,-106,-12,25,49,50,48,31,-39,-4,-44,15,2,3,52,32,99,2,-22,-127,5,13,6,45,-30,23,-32,-4,104,-12,61,-33,70,-40,-23,-66,-24,10,-2,-24,17,-1,58,-60,-26,66, 
  /* [2][0][][] */ 4,-15,8,0,70,57,-38,30,-41,71,24,-23,44,4,13,34,8,-20,-127,-10,-4,-53,-15,7,-4,-36,-67,31,-19,-2,-11,58,-7,-26,-13,25,-46,38,-11,-30,71,28,10,28,22,72,23,22,-94,10,-18,26,-15,53,26,-47,35,24,21,34,-32,-22,-15,44,30,-8,-50,8,-9,8,-19,-54,8,56,40,71,-70,-23,-40,-43,21,49,39,-3,-4,-26,-14,-45,-25,-25,-10,88,-26,-8,107,-49, 
  /* [3][0][][] */ 28,-48,-30,-95,-24,-22,127,-15,40,117,-87,-23,13,-2,-15,81,41,65,-22,24,-36,45,38,25,-30,64,33,14,-40,3,-54,86,-11,0,48,-27,22,-36,-15,45,27,12,-21,13,73,-36,11,35,30,-10,43,-21,106,63,47,-13,-13,-39,14,-48,-32,56,77,-18,-31,-15,104,-28,-38,1,-57,40,21,-86,19,-82,11,-59,104,-17,-18,-47,-49,-53,-33,-48,95,84,-54,57,-49,7,-8,-65,-2,55, 
  /* [4][0][][] */ -26,70,39,14,11,22,-49,-18,1,-36,11,2,39,31,-31,9,-11,-67,-16,-100,45,-54,-66,0,-31,-41,-21,29,-64,127,-56,-35,17,-54,-20,-46,61,20,-26,18,-5,20,34,-37,-65,-17,60,-37,39,-31,-88,-32,-60,31,38,16,-3,59,-37,3,-33,-88,-14,4,38,12,-79,-7,6,-11,14,-82,-31,60,63,69,-29,29,-75,53,14,80,12,-67,30,-72,-52,-74,-40,-36,-62,-19,-14,5,25,-38, 
  /* [5][0][][] */ -17,-22,26,-6,-26,-12,-27,17,41,21,-23,-13,-34,-31,41,-34,-27,2,-69,-48,-12,8,-5,2,8,-58,56,-8,-16,35,25,95,-7,-76,32,-6,-24,-33,-21,-12,-60,7,-41,28,17,18,-62,21,-31,27,58,4,21,-91,-4,24,-38,-71,11,-50,54,29,13,35,-50,1,103,-36,-16,-13,25,8,-15,42,47,21,-20,-29,127,30,-33,-1,-44,16,51,67,16,112,-10,-49,-21,8,3,-21,-43,9, 
  /* [6][0][][] */ 36,-39,58,0,-63,101,-28,-104,-37,-95,-66,52,-11,32,-14,110,22,54,7,-46,-100,-2,-108,-87,16,-47,8,64,-108,73,-28,-26,24,82,-29,6,17,-53,4,-7,-39,23,8,-29,25,40,-109,-3,59,-6,-67,-127,96,23,-15,-43,28,-33,44,-18,-24,-26,7,12,81,-76,-59,-82,-103,6,2,-91,-15,-120,10,-122,89,25,-72,50,-17,73,32,-118,55,-60,5,13,-62,98,-94,99,55,-42,98,-99, 
  /* [7][0][][] */ 6,9,-35,52,-32,-15,15,6,-90,-9,89,63,16,-40,10,-25,5,-20,19,-9,-55,-9,-53,-36,54,50,7,65,-20,10,23,9,-55,-127,15,95,-5,21,-19,27,-10,-25,-3,-60,3,42,77,72,-20,21,-37,0,22,-23,20,-49,-27,55,-83,-13,40,25,15,-15,87,-54,88,-5,-45,-38,65,-4,-9,-36,-84,-20,14,-13,62,-38,-2,-20,-62,-19,24,0,-65,20,14,29,-3,7,40,-1,90,-3, 
  /* [8][0][][] */ 1,-49,19,1,-7,-12,25,-11,-19,-3,42,64,0,45,-17,-4,82,-13,5,-6,-23,-70,-35,-13,-41,-21,74,-10,-25,52,-5,-22,-20,-14,-17,7,-60,-22,9,-16,-7,36,26,-43,21,-16,18,7,55,-10,28,-9,-9,1,-35,1,-4,126,-52,-20,-25,-81,-64,4,-70,-43,-14,27,-9,0,21,-15,-27,-127,35,-99,15,19,-48,22,-12,-23,15,54,69,-62,-52,52,-35,82,21,-23,-48,1,7,-55, 
  /* [9][0][][] */ -30,-31,-31,24,8,22,14,31,-26,-1,58,47,-15,51,17,-31,-21,35,-10,-40,8,43,2,22,-5,19,5,23,14,3,19,-9,-6,-11,13,62,-25,1,26,-6,-21,-16,23,-5,21,30,1,23,-46,19,-9,28,127,26,-1,-4,30,-27,35,24,-19,2,76,5,3,17,58,14,42,2,-20,15,0,-115,-28,-111,-25,-9,33,-6,-12,34,-1,-25,39,8,-36,12,-8,108,33,38,40,21,-18,35, 
  /* [10][0][][] */ 29,45,29,-9,-14,13,-52,-14,61,11,-21,21,14,14,9,-63,-26,-15,5,-5,17,-1,-38,-32,16,-14,-95,37,-23,48,4,-10,6,8,-30,-10,18,-5,7,8,41,-17,47,-43,-32,5,26,28,31,-6,-1,-22,-20,-7,-20,40,-29,19,-21,-6,-13,-34,-7,8,-1,-15,-86,-18,-61,-25,41,-13,-11,27,22,15,38,-19,-85,20,-10,29,1,-4,-2,14,-76,-127,-17,31,16,17,53,-17,23,28, 
  /* [11][0][][] */ 18,-36,7,3,-42,44,-4,19,63,-3,-24,-20,23,13,26,-19,-28,26,17,-62,12,44,-6,-36,24,8,45,1,13,-54,-15,-5,-1,79,-99,-1,17,-11,69,-9,-54,30,-5,4,-46,16,9,6,41,-31,-38,-6,-20,10,-82,103,-36,19,-15,-30,37,-5,-13,-78,-13,-46,-127,-60,-20,-35,-80,34,44,27,-6,13,12,35,-108,-42,-29,0,-21,-5,-13,3,42,62,5,-39,5,9,-32,40,77,8, 
  /* [12][0][][] */ 10,17,-47,-30,29,-16,-7,43,37,-41,20,-5,-10,-27,5,3,1,-55,-5,-1,15,46,11,45,-47,-29,-124,-11,66,-39,42,-16,-12,-86,64,13,33,-29,10,28,-11,-73,28,46,35,-17,26,-36,-67,-9,-64,111,97,-7,22,-81,20,6,-27,-46,21,66,72,-2,-30,-37,39,10,125,21,38,33,-9,-28,-18,-4,-42,-68,58,-70,29,-46,28,-59,-13,1,5,-127,1,23,-53,9,11,61,1,24, 
  /* [13][0][][] */ -28,8,-91,38,25,28,8,19,37,80,-23,61,-37,-11,56,-41,0,67,80,25,-20,-57,2,19,60,33,-24,38,21,62,70,-22,-13,81,10,76,35,-32,-43,-67,16,-10,10,-3,60,59,-17,35,-62,47,19,20,-13,-42,88,47,17,-58,-26,-23,37,29,12,-43,3,84,127,25,37,13,-54,-21,41,63,-70,69,4,-90,123,-56,-29,-21,10,-7,38,69,-20,-31,-29,-15,11,63,29,20,60,40, 
  /* [14][0][][] */ -15,36,22,35,-51,-22,12,56,-49,0,76,20,-62,5,81,-27,-62,25,-44,35,-12,20,-87,-8,-49,-20,-70,-97,22,-6,44,67,-62,37,27,-4,-7,-50,13,-47,43,-39,29,-19,-12,60,-46,36,-20,-43,83,49,-18,35,-35,37,-57,38,-11,56,54,68,4,22,17,-39,-17,-47,18,65,82,15,-50,44,22,16,6,-26,17,11,-75,127,-14,-103,74,17,6,-11,-109,1,-21,-14,-23,5,28,44, 
  /* [15][0][][] */ 72,-22,31,10,23,-5,-17,-24,-1,7,-58,-16,47,38,-14,-8,0,10,-76,35,-9,-51,-6,12,57,-20,88,14,29,-28,-53,54,49,39,-6,-65,42,44,44,54,61,21,-31,11,-37,-118,20,-55,-17,-28,-4,-9,-1,-61,-25,19,-21,-6,7,-4,-15,-31,-40,34,34,26,-51,14,-6,-36,6,5,-5,-127,-53,-105,-5,19,-93,38,70,-39,46,4,-69,-26,10,-2,43,86,17,-68,-1,-41,24,-25, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant25_scale = { 16, { 0.0026840129867196083, 0.0030524765606969595, 0.002851544413715601, 0.0019800120498985052, 0.002824003342539072, 0.0032910255249589682, 0.0016662528505548835, 0.0026080922689288855, 0.0032301037572324276, 0.0047495453618466854, 0.0034512807615101337, 0.0039332173764705658, 0.0032218776177614927, 0.0024235513992607594, 0.0029374151490628719, 0.002928644185885787, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ -81,65,-67,-8,4,-100,-127,-20,61,-101,90,-39,115,-125,-14,-107, 
  /* [1][0][][] */ -110,94,-72,-85,-62,46,-40,64,-50,14,85,-42,49,127,44,29, 
  /* [2][0][][] */ -29,7,-101,9,-24,-26,17,-67,-127,124,89,17,36,94,-52,105, 
  /* [3][0][][] */ -94,-106,42,-18,-92,1,-107,-122,-28,19,61,-75,-100,-40,-127,-64, 
  /* [4][0][][] */ 95,32,-37,41,-100,12,-127,11,16,72,-17,24,33,-17,-65,-123, 
  /* [5][0][][] */ -99,83,-105,-20,43,-35,-53,-95,107,-2,17,-2,51,-127,-85,-97, 
  /* [6][0][][] */ -43,-45,-42,57,-80,108,62,-34,-50,-70,127,-42,9,38,-100,33, 
  /* [7][0][][] */ -49,65,127,-45,73,37,19,-38,57,35,-91,-34,16,-23,1,86, 
  /* [8][0][][] */ -12,22,21,-2,27,-15,127,111,-86,-58,-66,-93,85,116,-63,-55, 
  /* [9][0][][] */ 38,3,46,57,-74,0,-93,-53,48,11,127,48,-37,-53,64,16, 
  /* [10][0][][] */ 5,-87,25,-40,-127,40,46,5,-35,-65,-25,12,3,55,-92,27, 
  /* [11][0][][] */ 127,-48,10,95,-105,-13,26,5,119,79,-60,20,5,-90,17,77, 
  /* [12][0][][] */ -46,-97,127,15,35,-15,19,57,72,-29,116,85,-51,30,-103,63, 
  /* [13][0][][] */ 19,-20,43,42,-7,-10,127,10,-107,-5,-21,-12,-3,80,105,-49, 
  /* [14][0][][] */ 127,-58,87,28,29,19,103,21,42,86,68,12,78,-18,54,-23, 
  /* [15][0][][] */ -19,93,17,-32,30,127,-74,61,-23,-15,-47,-7,-41,82,-33,-47, 
  /* [16][0][][] */ -18,54,74,-61,-2,64,-18,-26,-16,18,5,52,101,13,90,127, 
  /* [17][0][][] */ -17,82,106,-127,49,-38,-24,-62,-31,93,-35,44,-38,-38,64,-81, 
  /* [18][0][][] */ -93,-37,-92,-80,113,72,-71,-42,32,102,125,67,16,127,-42,8, 
  /* [19][0][][] */ 47,93,66,87,23,-57,7,16,-16,122,70,127,89,106,-24,61, 
  /* [20][0][][] */ 81,33,25,65,-36,23,-49,69,-8,-65,-127,-56,60,-62,11,-27, 
  /* [21][0][][] */ -73,-78,-37,127,-56,2,-93,57,26,-17,31,7,-38,61,-50,28, 
  /* [22][0][][] */ -11,-34,-49,-46,127,4,-27,59,33,61,55,68,-26,27,-1,36, 
  /* [23][0][][] */ -56,15,11,11,22,31,96,60,-10,127,-32,-16,10,18,-40,-13, 
  /* [24][0][][] */ 10,-70,27,6,127,28,73,-10,29,3,64,38,-57,49,8,-19, 
  /* [25][0][][] */ 80,-82,98,-6,32,-12,-30,96,97,-6,-34,19,127,-24,82,14, 
  /* [26][0][][] */ 84,48,127,86,57,-30,-95,-34,-5,62,3,125,7,-65,16,-72, 
  /* [27][0][][] */ -55,13,-100,-10,-29,64,47,-105,16,-63,127,0,75,-1,84,83, 
  /* [28][0][][] */ -17,62,-93,-127,5,-39,-31,-93,-118,68,-37,51,-30,43,-9,51, 
  /* [29][0][][] */ 76,112,-68,65,4,91,-62,-32,35,58,-13,40,-127,10,-25,54, 
  /* [30][0][][] */ -34,40,-89,-22,92,-29,-5,38,-60,44,-42,-10,13,71,-3,127, 
  /* [31][0][][] */ 45,-127,65,23,73,-81,-41,19,4,-22,37,-17,-90,68,10,124, 
  /* [32][0][][] */ -70,48,14,77,-127,40,19,91,37,-124,26,-85,12,28,39,38, 
  /* [33][0][][] */ -36,-33,45,82,-7,-6,-45,38,-18,-35,11,-10,-6,-3,-1,127, 
  /* [34][0][][] */ -35,30,-84,-122,61,7,-22,57,47,5,-15,-34,-75,-44,-59,127, 
  /* [35][0][][] */ 93,-3,44,2,-20,6,-71,-34,-3,-127,-85,-11,10,-41,64,-22, 
  /* [36][0][][] */ 21,26,-127,-25,14,84,-19,12,-30,9,62,44,2,23,-75,32, 
  /* [37][0][][] */ 42,56,101,-37,86,-124,69,-6,-117,111,-127,-55,-2,-2,102,27, 
  /* [38][0][][] */ -10,127,3,-40,61,21,93,-72,-6,-31,-96,48,-79,-107,-117,48, 
  /* [39][0][][] */ 123,75,-107,-102,-52,-33,9,-112,-27,-7,-3,-60,102,36,-127,-86, 
  /* [40][0][][] */ -41,39,-78,-86,-31,-24,33,-127,-26,-26,11,-36,55,70,40,65, 
  /* [41][0][][] */ -27,-99,-21,127,8,-38,-117,0,-33,-82,112,-47,-81,-2,26,38, 
  /* [42][0][][] */ -38,83,-33,-127,7,10,19,-10,72,16,-60,22,91,-39,-3,31, 
  /* [43][0][][] */ 28,51,-8,27,127,42,39,29,-1,19,-14,-98,-94,-32,5,-1, 
  /* [44][0][][] */ 66,-15,20,41,-12,-3,16,40,25,-26,28,-5,127,16,-65,-24, 
  /* [45][0][][] */ 40,-67,-66,21,-37,-108,24,19,24,-22,-1,14,-57,127,38,-24, 
  /* [46][0][][] */ -34,-49,14,80,-20,-15,-67,39,48,-31,23,-36,45,36,27,127, 
  /* [47][0][][] */ -22,-42,4,109,-27,-7,73,-14,-19,-41,-127,-50,70,-5,-44,23, 
  /* [48][0][][] */ -81,100,11,-34,-11,72,-27,-127,-12,-13,26,-34,35,-75,-16,-27, 
  /* [49][0][][] */ -73,-5,14,-34,-23,21,109,127,-49,-24,22,54,-33,57,-55,41, 
  /* [50][0][][] */ 66,-3,-82,24,22,-127,-18,-7,-82,11,-20,-17,29,-43,-83,-13, 
  /* [51][0][][] */ -88,63,-26,127,-2,86,-42,-70,-43,-73,-6,-64,5,30,-20,102, 
  /* [52][0][][] */ -127,23,11,12,32,48,66,24,-7,-62,-42,-52,-82,-35,-90,11, 
  /* [53][0][][] */ -63,-112,-56,-127,-78,-5,-7,88,32,-90,-63,26,-32,40,76,91, 
  /* [54][0][][] */ 37,-90,-23,30,-58,38,99,7,-6,-115,21,-5,-8,-13,-127,72, 
  /* [55][0][][] */ 0,-42,-45,19,43,-45,61,55,-58,-38,-127,-26,58,-22,-5,48, 
  /* [56][0][][] */ 44,-10,-27,-64,-121,-4,-127,-26,14,-27,-64,-2,123,-69,42,-19, 
  /* [57][0][][] */ -85,24,19,-16,127,72,66,57,-54,49,35,-1,-46,117,-119,-27, 
  /* [58][0][][] */ 33,15,-11,-12,25,7,-30,-66,23,-127,-66,-11,-53,-30,-36,66, 
  /* [59][0][][] */ -80,-45,-8,39,21,42,-70,-9,72,127,-48,9,-4,16,-8,28, 
  /* [60][0][][] */ 29,-56,9,23,-127,-29,14,7,10,27,-26,31,-9,-46,22,26, 
  /* [61][0][][] */ 52,17,-79,-23,-77,-29,-127,-103,0,-9,10,114,56,-75,106,43, 
  /* [62][0][][] */ 61,-26,17,-7,-9,21,53,111,-88,79,49,84,20,49,82,127, 
  /* [63][0][][] */ -1,-127,3,0,-75,32,39,-14,0,-37,-12,-27,-49,111,111,47, 
  /* [64][0][][] */ -15,29,-127,-65,22,37,0,-27,-36,-116,60,-5,38,-34,-53,66, 
  /* [65][0][][] */ -23,-24,89,32,127,-15,61,83,-47,-23,-88,-38,27,106,-70,-32, 
  /* [66][0][][] */ -18,-125,8,-127,-69,-96,31,-60,14,-60,0,59,-79,-58,-84,59, 
  /* [67][0][][] */ 13,-77,-82,-44,-91,96,9,-127,-78,-60,-27,-73,41,6,-53,52, 
  /* [68][0][][] */ 127,47,37,-1,-82,-3,-43,-60,-62,-105,-29,-30,24,-52,58,-44, 
  /* [69][0][][] */ 17,3,34,5,-18,-33,-37,26,-14,127,-12,20,18,48,71,-24, 
  /* [70][0][][] */ 38,-27,-6,62,-127,40,-28,-86,91,80,10,53,31,-52,-2,7, 
  /* [71][0][][] */ 100,-64,85,127,-91,-25,-8,2,97,33,-56,20,79,-46,61,14, 
  /* [72][0][][] */ -27,-77,51,127,67,19,-111,105,50,-13,59,-2,-17,-39,-40,102, 
  /* [73][0][][] */ 65,23,78,-80,38,-100,-38,27,-15,127,-49,-15,38,-56,35,-55, 
  /* [74][0][][] */ 72,-2,3,61,-127,-23,64,9,-85,-58,20,-32,65,-52,-2,39, 
  /* [75][0][][] */ 93,112,-127,26,68,31,-1,-12,-29,-46,39,63,-90,72,75,92, 
  /* [76][0][][] */ -73,-42,4,-54,-28,7,73,18,-42,34,75,22,-62,-127,-31,72, 
  /* [77][0][][] */ -27,127,18,40,-73,-47,11,45,16,-39,-31,42,2,44,19,94, 
  /* [78][0][][] */ 127,59,-45,35,-55,50,-115,-26,-19,-25,-43,24,53,-76,58,42, 
  /* [79][0][][] */ -86,-4,89,73,-58,-127,-18,-69,7,27,19,20,-37,85,-91,90, 
  /* [80][0][][] */ 25,110,-5,-80,-13,52,127,-18,-8,40,-8,-1,125,-14,-10,22, 
  /* [81][0][][] */ 10,-78,35,-68,73,42,-8,95,127,60,-8,-26,8,55,-96,-74, 
  /* [82][0][][] */ 81,63,30,-32,127,-66,41,23,-25,91,-43,27,1,-29,22,-85, 
  /* [83][0][][] */ -26,65,32,50,112,105,117,126,3,48,-54,-59,-127,89,-82,-118, 
  /* [84][0][][] */ -14,-91,-35,57,21,-77,-87,39,-57,24,-15,12,-127,37,-14,-26, 
  /* [85][0][][] */ -63,62,-9,9,-27,-11,-57,-25,-29,14,1,-72,-127,-77,-27,22, 
  /* [86][0][][] */ -27,93,125,127,19,-69,77,26,-11,18,-30,-50,43,74,-119,-91, 
  /* [87][0][][] */ -9,54,127,-13,-109,-20,6,1,17,-16,2,29,-50,11,-6,2, 
  /* [88][0][][] */ -62,-64,-119,26,33,55,-19,13,0,-61,-112,-100,127,-23,19,12, 
  /* [89][0][][] */ 31,12,-3,-127,21,-81,-56,73,95,1,39,-102,6,-22,62,-50, 
  /* [90][0][][] */ 14,77,40,-9,-37,51,21,81,22,-64,-16,127,36,-11,-63,55, 
  /* [91][0][][] */ -66,-12,-2,61,89,44,-50,-86,-51,13,-31,-9,-127,-100,-76,-25, 
  /* [92][0][][] */ 1,35,23,-22,-127,-9,-98,23,-45,18,59,56,-12,-10,85,-8, 
  /* [93][0][][] */ 87,66,98,15,-127,-60,-13,0,9,-53,-24,-73,26,-82,12,-20, 
  /* [94][0][][] */ -53,-127,33,-72,22,55,-30,18,77,-22,0,59,4,51,-37,27, 
  /* [95][0][][] */ -25,-94,-27,-40,127,73,-3,50,98,35,-85,45,-59,101,-104,57, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0011499028187245131, 0.0018967399373650551, 0.0021920057479292154, 0.0026532304473221302, 0.0019385683117434382, 0.00068933272268623114, 0.001140361768193543, 0.003130636177957058, 0.0018658748595044017, 0.0016646630829200149, 0.0021635550074279308, 0.001771350740455091, 0.0013662878191098571, 0.0018110333476215601, 0.0032386751845479012, 0.0030874023213982582, 0.0024038862902671099, 0.0014215770643204451, 0.0013719205744564533, 0.002357124350965023, 0.0018782714614644647, 0.0012775680515915155, 0.0011168523924425244, 0.0022411597892642021, 0.002173626096919179, 0.0027303772512823343, 0.0012034974060952663, 0.002058844082057476, 0.0027074753306806087, 0.0024380404502153397, 0.0015309149166569114, 0.002021086635068059, 0.0011365225072950125, 0.0026845831889659166, 0.001030011335387826, 0.001419530832208693, 0.0027017004322260618, 0.0011963287834078074, 0.0016159614315256476, 0.0015478917630389333, 0.0024253600277006626, 0.0020782675128430128, 0.0019408863736316562, 0.0019760404247790575, 0.0030523906461894512, 0.0024626459926366806, 0.0020109475590288639, 0.0018139707390218973, 0.0022741272114217281, 0.0028306308668106794, 0.0020002545788884163, 0.0018458288395777345, 0.0017099730903282762, 0.0023527017328888178, 0.0020983882714062929, 0.0024935160763561726, 0.0015689521096646786, 0.0013730974169448018, 0.0016893758438527584, 0.0028502065688371658, 0.0028918511234223843, 0.0010746963089331985, 0.0019861198961734772, 0.0011601840378716588, 0.0019326038891449571, 0.0013767017517238855, 0.0018189265392720699, 0.0016866546357050538, 0.0012012132210657001, 0.0031832600943744183, 0.0017297540325671434, 0.0016588808503001928, 0.0018728133291006088, 0.0018483621533960104, 0.0015405481681227684, 0.0016663707792758942, 0.0024499124847352505, 0.0031207911670207977, 0.0017649785149842501, 0.0021740535739809275, 0.0020927018485963345, 0.0017978472169488668, 0.0015556648140773177, 0.0014416935155168176, 0.0024324646219611168, 0.0019747400656342506, 0.0020266249775886536, 0.0035107026342302561, 0.0010200202232226729, 0.0019601748790591955, 0.0030942566227167845, 0.0019772346131503582, 0.0012838466791436076, 0.0019054494332522154, 0.0027486367616802454, 0.0018844321602955461, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int8_t tensor_data27[16*1*1*96] = { 
  /* [0][0][][] */ -76,26,53,-11,-68,-3,-55,5,-28,28,-22,-10,32,24,33,-27,3,16,73,15,3,-32,127,68,61,33,19,25,-50,-109,-95,7,-49,-30,27,37,22,32,-14,17,-4,17,-47,14,-67,-24,-13,69,-20,13,-37,2,-20,-11,34,-58,-69,12,-1,46,39,36,-9,15,-15,-39,-39,43,-50,-42,-3,-15,15,14,-53,-50,-38,31,-26,-3,-44,62,95,-77,13,38,20,56,43,-18,-12,-23,-28,-19,-38,22, 
  /* [1][0][][] */ 34,3,6,-31,-67,-33,-32,-11,2,36,42,-43,28,14,-46,-39,-9,-6,-66,25,-17,-61,30,66,15,-60,-5,-52,49,-127,86,-96,57,12,-23,71,69,57,-32,-35,5,28,24,-36,29,76,-114,-38,-66,-35,-39,2,22,-73,-16,64,39,24,-40,12,24,47,4,-126,-10,-40,-69,19,-17,-26,-105,-16,-74,-46,6,-77,7,26,30,-68,-46,-60,-73,-49,20,-34,-39,14,-51,-34,-43,37,29,82,-22,70, 
  /* [2][0][][] */ 72,-20,34,4,31,-75,79,17,-26,-9,-13,-3,-60,-41,24,-26,-91,-33,-21,50,19,-70,-60,43,-32,-61,27,-12,-6,56,-32,127,-53,112,-11,1,-15,5,-12,-16,-74,47,38,17,-63,-10,-9,0,53,-2,-17,-75,38,1,-10,54,30,13,50,1,-2,37,-41,24,65,22,8,-31,38,57,-27,8,55,30,66,14,39,-55,44,53,91,3,-57,34,-47,16,42,38,7,25,-33,19,-35,22,-16,47, 
  /* [3][0][][] */ 12,-7,-10,9,-1,-6,15,-66,-3,76,35,71,50,-28,-46,45,-17,-49,30,29,31,127,50,-29,35,41,-1,8,61,-47,56,-13,-21,45,-26,-15,33,72,19,19,-68,-15,-19,23,-47,25,47,2,-18,-34,7,-10,29,-83,-37,-43,31,104,-12,8,-15,-4,-59,20,37,53,-40,18,-38,24,6,-82,-17,-50,37,-19,2,16,-33,-18,-6,13,-35,-7,-27,-17,49,-15,12,1,33,-33,50,40,-42,41, 
  /* [4][0][][] */ 18,13,-57,15,27,3,-47,9,-40,49,91,-34,-22,15,-8,-49,23,-27,-36,24,17,-38,27,65,-80,-22,-127,-8,-49,-48,16,3,-45,-58,26,29,0,14,36,39,-50,-52,25,-14,10,24,-33,44,-38,30,5,-4,57,-1,-83,18,24,-23,9,-4,55,-9,36,-8,-46,2,-24,-8,-38,8,-33,57,21,-51,-44,-24,35,-64,6,6,-43,55,-86,14,-10,13,19,-71,33,17,35,5,-59,-33,42,27, 
  /* [5][0][][] */ -48,38,57,-24,53,-11,73,-18,-8,45,-17,-45,11,-34,-6,-49,-16,-13,60,37,-120,-38,-75,54,-50,7,58,27,42,-49,3,57,32,114,4,16,-18,32,19,-27,-6,107,70,-14,-9,49,22,7,11,-4,-5,43,18,-16,36,-94,35,-67,-37,-79,60,93,-62,2,45,-26,-53,-67,-33,-12,-34,8,-2,3,-42,-56,35,-21,-20,-25,127,-2,11,-59,-82,10,37,-31,-23,24,4,-26,-24,42,10,100, 
  /* [6][0][][] */ 62,-11,-93,42,-48,-116,118,74,-61,80,-30,59,-101,-69,41,33,13,-66,-18,-12,-13,-2,-69,-36,-41,34,91,12,22,16,75,-65,37,7,3,-76,21,12,33,89,-7,34,-74,-16,4,-60,-67,8,32,-117,-30,60,47,-2,-32,-71,78,60,1,-9,-90,65,-78,-7,17,-4,-13,67,26,16,-17,-58,-45,29,82,46,46,-33,65,-74,-12,-61,-82,49,-13,-51,66,5,-6,61,44,42,-38,26,-32,127, 
  /* [7][0][][] */ 28,102,-52,-41,-35,-35,52,-9,-43,60,-47,-78,-58,49,-4,-26,-39,-78,-60,40,10,127,-7,30,-4,-5,47,7,54,32,66,-57,85,22,-21,-7,12,21,27,18,-90,-14,31,-59,13,-23,73,-32,55,-59,-123,-39,-56,-7,-15,-1,51,30,-92,39,14,121,43,-50,-8,-20,-62,10,-26,-7,-125,58,31,98,-60,80,-72,44,27,-88,-46,-73,46,-105,75,-28,-10,-15,9,111,-70,29,37,-53,-27,12, 
  /* [8][0][][] */ 6,78,-46,31,-43,-47,-80,14,-93,-24,3,-18,-58,54,25,97,10,-62,5,5,17,7,-21,-5,-23,55,2,23,6,-25,-50,-30,-11,-33,-39,-97,-27,5,29,11,-12,-12,23,17,-25,-26,5,-15,-28,-30,73,65,5,-32,-82,99,-40,39,-10,-59,-25,16,24,41,-59,-75,-49,8,-50,-4,-6,-6,-31,-61,-125,-16,-56,13,-52,-39,-12,-6,-52,-44,-7,-9,27,13,21,52,-65,0,-97,-127,44,-36, 
  /* [9][0][][] */ -4,21,-58,38,-23,-27,49,52,10,56,-7,91,-6,-27,22,127,0,19,62,22,28,15,48,-57,-18,-1,37,-4,20,-9,35,39,-35,1,7,-79,30,-6,-17,-17,-11,9,46,-29,-15,-3,32,13,39,76,23,4,-47,-61,7,-5,20,-2,64,-8,-62,52,-56,-18,80,3,-12,3,-55,28,33,24,-2,57,-8,-24,-18,28,-39,-17,43,-27,64,2,34,-2,8,-13,-51,31,0,-8,67,46,-44,-14, 
  /* [10][0][][] */ 70,3,-57,-1,-41,-46,87,-7,-2,-37,-29,-26,-113,6,7,-37,-59,-50,5,-3,37,36,-7,-9,-57,84,46,-25,-77,-88,-30,-4,95,-51,78,-13,72,-84,106,117,20,-52,6,38,-11,-72,-4,88,24,62,-83,-78,-18,33,-2,53,7,-76,68,70,4,40,-48,-25,-24,-86,9,62,26,-32,-9,64,127,65,5,-74,30,-75,68,3,-40,32,6,28,-26,-20,-19,17,-38,3,18,39,37,52,-30,13, 
  /* [11][0][][] */ -53,-15,70,-78,28,0,-10,-15,34,-51,-15,-16,-44,-32,-7,-6,-78,1,81,23,-46,-9,-104,-89,-16,24,-13,43,51,-53,69,-9,-7,8,27,-51,-89,29,-101,-13,-48,38,-65,68,-5,4,-9,-24,50,-63,-35,-84,15,51,74,-67,-39,-82,33,-32,-27,-56,-51,-96,-2,-44,41,55,127,25,96,1,-4,6,61,-53,82,9,37,51,60,8,-48,112,80,10,-11,-40,-74,-46,-38,-3,33,12,58,79, 
  /* [12][0][][] */ 34,-32,-14,-55,17,98,3,33,43,59,-12,58,35,59,5,15,-48,45,4,43,127,19,79,-82,55,23,-86,-77,-2,75,-10,7,32,-25,-6,-27,40,7,-48,-42,13,-5,34,42,-19,43,-19,-14,-80,34,-16,14,-38,-39,0,27,-35,46,-2,50,35,-106,24,-107,-19,100,-26,-35,-3,-41,52,21,-18,14,-27,51,-21,42,-92,-35,-36,15,126,15,-18,76,-41,-65,61,24,-75,70,69,-4,-44,-110, 
  /* [13][0][][] */ 6,45,0,-55,-14,10,23,-16,27,-17,-24,-45,80,-110,-35,-63,-28,-18,-63,-1,-87,-39,30,107,-52,32,111,19,32,-23,66,56,-3,9,-98,127,-46,-30,17,-64,118,-19,-17,10,-20,-95,51,-23,82,-11,-23,33,10,11,5,44,72,-62,-25,8,31,48,-13,-60,-15,41,-21,9,-44,-21,-56,31,-40,6,-37,-87,-87,32,15,76,0,68,34,-65,56,57,49,3,-21,-13,-20,2,-41,24,-34,-21, 
  /* [14][0][][] */ -3,29,-55,-46,100,104,-62,3,21,-60,81,10,-1,-36,-23,-73,-75,32,43,127,17,-49,-15,7,-27,64,-18,77,2,5,-6,30,46,11,-18,-11,-44,69,68,-16,74,-20,29,8,-22,-55,48,-18,31,-12,3,-15,18,36,-14,17,-8,45,-72,3,-31,-69,-58,-75,7,-42,-33,-25,-51,61,2,49,19,-28,-16,-45,52,-1,-62,-24,45,28,-13,0,-5,40,-11,-43,-14,72,54,-4,4,-49,-56,-75, 
  /* [15][0][][] */ -69,-60,9,-43,-5,-27,-56,-87,-18,-2,25,89,12,-2,48,57,-82,-36,-14,-87,30,-39,19,-90,62,-1,23,-73,-75,-113,-83,3,-18,24,72,-60,14,-44,31,-4,-39,-27,13,-19,18,26,66,90,-66,10,-4,-62,-47,33,-2,-46,-101,-8,72,-4,-10,4,-64,9,-74,-32,-4,41,30,-91,59,-38,38,-48,-49,-46,3,19,28,-26,-33,48,67,13,6,-15,-127,12,13,-56,-53,30,39,-24,-20,60, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant27_scale = { 16, { 0.0023845415562391281, 0.0029287063516676426, 0.0022682796698063612, 0.0025048740208148956, 0.0022737199906259775, 0.0022291224449872971, 0.0014877747744321823, 0.0016242999117821455, 0.0031172602903097868, 0.0031171999871730804, 0.0021475683897733688, 0.0023362948559224606, 0.0021712484303861856, 0.0020549662876874208, 0.0033367346040904522, 0.0021334376651793718, } };
const TfArray<16, int> quant27_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int8_t tensor_data28[96*1*1*16] = { 
  /* [0][0][][] */ 6,67,-88,16,28,-43,88,42,-76,-8,48,-65,96,127,-32,34, 
  /* [1][0][][] */ -8,-15,-63,-25,-22,29,11,-127,34,-55,-16,-40,-21,-47,-36,3, 
  /* [2][0][][] */ -31,-24,11,66,31,26,-123,127,-3,13,58,-63,-40,-95,-71,56, 
  /* [3][0][][] */ 85,-120,73,-28,9,-54,-18,127,-3,47,87,69,4,39,21,20, 
  /* [4][0][][] */ 1,19,-33,71,-127,32,-33,-112,38,2,-4,-57,55,8,101,113, 
  /* [5][0][][] */ 127,36,-18,-8,-91,30,21,78,7,0,44,70,124,31,-101,-6, 
  /* [6][0][][] */ 7,-60,-77,-72,-52,-9,18,-65,-80,-53,-10,53,73,90,127,9, 
  /* [7][0][][] */ -37,43,-19,-50,0,-37,-69,24,-88,52,-74,-70,-127,-26,13,68, 
  /* [8][0][][] */ 74,55,64,2,70,37,85,21,60,-22,54,4,-127,-19,-95,26, 
  /* [9][0][][] */ -48,35,31,-53,-7,-19,28,-16,-30,32,-18,30,25,127,26,32, 
  /* [10][0][][] */ 96,34,-66,35,-55,-40,34,-76,-69,-15,-36,-86,-127,-99,-16,125, 
  /* [11][0][][] */ 49,30,71,31,5,-14,31,127,-69,19,-55,-22,-32,-10,51,109, 
  /* [12][0][][] */ -45,13,7,11,34,7,127,63,-31,26,-25,-35,-29,57,-68,69, 
  /* [13][0][][] */ 55,46,-14,77,127,0,73,94,-12,67,-115,-101,81,66,-84,-32, 
  /* [14][0][][] */ -108,127,14,10,8,18,80,24,-29,6,67,-35,-96,22,-67,17, 
  /* [15][0][][] */ -34,-4,-127,-37,103,-32,-78,-24,-8,-36,-34,-65,-21,-108,-71,39, 
  /* [16][0][][] */ 115,-2,-7,-15,32,-16,29,-10,-45,20,127,39,26,9,-54,13, 
  /* [17][0][][] */ -8,24,-6,-74,1,-41,127,-97,-11,-35,-56,17,45,92,3,29, 
  /* [18][0][][] */ 2,127,-13,-21,29,-47,-18,-30,-19,119,-41,-22,-21,43,-31,-41, 
  /* [19][0][][] */ -88,-72,127,-113,60,-101,34,-54,74,55,52,61,2,-45,23,-54, 
  /* [20][0][][] */ -9,89,48,-10,24,-10,32,-44,49,1,123,-13,-127,-12,-83,7, 
  /* [21][0][][] */ -107,56,-3,-5,83,24,61,40,-127,93,-30,45,-52,-9,-102,-47, 
  /* [22][0][][] */ 7,-81,69,28,41,-127,117,19,43,-57,-69,-105,31,-122,-81,-82, 
  /* [23][0][][] */ -97,-127,79,60,64,-3,29,-36,41,-34,116,29,2,116,85,126, 
  /* [24][0][][] */ -11,16,37,109,50,24,-40,-127,61,40,-70,-5,-10,12,-47,-37, 
  /* [25][0][][] */ 19,53,-3,-27,-59,-29,36,-16,-22,51,-69,-36,57,127,10,21, 
  /* [26][0][][] */ -90,110,20,36,52,-89,8,-21,40,34,-5,64,-5,-21,-113,127, 
  /* [27][0][][] */ -22,-111,-47,9,-42,79,25,-51,28,-42,48,-38,8,-57,-127,-15, 
  /* [28][0][][] */ -20,-10,27,65,16,-1,-50,-127,-102,45,105,-2,81,3,-23,-16, 
  /* [29][0][][] */ -127,89,-9,-35,-11,29,-95,-50,-23,-43,-7,9,-6,-66,-110,34, 
  /* [30][0][][] */ 36,97,-41,94,-101,-74,-85,-7,-17,10,-11,-127,115,13,-2,75, 
  /* [31][0][][] */ 127,15,-42,-16,-58,-3,105,50,-37,-30,26,11,23,0,-16,16, 
  /* [32][0][][] */ -53,-54,127,-13,-2,60,85,33,-35,-8,18,48,-7,93,63,33, 
  /* [33][0][][] */ 26,47,-102,-58,-44,3,127,31,-6,-28,37,-72,120,109,-67,87, 
  /* [34][0][][] */ -64,-40,83,-1,10,-79,121,-22,-127,35,48,-40,60,44,-41,-20, 
  /* [35][0][][] */ -1,-13,-58,24,-97,113,-15,-31,-44,127,22,92,-52,107,46,51, 
  /* [36][0][][] */ 0,-91,127,-27,-61,18,-59,-22,-7,30,-20,85,14,-50,-11,54, 
  /* [37][0][][] */ 100,1,39,-55,111,-109,-36,33,-23,109,-96,-13,-127,-84,88,-20, 
  /* [38][0][][] */ 16,64,28,-86,11,-24,-87,66,-47,54,-102,-50,-81,-127,-119,32, 
  /* [39][0][][] */ -94,-6,-35,-44,-58,-92,76,29,-127,-51,28,98,37,14,12,31, 
  /* [40][0][][] */ 127,52,14,-60,-52,35,20,-54,-8,-15,-69,-99,-4,30,27,19, 
  /* [41][0][][] */ 103,-57,-67,-22,-26,-17,-35,-36,40,-26,3,-67,127,-57,39,-9, 
  /* [42][0][][] */ -12,-125,-52,126,7,-127,-115,5,-10,2,27,82,-71,115,-41,8, 
  /* [43][0][][] */ -102,-27,-35,-101,-40,14,-6,85,55,-127,-48,19,-34,-66,-49,80, 
  /* [44][0][][] */ -47,58,33,-51,-6,-3,6,127,101,-34,69,112,95,23,-38,2, 
  /* [45][0][][] */ 35,81,-56,103,127,-65,-43,-40,119,-61,48,-74,-44,2,-93,41, 
  /* [46][0][][] */ -4,-54,-10,-20,88,-42,15,4,-30,127,-21,-125,49,85,-34,100, 
  /* [47][0][][] */ 65,-57,-44,-22,80,-28,-30,-72,-7,127,-19,48,1,-113,-98,23, 
  /* [48][0][][] */ 24,36,0,-112,-12,-35,110,-127,18,14,-48,34,58,80,-1,25, 
  /* [49][0][][] */ -53,94,-36,33,78,-63,95,44,-45,3,79,-48,-60,116,127,-120, 
  /* [50][0][][] */ 19,30,-26,7,-127,-10,-55,-62,39,63,34,28,-23,-28,8,41, 
  /* [51][0][][] */ 127,-45,-50,-21,-49,63,-71,-46,36,-27,-29,62,-24,-74,-16,46, 
  /* [52][0][][] */ 21,-54,5,99,-12,-127,-102,26,-67,-85,-35,-107,22,-60,-30,114, 
  /* [53][0][][] */ 1,102,36,-127,-1,86,67,-25,-1,-7,-4,-16,66,-116,16,43, 
  /* [54][0][][] */ 15,98,-5,-33,-2,-99,-84,33,-3,-4,-26,127,90,91,3,66, 
  /* [55][0][][] */ -61,21,52,52,49,-12,109,104,-43,13,-11,-21,127,27,-27,-21, 
  /* [56][0][][] */ 127,37,-4,39,-60,74,-42,-60,-10,29,-95,-19,-38,72,-7,43, 
  /* [57][0][][] */ -24,-29,-56,-17,-83,-88,43,-41,-127,-18,38,41,37,56,19,36, 
  /* [58][0][][] */ 52,-45,74,39,-10,-43,-15,5,11,-13,-127,-40,24,-16,-40,37, 
  /* [59][0][][] */ 77,27,-126,118,13,54,98,-19,-83,-42,20,-127,-104,-41,32,111, 
  /* [60][0][][] */ -9,39,-5,30,-12,-13,-29,15,-20,-62,44,95,-51,-127,-47,-14, 
  /* [61][0][][] */ 2,-12,64,-112,-87,27,-6,101,-21,-103,71,79,80,-3,39,127, 
  /* [62][0][][] */ 67,35,-16,-127,0,13,23,-28,-9,18,-27,49,22,-20,-93,-59, 
  /* [63][0][][] */ 16,0,3,10,-63,-50,-45,18,-42,2,-49,-39,127,-13,29,-23, 
  /* [64][0][][] */ 1,34,-5,65,-123,-8,-40,-123,92,127,12,-18,24,-83,-67,84, 
  /* [65][0][][] */ -25,27,-20,-15,-66,74,9,-23,61,-81,69,-66,50,32,-127,41, 
  /* [66][0][][] */ -127,83,-113,-107,64,-63,-73,-54,-75,88,95,9,-109,-77,8,72, 
  /* [67][0][][] */ 13,-19,-127,-89,53,52,25,-9,-15,-11,34,-27,17,15,6,54, 
  /* [68][0][][] */ 59,42,5,-21,-91,45,42,55,-67,61,96,-42,-7,-32,-127,-25, 
  /* [69][0][][] */ 59,-86,65,-40,23,-86,-43,127,17,72,63,66,-31,78,-37,-19, 
  /* [70][0][][] */ 56,23,71,24,57,-15,127,-17,54,-2,-80,9,-68,23,-93,5, 
  /* [71][0][][] */ 13,47,93,-77,-127,-65,5,-7,-4,3,7,-90,-77,-17,4,17, 
  /* [72][0][][] */ -45,-111,12,-127,63,-28,12,31,-86,8,-100,0,64,116,-35,123, 
  /* [73][0][][] */ 40,49,35,24,117,-82,-45,35,-27,90,-127,7,-119,-79,120,-40, 
  /* [74][0][][] */ -87,-19,-127,-83,41,-60,-57,2,-57,32,-94,-15,-16,-74,-13,84, 
  /* [75][0][][] */ 77,-47,49,-61,45,-7,-127,-36,-26,-108,93,23,6,6,-1,1, 
  /* [76][0][][] */ -7,-21,-25,127,51,102,103,-35,106,-115,41,74,13,-119,-120,22, 
  /* [77][0][][] */ -20,-72,127,-35,41,-48,-19,-101,-6,-1,65,122,27,88,49,25, 
  /* [78][0][][] */ -58,7,32,-11,10,-31,51,11,-3,-3,0,-96,-97,-37,-127,-58, 
  /* [79][0][][] */ -122,-127,-43,3,119,18,-47,-12,-30,62,15,98,-14,-64,-59,6, 
  /* [80][0][][] */ -15,-72,51,127,-19,-6,-100,88,-1,39,45,-17,-93,-33,-51,54, 
  /* [81][0][][] */ 112,43,-27,67,-13,28,24,95,-6,-12,127,47,103,45,55,3, 
  /* [82][0][][] */ -73,29,29,-8,36,-119,-127,-87,22,102,-73,-60,-41,103,-102,-49, 
  /* [83][0][][] */ 122,2,59,-6,-53,-25,-92,0,12,-127,14,-76,-4,-6,6,-5, 
  /* [84][0][][] */ 28,-71,-76,36,112,49,24,15,-127,35,-110,-13,38,-25,-97,2, 
  /* [85][0][][] */ -17,92,55,-26,100,19,25,-79,127,-9,17,-25,69,-87,21,-17, 
  /* [86][0][][] */ 126,-31,127,72,18,-53,104,60,-80,-53,-105,-60,60,32,-93,16, 
  /* [87][0][][] */ 0,-6,10,-100,69,-44,-40,4,24,-45,95,-26,-79,-127,12,38, 
  /* [88][0][][] */ -69,-23,45,9,32,47,-63,-36,-7,9,-71,-127,-66,-34,-36,-33, 
  /* [89][0][][] */ -79,24,0,-68,35,23,-127,34,99,10,-55,4,-27,-101,-39,-25, 
  /* [90][0][][] */ -17,10,-26,-58,127,36,-54,62,65,50,9,-37,16,-8,-83,-33, 
  /* [91][0][][] */ -2,-27,14,59,-70,-12,-21,61,-23,-38,0,-69,16,21,6,127, 
  /* [92][0][][] */ -17,46,-2,-28,-13,40,-94,32,-40,-19,74,20,-36,127,68,28, 
  /* [93][0][][] */ -14,115,-54,-79,89,103,-92,33,98,50,57,37,-127,-3,-74,78, 
  /* [94][0][][] */ 36,76,70,29,-127,-25,10,3,9,-32,22,-37,-40,-13,19,-5, 
  /* [95][0][][] */ -2,-14,41,-20,66,-40,-119,33,8,41,-43,127,20,55,114,-9, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant28_scale = { 96, { 0.001787422806955874, 0.0030676613096147776, 0.0012550817336887121, 0.0015875945100560784, 0.00088442116975784302, 0.0016206532018259168, 0.0010289815254509449, 0.0020782956853508949, 0.0011039309902116656, 0.0027971595991402864, 0.000939943827688694, 0.002060755155980587, 0.0016587853897362947, 0.00099311606027185917, 0.0016834420384839177, 0.0012746980646625161, 0.0034001623280346394, 0.0022143416572362185, 0.0022808888461440802, 0.00092670915182679892, 0.001231237081810832, 0.0012017543194815516, 0.0012027989141643047, 0.0014013173058629036, 0.00291411392390728, 0.0012819025432690978, 0.0014738439349457622, 0.0024536470882594585, 0.00140038738027215, 0.0017781349597498775, 0.0010257111862301826, 0.0021732409950345755, 0.0015563227934762836, 0.0012900583678856492, 0.0013305550673976541, 0.001130374614149332, 0.0024188277311623096, 0.0014577466063201427, 0.0012036875123158097, 0.0022745570167899132, 0.0016715064411982894, 0.0015819023828953505, 0.0020410655997693539, 0.0014593256637454033, 0.0016971529694274068, 0.0016183541156351566, 0.0019713158253580332, 0.0018845396116375923, 0.0010481049539521337, 0.0016440907493233681, 0.0021381555125117302, 0.0015432365471497178, 0.0011146505130454898, 0.0019882330670952797, 0.0018447715556249022, 0.0023564081639051437, 0.0013702756259590387, 0.0015630123671144247, 0.0020640159491449594, 0.0012177960015833378, 0.0021148633677512407, 0.001803114078938961, 0.0026274446863681078, 0.0011927282903343439, 0.0015145273646339774, 0.0016766125336289406, 0.0010475676972419024, 0.0018314595799893141, 0.0016467854147776961, 0.0021637228783220053, 0.0015828825999051332, 0.0017156912945210934, 0.0025686896406114101, 0.0015148468082770705, 0.0010118106147274375, 0.0012608809629455209, 0.0013166284188628197, 0.0013499559136107564, 0.0012832724023610353, 0.0010873900027945638, 0.00099817686714231968, 0.0016715768724679947, 0.0022061008494347334, 0.0017029758309945464, 0.0021111646201461554, 0.0016833168920129538, 0.0010743082966655493, 0.00093801785260438919, 0.0020145159214735031, 0.0013557324418798089, 0.0012139730388298631, 0.0018599326722323895, 0.001854785718023777, 0.00098061386961489916, 0.002754053333774209, 0.0015471229562535882, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int8_t tensor_data29[32*1*1*96] = { 
  /* [0][0][][] */ 25,82,65,23,-25,29,-14,-25,23,16,102,41,127,2,-24,-2,-73,-49,59,84,22,78,20,0,64,75,105,32,84,100,54,103,-84,26,27,25,24,102,-6,1,29,0,-48,-37,28,-58,34,98,-50,-34,4,-60,29,13,61,1,-67,-74,-5,-18,34,-31,-59,-65,58,61,46,-18,-32,13,25,-11,47,10,17,-9,20,-107,65,-54,19,-41,114,-59,-6,108,60,1,104,-5,95,67,-93,71,-1,29, 
  /* [1][0][][] */ -29,-18,-27,-40,-20,55,64,52,57,0,46,-34,53,53,-19,-58,75,-41,92,71,-25,88,75,32,37,-37,16,70,-50,-15,25,-6,3,-28,-93,-23,23,-61,56,6,61,62,-19,-43,29,40,-16,-70,-59,-32,-56,96,-48,77,-40,-24,93,77,25,81,14,41,66,33,13,-84,-65,-79,70,58,-51,52,44,27,-27,32,-29,-10,74,52,20,82,66,19,127,85,57,-64,81,-40,42,29,19,-31,84,-6, 
  /* [2][0][][] */ -54,-125,-106,77,55,-45,84,-26,7,97,22,-61,-90,-84,-86,-102,35,85,-57,32,59,-52,-84,127,49,-85,-103,10,-2,-40,-72,-18,59,-41,-42,75,86,-72,41,-33,-46,-54,18,36,80,36,-77,33,108,2,-50,66,6,-18,88,-29,-111,-60,-37,-85,51,-27,39,71,-113,-113,80,2,-40,17,-103,-29,125,-66,-67,88,-69,57,-18,-6,64,28,-94,51,-81,-107,16,-31,28,-105,-121,-17,14,13,-59,100, 
  /* [3][0][][] */ 5,127,16,107,-57,-30,72,37,76,-19,1,-41,105,-7,97,-51,111,-34,-19,43,-44,120,43,-23,60,114,112,80,103,99,6,6,-78,63,78,-27,-91,116,24,96,50,23,96,-58,12,73,-23,126,1,-51,-46,76,14,10,64,-6,44,-27,-29,-69,42,100,80,62,112,29,63,97,100,-7,21,100,68,-66,42,41,101,36,-66,-40,-29,-39,-46,101,44,-64,-5,30,80,-53,29,52,4,-66,41,-31, 
  /* [4][0][][] */ -10,59,60,59,124,25,3,-47,67,-71,24,37,-47,76,73,124,96,-40,40,-51,-31,52,76,-45,-45,16,13,3,-49,127,-6,44,-38,115,-38,-48,-45,104,85,-29,30,-35,-18,81,111,72,21,12,-29,-42,-31,20,28,101,-1,38,-32,-51,-42,2,55,39,103,63,36,84,111,8,20,-71,9,3,70,59,-13,113,-14,-41,-51,55,69,-44,11,-20,15,103,50,-7,52,95,107,-13,2,125,10,11, 
  /* [5][0][][] */ -104,4,-22,-32,-92,-73,-58,-40,-127,-30,54,-50,-50,-78,-41,-117,31,58,-30,-39,30,6,17,41,-66,-8,18,-114,-29,-113,47,-63,72,-60,60,-50,-7,37,19,-74,52,-51,-96,76,-5,-74,53,-123,-91,51,-9,-90,-93,78,-23,-92,-29,1,69,34,31,-17,51,-61,-101,54,11,-121,55,62,-84,-18,-70,65,6,-73,35,-70,77,-73,10,-117,-102,-115,-53,-116,-33,-75,20,-16,-67,47,-105,59,7,69, 
  /* [6][0][][] */ -49,-116,55,-34,-101,46,77,-88,51,37,-118,-72,57,-88,13,48,-125,22,-20,52,-126,-46,9,41,-37,-46,33,-120,53,-118,-90,48,-78,-111,-104,-51,-10,-88,0,-60,-72,9,66,-23,77,38,-92,-46,-59,58,-81,-62,1,26,-89,-115,-101,-11,-52,63,58,24,-50,16,66,1,8,-118,-113,18,-19,50,-47,-107,-31,0,-127,47,-101,-80,26,55,75,-83,-79,-107,32,48,-90,-41,45,-28,47,-67,-90,-109, 
  /* [7][0][][] */ -10,-34,81,32,72,-40,-23,89,47,74,21,60,123,-28,-2,123,-39,56,123,64,44,-8,79,27,76,-55,117,102,28,87,-12,-16,100,-49,35,8,-63,122,54,-91,75,-17,-79,106,-39,112,-54,22,66,102,21,106,-36,74,92,66,-43,-80,-4,-32,41,-97,114,127,37,41,52,45,16,25,89,90,-51,59,115,-33,33,-108,77,9,1,-47,108,-56,40,90,42,-22,77,48,27,6,-4,55,-28,-2, 
  /* [8][0][][] */ 91,-4,-27,0,63,52,-109,-106,54,-110,-123,-28,-127,-43,37,-36,14,-109,89,-39,72,-8,-9,-103,-87,-10,60,7,28,-109,-14,39,30,-19,10,49,22,-6,6,-12,-52,-84,-120,-19,-122,-4,-39,29,28,-31,43,-15,-62,-12,21,0,-34,56,-84,40,46,0,-102,37,91,84,59,45,-66,-49,-83,54,-95,32,73,-48,20,4,-58,-17,23,64,-19,-69,21,27,-95,-109,32,-107,90,-22,-73,-12,20,-19, 
  /* [9][0][][] */ -59,-23,-84,-112,-6,38,-127,-69,-14,-70,-104,31,-30,-27,-84,68,-62,-19,36,-54,-109,-116,-81,-80,26,-76,-91,-57,-61,-124,-87,37,-105,-44,64,6,53,30,78,77,-103,-95,-36,37,-82,-10,58,49,-24,20,-85,-15,-104,-32,-34,56,-41,71,10,78,6,-44,37,24,-105,-111,13,-110,-59,54,62,-90,53,-46,-119,23,78,12,-107,-51,-8,10,25,-56,70,-16,-108,-70,58,7,-6,-78,-90,19,-108,-33, 
  /* [10][0][][] */ -56,-108,-55,-113,-95,-10,45,-117,-73,38,-72,22,36,-127,-15,42,-57,-18,-21,26,58,-107,-105,23,-16,-17,-60,61,-19,-122,-118,-27,-63,-73,-64,47,43,-64,-61,-53,-102,31,63,-76,62,-8,-73,-126,-83,-5,52,-88,65,-110,-104,-109,-28,-70,60,-56,-114,-101,17,13,7,-58,-77,-12,24,-120,36,-38,39,54,-74,-102,-30,66,-65,-59,23,53,-51,-21,-97,-118,-95,-101,50,-28,-34,-28,-60,67,42,68, 
  /* [11][0][][] */ -4,-49,75,-17,-27,-76,74,-106,14,-41,66,65,-88,16,-95,-106,105,-69,-4,26,55,-87,9,110,-30,45,-41,46,83,-105,-42,48,15,-58,-4,-80,-21,-77,-58,100,23,-99,22,-75,96,-50,-88,-64,112,70,-20,-91,-35,39,6,-74,-115,2,7,-37,-64,56,-51,-85,28,-11,-35,-30,-114,63,-79,43,35,-83,-38,86,-11,-6,-29,-8,-4,-46,-24,-112,-6,-126,-86,-53,25,-127,45,19,85,-102,-109,14, 
  /* [12][0][][] */ -24,64,-99,-106,-23,-59,-104,-126,-125,-13,-24,-102,58,-30,-89,-10,34,-70,13,-110,-19,58,65,57,51,-10,-118,-67,44,-123,10,-55,13,24,12,69,38,-56,53,-119,-71,-1,-123,-28,-44,50,-60,-84,57,-126,-124,-92,-111,70,-126,-56,26,56,7,-17,-17,13,-41,72,-47,-17,-94,-84,29,-101,-98,-80,24,12,-21,-60,51,33,-117,-70,-91,10,17,2,64,-4,-58,25,-23,-12,-127,-24,-24,-94,-85,62, 
  /* [13][0][][] */ 12,113,-20,-47,77,116,82,39,-44,43,36,21,85,18,117,-15,-45,59,95,110,-50,47,-22,-75,2,-41,-39,70,-24,76,26,-14,-52,80,12,0,102,24,104,-69,75,108,50,72,106,107,3,110,51,14,30,4,76,-9,-22,93,71,51,43,-35,-1,-60,18,94,116,43,103,102,22,-81,69,76,-14,101,62,73,6,-127,1,28,-14,-52,81,-12,56,47,11,-52,82,18,65,-38,11,116,-17,11, 
  /* [14][0][][] */ 32,113,-13,-57,98,59,-33,78,104,-49,-30,-50,63,120,94,5,70,50,67,-59,-39,9,-23,-82,98,61,50,-6,86,-7,109,4,50,111,-57,-38,-8,89,-13,9,-34,-27,-31,106,-48,-38,68,102,-21,37,72,16,91,92,-40,-12,-9,-12,81,68,-9,3,5,70,97,-8,23,6,-9,-107,17,12,-28,87,88,48,-12,54,36,113,14,-76,17,-5,127,96,-9,-33,65,82,96,56,-16,8,35,-41, 
  /* [15][0][][] */ 7,-85,-60,-90,-85,-116,-70,-103,-121,-118,-74,44,-30,76,-14,-53,-25,49,-78,-6,20,-15,-38,89,14,-82,-53,6,-61,-60,-58,-35,-72,-127,-81,47,-14,43,33,-27,-8,63,-46,66,27,-19,0,-49,-77,-127,-43,-51,73,9,22,32,-42,16,59,-100,-45,-92,-34,7,-62,79,33,-14,-37,-55,-49,-80,-98,40,-93,-124,-112,45,11,-97,59,-83,-40,-114,8,-104,-118,118,-50,-98,70,60,66,5,-109,-66, 
  /* [16][0][][] */ 14,70,31,-7,-95,-121,65,-8,10,45,7,-99,-24,-16,-52,-115,83,-50,55,-42,55,26,-111,58,-91,-122,-33,-46,86,-47,-109,-104,-8,-101,3,25,35,47,-121,50,-94,18,-58,-75,-102,-8,61,-51,122,-84,7,-10,26,29,60,63,-127,-28,-32,25,67,-18,33,-30,-93,31,-31,-48,-124,74,25,13,-55,-99,45,-31,-123,43,33,3,-9,-17,-106,-2,-67,-33,64,-56,-97,-47,-12,77,34,-27,-18,86, 
  /* [17][0][][] */ 87,-29,-3,-34,-9,59,-46,8,104,-42,108,62,35,80,120,53,-28,-8,33,-24,-10,30,-48,29,-22,75,11,16,-23,111,-39,96,95,117,19,64,45,127,-20,-19,37,45,24,62,5,76,122,83,-10,116,-6,59,-2,39,-27,-21,23,-31,37,-44,-42,-29,33,18,5,3,-4,36,93,-51,-24,78,54,38,-34,37,-5,-21,7,3,107,-32,18,87,-25,41,-29,95,71,11,74,105,-41,-21,98,83, 
  /* [18][0][][] */ 21,65,108,-38,63,73,54,111,20,-69,83,84,-20,93,26,33,65,-27,92,75,-51,-44,110,34,-27,108,-37,63,31,89,98,63,-53,15,45,83,-57,-33,-4,-99,70,0,-113,85,-34,97,81,59,71,-20,17,5,67,123,37,112,73,21,115,88,91,17,22,36,121,110,-7,19,-29,-47,127,-7,30,0,-2,-4,54,-120,21,71,109,29,35,-3,-49,-4,-26,32,-16,-10,84,38,-32,14,75,40, 
  /* [19][0][][] */ -81,2,-77,-105,-37,-16,-35,-113,-32,-10,-19,32,-127,-10,-127,13,-69,-42,-61,-103,33,-11,1,23,-109,-73,-24,-33,-74,-87,-68,25,-41,-110,-1,-94,-64,-24,-46,-89,-100,-81,-120,-96,-58,66,-9,-89,19,-22,-29,-80,69,-18,27,-102,26,2,59,-121,23,-27,60,-50,9,-18,-50,-81,-18,-30,43,-48,34,-5,4,-96,-7,98,-1,-33,-44,-41,-86,-6,48,-71,-68,-88,-72,20,-101,18,68,-94,-123,-48, 
  /* [20][0][][] */ -29,-81,27,-78,-124,-49,-94,-105,-79,31,22,-83,41,-125,-16,-22,-110,90,73,-36,18,-18,35,-55,-59,61,-56,-20,-81,19,-64,-67,24,-127,70,-115,-93,-45,57,-43,71,75,-97,-21,-97,-106,-106,65,110,-119,-44,6,22,-111,22,-62,-23,53,74,72,72,-38,-86,-11,68,-7,58,-77,-8,65,-61,-88,-3,-120,-23,62,-43,-30,-46,-62,-98,51,-113,-45,-125,-86,-28,-14,-89,11,-110,-35,46,69,-86,70, 
  /* [21][0][][] */ 22,-85,-8,38,-65,-25,10,-122,6,31,-6,-91,3,49,38,-127,8,66,-120,70,-65,31,-69,-16,-41,-44,-87,-86,-103,2,-104,96,-56,-41,-121,-114,-17,9,-24,-61,-65,40,-37,19,20,-83,31,43,61,-13,32,52,-33,12,84,-16,-35,49,8,-58,34,73,-68,-42,29,51,10,31,-118,-26,-7,46,19,-21,-12,-74,-25,86,-116,43,-19,62,-15,49,-45,-115,-9,-40,20,-20,-25,-59,-34,25,-37,57, 
  /* [22][0][][] */ -110,-27,-61,39,-38,-36,-100,-78,-104,5,-15,-108,-85,46,51,1,-73,69,-109,-7,36,-79,-29,-5,-108,44,-35,-71,-19,66,-119,63,-100,-116,-21,41,-111,-6,-104,-15,-117,49,29,-29,-31,-104,74,18,38,9,-107,67,-17,-79,-6,74,70,-89,-86,66,-104,-29,-66,53,-8,-68,-88,20,-24,71,-67,-16,-125,-116,-40,63,63,11,-51,-77,58,-113,-125,-21,50,-97,-59,-90,-127,26,-31,48,-25,43,60,-113, 
  /* [23][0][][] */ -61,-42,-5,67,-1,18,66,-22,-26,20,-22,79,-67,-62,61,-7,30,53,48,102,70,-73,47,55,-114,65,23,90,82,-51,-70,108,30,-93,28,-54,-47,63,-37,-26,18,-88,-31,56,-47,70,89,67,-11,62,0,-85,83,-56,-73,-54,16,79,-9,5,-22,100,75,-28,-8,-39,58,92,-93,119,-86,-29,92,-65,-70,96,-31,53,-61,-87,-3,65,54,-94,-107,-64,-56,-51,-71,-127,-81,44,-50,-9,13,-47, 
  /* [24][0][][] */ 15,-21,-8,76,1,54,76,-118,-70,-11,-92,-41,-3,36,-82,-1,-57,6,-89,64,-48,-58,-72,105,-124,-54,47,-42,8,-89,-65,57,-39,-12,41,74,-46,73,-18,-10,-47,48,105,48,6,-23,-72,-50,-26,-11,-58,55,-127,-52,78,-56,-29,27,2,-13,-62,46,-48,-36,40,-60,15,-118,55,-41,51,-28,57,-42,61,73,-23,82,-21,56,-95,-112,-113,-79,4,-85,-59,-30,-82,-41,-67,-17,70,29,-22,38, 
  /* [25][0][][] */ 94,67,40,-23,-7,65,99,66,10,50,-3,94,120,110,83,63,-18,37,62,-74,105,-1,-37,40,30,19,43,4,25,0,1,-44,22,89,-40,21,-72,-1,-7,-27,-29,112,-92,112,31,12,103,-37,-17,36,72,-8,117,-9,5,-49,102,-24,110,98,62,-61,25,-12,5,7,-37,27,122,-19,-8,-31,54,118,30,-46,0,25,58,69,38,-7,115,36,112,17,76,44,-46,4,127,-48,-46,-31,67,40, 
  /* [26][0][][] */ 19,-10,123,-40,-34,4,17,-127,-4,-127,36,-90,-125,83,22,-118,55,-50,-59,57,2,85,-43,-56,39,-53,-109,63,-64,-126,-118,68,-50,-52,-97,-68,-77,-23,-70,-47,-94,6,-20,69,-65,-95,-121,-118,55,-112,13,-120,-44,-85,10,-64,4,28,-91,-125,-45,-78,-80,-122,78,-79,-48,69,72,-6,-55,-98,50,-45,-85,66,-9,20,68,-122,0,-122,-39,-23,-44,-71,47,-11,-54,106,8,-32,-85,27,85,-17, 
  /* [27][0][][] */ 69,-113,-90,-94,27,60,-35,52,-84,-22,-112,-47,-118,-36,76,40,-120,3,45,19,-44,-53,-41,-125,-102,-57,-78,34,90,13,-42,123,-124,-104,5,-88,-105,-98,-108,-23,-18,63,111,-79,96,107,66,-99,-17,-79,2,12,-123,93,-64,65,-5,-55,70,76,-75,46,22,-99,-6,2,-25,-94,90,-16,50,-26,-66,109,79,-99,-98,-12,96,-19,42,-13,120,-119,-123,1,80,21,-113,-61,-86,-70,31,-125,-127,-33, 
  /* [28][0][][] */ 56,-18,66,20,-104,-55,-55,-103,-29,1,7,-45,59,0,-16,30,82,-85,-75,48,-69,49,-59,-83,-46,-3,-96,21,69,-3,45,-83,-77,30,3,-64,37,-3,47,-40,51,9,21,-84,-94,-51,30,-30,55,-6,28,-9,-40,-36,-102,-63,62,73,-53,-72,-53,-96,-16,-94,-111,-27,-23,63,25,65,-12,1,6,-29,58,18,-80,74,-105,-2,-27,23,-112,-70,-107,-57,-7,-40,-127,-28,-49,-44,69,-46,-67,-25, 
  /* [29][0][][] */ -17,99,49,62,34,1,-12,-51,17,13,-42,28,40,40,89,47,-31,78,5,-70,-50,70,-57,-74,88,54,-22,114,67,-45,15,99,74,72,53,-11,34,29,98,9,112,94,85,95,11,42,-23,-38,44,68,11,72,115,-48,-15,14,-12,-60,2,37,-54,-43,-15,102,-46,-16,33,78,89,-64,120,106,35,77,10,45,-22,-127,68,-23,-41,34,82,70,-33,51,82,25,121,-6,33,7,36,90,34,-24, 
  /* [30][0][][] */ -15,30,26,33,55,-60,90,-45,-30,-72,-16,-10,11,-39,37,6,-104,-35,94,86,-53,29,63,-42,63,98,-21,-30,32,-36,114,104,-102,21,-22,-37,8,64,104,-75,-46,45,-107,105,1,79,45,-5,73,15,75,61,-38,121,101,-106,64,-58,41,0,115,-11,-37,24,47,22,120,-19,102,43,-3,80,-101,-59,31,36,91,-127,-45,-30,100,17,-7,89,-29,97,17,-7,109,52,15,56,-41,70,48,103, 
  /* [31][0][][] */ 7,-23,34,69,-112,35,-120,-76,73,-59,55,-42,-28,-108,-122,5,-12,-121,-46,49,-7,50,-53,71,-66,65,-44,-51,22,14,-85,-73,-68,-95,10,-2,48,-4,-97,-109,39,-53,-115,-50,-83,23,-127,-22,65,-17,58,28,-98,-99,-49,18,70,-73,-97,56,-56,-83,15,2,-118,-126,-114,-78,-108,27,-4,-73,-54,68,21,-46,-33,-28,-37,73,-61,-17,-115,-27,-21,-17,-110,-14,-74,25,-119,3,-84,-115,61,76, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant29_scale = { 32, { 0.0023069733288139105, 0.0021817169617861509, 0.0020442439708858728, 0.0021834869403392076, 0.0023738518357276917, 0.0020903944969177246, 0.0020798523910343647, 0.0022787887137383223, 0.0019768874626606703, 0.0020461620297282934, 0.0021022043656557798, 0.0021162042394280434, 0.0021048055496066809, 0.0025608348660171032, 0.0024793499615043402, 0.0020385191310197115, 0.0020638459827750921, 0.0025853791739791632, 0.0023615339305251837, 0.0021283938549458981, 0.002124003367498517, 0.0023095738142728806, 0.0020928157027810812, 0.0022063672076910734, 0.0021663499064743519, 0.0023646738845854998, 0.0020836517214775085, 0.0016893720021471381, 0.0021645424421876669, 0.0023713342379778624, 0.0023547280579805374, 0.0021000930573791265, } };
const TfArray<32, int> quant29_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[2*1*1*32] = { 
  /* [0][0][][] */ 120,-43,-108,91,127,-88,-79,97,-38,-41,-21,-88,-87,70,36,-54,-47,-18,62,-76,-47,37,-89,63,24,70,-1,-60,-89,95,59,-46, 
  /* [1][0][][] */ -1,-62,62,9,-127,-84,-21,-103,-57,-29,22,47,-2,-76,-26,30,27,-81,-101,13,26,23,21,85,90,-93,-42,-46,7,-21,-46,-21, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant30_scale = { 2, { 0.003728541312739253, 0.0039280015043914318, } };
const TfArray<2, int> quant30_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[1*3*3*16] = { 
  /* [0][0][][] */ -3,-8,1,0,-23,11,8,17,-1,-10,3,-12,-8,-9,-6,3, -3,-16,-1,-1,9,-3,20,-29,-2,9,4,82,-15,17,-3,5, -6,-16,-6,7,4,-15,4,13,2,1,5,-20,-7,-7,-10,5, 
  /* [0][1][][] */ 9,-14,5,10,127,-25,-127,-23,127,127,-6,-9,104,-31,-2,-18, -127,127,127,5,-93,-93,-9,-106,21,-104,127,127,127,127,127,127, 15,-12,-5,6,-9,127,9,-8,2,-13,0,-2,2,-8,-15,-3, 
  /* [0][2][][] */ 7,-11,8,-18,-22,15,45,6,-14,-7,-6,-2,6,-6,-6,-10, 25,-25,3,-127,3,-17,-7,127,-6,2,-4,-25,-7,-67,-13,-33, 5,-3,4,2,0,-6,3,0,4,1,-11,7,-12,-10,-9,-8, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.0041449493728578091, 0.009959896095097065, 0.0076301349326968193, 0.0075759561732411385, 0.036594286561012268, 0.028889443725347519, 0.0074792052619159222, 0.02879626676440239, 0.011982443742454052, 0.037615131586790085, 0.0095948139205574989, 0.008436957374215126, 0.0050219050608575344, 0.0067790425382554531, 0.010214670561254025, 0.021239669993519783, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 3 };
const ALIGN(8) int32_t tensor_data32[8] = { -7155, -3744, 10296, -9772, 22585, 7489, -9202, 11269, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001931479200720787, 0.00020877261704299599, 0.00019000181055162102, 0.00022037564485799521, 0.00017898614169098437, 0.00018644427473191172, 0.00017307142843492329, 0.00025555960019119084, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int8_t tensor_data33[1*3*3*48] = { 
  /* [0][0][][] */ -33,-127,-5,-2,127,-61,42,-46,-70,-63,-32,-23,120,14,38,-127,73,-13,5,-65,-65,127,27,19,-4,32,64,-44,57,-59,25,-47,-106,-76,54,71,12,44,127,-113,-127,-16,15,112,54,-127,89,83, -55,-95,-53,64,-105,100,38,-62,-47,66,53,-109,127,107,78,-67,-73,-72,35,-51,-65,96,-69,90,-62,118,105,-127,71,-39,-22,-127,-51,-94,86,112,127,81,115,-54,-124,-65,66,121,77,127,95,95, -2,-54,-49,99,-50,-21,-1,-18,66,8,31,-87,3,31,-43,14,-96,-9,32,-23,-13,-21,-68,3,-72,49,33,-85,12,58,105,-55,31,38,-4,25,65,33,20,22,-29,88,35,46,58,38,25,-87, 
  /* [0][1][][] */ -127,-99,-25,-93,-100,-51,114,-127,-127,-127,78,-54,102,35,-108,-116,127,-127,-65,-95,-94,77,-37,15,3,66,71,-44,-117,-69,10,-57,-84,-127,-127,85,27,92,-1,-127,51,-11,61,111,83,117,113,-127, -125,-87,-127,-127,-23,127,127,-126,91,95,127,-127,122,127,52,-103,57,-103,-127,-127,-127,34,-127,127,-124,127,127,-126,-127,127,-34,-125,-127,-122,51,127,124,127,-25,-113,111,-93,127,127,127,-10,127,111, -39,-35,-114,117,90,-33,55,-50,43,3,28,-78,-13,39,80,-36,-24,-11,-17,-57,-37,-43,-44,-12,-127,62,23,-91,-65,42,127,-65,-68,42,72,50,65,77,-45,-3,29,127,72,29,70,-50,42,16, 
  /* [0][2][][] */ -118,-36,7,34,-62,-25,7,-72,18,-38,-2,-10,17,12,-58,-41,-86,-29,88,-52,-11,-2,-69,-4,11,44,56,-21,19,62,6,-5,-19,-74,-38,48,5,-5,-39,-83,5,-24,28,51,32,53,7,-54, -78,-46,-36,-93,91,46,42,-63,64,37,-43,-29,-7,57,-127,-105,68,-1,49,-52,-12,-11,-92,50,-78,81,58,-58,49,13,-52,-45,-31,-19,-63,61,50,-5,-98,-80,11,-45,77,87,51,-116,16,5, -51,-43,-49,-41,-13,-5,-6,-55,-76,6,-17,6,-33,4,36,-20,55,29,2,-57,5,-81,-17,-22,-78,20,44,-50,-3,-51,72,-21,-47,53,32,27,8,-10,-69,-21,-10,55,24,48,34,-3,-10,37, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.0029579040128737688, 0.0048652039840817451, 0.0070143542252480984, 0.0074360980652272701, 0.036236792802810669, 0.0044107451103627682, 0.0048147072084248066, 0.0045305360108613968, 0.0059197815135121346, 0.0034190926235169172, 0.0028487727977335453, 0.0026799594052135944, 0.0035808717366307974, 0.0027202086057513952, 0.011205359362065792, 0.0041512502357363701, 0.0055118715390563011, 0.016712628304958344, 0.0050152488984167576, 0.0046828887425363064, 0.0076642413623631001, 0.014870202168822289, 0.0051744063384830952, 0.011903670616447926, 0.0044549638405442238, 0.0029837628826498985, 0.0024356897920370102, 0.0034534144215285778, 0.0055679995566606522, 0.036880142986774445, 0.010530360043048859, 0.0026302647311240435, 0.0041762841865420341, 0.0048860488459467888, 0.0090788062661886215, 0.0031256412621587515, 0.0042652427218854427, 0.001824034028686583, 0.0061421752907335758, 0.0025673261843621731, 0.0063494802452623844, 0.0055304430425167084, 0.0032043454702943563, 0.0037858637515455484, 0.0033702708315104246, 0.015294761396944523, 0.0032635906245559454, 0.009505193680524826, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 3 };
const ALIGN(8) int32_t tensor_data34[8] = { 6506, 15560, -3845, 6187, -572, 6052, -13021, -20626, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 0.00021874986123293638, 0.00011223335604881868, 0.00014181678125169128, 0.00014235069102142006, 0.00016812213289085776, 0.0001774750417098403, 0.00021625529916491359, 0.0001106767012970522, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 5,-29,5,5,-12,-73,-56,51,-29,-13,-6,12,52,1,-21,-1,99,33,15,-7,-7,-3,-71,14,-4,-12,-11,-48,-60,56,-18,-115,59,2,-58,-40,-12,-17,14,-20,-25,56,14,16,-5,56,127,-27, -127,-103,-27,127,-53,49,-108,127,34,29,9,-2,57,18,-6,-41,-27,69,32,-2,24,127,10,127,127,-26,-50,57,41,-127,-6,-65,50,8,-24,-116,17,22,-64,-79,-105,-11,-84,-115,43,64,59,68, -10,-4,8,16,-10,25,16,54,12,-37,43,5,-17,9,-8,12,-54,32,-44,-36,3,-14,127,23,-36,7,-2,3,21,24,3,41,-14,-6,-37,62,3,0,13,34,24,-28,25,-25,6,54,-12,-22, 
  /* [0][1][][] */ -15,4,-31,1,16,-70,98,-34,-7,-2,73,49,127,22,-5,-36,-10,-6,46,53,51,-75,31,7,-34,127,-78,-43,127,-95,23,-127,-23,3,-69,32,1,-44,-26,9,103,127,9,-127,-68,-60,4,79, 75,-127,127,7,127,44,-85,-18,43,127,127,-127,-111,127,127,127,127,127,127,127,127,92,4,-6,112,-96,-127,127,32,114,127,-36,-127,127,127,127,-127,127,-127,-127,36,18,-127,-45,127,-127,-6,56, 22,51,-38,3,-57,127,-127,86,92,-77,50,74,-37,25,9,-51,5,7,-97,13,29,-118,-26,-2,90,-18,-33,101,-58,-41,11,-67,-42,18,85,-52,27,-16,12,-124,102,-20,30,32,-39,106,88,-67, 
  /* [0][2][][] */ -16,55,3,-26,7,-53,-31,14,13,1,41,10,-32,-7,-7,3,-31,30,17,-32,-5,-40,88,-19,-70,11,23,-13,22,-8,-18,58,-4,-10,-52,55,-10,0,18,54,-43,0,27,14,-15,26,-3,-19, 28,-2,-35,-27,33,24,103,-55,127,-9,0,20,-98,-15,-8,-58,-20,77,26,30,3,9,-15,-28,-51,62,54,15,-81,7,-44,-43,-31,-7,-45,-2,41,-20,-18,120,-127,-9,1,42,48,62,17,-127, 9,51,4,-13,-7,13,-7,-20,-39,-26,11,17,0,-2,-5,21,32,13,-8,-25,-19,-40,-35,-18,1,-30,8,-47,-17,-4,-27,0,12,-21,-34,-75,-15,-7,10,-9,-21,-12,16,2,0,15,68,-43, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.018129585310816765, 0.0063030957244336605, 0.034378089010715485, 0.01009808573871851, 0.011900028213858604, 0.022700978443026543, 0.0092677492648363113, 0.015336760319769382, 0.0043660937808454037, 0.011120968498289585, 0.0055658826604485512, 0.068337634205818176, 0.017161434516310692, 0.022405402734875679, 0.017866503447294235, 0.032138854265213013, 0.008224966935813427, 0.002847219817340374, 0.010369011200964451, 0.012652230449020863, 0.012986902147531509, 0.010068144649267197, 0.0048417570069432259, 0.020815093070268631, 0.0083276862278580666, 0.017595395445823669, 0.021218663081526756, 0.0090644620358943939, 0.014093814417719841, 0.017446665093302727, 0.0056234812363982201, 0.0054153646342456341, 0.0065764710307121277, 0.0091734845191240311, 0.0067820576950907707, 0.014061621390283108, 0.060925323516130447, 0.01190225500613451, 0.005304667167365551, 0.0079066064208745956, 0.0099465604871511459, 0.0056236232630908489, 0.013884640298783779, 0.0086930543184280396, 0.010946769267320633, 0.0038084893021732569, 0.0031309600453823805, 0.010601172223687172, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(8) int32_t tensor_data36[8] = { 2648, 131, 23912, -4115, 5113, -15959, -250, -12662, };
const TfArray<1, int> tensor_dimension36 = { 1, { 8 } };
const TfArray<8, float> quant36_scale = { 8, { 8.5537583800032735e-05, 6.8068482505623251e-05, 0.00010944822133751586, 6.9125220761634409e-05, 0.00011866359272971749, 9.4291855930350721e-05, 8.2990816736128181e-05, 8.6041072790976614e-05, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int8_t tensor_data37[1*3*3*48] = { 
  /* [0][0][][] */ -63,52,-111,58,-49,41,-48,83,-100,-71,47,-65,42,-24,-89,-19,92,90,94,-98,61,-50,114,-74,-80,-25,86,94,-92,-92,-115,50,127,-85,51,-121,-50,-95,85,-13,12,-111,110,-100,83,55,-30,-63, -108,50,-41,114,-32,92,-41,118,-115,-95,81,-86,75,-112,-116,-46,115,127,127,-127,61,-47,123,-117,-94,-63,105,99,31,-123,-127,97,111,-127,85,-127,-76,-127,107,-127,-63,62,127,-65,-57,96,-51,-127, -42,24,33,50,-31,25,-10,104,-60,-47,25,-3,61,-35,-61,26,37,35,77,-55,64,-61,0,-78,-82,-23,55,26,77,-70,-4,-1,-16,-52,20,-48,6,-90,24,-103,-65,-74,14,-83,-104,33,-46,-103, 
  /* [0][1][][] */ -45,105,-112,70,-45,108,-124,71,-101,-79,62,-103,81,-70,-111,-117,110,65,-15,-56,108,-109,91,-62,-111,-82,107,104,-127,-77,-111,30,104,33,76,-68,-103,-115,84,-47,-76,-127,94,-110,127,80,-56,-59, -127,127,-127,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,112,-20,-72,127,-127,127,-127,-127,-127,127,127,-3,-127,-103,127,117,45,127,-74,-127,-119,127,-123,-127,74,78,-127,-83,127,-127,-78, -57,47,-119,66,-64,43,-30,72,-85,-41,43,-27,80,-34,-85,1,61,38,-10,-10,50,-68,18,-81,-107,-65,79,61,74,-36,-29,-3,3,37,24,-15,-29,-48,37,-28,-71,-85,-8,-47,-107,69,-47,-67, 
  /* [0][2][][] */ -4,29,-25,36,-35,58,-78,63,-9,-61,12,-40,77,-43,-15,-89,37,40,-45,13,7,-1,3,-56,-44,-51,24,10,-91,-73,6,-63,32,78,18,-70,-52,-62,15,-19,-69,-78,-31,-60,87,47,-87,-57, -80,48,-92,75,-47,41,-80,72,-25,-67,45,-55,90,-91,-41,-93,57,44,-58,10,-2,-6,-1,-76,-50,-74,23,45,-12,-88,-15,-4,73,105,42,-60,-72,-77,15,-121,-57,61,13,-79,-47,67,-103,-79, -28,52,-84,37,-14,10,-42,77,6,-14,16,-20,56,-48,-44,6,22,39,-31,22,5,-11,-19,-39,-30,-34,-17,31,43,-1,29,-40,11,78,-3,-19,-10,-4,9,-5,-12,-32,-27,-48,-51,51,2,-61, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0048909815959632397, 0.0055257407948374748, 0.0033423840068280697, 0.0041853971779346466, 0.0083963535726070404, 0.0055716168135404587, 0.0022545028477907181, 0.0059696529060602188, 0.0044919131323695183, 0.0027912883087992668, 0.0032100542448461056, 0.0046999342739582062, 0.0024799006059765816, 0.0048836790956556797, 0.0012394867371767759, 0.0038120178505778313, 0.0042578480206429958, 0.002823234535753727, 0.0096363192424178123, 0.0020938755478709936, 0.0033055695239454508, 0.0036631198599934578, 0.0054669170640408993, 0.0038484125398099422, 0.0030095158144831657, 0.0024749396834522486, 0.0023005895782262087, 0.0025066100060939789, 0.012174415402114391, 0.0030132471583783627, 0.0042796251364052296, 0.017292685806751251, 0.0044091241434216499, 0.0087549407035112381, 0.0049376823008060455, 0.0029504066333174706, 0.0050543854013085365, 0.0016799651784822345, 0.0039786305278539658, 0.0030484821181744337, 0.0028808617498725653, 0.0051633748225867748, 0.016349954530596733, 0.0026361702475696802, 0.0055036670528352261, 0.0030433633364737034, 0.0023559099063277245, 0.0018837334355339408, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 3 };
const ALIGN(8) int32_t tensor_data38[16] = { -7574, 12623, -19978, 2041, 16825, -14990, -45621, -7565, -6598, 11219, -16129, -14955, 7097, -11541, -2297, -2457, };
const TfArray<1, int> tensor_dimension38 = { 1, { 16 } };
const TfArray<16, float> quant38_scale = { 16, { 9.7645723144523799e-05, 0.00012090734526282176, 0.00012147329107392579, 0.00011879523663083091, 8.8493070506956428e-05, 0.00011371362779755145, 8.7178545072674751e-05, 9.9780743767041713e-05, 8.559246634831652e-05, 6.0641752497758716e-05, 0.00019388792861718684, 0.0001420057233190164, 9.3451482825912535e-05, 7.4557785410434008e-05, 0.00014439714141190052, 0.00010623199341353029, } };
const TfArray<16, int> quant38_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int8_t tensor_data39[1*3*3*96] = { 
  /* [0][0][][] */ -58,-32,-9,-21,78,-23,28,2,-2,-11,-20,-28,2,-10,-8,3,-15,-5,-48,-31,-4,46,-5,24,15,-1,-42,-20,4,-9,25,7,70,-3,-8,-18,-12,-52,-78,72,-18,-27,49,8,-22,53,-103,-11,-8,17,-17,55,-42,-18,57,3,56,-24,-1,0,4,1,-1,-21,-51,-17,-37,-54,-14,37,-9,13,36,-10,-11,16,-17,-50,127,-61,-30,1,-87,-7,-50,-4,39,7,23,-25,25,-27,3,22,-48,13, -33,26,42,-23,-45,-8,91,-39,-1,-18,-48,-5,-72,8,-110,127,0,55,31,-55,-17,127,86,97,37,37,43,42,104,55,127,-33,-83,-23,-86,-29,-34,-47,127,-21,-48,-127,-8,-54,68,-9,0,-4,63,13,15,127,-86,61,-74,5,-54,-10,-14,32,0,-101,-123,-49,-79,-8,13,-38,-22,14,-52,78,-127,0,-1,-18,-86,-100,3,-76,-27,6,57,-39,60,61,-20,34,-84,13,-14,-36,16,117,-97,-111, -51,-13,0,-36,41,7,10,-9,-23,-1,-14,-15,32,-7,0,-7,-6,-8,-40,-30,15,-12,4,35,14,-10,-10,-11,1,2,33,12,-9,-4,12,53,-6,-119,-70,17,-22,21,40,-9,-12,-6,-43,-27,-7,6,-7,48,-9,-24,30,-15,99,-28,11,-2,7,11,-40,-38,-47,-25,127,-47,10,23,-23,-8,43,17,-3,6,24,5,-27,5,-120,14,-41,-22,-23,-20,23,-4,23,-20,2,75,12,5,-43,-8, 
  /* [0][1][][] */ -90,-7,35,-24,36,103,-47,-3,-8,-26,-38,-42,-110,45,12,100,-10,23,51,26,35,-9,101,-22,27,50,48,-9,-23,-15,6,-10,-92,-20,61,-4,-20,-64,-98,-56,-12,16,115,-39,-69,127,-127,-69,80,76,27,-29,-87,50,100,-17,41,-21,22,5,-3,9,114,-19,-66,20,-25,-42,12,-6,-127,22,56,127,11,-56,-127,-127,-49,-90,-50,4,-20,-43,53,8,-106,34,-38,127,119,-111,127,-13,-93,-13, 54,127,127,127,-127,-127,127,-65,127,127,-103,-108,-127,127,-48,104,127,-127,127,127,127,-115,11,-127,-127,-127,127,127,-127,127,-7,127,-127,127,127,-66,127,127,-12,-51,127,-32,-127,-127,127,-13,78,127,127,-127,127,-93,127,127,-127,127,-127,127,-127,127,-117,127,127,-127,127,127,-11,127,-127,-127,30,-127,16,94,127,71,9,-108,90,-127,127,127,127,127,127,65,-127,127,-127,43,-55,-47,-62,-7,-92,-47, -127,-25,29,-65,-3,77,-89,16,-41,-29,-6,127,-86,20,10,96,-13,34,54,23,34,-27,50,-17,35,-26,21,-7,-21,-18,30,1,-59,-34,99,127,-4,-22,-117,-127,-34,-39,47,-63,-84,-39,-66,-102,58,84,6,-10,116,14,126,-34,94,-18,37,-19,-20,-11,-126,-71,-94,-5,-48,-44,-7,1,-105,-16,25,-74,11,127,-107,-71,-52,-6,-91,2,-23,-76,23,12,-86,25,-56,-79,127,127,-22,-35,-97,-25, 
  /* [0][2][][] */ -37,-50,-12,-21,0,0,-2,30,-20,-8,29,-7,80,29,-7,-40,7,0,-71,-53,-11,-22,-16,-39,6,-8,-11,10,7,-9,-7,6,59,-9,19,-10,-14,-98,-43,54,-47,24,21,8,42,2,-90,8,-12,16,-6,-12,-3,-48,40,-16,71,-8,3,0,7,27,12,24,-58,-9,112,-22,27,27,-23,4,-1,-5,-11,-22,2,-5,-16,-24,-69,14,-87,-9,3,6,11,7,20,17,22,-2,-5,-21,-42,-14, -39,-71,46,-57,-53,-11,31,127,-70,43,127,-22,-40,53,127,97,-1,-39,64,-88,-33,-57,127,-3,23,-12,23,27,-8,21,-65,-45,-22,-37,-71,4,-102,-59,36,-108,-43,-101,-36,112,29,-3,0,0,47,2,0,-6,62,53,-47,-39,-41,-33,29,-33,127,36,122,-46,-100,-41,-15,-50,117,18,-10,-3,30,-21,24,-8,-8,-67,13,19,-125,-14,-64,-53,21,-127,-24,22,-23,-9,9,7,21,-127,-127,127, -38,-1,6,-23,-5,-14,-27,30,-27,-13,13,59,49,17,-18,-25,3,26,-22,-48,17,-5,-1,-5,1,-33,-37,9,12,-3,-15,6,40,-5,11,13,-12,-96,-55,-45,-52,-19,-1,-17,14,5,-86,5,-15,6,-8,0,6,-11,42,-15,83,4,9,-7,15,28,4,-32,-28,-13,-6,14,39,4,1,-15,-69,-24,-21,-9,-9,-7,86,19,-92,12,-27,-16,-1,11,17,4,0,-1,-22,25,12,-22,-40,-28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.0049573564901947975, 0.012918957509100437, 0.0080830566585063934, 0.0089862216264009476, 0.0082250479608774185, 0.024070817977190018, 0.0048671290278434753, 0.01104714535176754, 0.013883412815630436, 0.011558814905583858, 0.011010217480361462, 0.0071710655465722084, 0.0034799994900822639, 0.0048390291631221771, 0.0097749102860689163, 0.0054621919989585876, 0.013097113929688931, 0.01575138233602047, 0.0072751063853502274, 0.012651619501411915, 0.010296431370079517, 0.010787492617964745, 0.0068535637110471725, 0.0083714034408330917, 0.083956263959407806, 0.0057691829279065132, 0.011609048582613468, 0.0079819709062576294, 0.013777862302958965, 0.0069643761962652206, 0.0095216222107410431, 0.013010893948376179, 0.0028376420959830284, 0.018323352560400963, 0.0057509057223796844, 0.012092984281480312, 0.015678660944104195, 0.004650607705116272, 0.007363450713455677, 0.0053793331608176231, 0.015975365415215492, 0.0071320249699056149, 0.007780944462865591, 0.0070726578123867512, 0.0063146208412945271, 0.01480607595294714, 0.0052551017142832279, 0.012512420304119587, 0.0079922312870621681, 0.019052606076002121, 0.011590706184506416, 0.0093352552503347397, 0.0058331992477178574, 0.010615999810397625, 0.0097863581031560898, 0.011339973658323288, 0.0061080902814865112, 0.017639711499214172, 0.01544495951384306, 0.015734918415546417, 0.013093248009681702, 0.012512374669313431, 0.0058603105135262012, 0.0056830360554158688, 0.0095154959708452225, 0.018586868420243263, 0.005214945413172245, 0.0066619236022233963, 0.0098848873749375343, 0.016061266884207726, 0.0063564777374267578, 0.01568823866546154, 0.022938074544072151, 0.0082944696769118309, 0.0066342153586447239, 0.011531896889209747, 0.0041433717124164104, 0.0046858694404363632, 0.0057021239772439003, 0.0072896978817880154, 0.0046728658489882946, 0.012270337902009487, 0.0067482287995517254, 0.015700047835707664, 0.0048459884710609913, 0.013853785581886768, 0.0079565830528736115, 0.0099345054477453232, 0.0064945169724524021, 0.011723393574357033, 0.0053631295450031757, 0.009549594484269619, 0.015810364857316017, 0.006362618412822485, 0.0039754854515194893, 0.013065761886537075, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 3 };
const ALIGN(8) int32_t tensor_data40[16] = { -30914, -8299, 1689, -14752, 18183, -10779, 19640, -7187, 11467, -9943, 11969, 13391, -1016, -31916, -1614, 7317, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 6.3153245719149709e-05, 7.1822978497948498e-05, 6.7095163103658706e-05, 4.6588520490331575e-05, 6.6447137214709073e-05, 7.7435899584088475e-05, 3.9205951907206327e-05, 6.1366881709545851e-05, 7.6002441346645355e-05, 0.00011175400868523866, 8.1206606409978122e-05, 9.2546295491047204e-05, 7.5808886322192848e-05, 5.7024739362532273e-05, 6.9115652877371758e-05, 6.890927761560306e-05, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int8_t tensor_data41[1*3*3*96] = { 
  /* [0][0][][] */ 42,115,-3,28,-10,-21,60,86,38,-37,-127,54,-11,-17,45,-40,-73,35,-9,27,56,69,110,95,17,-14,-44,2,1,2,19,1,-62,-4,-38,54,2,26,-4,-7,25,-53,6,34,-56,-18,-14,-29,13,-81,6,-15,-31,74,-2,-11,-78,-70,-23,-127,-127,-32,-54,-33,-7,41,69,1,-22,37,51,10,-45,-4,58,-12,-15,-60,-39,-5,17,-118,63,-41,-35,-76,8,16,-127,3,-29,58,73,7,24,25, -29,-15,26,104,3,72,-32,2,41,23,-113,34,-61,-29,-75,127,-118,100,26,106,127,53,127,127,67,6,2,70,23,68,-27,-122,74,105,5,5,58,111,-39,-127,127,-5,77,61,-71,-26,127,-127,-51,-119,-73,-35,58,127,1,-127,7,12,-80,-60,-11,-127,-82,83,-32,76,124,-24,9,127,127,7,-46,46,-13,-77,15,-83,1,127,5,-87,127,-77,-101,-64,91,65,78,60,-68,18,127,-8,83,52, 21,-64,24,-4,-5,-11,0,44,28,82,-29,47,-31,51,-15,-58,18,36,14,-2,57,48,91,91,9,-35,26,-6,19,8,-26,-47,-47,-86,-21,58,26,-30,-6,-12,5,3,-2,85,-60,-19,-24,-57,56,-83,-17,16,36,-19,-8,-21,40,-85,-37,-112,-97,48,-24,4,42,9,-97,4,-34,-7,20,28,-49,-20,3,32,5,18,-101,-35,21,-26,39,2,-13,-13,-36,-15,-102,-22,-1,55,33,46,7,-25, 
  /* [0][1][][] */ 127,15,74,127,-9,-67,127,86,-41,-79,-95,127,-16,-127,-15,7,-57,-35,46,39,-66,-3,-116,-33,-36,11,-127,127,-54,75,127,45,35,74,8,127,-122,48,-22,-15,57,-127,16,74,-127,-54,4,-94,-127,-127,-88,21,70,-52,97,-43,-127,-8,-30,43,-86,-92,-19,78,-69,-24,127,-65,-54,7,-23,-110,-127,54,127,-72,102,75,-93,-38,127,-127,-32,79,0,-40,21,117,-22,53,-24,42,-13,-57,58,7, -125,33,-36,118,-67,-127,-126,-127,44,5,-67,52,-117,-70,-72,108,-127,-127,127,127,37,-127,-126,95,-127,127,0,60,-44,-42,-110,109,-127,113,127,-7,37,127,127,-53,-27,58,8,4,-91,-127,-53,-85,-52,-72,-127,127,80,65,68,-73,-12,31,94,23,-11,-14,-127,127,-20,-127,97,127,13,100,-85,-54,7,83,-88,-127,127,127,115,-25,-96,-13,-99,44,-127,-127,127,127,108,127,-127,-127,-85,-24,127,127, 84,41,107,102,-3,-29,10,22,-45,127,-42,83,-4,13,-127,25,-12,-23,48,21,-66,1,-50,-34,-32,-19,98,-16,127,113,5,-127,-19,-127,0,116,-127,-23,-34,-70,-1,87,16,127,-55,-42,-34,-77,112,-86,-53,-35,85,-110,-127,7,46,-5,-127,124,-47,-9,33,97,127,-53,-1,-8,-65,-2,-51,-54,-108,-127,5,-53,15,-17,-127,-35,-49,-59,-28,127,-106,-6,-35,18,-35,8,21,60,-23,127,28,-20, 
  /* [0][2][][] */ 54,-94,14,-1,1,23,38,79,-45,-41,-23,-32,-10,-23,-18,6,-49,36,-11,49,-27,71,-22,-7,0,17,-29,-35,-16,31,16,-4,-34,-34,-9,14,73,-24,-6,-73,15,-10,-14,-9,-48,8,-24,-37,10,88,-8,20,-41,-5,-24,3,-28,-15,34,46,-13,-29,76,-38,-25,39,-106,-31,42,45,14,89,-19,25,32,53,-13,-4,20,17,27,16,-1,-47,-32,8,-8,-46,-94,9,2,43,2,-8,42,10, -40,59,127,-5,127,47,-35,46,-127,17,-58,-2,127,8,-27,-4,-36,75,-8,-38,-9,24,30,5,94,-70,-30,38,8,127,-28,-20,-47,39,24,-4,62,64,2,-82,-4,-16,-127,0,-52,13,-29,-14,-15,-26,-38,48,127,-78,-24,-41,5,127,-6,39,82,-70,91,83,-20,13,-105,-24,127,31,2,127,-41,50,-3,-47,14,-109,-83,-64,12,-56,-18,-74,-100,107,44,-27,72,-1,27,42,-20,-1,-7,2, 40,127,6,-13,-7,8,7,56,-10,57,30,6,-10,43,-29,15,-71,25,6,34,-36,26,-3,-52,-15,5,-2,2,37,34,-19,-75,-19,-25,0,9,81,-53,-13,-53,9,-32,-11,37,-51,-3,-29,-48,9,87,35,9,15,-17,-23,-8,24,11,-11,89,-10,39,63,-53,6,7,-122,7,30,-5,-7,115,7,12,1,35,8,-28,-75,35,18,-2,0,14,-89,-1,-35,-51,-77,-2,19,35,-5,-3,24,-37, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant41_scale = { 96, { 0.0088312318548560143, 0.0075567048043012619, 0.0052115288563072681, 0.0055923671461641788, 0.015109576284885406, 0.014953175559639931, 0.011205749586224556, 0.0068697868846356869, 0.012436915189027786, 0.0076181027106940746, 0.0050562419928610325, 0.010107857175171375, 0.011593936942517757, 0.006601385772228241, 0.0050045386888086796, 0.008741999976336956, 0.0041027916595339775, 0.011019520461559296, 0.0084499605000019073, 0.0040492373518645763, 0.0080599989742040634, 0.010811490938067436, 0.0072586103342473507, 0.01240139827132225, 0.017676575109362602, 0.010474056005477905, 0.011892988346517086, 0.0067894109524786472, 0.010661747306585312, 0.0048160925507545471, 0.014882042072713375, 0.010064703412353992, 0.0094248699024319649, 0.0063443714752793312, 0.012355186976492405, 0.014547062106430531, 0.0087337996810674667, 0.012917954474687576, 0.018943462520837784, 0.004823372233659029, 0.0098086502403020859, 0.0088448598980903625, 0.011327685788273811, 0.0059005832299590111, 0.0029560001567006111, 0.0062512396834790707, 0.0095799611881375313, 0.0041330647654831409, 0.0084583833813667297, 0.0041751982644200325, 0.0076423780992627144, 0.0075536295771598816, 0.0084649398922920227, 0.0073012993671000004, 0.01048591174185276, 0.0085788639262318611, 0.010976917110383511, 0.01143344584852457, 0.0076847602613270283, 0.0049279746599495411, 0.0052380538545548916, 0.0090727983042597771, 0.0060675209388136864, 0.0040032765828073025, 0.010510701686143875, 0.012992624193429947, 0.010771825909614563, 0.012155198492109776, 0.0072155650705099106, 0.0062144333496689796, 0.009256371296942234, 0.0042581697925925255, 0.0053288927301764488, 0.0088869975879788399, 0.016677908599376678, 0.0064035742543637753, 0.0066832788288593292, 0.0065045659430325031, 0.0053567048162221909, 0.012665866874158382, 0.014087234623730183, 0.0058331168256700039, 0.010853870771825314, 0.0087601589038968086, 0.0037087553646415472, 0.007733028382062912, 0.0050014518201351166, 0.0059552891179919243, 0.0089855734258890152, 0.012006411328911781, 0.0068258405663073063, 0.012753346003592014, 0.010571965947747231, 0.016475776210427284, 0.0065797297284007072, 0.014535116031765938, } };
const TfArray<96, int> quant41_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(8) int32_t tensor_data42[16] = { 6558, 15797, -5300, -888, 2652, 4192, 238, 2754, 19600, -7608, -7040, 8253, -11135, 6983, 2223, 12271, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 5.6106862757587805e-05, 6.891074008308351e-05, 5.3371288231573999e-05, 5.8938214351655915e-05, 5.3499294153880328e-05, 5.2449940994847566e-05, 3.5006465623155236e-05, 3.8218822737690061e-05, 7.3347298894077539e-05, 7.3345880082342774e-05, 5.0531023589428514e-05, 5.4971646022750065e-05, 5.1088198233628646e-05, 4.835214713239111e-05, 7.8511402534786612e-05, 5.0198534154333174e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 418, -515, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00015482088201679289, 0.00016310310456901789, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,97,97,1 } };
const TfArray<1, float> quant44_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant46_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.05468069389462471, } };
const TfArray<1, int> quant47_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.044736232608556747, } };
const TfArray<1, int> quant51_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.019659224897623062, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.044857136905193329, } };
const TfArray<1, int> quant54_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.054158817976713181, } };
const TfArray<1, int> quant55_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.020719017833471298, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant59_scale = { 1, { 0.049114644527435303, } };
const TfArray<1, int> quant59_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019560474902391434, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.046110667288303375, } };
const TfArray<1, int> quant62_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant63_scale = { 1, { 0.077333800494670868, } };
const TfArray<1, int> quant63_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.04191029816865921, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant67_scale = { 1, { 0.11650127172470093, } };
const TfArray<1, int> quant67_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.041523177176713943, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.15567806363105774, } };
const TfArray<1, int> quant70_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,16,3 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteDepthwiseConvParams opdata2 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,31,9 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,17,32 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,18,4 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,5 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,19,34 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,20,6 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,35,7 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,21,36 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,22,8 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,37,10 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,23,38 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,24,11 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,39,12 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,25,40 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,26,13 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,41,14 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,27,42 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,28,15 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,29,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,30,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9424, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension44, 9409, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension46, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension59, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension63, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension67, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 72;
  for(size_t i = 0; i < 72; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  for(size_t i = 0; i < 28; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
